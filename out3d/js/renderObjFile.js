function renderObjFile()
{
var geometry = new THREE.Geometry();
var normal = null;
var color = new THREE.Color( 0xffaa00 );
var materialIndex = 0;
var face;
geometry.vertices.push( new THREE.Vector3(-49.809761, 39.895130, -37.675129) );
geometry.vertices.push( new THREE.Vector3(-53.694366, 46.701752, -33.542591) );
geometry.vertices.push( new THREE.Vector3(-48.821251, 45.522751, -36.838909) );
geometry.vertices.push( new THREE.Vector3(-40.864880, 28.555090, -45.180000) );
geometry.vertices.push( new THREE.Vector3(-47.235752, 22.637960, -43.270500) );
geometry.vertices.push( new THREE.Vector3(-46.404381, 28.111389, -42.446987) );
geometry.vertices.push( new THREE.Vector3(-41.604370, 23.099739, -46.073250) );
geometry.vertices.push( new THREE.Vector3(-48.068619, 17.222061, -44.025749) );
geometry.vertices.push( new THREE.Vector3(-42.352871, 17.706490, -46.907249) );
geometry.vertices.push( new THREE.Vector3(-35.813438, 23.988979, -48.495380) );
geometry.vertices.push( new THREE.Vector3(-36.465778, 18.604650, -49.394989) );
geometry.vertices.push( new THREE.Vector3(-30.498219, 19.364250, -51.526867) );
geometry.vertices.push( new THREE.Vector3(-29.949150, 24.763090, -50.585999) );
geometry.vertices.push( new THREE.Vector3(-35.174923, 29.439190, -47.536503) );
geometry.vertices.push( new THREE.Vector3(-29.417250, 30.181841, -49.586620) );
geometry.vertices.push( new THREE.Vector3(-43.121250, 12.376990, -47.659512) );
geometry.vertices.push( new THREE.Vector3(-48.919121, 11.871750, -44.664001) );
geometry.vertices.push( new THREE.Vector3(-37.137821, 13.275860, -50.233501) );
geometry.vertices.push( new THREE.Vector3(-31.067890, 14.019341, -52.378117) );
geometry.vertices.push( new THREE.Vector3(-24.933081, 14.601220, -54.160881) );
geometry.vertices.push( new THREE.Vector3(-24.474331, 19.991919, -53.320496) );
geometry.vertices.push( new THREE.Vector3(-24.036819, 25.381460, -52.367252) );
geometry.vertices.push( new THREE.Vector3(-18.757650, 15.015189, -55.642498) );
geometry.vertices.push( new THREE.Vector3(-19.122679, 9.557702, -56.425888) );
geometry.vertices.push( new THREE.Vector3(-25.420689, 9.271613, -54.947250) );
geometry.vertices.push( new THREE.Vector3(-31.666279, 8.753550, -53.188503) );
geometry.vertices.push( new THREE.Vector3(-37.840130, 8.032050, -51.035618) );
geometry.vertices.push( new THREE.Vector3(-43.923000, 7.135613, -48.370129) );
geometry.vertices.push( new THREE.Vector3(-25.941299, 4.057013, -55.749023) );
geometry.vertices.push( new THREE.Vector3(-32.302158, 3.606705, -53.997749) );
geometry.vertices.push( new THREE.Vector3(-12.778389, 9.646836, -57.688118) );
geometry.vertices.push( new THREE.Vector3(-19.509939, 4.191563, -57.232510) );
geometry.vertices.push( new THREE.Vector3(-26.507250, -0.959333, -56.628754) );
geometry.vertices.push( new THREE.Vector3(-32.987659, -1.361145, -54.868500) );
geometry.vertices.push( new THREE.Vector3(-38.582619, 2.902612, -51.825748) );
geometry.vertices.push( new THREE.Vector3(-44.772369, 2.006801, -49.079998) );
geometry.vertices.push( new THREE.Vector3(0.000000, 9.491285, -59.300240) );
geometry.vertices.push( new THREE.Vector3(-6.278475, 15.581700, -57.954002) );
geometry.vertices.push( new THREE.Vector3(-0.000146, 15.698780, -58.440739) );
geometry.vertices.push( new THREE.Vector3(-6.398175, 9.570826, -58.789497) );
geometry.vertices.push( new THREE.Vector3(-19.917860, -1.000189, -58.129501) );
geometry.vertices.push( new THREE.Vector3(-13.029601, 4.038450, -58.499996) );
geometry.vertices.push( new THREE.Vector3(-6.521663, 3.623198, -59.602501) );
geometry.vertices.push( new THREE.Vector3(0.000102, 3.349834, -60.112881) );
geometry.vertices.push( new THREE.Vector3(-13.274661, -1.400797, -59.391750) );
geometry.vertices.push( new THREE.Vector3(-6.636375, -2.081261, -60.438000) );
geometry.vertices.push( new THREE.Vector3(0.000186, -2.491597, -60.907501) );
geometry.vertices.push( new THREE.Vector3(-6.729750, -7.362674, -61.340248) );
geometry.vertices.push( new THREE.Vector3(-13.499020, -6.570412, -60.429371) );
geometry.vertices.push( new THREE.Vector3(-20.774891, -10.739400, -60.319130) );
geometry.vertices.push( new THREE.Vector3(-27.130730, -5.694263, -57.648373) );
geometry.vertices.push( new THREE.Vector3(-20.342211, -5.934225, -59.184750) );
geometry.vertices.push( new THREE.Vector3(-13.711010, -11.603769, -61.539753) );
geometry.vertices.push( new THREE.Vector3(-6.813825, -12.433420, -62.275513) );
geometry.vertices.push( new THREE.Vector3(0.000368, -12.839360, -62.522251) );
geometry.vertices.push( new THREE.Vector3(0.000276, -7.798987, -61.712246) );
geometry.vertices.push( new THREE.Vector3(-11.242990, 48.029640, -50.410126) );
geometry.vertices.push( new THREE.Vector3(-5.528550, 53.754379, -49.960117) );
geometry.vertices.push( new THREE.Vector3(-5.639438, 48.313503, -51.302616) );
geometry.vertices.push( new THREE.Vector3(-11.020950, 53.489250, -49.118622) );
geometry.vertices.push( new THREE.Vector3(-0.000888, 48.435749, -51.714371) );
geometry.vertices.push( new THREE.Vector3(-5.746575, 42.862122, -52.609871) );
geometry.vertices.push( new THREE.Vector3(-0.000816, 42.988117, -53.050117) );
geometry.vertices.push( new THREE.Vector3(-0.000778, 37.414310, -54.403877) );
geometry.vertices.push( new THREE.Vector3(-5.852363, 37.321762, -53.918617) );
geometry.vertices.push( new THREE.Vector3(-0.000707, 31.956970, -55.650002) );
geometry.vertices.push( new THREE.Vector3(-5.956575, 31.868961, -55.135872) );
geometry.vertices.push( new THREE.Vector3(-6.059063, 26.680542, -56.168251) );
geometry.vertices.push( new THREE.Vector3(-0.000535, 26.858440, -56.662487) );
geometry.vertices.push( new THREE.Vector3(-14.461539, 152.543991, -16.650681) );
geometry.vertices.push( new THREE.Vector3(-11.148300, 155.937698, -16.521519) );
geometry.vertices.push( new THREE.Vector3(-11.737730, 152.532394, -17.572651) );
geometry.vertices.push( new THREE.Vector3(-16.552010, 156.355499, -14.407800) );
geometry.vertices.push( new THREE.Vector3(-2.906141, 152.602097, -18.537220) );
geometry.vertices.push( new THREE.Vector3(0.000030, 154.766998, -16.788830) );
geometry.vertices.push( new THREE.Vector3(0.000030, 152.569107, -18.425060) );
geometry.vertices.push( new THREE.Vector3(-5.404875, 155.473907, -17.428949) );
geometry.vertices.push( new THREE.Vector3(-20.375509, 156.391098, -13.590039) );
geometry.vertices.push( new THREE.Vector3(-21.564751, 159.048706, -11.302390) );
geometry.vertices.push( new THREE.Vector3(-19.206861, 159.595901, -11.961411) );
geometry.vertices.push( new THREE.Vector3(-25.000200, 158.719894, -9.903225) );
geometry.vertices.push( new THREE.Vector3(-24.936520, 154.485001, -12.177370) );
geometry.vertices.push( new THREE.Vector3(-27.303791, 156.008606, -10.258310) );
geometry.vertices.push( new THREE.Vector3(-22.937889, 157.362701, -11.728271) );
geometry.vertices.push( new THREE.Vector3(-23.125841, 160.585907, -9.188325) );
geometry.vertices.push( new THREE.Vector3(-23.018890, 153.666397, -13.272190) );
geometry.vertices.push( new THREE.Vector3(-37.521381, 150.396393, -4.098975) );
geometry.vertices.push( new THREE.Vector3(-36.613567, 150.194199, -7.295025) );
geometry.vertices.push( new THREE.Vector3(-38.054249, 148.729507, -6.624375) );
geometry.vertices.push( new THREE.Vector3(-36.421459, 151.529602, -4.887450) );
geometry.vertices.push( new THREE.Vector3(-38.564251, 142.995804, -9.782175) );
geometry.vertices.push( new THREE.Vector3(-40.057121, 145.457199, -6.942112) );
geometry.vertices.push( new THREE.Vector3(-38.184750, 146.262802, -8.665537) );
geometry.vertices.push( new THREE.Vector3(-40.884380, 142.827408, -8.778225) );
geometry.vertices.push( new THREE.Vector3(-9.898986, 144.844498, -20.911049) );
geometry.vertices.push( new THREE.Vector3(-12.855230, 146.381607, -19.673929) );
geometry.vertices.push( new THREE.Vector3(-9.678338, 146.708603, -20.260281) );
geometry.vertices.push( new THREE.Vector3(-13.119151, 144.387405, -20.353910) );
geometry.vertices.push( new THREE.Vector3(-10.216990, 142.604996, -21.729750) );
geometry.vertices.push( new THREE.Vector3(-13.520700, 142.116699, -21.189489) );
geometry.vertices.push( new THREE.Vector3(-22.765949, 140.854095, -18.470930) );
geometry.vertices.push( new THREE.Vector3(-24.864260, 142.582504, -16.323040) );
geometry.vertices.push( new THREE.Vector3(-21.939791, 142.921906, -17.633631) );
geometry.vertices.push( new THREE.Vector3(-25.823208, 140.397400, -17.234810) );
geometry.vertices.push( new THREE.Vector3(-16.100140, 144.017990, -19.513050) );
geometry.vertices.push( new THREE.Vector3(-16.702990, 141.700500, -20.412560) );
geometry.vertices.push( new THREE.Vector3(-17.285700, 139.353394, -21.297831) );
geometry.vertices.push( new THREE.Vector3(-19.885271, 141.284302, -19.635639) );
geometry.vertices.push( new THREE.Vector3(-20.580629, 138.867401, -20.499790) );
geometry.vertices.push( new THREE.Vector3(-22.371679, 148.816895, -15.328010) );
geometry.vertices.push( new THREE.Vector3(-25.981691, 145.862610, -14.383949) );
geometry.vertices.push( new THREE.Vector3(-24.464809, 149.721390, -13.984910) );
geometry.vertices.push( new THREE.Vector3(-23.667040, 145.266693, -15.888530) );
geometry.vertices.push( new THREE.Vector3(-26.557980, 150.625793, -12.641769) );
geometry.vertices.push( new THREE.Vector3(-30.340651, 140.798599, -14.860010) );
geometry.vertices.push( new THREE.Vector3(-27.265131, 142.990509, -14.912661) );
geometry.vertices.push( new THREE.Vector3(-28.081909, 140.597992, -16.047411) );
geometry.vertices.push( new THREE.Vector3(-29.666021, 143.398102, -13.502290) );
geometry.vertices.push( new THREE.Vector3(-28.727209, 138.107605, -17.072210) );
geometry.vertices.push( new THREE.Vector3(-30.939371, 138.151093, -15.997240) );
geometry.vertices.push( new THREE.Vector3(-9.457688, 148.572800, -19.609501) );
geometry.vertices.push( new THREE.Vector3(-6.493388, 147.034103, -20.846960) );
geometry.vertices.push( new THREE.Vector3(-6.317549, 148.768494, -20.224831) );
geometry.vertices.push( new THREE.Vector3(-12.591299, 148.375900, -18.993900) );
geometry.vertices.push( new THREE.Vector3(-6.669263, 145.300110, -21.469051) );
geometry.vertices.push( new THREE.Vector3(-3.452696, 143.712692, -22.551601) );
geometry.vertices.push( new THREE.Vector3(-6.905400, 143.092499, -22.270580) );
geometry.vertices.push( new THREE.Vector3(0.000022, 146.222992, -22.019510) );
geometry.vertices.push( new THREE.Vector3(-3.246686, 147.476990, -21.070389) );
geometry.vertices.push( new THREE.Vector3(0.000030, 147.785599, -21.351709) );
geometry.vertices.push( new THREE.Vector3(-3.334612, 145.828903, -21.774220) );
geometry.vertices.push( new THREE.Vector3(0.000009, 144.198792, -22.791151) );
geometry.vertices.push( new THREE.Vector3(-44.821869, 126.944603, -13.685170) );
geometry.vertices.push( new THREE.Vector3(-42.760502, 121.857407, -16.980640) );
geometry.vertices.push( new THREE.Vector3(-45.675747, 122.795609, -14.558740) );
geometry.vertices.push( new THREE.Vector3(-37.555500, 132.884293, -15.537069) );
geometry.vertices.push( new THREE.Vector3(-41.248119, 129.991501, -14.878390) );
geometry.vertices.push( new THREE.Vector3(-40.566750, 133.445999, -13.811140) );
geometry.vertices.push( new THREE.Vector3(-38.208382, 129.195709, -16.860710) );
geometry.vertices.push( new THREE.Vector3(-41.969250, 126.141403, -15.910419) );
geometry.vertices.push( new THREE.Vector3(-38.946381, 125.110497, -18.140890) );
geometry.vertices.push( new THREE.Vector3(-39.706501, 120.682503, -19.392340) );
geometry.vertices.push( new THREE.Vector3(-44.072250, 130.604599, -12.927370) );
geometry.vertices.push( new THREE.Vector3(-43.342133, 133.876892, -12.148870) );
geometry.vertices.push( new THREE.Vector3(-42.545620, 136.862595, -11.213170) );
geometry.vertices.push( new THREE.Vector3(-39.894382, 136.541992, -12.635321) );
geometry.vertices.push( new THREE.Vector3(-37.051422, 136.120911, -14.155271) );
geometry.vertices.push( new THREE.Vector3(-34.078121, 132.064896, -17.367229) );
geometry.vertices.push( new THREE.Vector3(-34.748737, 128.040390, -18.881809) );
geometry.vertices.push( new THREE.Vector3(-31.048199, 127.089798, -20.899311) );
geometry.vertices.push( new THREE.Vector3(-35.600700, 123.632599, -20.356840) );
geometry.vertices.push( new THREE.Vector3(-31.993610, 122.458504, -22.492010) );
geometry.vertices.push( new THREE.Vector3(-32.837399, 117.773994, -23.955341) );
geometry.vertices.push( new THREE.Vector3(-28.298538, 122.380898, -24.294670) );
geometry.vertices.push( new THREE.Vector3(-29.094711, 117.743599, -25.820850) );
geometry.vertices.push( new THREE.Vector3(-23.592529, 127.267899, -24.200439) );
geometry.vertices.push( new THREE.Vector3(-27.349571, 126.942398, -22.727131) );
geometry.vertices.push( new THREE.Vector3(-24.439430, 122.889397, -25.766441) );
geometry.vertices.push( new THREE.Vector3(-25.154140, 118.358597, -27.292421) );
geometry.vertices.push( new THREE.Vector3(-29.803572, 113.005104, -27.275742) );
geometry.vertices.push( new THREE.Vector3(-25.775179, 113.684204, -28.760290) );
geometry.vertices.push( new THREE.Vector3(-16.776560, 119.736008, -29.025858) );
geometry.vertices.push( new THREE.Vector3(-12.268801, 124.837898, -27.977928) );
geometry.vertices.push( new THREE.Vector3(-12.612750, 120.463501, -29.544041) );
geometry.vertices.push( new THREE.Vector3(-16.322920, 124.151596, -27.476889) );
geometry.vertices.push( new THREE.Vector3(-21.003860, 119.028000, -28.312719) );
geometry.vertices.push( new THREE.Vector3(-20.412189, 123.490097, -26.779011) );
geometry.vertices.push( new THREE.Vector3(-11.900810, 129.025497, -26.472708) );
geometry.vertices.push( new THREE.Vector3(-15.820610, 128.379791, -25.961849) );
geometry.vertices.push( new THREE.Vector3(-11.492780, 133.001602, -25.057840) );
geometry.vertices.push( new THREE.Vector3(-15.248890, 132.397491, -24.521851) );
geometry.vertices.push( new THREE.Vector3(-18.969069, 131.836105, -23.788500) );
geometry.vertices.push( new THREE.Vector3(-19.730400, 127.770699, -25.243950) );
geometry.vertices.push( new THREE.Vector3(-8.212198, 125.601006, -28.324678) );
geometry.vertices.push( new THREE.Vector3(-3.989137, 130.639511, -27.108189) );
geometry.vertices.push( new THREE.Vector3(-4.116000, 126.489403, -28.539818) );
geometry.vertices.push( new THREE.Vector3(-7.961625, 129.762405, -26.840248) );
geometry.vertices.push( new THREE.Vector3(-3.856350, 134.550797, -25.775290) );
geometry.vertices.push( new THREE.Vector3(-7.693614, 133.703598, -25.458448) );
geometry.vertices.push( new THREE.Vector3(-11.028640, 136.740402, -23.762741) );
geometry.vertices.push( new THREE.Vector3(-14.601339, 136.180908, -23.206200) );
geometry.vertices.push( new THREE.Vector3(-7.401825, 137.381989, -24.196838) );
geometry.vertices.push( new THREE.Vector3(-3.715736, 138.150803, -24.528641) );
geometry.vertices.push( new THREE.Vector3(0.000257, 138.567703, -24.671659) );
geometry.vertices.push( new THREE.Vector3(0.000380, 135.011993, -25.915279) );
geometry.vertices.push( new THREE.Vector3(0.000416, 131.114304, -27.219830) );
geometry.vertices.push( new THREE.Vector3(0.000056, 141.996399, -23.565521) );
geometry.vertices.push( new THREE.Vector3(-3.571234, 141.594803, -23.325109) );
geometry.vertices.push( new THREE.Vector3(-7.120313, 140.905090, -23.029840) );
geometry.vertices.push( new THREE.Vector3(-10.536450, 140.360611, -22.527491) );
geometry.vertices.push( new THREE.Vector3(-3.158760, 149.125092, -20.366550) );
geometry.vertices.push( new THREE.Vector3(-5.812312, 152.634796, -18.649420) );
geometry.vertices.push( new THREE.Vector3(-8.775039, 152.583801, -18.111040) );
geometry.vertices.push( new THREE.Vector3(-4.216088, 157.786102, -15.638290) );
geometry.vertices.push( new THREE.Vector3(-9.652388, 158.757812, -14.968760) );
geometry.vertices.push( new THREE.Vector3(0.000037, 149.347900, -20.575731) );
geometry.vertices.push( new THREE.Vector3(-35.060249, 151.774094, 2.115394) );
geometry.vertices.push( new THREE.Vector3(-36.331310, 151.420502, -1.511737) );
geometry.vertices.push( new THREE.Vector3(-37.300007, 150.532898, -0.882322) );
geometry.vertices.push( new THREE.Vector3(-34.528648, 152.398102, 1.860319) );
geometry.vertices.push( new THREE.Vector3(-26.106110, 63.075752, -42.970119) );
geometry.vertices.push( new THREE.Vector3(-30.528862, 67.931252, -40.148251) );
geometry.vertices.push( new THREE.Vector3(-25.526321, 68.560867, -41.766380) );
geometry.vertices.push( new THREE.Vector3(-31.188641, 62.456249, -41.303249) );
geometry.vertices.push( new THREE.Vector3(-52.622623, 23.160980, -40.031620) );
geometry.vertices.push( new THREE.Vector3(-53.521133, 17.703560, -40.711128) );
geometry.vertices.push( new THREE.Vector3(-57.864750, 24.093489, -36.490883) );
geometry.vertices.push( new THREE.Vector3(-58.809002, 18.597450, -37.095528) );
geometry.vertices.push( new THREE.Vector3(-52.573132, 52.384132, -32.742641) );
geometry.vertices.push( new THREE.Vector3(-47.812500, 51.157124, -35.976639) );
geometry.vertices.push( new THREE.Vector3(-29.989651, 131.849304, -19.166849) );
geometry.vertices.push( new THREE.Vector3(-33.609489, 112.988998, -25.385180) );
geometry.vertices.push( new THREE.Vector3(-38.025749, 109.294907, -24.505199) );
geometry.vertices.push( new THREE.Vector3(-37.166889, 114.258003, -23.146240) );
geometry.vertices.push( new THREE.Vector3(-34.402992, 108.071602, -26.780399) );
geometry.vertices.push( new THREE.Vector3(-32.543850, 51.407616, -43.515751) );
geometry.vertices.push( new THREE.Vector3(-27.779358, 46.594501, -46.457623) );
geometry.vertices.push( new THREE.Vector3(-33.212891, 45.889889, -44.572140) );
geometry.vertices.push( new THREE.Vector3(-27.222109, 52.092369, -45.339001) );
geometry.vertices.push( new THREE.Vector3(-22.639910, 131.409393, -22.738350) );
geometry.vertices.push( new THREE.Vector3(-22.406250, 104.754700, -32.718670) );
geometry.vertices.push( new THREE.Vector3(-26.340899, 108.874908, -30.151909) );
geometry.vertices.push( new THREE.Vector3(-21.984301, 109.613297, -31.304928) );
geometry.vertices.push( new THREE.Vector3(-26.823639, 104.008499, -31.543419) );
geometry.vertices.push( new THREE.Vector3(-21.526239, 114.397499, -29.819510) );
geometry.vertices.push( new THREE.Vector3(-23.958038, 84.778130, -38.001747) );
geometry.vertices.push( new THREE.Vector3(-28.188000, 89.262749, -35.332237) );
geometry.vertices.push( new THREE.Vector3(-23.522360, 89.955368, -36.736420) );
geometry.vertices.push( new THREE.Vector3(-28.684538, 84.117386, -36.572590) );
geometry.vertices.push( new THREE.Vector3(-27.733120, 94.274994, -34.071262) );
geometry.vertices.push( new THREE.Vector3(-23.138290, 95.000999, -35.423809) );
geometry.vertices.push( new THREE.Vector3(-41.715740, 139.705902, -10.198840) );
geometry.vertices.push( new THREE.Vector3(-39.226868, 139.459091, -11.405250) );
geometry.vertices.push( new THREE.Vector3(-33.789600, 138.655502, -14.336141) );
geometry.vertices.push( new THREE.Vector3(-30.945709, 135.239197, -17.239241) );
geometry.vertices.push( new THREE.Vector3(-33.828602, 135.505905, -15.851890) );
geometry.vertices.push( new THREE.Vector3(-29.279509, 135.199112, -18.035961) );
geometry.vertices.push( new THREE.Vector3(-42.441372, 105.915001, -23.095501) );
geometry.vertices.push( new THREE.Vector3(-41.458500, 110.987999, -21.913759) );
geometry.vertices.push( new THREE.Vector3(-38.918999, 104.271698, -25.742891) );
geometry.vertices.push( new THREE.Vector3(-35.173050, 103.114906, -28.108608) );
geometry.vertices.push( new THREE.Vector3(-40.529629, 115.959404, -20.641241) );
geometry.vertices.push( new THREE.Vector3(-44.705238, 112.315498, -19.257931) );
geometry.vertices.push( new THREE.Vector3(-43.660130, 117.221603, -18.094650) );
geometry.vertices.push( new THREE.Vector3(-45.811508, 107.241798, -20.382299) );
geometry.vertices.push( new THREE.Vector3(-49.125370, 108.417000, -17.593460) );
geometry.vertices.push( new THREE.Vector3(-47.859001, 113.460396, -16.569939) );
geometry.vertices.push( new THREE.Vector3(-46.674747, 118.264900, -15.527250) );
geometry.vertices.push( new THREE.Vector3(-37.848751, 83.152878, -32.751751) );
geometry.vertices.push( new THREE.Vector3(-41.278500, 89.282631, -29.072481) );
geometry.vertices.push( new THREE.Vector3(-37.181328, 88.272766, -31.637562) );
geometry.vertices.push( new THREE.Vector3(-42.049118, 84.137253, -30.162561) );
geometry.vertices.push( new THREE.Vector3(-45.176632, 90.736877, -26.195358) );
geometry.vertices.push( new THREE.Vector3(-46.078491, 85.577980, -27.212132) );
geometry.vertices.push( new THREE.Vector3(-44.284119, 95.823372, -25.191679) );
geometry.vertices.push( new THREE.Vector3(-40.514248, 94.333488, -27.999300) );
geometry.vertices.push( new THREE.Vector3(-36.535130, 93.286873, -30.501711) );
geometry.vertices.push( new THREE.Vector3(-36.394272, 119.041504, -21.753368) );
geometry.vertices.push( new THREE.Vector3(-26.249331, 131.204193, -21.241909) );
geometry.vertices.push( new THREE.Vector3(-54.185997, -13.117580, -48.239250) );
geometry.vertices.push( new THREE.Vector3(-58.446747, -8.363662, -43.618492) );
geometry.vertices.push( new THREE.Vector3(-52.931618, -8.387138, -47.356503) );
geometry.vertices.push( new THREE.Vector3(-47.864250, -12.450979, -51.696747) );
geometry.vertices.push( new THREE.Vector3(-46.754631, -7.758338, -50.743134) );
geometry.vertices.push( new THREE.Vector3(-41.146122, -11.557910, -54.646500) );
geometry.vertices.push( new THREE.Vector3(-40.245758, -6.863777, -53.628380) );
geometry.vertices.push( new THREE.Vector3(-34.512978, -10.699200, -56.920116) );
geometry.vertices.push( new THREE.Vector3(-33.734890, -6.089925, -55.863369) );
geometry.vertices.push( new THREE.Vector3(-27.783001, -10.288500, -58.737366) );
geometry.vertices.push( new THREE.Vector3(-51.753372, -3.562958, -46.540871) );
geometry.vertices.push( new THREE.Vector3(-45.704250, -2.970754, -49.850250) );
geometry.vertices.push( new THREE.Vector3(-39.379879, -2.075119, -52.668751) );
geometry.vertices.push( new THREE.Vector3(-13.918610, 139.843903, -21.971659) );
geometry.vertices.push( new THREE.Vector3(-8.451600, 121.260406, -29.894361) );
geometry.vertices.push( new THREE.Vector3(-12.932290, 115.891899, -31.143379) );
geometry.vertices.push( new THREE.Vector3(-8.672925, 116.706001, -31.519869) );
geometry.vertices.push( new THREE.Vector3(-17.191990, 115.136597, -30.583879) );
geometry.vertices.push( new THREE.Vector3(-30.487268, 108.145905, -28.666389) );
geometry.vertices.push( new THREE.Vector3(-31.124771, 103.244995, -29.994181) );
geometry.vertices.push( new THREE.Vector3(-32.776947, 88.483116, -33.683510) );
geometry.vertices.push( new THREE.Vector3(-32.233841, 93.484871, -32.484039) );
geometry.vertices.push( new THREE.Vector3(-33.352421, 83.360245, -34.860752) );
geometry.vertices.push( new THREE.Vector3(-13.226999, 111.111404, -32.748337) );
geometry.vertices.push( new THREE.Vector3(-8.869312, 111.901901, -33.171822) );
geometry.vertices.push( new THREE.Vector3(-13.492391, 106.216095, -34.317860) );
geometry.vertices.push( new THREE.Vector3(-9.042037, 106.948898, -34.795731) );
geometry.vertices.push( new THREE.Vector3(-7.787737, 159.069000, 9.053061) );
geometry.vertices.push( new THREE.Vector3(-5.843363, 159.528702, 8.889600) );
geometry.vertices.push( new THREE.Vector3(-7.137300, 159.701599, 8.380799) );
geometry.vertices.push( new THREE.Vector3(-12.662850, 157.764404, 9.385312) );
geometry.vertices.push( new THREE.Vector3(-9.613612, 160.347000, 7.125825) );
geometry.vertices.push( new THREE.Vector3(-14.285360, 159.070511, 7.005037) );
geometry.vertices.push( new THREE.Vector3(-12.439500, 161.009598, 5.509200) );
geometry.vertices.push( new THREE.Vector3(-14.192740, 161.577698, 4.851600) );
geometry.vertices.push( new THREE.Vector3(-10.608860, 161.586700, 3.741484) );
geometry.vertices.push( new THREE.Vector3(-7.582238, 161.000305, 4.871438) );
geometry.vertices.push( new THREE.Vector3(-16.422600, 156.475494, 9.455888) );
geometry.vertices.push( new THREE.Vector3(-16.067631, 160.656799, 6.005739) );
geometry.vertices.push( new THREE.Vector3(-17.640490, 157.190598, 8.263614) );
geometry.vertices.push( new THREE.Vector3(-19.883739, 155.556793, 9.306677) );
geometry.vertices.push( new THREE.Vector3(-21.263700, 157.614395, 8.424899) );
geometry.vertices.push( new THREE.Vector3(-19.302450, 158.766693, 7.849950) );
geometry.vertices.push( new THREE.Vector3(-23.091860, 159.733505, 6.484763) );
geometry.vertices.push( new THREE.Vector3(-20.951180, 160.879898, 5.987625) );
geometry.vertices.push( new THREE.Vector3(-24.336969, 161.289001, 4.172812) );
geometry.vertices.push( new THREE.Vector3(-21.911440, 162.228409, 3.273480) );
geometry.vertices.push( new THREE.Vector3(-15.825410, 162.257599, 3.731813) );
geometry.vertices.push( new THREE.Vector3(-17.610001, 161.802002, 4.452413) );
geometry.vertices.push( new THREE.Vector3(-12.722810, 161.938904, 3.000398) );
geometry.vertices.push( new THREE.Vector3(-25.482151, 163.114090, -3.136834) );
geometry.vertices.push( new THREE.Vector3(-22.390310, 163.054092, 0.502523) );
geometry.vertices.push( new THREE.Vector3(-22.524969, 163.866394, -2.654910) );
geometry.vertices.push( new THREE.Vector3(-19.928629, 163.395401, 0.193550) );
geometry.vertices.push( new THREE.Vector3(-18.832840, 162.586502, 2.486302) );
geometry.vertices.push( new THREE.Vector3(-18.058430, 163.145599, -0.532804) );
geometry.vertices.push( new THREE.Vector3(-16.018200, 162.584610, 1.787291) );
geometry.vertices.push( new THREE.Vector3(-25.347450, 162.584610, 0.898950) );
geometry.vertices.push( new THREE.Vector3(-28.386709, 161.896896, -3.522161) );
geometry.vertices.push( new THREE.Vector3(-27.480490, 161.775009, 0.941299) );
geometry.vertices.push( new THREE.Vector3(-30.468410, 160.066910, -3.555720) );
geometry.vertices.push( new THREE.Vector3(-29.607710, 160.264099, 0.901905) );
geometry.vertices.push( new THREE.Vector3(-32.765209, 155.511002, 1.061182) );
geometry.vertices.push( new THREE.Vector3(-30.344210, 157.117493, 4.820962) );
geometry.vertices.push( new THREE.Vector3(-31.504122, 158.029495, 0.858866) );
geometry.vertices.push( new THREE.Vector3(-28.599380, 159.320602, 4.825650) );
geometry.vertices.push( new THREE.Vector3(-31.439850, 155.221909, 4.668412) );
geometry.vertices.push( new THREE.Vector3(-28.400438, 155.795593, 6.628725) );
geometry.vertices.push( new THREE.Vector3(-29.398272, 154.539795, 6.680175) );
geometry.vertices.push( new THREE.Vector3(-26.938238, 154.911804, 7.780313) );
geometry.vertices.push( new THREE.Vector3(-28.206678, 154.158707, 7.371525) );
geometry.vertices.push( new THREE.Vector3(-26.501699, 154.437012, 8.011650) );
geometry.vertices.push( new THREE.Vector3(-25.613510, 155.481003, 8.124037) );
geometry.vertices.push( new THREE.Vector3(-24.605551, 154.658600, 8.590838) );
geometry.vertices.push( new THREE.Vector3(-22.291050, 155.027603, 9.050512) );
geometry.vertices.push( new THREE.Vector3(-23.473240, 156.564407, 8.433712) );
geometry.vertices.push( new THREE.Vector3(-32.863503, 152.957199, 4.659600) );
geometry.vertices.push( new THREE.Vector3(-30.039490, 153.768005, 6.645075) );
geometry.vertices.push( new THREE.Vector3(-35.933510, 146.995102, -9.718612) );
geometry.vertices.push( new THREE.Vector3(-39.505882, 147.353195, -5.561550) );
geometry.vertices.push( new THREE.Vector3(-38.572498, 149.167496, -3.363739) );
geometry.vertices.push( new THREE.Vector3(-35.310452, 152.422089, -2.046326) );
geometry.vertices.push( new THREE.Vector3(-34.040401, 153.057800, 1.629923) );
geometry.vertices.push( new THREE.Vector3(-33.876263, 153.433090, -6.803850) );
geometry.vertices.push( new THREE.Vector3(-29.371271, 152.972992, -10.018459) );
geometry.vertices.push( new THREE.Vector3(-31.610060, 149.764893, -10.194409) );
geometry.vertices.push( new THREE.Vector3(-31.834871, 155.508698, -6.970836) );
geometry.vertices.push( new THREE.Vector3(-33.198261, 141.893188, -12.916270) );
geometry.vertices.push( new THREE.Vector3(-32.799751, 145.196609, -11.874790) );
geometry.vertices.push( new THREE.Vector3(-28.147909, 146.865402, -12.815170) );
geometry.vertices.push( new THREE.Vector3(-36.679989, 139.171906, -12.678041) );
geometry.vertices.push( new THREE.Vector3(-36.107960, 142.673309, -11.334110) );
geometry.vertices.push( new THREE.Vector3(-18.138861, 135.652893, -22.493740) );
geometry.vertices.push( new THREE.Vector3(-21.608021, 135.227600, -21.523909) );
geometry.vertices.push( new THREE.Vector3(-27.678940, 135.117401, -18.824440) );
geometry.vertices.push( new THREE.Vector3(-24.977619, 134.972198, -20.184040) );
geometry.vertices.push( new THREE.Vector3(-23.622000, 138.490906, -19.321390) );
geometry.vertices.push( new THREE.Vector3(-26.508039, 138.172897, -18.106579) );
geometry.vertices.push( new THREE.Vector3(-17.579769, 110.357597, -32.126171) );
geometry.vertices.push( new THREE.Vector3(-17.931900, 105.489006, -33.629318) );
geometry.vertices.push( new THREE.Vector3(-9.344025, 96.856499, -37.822498) );
geometry.vertices.push( new THREE.Vector3(-14.199370, 91.143753, -38.666622) );
geometry.vertices.push( new THREE.Vector3(-13.950150, 96.298126, -37.252132) );
geometry.vertices.push( new THREE.Vector3(-9.520388, 91.642868, -39.279369) );
geometry.vertices.push( new THREE.Vector3(-19.201990, 85.352989, -39.173992) );
geometry.vertices.push( new THREE.Vector3(-14.470540, 85.858131, -40.060120) );
geometry.vertices.push( new THREE.Vector3(-18.853390, 90.586128, -37.831120) );
geometry.vertices.push( new THREE.Vector3(-9.709052, 86.311508, -40.720131) );
geometry.vertices.push( new THREE.Vector3(-4.776413, 92.098877, -39.707249) );
geometry.vertices.push( new THREE.Vector3(-4.873125, 86.740120, -41.190002) );
geometry.vertices.push( new THREE.Vector3(-18.537069, 95.679382, -36.464767) );
geometry.vertices.push( new THREE.Vector3(-19.595470, 79.992744, -40.497368) );
geometry.vertices.push( new THREE.Vector3(-24.431400, 79.441872, -39.293251) );
geometry.vertices.push( new THREE.Vector3(-22.778589, 99.909004, -34.088142) );
geometry.vertices.push( new THREE.Vector3(-18.240450, 100.621902, -35.069851) );
geometry.vertices.push( new THREE.Vector3(-13.723990, 101.300301, -35.810848) );
geometry.vertices.push( new THREE.Vector3(-15.771871, 64.088646, -45.495010) );
geometry.vertices.push( new THREE.Vector3(-10.795500, 58.974369, -47.762619) );
geometry.vertices.push( new THREE.Vector3(-16.115210, 58.613251, -46.822121) );
geometry.vertices.push( new THREE.Vector3(-20.949381, 63.631866, -44.375999) );
geometry.vertices.push( new THREE.Vector3(-15.418570, 69.553490, -44.158119) );
geometry.vertices.push( new THREE.Vector3(-20.481190, 69.102753, -43.099873) );
geometry.vertices.push( new THREE.Vector3(-15.078410, 75.011620, -42.798370) );
geometry.vertices.push( new THREE.Vector3(-20.024820, 74.563141, -41.797878) );
geometry.vertices.push( new THREE.Vector3(-14.762510, 80.461868, -41.438999) );
geometry.vertices.push( new THREE.Vector3(-21.399710, 58.156132, -45.646500) );
geometry.vertices.push( new THREE.Vector3(-16.459351, 53.130383, -48.108379) );
geometry.vertices.push( new THREE.Vector3(-21.854851, 52.668369, -46.870121) );
geometry.vertices.push( new THREE.Vector3(-26.656910, 57.595490, -44.180252) );
geometry.vertices.push( new THREE.Vector3(-24.961500, 74.022385, -40.539379) );
geometry.vertices.push( new THREE.Vector3(-48.061867, 74.897995, -29.182690) );
geometry.vertices.push( new THREE.Vector3(-44.754372, 68.024239, -33.205353) );
geometry.vertices.push( new THREE.Vector3(-49.146381, 69.352501, -30.134741) );
geometry.vertices.push( new THREE.Vector3(-29.238409, 78.805122, -37.813881) );
geometry.vertices.push( new THREE.Vector3(-29.860279, 73.401382, -38.995502) );
geometry.vertices.push( new THREE.Vector3(-35.437649, 67.250618, -38.254868) );
geometry.vertices.push( new THREE.Vector3(-34.693802, 72.695618, -37.159161) );
geometry.vertices.push( new THREE.Vector3(-40.214260, 67.063507, -35.970490) );
geometry.vertices.push( new THREE.Vector3(-39.370502, 72.528366, -34.929527) );
geometry.vertices.push( new THREE.Vector3(-43.799252, 73.524002, -32.205082) );
geometry.vertices.push( new THREE.Vector3(-47.042629, 80.306252, -28.202549) );
geometry.vertices.push( new THREE.Vector3(-33.988197, 78.100876, -36.017658) );
geometry.vertices.push( new THREE.Vector3(-39.733868, 99.306366, -26.906469) );
geometry.vertices.push( new THREE.Vector3(-35.874710, 98.210617, -29.337221) );
geometry.vertices.push( new THREE.Vector3(-43.375118, 100.870499, -24.178461) );
geometry.vertices.push( new THREE.Vector3(-46.893749, 102.103104, -21.379431) );
geometry.vertices.push( new THREE.Vector3(-47.949772, 96.957397, -22.307400) );
geometry.vertices.push( new THREE.Vector3(-50.370754, 103.169998, -18.504530) );
geometry.vertices.push( new THREE.Vector3(-51.581619, 97.907257, -19.350451) );
geometry.vertices.push( new THREE.Vector3(-52.745255, 92.817001, -20.178709) );
geometry.vertices.push( new THREE.Vector3(-48.977989, 91.862617, -23.224350) );
geometry.vertices.push( new THREE.Vector3(-53.910751, 87.682121, -21.023510) );
geometry.vertices.push( new THREE.Vector3(-50.017132, 86.707893, -24.146629) );
geometry.vertices.push( new THREE.Vector3(-53.478371, 70.268990, -26.934000) );
geometry.vertices.push( new THREE.Vector3(-52.257008, 75.891785, -26.031080) );
geometry.vertices.push( new THREE.Vector3(-58.520252, 47.617119, -30.093601) );
geometry.vertices.push( new THREE.Vector3(-57.288773, 53.314888, -29.362350) );
geometry.vertices.push( new THREE.Vector3(-56.894619, 29.656389, -35.798512) );
geometry.vertices.push( new THREE.Vector3(-63.061501, 24.860291, -32.783661) );
geometry.vertices.push( new THREE.Vector3(-62.044132, 30.427160, -32.167419) );
geometry.vertices.push( new THREE.Vector3(-36.223431, 61.720131, -39.331131) );
geometry.vertices.push( new THREE.Vector3(-41.108627, 61.505623, -36.981979) );
geometry.vertices.push( new THREE.Vector3(-43.813129, 44.756260, -39.836632) );
geometry.vertices.push( new THREE.Vector3(-37.802620, 50.620502, -41.399620) );
geometry.vertices.push( new THREE.Vector3(-38.584118, 45.077618, -42.389618) );
geometry.vertices.push( new THREE.Vector3(-42.918751, 50.335503, -38.912621) );
geometry.vertices.push( new THREE.Vector3(-10.097740, 75.383255, -43.585117) );
geometry.vertices.push( new THREE.Vector3(-10.319850, 69.928879, -44.990620) );
geometry.vertices.push( new THREE.Vector3(-10.557940, 64.464005, -46.383751) );
geometry.vertices.push( new THREE.Vector3(-16.804241, 47.655003, -49.326740) );
geometry.vertices.push( new THREE.Vector3(-17.129660, 42.188251, -50.521870) );
geometry.vertices.push( new THREE.Vector3(-11.458879, 42.569630, -51.661129) );
geometry.vertices.push( new THREE.Vector3(-22.738350, 41.708992, -49.185749) );
geometry.vertices.push( new THREE.Vector3(-22.300430, 47.185890, -48.048012) );
geometry.vertices.push( new THREE.Vector3(-6.164700, 21.377661, -57.084381) );
geometry.vertices.push( new THREE.Vector3(-0.000326, 21.608921, -57.555000) );
geometry.vertices.push( new THREE.Vector3(-0.000891, 53.866512, -50.347130) );
geometry.vertices.push( new THREE.Vector3(0.000446, 126.966003, -28.616882) );
geometry.vertices.push( new THREE.Vector3(0.000674, 118.099907, -31.760328) );
geometry.vertices.push( new THREE.Vector3(-4.450050, 112.755798, -33.397049) );
geometry.vertices.push( new THREE.Vector3(-4.351875, 117.618408, -31.710449) );
geometry.vertices.push( new THREE.Vector3(0.000744, 113.198997, -33.460583) );
geometry.vertices.push( new THREE.Vector3(-4.535137, 107.698906, -35.074348) );
geometry.vertices.push( new THREE.Vector3(0.000761, 108.078400, -35.163792) );
geometry.vertices.push( new THREE.Vector3(0.000648, 97.590759, -38.362118) );
geometry.vertices.push( new THREE.Vector3(-4.685175, 97.355995, -38.213249) );
geometry.vertices.push( new THREE.Vector3(0.000552, 92.315636, -39.873009) );
geometry.vertices.push( new THREE.Vector3(0.000424, 86.948624, -41.375618) );
geometry.vertices.push( new THREE.Vector3(-63.322132, 48.401253, -26.568380) );
geometry.vertices.push( new THREE.Vector3(-61.982632, 54.097130, -25.908861) );
geometry.vertices.push( new THREE.Vector3(-64.637238, 42.630741, -27.209320) );
geometry.vertices.push( new THREE.Vector3(-60.916130, 36.126942, -31.500599) );
geometry.vertices.push( new THREE.Vector3(-65.950500, 36.827438, -27.850611) );
geometry.vertices.push( new THREE.Vector3(-59.725868, 41.882618, -30.802801) );
geometry.vertices.push( new THREE.Vector3(-54.791248, 41.011871, -34.317558) );
geometry.vertices.push( new THREE.Vector3(-50.775749, 34.271587, -38.485500) );
geometry.vertices.push( new THREE.Vector3(-45.557247, 33.634312, -41.602127) );
geometry.vertices.push( new THREE.Vector3(-55.864132, 35.312889, -35.071800) );
geometry.vertices.push( new THREE.Vector3(-51.715118, 28.683111, -39.271130) );
geometry.vertices.push( new THREE.Vector3(-69.217125, 20.032381, -29.440350) );
geometry.vertices.push( new THREE.Vector3(-65.009247, 13.820780, -33.708302) );
geometry.vertices.push( new THREE.Vector3(-70.215752, 14.423590, -29.779539) );
geometry.vertices.push( new THREE.Vector3(-64.029747, 19.350191, -33.310310) );
geometry.vertices.push( new THREE.Vector3(-68.235748, 25.544250, -28.993202) );
geometry.vertices.push( new THREE.Vector3(-67.178253, 31.096760, -28.457018) );
geometry.vertices.push( new THREE.Vector3(-54.432369, 12.309219, -41.254131) );
geometry.vertices.push( new THREE.Vector3(-59.761883, 13.141540, -37.559250) );
geometry.vertices.push( new THREE.Vector3(-49.801121, 6.607237, -45.252750) );
geometry.vertices.push( new THREE.Vector3(-55.359383, 6.990000, -41.743500) );
geometry.vertices.push( new THREE.Vector3(-60.703121, 7.739738, -37.969883) );
geometry.vertices.push( new THREE.Vector3(-65.937012, 8.312251, -34.060310) );
geometry.vertices.push( new THREE.Vector3(-71.116135, 8.796225, -30.082432) );
geometry.vertices.push( new THREE.Vector3(-71.803123, 3.228574, -30.420641) );
geometry.vertices.push( new THREE.Vector3(-56.306248, 1.757992, -42.262131) );
geometry.vertices.push( new THREE.Vector3(-61.612118, 2.406097, -38.416500) );
geometry.vertices.push( new THREE.Vector3(-50.727749, 1.448763, -45.858749) );
geometry.vertices.push( new THREE.Vector3(-57.319866, -3.366634, -42.868130) );
geometry.vertices.push( new THREE.Vector3(-62.530880, -2.870966, -38.950123) );
geometry.vertices.push( new THREE.Vector3(-67.513504, -2.565120, -34.905899) );
geometry.vertices.push( new THREE.Vector3(-66.749634, 2.864685, -34.449108) );
geometry.vertices.push( new THREE.Vector3(-72.384003, -2.354238, -30.794209) );
geometry.vertices.push( new THREE.Vector3(-68.295380, -8.020389, -35.461842) );
geometry.vertices.push( new THREE.Vector3(-63.501369, -8.103037, -39.622490) );
geometry.vertices.push( new THREE.Vector3(-72.966751, -8.027136, -31.203260) );
geometry.vertices.push( new THREE.Vector3(-69.086617, -13.488370, -36.067390) );
geometry.vertices.push( new THREE.Vector3(-73.550247, -13.745061, -31.630009) );
geometry.vertices.push( new THREE.Vector3(-64.498131, -13.312570, -40.363880) );
geometry.vertices.push( new THREE.Vector3(-59.630630, -13.296901, -44.441250) );
geometry.vertices.push( new THREE.Vector3(-0.000721, 59.388382, -48.897381) );
geometry.vertices.push( new THREE.Vector3(-5.291963, 64.775253, -47.098881) );
geometry.vertices.push( new THREE.Vector3(-0.000462, 64.915504, -47.413502) );
geometry.vertices.push( new THREE.Vector3(-0.000199, 70.362000, -45.941631) );
geometry.vertices.push( new THREE.Vector3(-5.172713, 70.229630, -45.652870) );
geometry.vertices.push( new THREE.Vector3(0.000047, 75.825378, -44.452499) );
geometry.vertices.push( new THREE.Vector3(-5.062650, 75.688866, -44.192619) );
geometry.vertices.push( new THREE.Vector3(-4.965525, 81.231750, -42.694878) );
geometry.vertices.push( new THREE.Vector3(0.000255, 81.402740, -42.916130) );
geometry.vertices.push( new THREE.Vector3(-5.411512, 59.262753, -48.546749) );
geometry.vertices.push( new THREE.Vector3(-18.412989, 20.483551, -54.808498) );
geometry.vertices.push( new THREE.Vector3(-12.537490, 15.322800, -56.890499) );
geometry.vertices.push( new THREE.Vector3(-12.309150, 20.922710, -56.045998) );
geometry.vertices.push( new THREE.Vector3(-12.095550, 26.302990, -55.095367) );
geometry.vertices.push( new THREE.Vector3(-11.678210, 37.078430, -52.876133) );
geometry.vertices.push( new THREE.Vector3(-11.888140, 31.632069, -54.038631) );
geometry.vertices.push( new THREE.Vector3(-18.086920, 25.882381, -53.849239) );
geometry.vertices.push( new THREE.Vector3(-17.769489, 31.273388, -52.797001) );
geometry.vertices.push( new THREE.Vector3(-17.441441, 36.720490, -51.699001) );
geometry.vertices.push( new THREE.Vector3(-23.170391, 36.238350, -50.288998) );
geometry.vertices.push( new THREE.Vector3(-23.609550, 30.790731, -51.337868) );
geometry.vertices.push( new THREE.Vector3(-28.884941, 35.633289, -48.561378) );
geometry.vertices.push( new THREE.Vector3(-28.328890, 41.104500, -47.539867) );
geometry.vertices.push( new THREE.Vector3(-33.873680, 40.382252, -45.595882) );
geometry.vertices.push( new THREE.Vector3(-39.355122, 39.547501, -43.350368) );
geometry.vertices.push( new THREE.Vector3(-34.540539, 34.900608, -46.556629) );
geometry.vertices.push( new THREE.Vector3(-40.113750, 34.032261, -44.281502) );
geometry.vertices.push( new THREE.Vector3(-44.693619, 39.188622, -40.733250) );
geometry.vertices.push( new THREE.Vector3(-42.013500, 55.924118, -37.961998) );
geometry.vertices.push( new THREE.Vector3(-37.013783, 56.172382, -40.380001) );
geometry.vertices.push( new THREE.Vector3(-31.903728, 56.916382, -42.376499) );
geometry.vertices.push( new THREE.Vector3(-24.651711, 162.031494, -6.757575) );
geometry.vertices.push( new THREE.Vector3(-20.912289, 161.629898, -8.597963) );
geometry.vertices.push( new THREE.Vector3(-32.146160, 157.435501, -3.258716) );
geometry.vertices.push( new THREE.Vector3(-33.401402, 154.528107, -2.722159) );
geometry.vertices.push( new THREE.Vector3(-17.185390, 152.555603, -15.728701) );
geometry.vertices.push( new THREE.Vector3(-15.352011, 148.136200, -18.126860) );
geometry.vertices.push( new THREE.Vector3(-18.081791, 148.051910, -17.208750) );
geometry.vertices.push( new THREE.Vector3(-26.334339, 160.711899, 4.608900) );
geometry.vertices.push( new THREE.Vector3(-25.311300, 158.714600, 6.717075) );
geometry.vertices.push( new THREE.Vector3(-5.701875, 160.608398, 5.648925) );
geometry.vertices.push( new THREE.Vector3(0.000025, 157.492493, -14.049641) );
geometry.vertices.push( new THREE.Vector3(-27.714220, 160.576492, -7.088512) );
geometry.vertices.push( new THREE.Vector3(-20.806200, 163.977402, -2.666145) );
geometry.vertices.push( new THREE.Vector3(-19.036419, 163.564896, -2.789092) );
geometry.vertices.push( new THREE.Vector3(-14.112491, 159.936005, -12.745131) );
geometry.vertices.push( new THREE.Vector3(-0.000018, 159.362198, 7.265550) );
geometry.vertices.push( new THREE.Vector3(-1.618594, 159.766098, 7.064663) );
geometry.vertices.push( new THREE.Vector3(-1.675729, 159.504700, 7.817250) );
geometry.vertices.push( new THREE.Vector3(-3.254966, 160.058609, 6.574501) );
geometry.vertices.push( new THREE.Vector3(-3.840525, 159.505905, 8.357438) );
geometry.vertices.push( new THREE.Vector3(-30.024300, 158.332504, -7.144575) );
geometry.vertices.push( new THREE.Vector3(-27.337009, 157.200699, 6.709351) );
geometry.vertices.push( new THREE.Vector3(-19.358250, 163.138504, -5.482463) );
geometry.vertices.push( new THREE.Vector3(-19.166140, 162.663696, -7.785111) );
geometry.vertices.push( new THREE.Vector3(-21.409500, 162.988495, -5.815762) );
geometry.vertices.push( new THREE.Vector3(-19.143339, 152.701904, -15.047850) );
geometry.vertices.push( new THREE.Vector3(-17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(-19.121250, 143.530899, -18.720190) );
geometry.vertices.push( new THREE.Vector3(-21.128590, 145.341690, -17.042469) );
geometry.vertices.push( new THREE.Vector3(-18.596920, 145.772598, -17.965990) );
geometry.vertices.push( new THREE.Vector3(-20.242199, 148.356705, -16.293900) );
geometry.vertices.push( new THREE.Vector3(-15.726070, 146.077103, -18.819941) );
geometry.vertices.push( new THREE.Vector3(-21.101290, 152.847809, -14.366961) );
geometry.vertices.push( new THREE.Vector3(-45.761620, 62.431873, -34.165459) );
geometry.vertices.push( new THREE.Vector3(-50.275116, 63.721107, -31.047031) );
geometry.vertices.push( new THREE.Vector3(-4.609162, 102.560600, -36.674320) );
geometry.vertices.push( new THREE.Vector3(0.000724, 102.860199, -36.794849) );
geometry.vertices.push( new THREE.Vector3(-9.192451, 101.945999, -36.337051) );
geometry.vertices.push( new THREE.Vector3(-42.892872, 78.890991, -31.196510) );
geometry.vertices.push( new THREE.Vector3(-38.569870, 77.895370, -33.876072) );
geometry.vertices.push( new THREE.Vector3(-51.106869, 81.381752, -25.090429) );
geometry.vertices.push( new THREE.Vector3(-55.129128, 82.287369, -21.919241) );
geometry.vertices.push( new THREE.Vector3(-56.413883, 76.697617, -22.817060) );
geometry.vertices.push( new THREE.Vector3(-57.780369, 70.979622, -23.668159) );
geometry.vertices.push( new THREE.Vector3(-59.187752, 65.262756, -24.467920) );
geometry.vertices.push( new THREE.Vector3(-54.742878, 64.595627, -27.791700) );
geometry.vertices.push( new THREE.Vector3(-4.238737, 122.172699, -30.082649) );
geometry.vertices.push( new THREE.Vector3(0.000553, 122.658394, -30.138081) );
geometry.vertices.push( new THREE.Vector3(-31.695000, 98.381622, -31.260529) );
geometry.vertices.push( new THREE.Vector3(-27.274090, 99.161247, -32.847042) );
geometry.vertices.push( new THREE.Vector3(-9.897525, 80.868378, -42.158249) );
geometry.vertices.push( new THREE.Vector3(-56.021618, 58.959381, -28.598101) );
geometry.vertices.push( new THREE.Vector3(-60.596634, 59.676369, -25.211781) );
geometry.vertices.push( new THREE.Vector3(-51.425247, 58.061249, -31.913589) );
geometry.vertices.push( new THREE.Vector3(-46.786869, 56.801617, -35.087402) );
geometry.vertices.push( new THREE.Vector3(4.778625, 92.098495, -39.700871) );
geometry.vertices.push( new THREE.Vector3(0.000648, 97.590759, -38.362118) );
geometry.vertices.push( new THREE.Vector3(4.687763, 97.355995, -38.207253) );
geometry.vertices.push( new THREE.Vector3(0.000552, 92.315636, -39.873009) );
geometry.vertices.push( new THREE.Vector3(-0.000888, 48.435749, -51.714371) );
geometry.vertices.push( new THREE.Vector3(5.743238, 42.862873, -52.616249) );
geometry.vertices.push( new THREE.Vector3(-0.000816, 42.988117, -53.050117) );
geometry.vertices.push( new THREE.Vector3(5.635800, 48.315002, -51.308632) );
geometry.vertices.push( new THREE.Vector3(11.458870, 42.569630, -51.661129) );
geometry.vertices.push( new THREE.Vector3(11.243020, 48.029633, -50.410126) );
geometry.vertices.push( new THREE.Vector3(28.081951, 140.597992, -16.047411) );
geometry.vertices.push( new THREE.Vector3(26.508039, 138.172897, -18.106579) );
geometry.vertices.push( new THREE.Vector3(25.823208, 140.397400, -17.234810) );
geometry.vertices.push( new THREE.Vector3(28.727209, 138.107605, -17.072210) );
geometry.vertices.push( new THREE.Vector3(29.279509, 135.199112, -18.035931) );
geometry.vertices.push( new THREE.Vector3(27.678940, 135.117401, -18.824400) );
geometry.vertices.push( new THREE.Vector3(4.874775, 86.740509, -41.183998) );
geometry.vertices.push( new THREE.Vector3(0.000424, 86.948624, -41.375618) );
geometry.vertices.push( new THREE.Vector3(9.712425, 86.311501, -40.709629) );
geometry.vertices.push( new THREE.Vector3(9.524814, 91.642120, -39.267368) );
geometry.vertices.push( new THREE.Vector3(9.349162, 96.856117, -37.811249) );
geometry.vertices.push( new THREE.Vector3(0.000744, 113.198997, -33.460583) );
geometry.vertices.push( new THREE.Vector3(4.538175, 107.699295, -35.073940) );
geometry.vertices.push( new THREE.Vector3(0.000761, 108.078400, -35.163792) );
geometry.vertices.push( new THREE.Vector3(4.453013, 112.757301, -33.398960) );
geometry.vertices.push( new THREE.Vector3(9.047624, 106.949196, -34.793018) );
geometry.vertices.push( new THREE.Vector3(8.874750, 111.903801, -33.173210) );
geometry.vertices.push( new THREE.Vector3(4.354575, 117.620598, -31.714731) );
geometry.vertices.push( new THREE.Vector3(8.677725, 116.709007, -31.525282) );
geometry.vertices.push( new THREE.Vector3(0.000674, 118.099907, -31.760328) );
geometry.vertices.push( new THREE.Vector3(0.000416, 131.114304, -27.219830) );
geometry.vertices.push( new THREE.Vector3(4.117762, 126.493500, -28.549540) );
geometry.vertices.push( new THREE.Vector3(0.000446, 126.966003, -28.616882) );
geometry.vertices.push( new THREE.Vector3(3.990788, 130.643997, -27.118238) );
geometry.vertices.push( new THREE.Vector3(8.214262, 125.607391, -28.338861) );
geometry.vertices.push( new THREE.Vector3(7.963387, 129.769104, -26.855141) );
geometry.vertices.push( new THREE.Vector3(3.857850, 134.555191, -25.785229) );
geometry.vertices.push( new THREE.Vector3(7.695187, 133.710007, -25.473341) );
geometry.vertices.push( new THREE.Vector3(0.000380, 135.011993, -25.915279) );
geometry.vertices.push( new THREE.Vector3(5.524912, 53.756618, -49.965752) );
geometry.vertices.push( new THREE.Vector3(11.020950, 53.489250, -49.118622) );
geometry.vertices.push( new THREE.Vector3(54.432369, 12.309219, -41.254131) );
geometry.vertices.push( new THREE.Vector3(58.808987, 18.597450, -37.095482) );
geometry.vertices.push( new THREE.Vector3(59.761883, 13.141500, -37.559250) );
geometry.vertices.push( new THREE.Vector3(53.521133, 17.703560, -40.711128) );
geometry.vertices.push( new THREE.Vector3(17.119459, 42.191250, -50.538750) );
geometry.vertices.push( new THREE.Vector3(11.671801, 37.079288, -52.888130) );
geometry.vertices.push( new THREE.Vector3(17.441441, 36.720448, -51.698990) );
geometry.vertices.push( new THREE.Vector3(11.882360, 31.632599, -54.049500) );
geometry.vertices.push( new THREE.Vector3(17.761091, 31.275112, -52.811249) );
geometry.vertices.push( new THREE.Vector3(23.170391, 36.238308, -50.288998) );
geometry.vertices.push( new THREE.Vector3(23.600019, 30.789709, -51.354374) );
geometry.vertices.push( new THREE.Vector3(39.355122, 39.547493, -43.350368) );
geometry.vertices.push( new THREE.Vector3(34.524750, 34.888432, -46.588501) );
geometry.vertices.push( new THREE.Vector3(33.873680, 40.382252, -45.595882) );
geometry.vertices.push( new THREE.Vector3(40.113750, 34.032261, -44.281502) );
geometry.vertices.push( new THREE.Vector3(40.862251, 28.545410, -45.187500) );
geometry.vertices.push( new THREE.Vector3(45.557247, 33.634281, -41.602127) );
geometry.vertices.push( new THREE.Vector3(46.404381, 28.111389, -42.447010) );
geometry.vertices.push( new THREE.Vector3(44.693619, 39.188622, -40.733250) );
geometry.vertices.push( new THREE.Vector3(50.775749, 34.271587, -38.485500) );
geometry.vertices.push( new THREE.Vector3(51.715118, 28.683111, -39.271130) );
geometry.vertices.push( new THREE.Vector3(60.916130, 36.126942, -31.500561) );
geometry.vertices.push( new THREE.Vector3(56.894619, 29.656389, -35.798512) );
geometry.vertices.push( new THREE.Vector3(55.863750, 35.312889, -35.071800) );
geometry.vertices.push( new THREE.Vector3(62.044132, 30.427160, -32.167389) );
geometry.vertices.push( new THREE.Vector3(65.950500, 36.827358, -27.850611) );
geometry.vertices.push( new THREE.Vector3(67.178253, 31.096680, -28.457018) );
geometry.vertices.push( new THREE.Vector3(64.637238, 42.630741, -27.209320) );
geometry.vertices.push( new THREE.Vector3(59.725868, 41.882618, -30.802801) );
geometry.vertices.push( new THREE.Vector3(10.789460, 58.979248, -47.769749) );
geometry.vertices.push( new THREE.Vector3(5.408550, 59.265751, -48.549751) );
geometry.vertices.push( new THREE.Vector3(10.554000, 64.468872, -46.386002) );
geometry.vertices.push( new THREE.Vector3(5.290050, 64.778252, -47.099628) );
geometry.vertices.push( new THREE.Vector3(15.765710, 64.093491, -45.500622) );
geometry.vertices.push( new THREE.Vector3(16.115210, 58.613251, -46.822121) );
geometry.vertices.push( new THREE.Vector3(16.459351, 53.130383, -48.108379) );
geometry.vertices.push( new THREE.Vector3(26.656910, 57.595497, -44.180252) );
geometry.vertices.push( new THREE.Vector3(31.188631, 62.455868, -41.303261) );
geometry.vertices.push( new THREE.Vector3(31.867908, 56.933617, -42.424881) );
geometry.vertices.push( new THREE.Vector3(26.086721, 63.094879, -42.988129) );
geometry.vertices.push( new THREE.Vector3(36.223457, 61.720119, -39.331120) );
geometry.vertices.push( new THREE.Vector3(37.013783, 56.172382, -40.380001) );
geometry.vertices.push( new THREE.Vector3(32.543850, 51.407616, -43.515751) );
geometry.vertices.push( new THREE.Vector3(37.802620, 50.620502, -41.399620) );
geometry.vertices.push( new THREE.Vector3(42.013500, 55.924118, -37.961998) );
geometry.vertices.push( new THREE.Vector3(42.918751, 50.335503, -38.912621) );
geometry.vertices.push( new THREE.Vector3(41.108620, 61.505623, -36.981972) );
geometry.vertices.push( new THREE.Vector3(45.761620, 62.431873, -34.165497) );
geometry.vertices.push( new THREE.Vector3(46.786869, 56.801617, -35.087402) );
geometry.vertices.push( new THREE.Vector3(47.812500, 51.157124, -35.976639) );
geometry.vertices.push( new THREE.Vector3(63.322132, 48.401253, -26.568409) );
geometry.vertices.push( new THREE.Vector3(57.288750, 53.314884, -29.362350) );
geometry.vertices.push( new THREE.Vector3(61.982632, 54.097130, -25.908861) );
geometry.vertices.push( new THREE.Vector3(58.520252, 47.617500, -30.093639) );
geometry.vertices.push( new THREE.Vector3(53.478371, 70.268990, -26.934000) );
geometry.vertices.push( new THREE.Vector3(59.187752, 65.262756, -24.467960) );
geometry.vertices.push( new THREE.Vector3(54.742874, 64.595619, -27.791700) );
geometry.vertices.push( new THREE.Vector3(57.780369, 70.979622, -23.668159) );
geometry.vertices.push( new THREE.Vector3(45.176632, 90.736877, -26.195358) );
geometry.vertices.push( new THREE.Vector3(50.020866, 86.704491, -24.139339) );
geometry.vertices.push( new THREE.Vector3(46.086002, 85.574631, -27.195230) );
geometry.vertices.push( new THREE.Vector3(36.465820, 18.604609, -49.394989) );
geometry.vertices.push( new THREE.Vector3(31.067890, 14.019300, -52.378117) );
geometry.vertices.push( new THREE.Vector3(30.498260, 19.364210, -51.526867) );
geometry.vertices.push( new THREE.Vector3(42.352871, 17.706490, -46.907249) );
geometry.vertices.push( new THREE.Vector3(37.137821, 13.275820, -50.233501) );
geometry.vertices.push( new THREE.Vector3(43.121250, 12.376950, -47.659512) );
geometry.vertices.push( new THREE.Vector3(51.425247, 58.061249, -31.913589) );
geometry.vertices.push( new THREE.Vector3(52.573132, 52.384132, -32.742641) );
geometry.vertices.push( new THREE.Vector3(50.275116, 63.721119, -31.047041) );
geometry.vertices.push( new THREE.Vector3(56.021618, 58.959381, -28.598101) );
geometry.vertices.push( new THREE.Vector3(0.000255, 81.402740, -42.916130) );
geometry.vertices.push( new THREE.Vector3(4.966500, 81.232872, -42.690369) );
geometry.vertices.push( new THREE.Vector3(0.000047, 75.825378, -44.452499) );
geometry.vertices.push( new THREE.Vector3(5.062800, 75.691132, -44.189629) );
geometry.vertices.push( new THREE.Vector3(9.899549, 80.870255, -42.150002) );
geometry.vertices.push( new THREE.Vector3(10.098081, 75.386620, -43.579880) );
geometry.vertices.push( new THREE.Vector3(14.475860, 85.857361, -40.046619) );
geometry.vertices.push( new THREE.Vector3(14.765850, 80.462624, -41.428871) );
geometry.vertices.push( new THREE.Vector3(15.078410, 75.011620, -42.798370) );
geometry.vertices.push( new THREE.Vector3(19.599710, 79.995384, -40.484257) );
geometry.vertices.push( new THREE.Vector3(20.024811, 74.563126, -41.797871) );
geometry.vertices.push( new THREE.Vector3(42.060749, 84.140999, -30.131289) );
geometry.vertices.push( new THREE.Vector3(38.572868, 77.911499, -33.851208) );
geometry.vertices.push( new THREE.Vector3(37.848740, 83.152870, -32.751751) );
geometry.vertices.push( new THREE.Vector3(42.895870, 78.895119, -31.180950) );
geometry.vertices.push( new THREE.Vector3(43.791000, 73.528496, -32.209610) );
geometry.vertices.push( new THREE.Vector3(47.044502, 80.300247, -28.196918) );
geometry.vertices.push( new THREE.Vector3(48.061867, 74.897995, -29.182690) );
geometry.vertices.push( new THREE.Vector3(51.108002, 81.376129, -25.089041) );
geometry.vertices.push( new THREE.Vector3(52.257000, 75.891762, -26.031080) );
geometry.vertices.push( new THREE.Vector3(49.146381, 69.352501, -30.134741) );
geometry.vertices.push( new THREE.Vector3(44.754372, 68.024246, -33.205353) );
geometry.vertices.push( new THREE.Vector3(53.910751, 87.682121, -21.023550) );
geometry.vertices.push( new THREE.Vector3(55.129128, 82.287003, -21.919281) );
geometry.vertices.push( new THREE.Vector3(56.413883, 76.697617, -22.817060) );
geometry.vertices.push( new THREE.Vector3(0.000724, 102.860199, -36.794849) );
geometry.vertices.push( new THREE.Vector3(4.612012, 102.560997, -36.670868) );
geometry.vertices.push( new THREE.Vector3(9.197925, 101.945999, -36.329399) );
geometry.vertices.push( new THREE.Vector3(13.499630, 106.215797, -34.309280) );
geometry.vertices.push( new THREE.Vector3(13.731601, 101.299095, -35.797501) );
geometry.vertices.push( new THREE.Vector3(13.957800, 96.296272, -37.235672) );
geometry.vertices.push( new THREE.Vector3(18.251740, 100.620399, -35.047131) );
geometry.vertices.push( new THREE.Vector3(18.548439, 95.678642, -36.441189) );
geometry.vertices.push( new THREE.Vector3(17.942400, 105.487892, -33.609859) );
geometry.vertices.push( new THREE.Vector3(22.424101, 104.754402, -32.681892) );
geometry.vertices.push( new THREE.Vector3(22.797070, 99.911247, -34.050228) );
geometry.vertices.push( new THREE.Vector3(23.155760, 95.005867, -35.388340) );
geometry.vertices.push( new THREE.Vector3(27.300518, 99.166504, -32.792698) );
geometry.vertices.push( new THREE.Vector3(27.733120, 94.274994, -34.071220) );
geometry.vertices.push( new THREE.Vector3(26.849890, 104.009201, -31.488859) );
geometry.vertices.push( new THREE.Vector3(31.124771, 103.244995, -29.994181) );
geometry.vertices.push( new THREE.Vector3(31.695042, 98.381622, -31.260490) );
geometry.vertices.push( new THREE.Vector3(32.233841, 93.484871, -32.484039) );
geometry.vertices.push( new THREE.Vector3(35.874710, 98.210617, -29.337189) );
geometry.vertices.push( new THREE.Vector3(36.535118, 93.286873, -30.501711) );
geometry.vertices.push( new THREE.Vector3(35.173042, 103.114906, -28.108570) );
geometry.vertices.push( new THREE.Vector3(38.918999, 104.271698, -25.742891) );
geometry.vertices.push( new THREE.Vector3(39.733868, 99.306366, -26.906481) );
geometry.vertices.push( new THREE.Vector3(40.514248, 94.333488, -27.999300) );
geometry.vertices.push( new THREE.Vector3(43.375118, 100.870499, -24.178461) );
geometry.vertices.push( new THREE.Vector3(44.284119, 95.823372, -25.191679) );
geometry.vertices.push( new THREE.Vector3(42.441372, 105.915001, -23.095501) );
geometry.vertices.push( new THREE.Vector3(45.819740, 107.244400, -20.364969) );
geometry.vertices.push( new THREE.Vector3(46.901630, 102.103104, -21.363300) );
geometry.vertices.push( new THREE.Vector3(47.956867, 96.955124, -22.293671) );
geometry.vertices.push( new THREE.Vector3(50.370754, 103.169998, -18.504530) );
geometry.vertices.push( new THREE.Vector3(51.581619, 97.907257, -19.350491) );
geometry.vertices.push( new THREE.Vector3(49.125748, 108.417404, -17.592859) );
geometry.vertices.push( new THREE.Vector3(13.030010, 4.037475, -58.501499) );
geometry.vertices.push( new THREE.Vector3(19.917860, -1.000226, -58.129501) );
geometry.vertices.push( new THREE.Vector3(13.275790, -1.401761, -59.392120) );
geometry.vertices.push( new THREE.Vector3(19.510201, 4.191450, -57.233620) );
geometry.vertices.push( new THREE.Vector3(12.091130, 26.302910, -55.104370) );
geometry.vertices.push( new THREE.Vector3(18.408560, 20.484070, -54.817123) );
geometry.vertices.push( new THREE.Vector3(12.306260, 20.922071, -56.053131) );
geometry.vertices.push( new THREE.Vector3(18.080330, 25.883469, -53.860878) );
geometry.vertices.push( new THREE.Vector3(16.793100, 47.658749, -49.344368) );
geometry.vertices.push( new THREE.Vector3(22.738310, 41.708992, -49.185749) );
geometry.vertices.push( new THREE.Vector3(22.300421, 47.185871, -48.048000) );
geometry.vertices.push( new THREE.Vector3(21.854811, 52.668369, -46.870121) );
geometry.vertices.push( new THREE.Vector3(15.415910, 69.557236, -44.157372) );
geometry.vertices.push( new THREE.Vector3(20.938761, 63.639744, -44.386871) );
geometry.vertices.push( new THREE.Vector3(20.475790, 69.109871, -43.101372) );
geometry.vertices.push( new THREE.Vector3(10.319890, 69.928879, -44.990620) );
geometry.vertices.push( new THREE.Vector3(41.604370, 23.099699, -46.073250) );
geometry.vertices.push( new THREE.Vector3(35.170052, 29.419882, -47.553749) );
geometry.vertices.push( new THREE.Vector3(35.813469, 23.988939, -48.495380) );
geometry.vertices.push( new THREE.Vector3(38.584129, 45.077618, -42.389633) );
geometry.vertices.push( new THREE.Vector3(33.212891, 45.889500, -44.572128) );
geometry.vertices.push( new THREE.Vector3(35.437691, 67.250618, -38.254868) );
geometry.vertices.push( new THREE.Vector3(40.214249, 67.063499, -35.970490) );
geometry.vertices.push( new THREE.Vector3(39.359619, 72.548630, -34.927090) );
geometry.vertices.push( new THREE.Vector3(34.683563, 72.724121, -37.150349) );
geometry.vertices.push( new THREE.Vector3(29.853041, 73.429886, -38.983120) );
geometry.vertices.push( new THREE.Vector3(25.514549, 68.581131, -41.769001) );
geometry.vertices.push( new THREE.Vector3(24.958239, 74.039253, -40.529251) );
geometry.vertices.push( new THREE.Vector3(30.509439, 67.963867, -40.155380) );
geometry.vertices.push( new THREE.Vector3(33.988239, 78.100876, -36.017658) );
geometry.vertices.push( new THREE.Vector3(29.242161, 78.826881, -37.789120) );
geometry.vertices.push( new THREE.Vector3(33.352421, 83.360245, -34.860752) );
geometry.vertices.push( new THREE.Vector3(28.684538, 84.117371, -36.572578) );
geometry.vertices.push( new THREE.Vector3(27.779358, 46.594501, -46.457623) );
geometry.vertices.push( new THREE.Vector3(28.328890, 41.104500, -47.539867) );
geometry.vertices.push( new THREE.Vector3(27.222109, 52.091999, -45.339001) );
geometry.vertices.push( new THREE.Vector3(21.399679, 58.156139, -45.646511) );
geometry.vertices.push( new THREE.Vector3(68.235748, 25.544170, -28.993202) );
geometry.vertices.push( new THREE.Vector3(63.061489, 24.860249, -32.783661) );
geometry.vertices.push( new THREE.Vector3(69.217125, 20.032310, -29.440350) );
geometry.vertices.push( new THREE.Vector3(71.803123, 3.228514, -30.420641) );
geometry.vertices.push( new THREE.Vector3(65.937012, 8.312251, -34.060280) );
geometry.vertices.push( new THREE.Vector3(71.116135, 8.796150, -30.082432) );
geometry.vertices.push( new THREE.Vector3(70.215752, 14.423511, -29.779539) );
geometry.vertices.push( new THREE.Vector3(65.009262, 13.820780, -33.708271) );
geometry.vertices.push( new THREE.Vector3(64.029747, 19.350151, -33.310310) );
geometry.vertices.push( new THREE.Vector3(57.864750, 24.093489, -36.490841) );
geometry.vertices.push( new THREE.Vector3(60.703121, 7.739700, -37.969883) );
geometry.vertices.push( new THREE.Vector3(66.749619, 2.864677, -34.449070) );
geometry.vertices.push( new THREE.Vector3(72.382126, -2.354182, -30.798191) );
geometry.vertices.push( new THREE.Vector3(67.513504, -2.565124, -34.905861) );
geometry.vertices.push( new THREE.Vector3(48.919121, 11.871750, -44.664001) );
geometry.vertices.push( new THREE.Vector3(55.359383, 6.990000, -41.743500) );
geometry.vertices.push( new THREE.Vector3(49.801121, 6.607237, -45.252750) );
geometry.vertices.push( new THREE.Vector3(43.923012, 7.135577, -48.370129) );
geometry.vertices.push( new THREE.Vector3(50.727749, 1.448753, -45.858749) );
geometry.vertices.push( new THREE.Vector3(44.772369, 2.006783, -49.079998) );
geometry.vertices.push( new THREE.Vector3(51.753380, -3.562967, -46.540878) );
geometry.vertices.push( new THREE.Vector3(45.704250, -2.970768, -49.850250) );
geometry.vertices.push( new THREE.Vector3(46.754631, -7.758375, -50.743134) );
geometry.vertices.push( new THREE.Vector3(52.931618, -8.387173, -47.356503) );
geometry.vertices.push( new THREE.Vector3(56.306248, 1.757982, -42.262131) );
geometry.vertices.push( new THREE.Vector3(61.612118, 2.406083, -38.416500) );
geometry.vertices.push( new THREE.Vector3(57.319866, -3.366645, -42.867748) );
geometry.vertices.push( new THREE.Vector3(62.530880, -2.870977, -38.950123) );
geometry.vertices.push( new THREE.Vector3(58.446747, -8.363661, -43.618500) );
geometry.vertices.push( new THREE.Vector3(63.501381, -8.103036, -39.622501) );
geometry.vertices.push( new THREE.Vector3(68.295380, -8.020389, -35.461842) );
geometry.vertices.push( new THREE.Vector3(64.498131, -13.312610, -40.363880) );
geometry.vertices.push( new THREE.Vector3(59.630630, -13.296901, -44.441250) );
geometry.vertices.push( new THREE.Vector3(54.185997, -13.117570, -48.239250) );
geometry.vertices.push( new THREE.Vector3(47.864250, -12.450970, -51.696747) );
geometry.vertices.push( new THREE.Vector3(41.146130, -11.557950, -54.646511) );
geometry.vertices.push( new THREE.Vector3(72.959633, -8.026724, -31.219049) );
geometry.vertices.push( new THREE.Vector3(69.086617, -13.488370, -36.067348) );
geometry.vertices.push( new THREE.Vector3(73.536003, -13.744200, -31.661549) );
geometry.vertices.push( new THREE.Vector3(53.694366, 46.701752, -33.542591) );
geometry.vertices.push( new THREE.Vector3(54.791248, 41.011879, -34.317558) );
geometry.vertices.push( new THREE.Vector3(48.983620, 91.859612, -23.213289) );
geometry.vertices.push( new THREE.Vector3(52.745255, 92.816628, -20.178751) );
geometry.vertices.push( new THREE.Vector3(14.206240, 91.142235, -38.650490) );
geometry.vertices.push( new THREE.Vector3(13.233970, 111.112503, -32.744293) );
geometry.vertices.push( new THREE.Vector3(17.589491, 110.356903, -32.111401) );
geometry.vertices.push( new THREE.Vector3(12.938060, 115.894493, -31.143709) );
geometry.vertices.push( new THREE.Vector3(28.188000, 89.262749, -35.332237) );
geometry.vertices.push( new THREE.Vector3(32.776947, 88.483116, -33.683472) );
geometry.vertices.push( new THREE.Vector3(37.181358, 88.272751, -31.637550) );
geometry.vertices.push( new THREE.Vector3(8.454975, 121.265602, -29.904711) );
geometry.vertices.push( new THREE.Vector3(12.615260, 120.467308, -29.548731) );
geometry.vertices.push( new THREE.Vector3(12.268240, 124.842003, -27.985950) );
geometry.vertices.push( new THREE.Vector3(11.899540, 129.030396, -26.482048) );
geometry.vertices.push( new THREE.Vector3(16.320559, 124.151596, -27.472240) );
geometry.vertices.push( new THREE.Vector3(15.816230, 128.379791, -25.958521) );
geometry.vertices.push( new THREE.Vector3(11.491570, 133.006500, -25.067850) );
geometry.vertices.push( new THREE.Vector3(15.248890, 132.397110, -24.521851) );
geometry.vertices.push( new THREE.Vector3(14.601339, 136.180908, -23.206200) );
geometry.vertices.push( new THREE.Vector3(10.533340, 140.365906, -22.540609) );
geometry.vertices.push( new THREE.Vector3(13.918610, 139.843506, -21.971659) );
geometry.vertices.push( new THREE.Vector3(11.026690, 136.745300, -23.774099) );
geometry.vertices.push( new THREE.Vector3(7.120463, 140.914505, -23.051470) );
geometry.vertices.push( new THREE.Vector3(7.402612, 137.389099, -24.213261) );
geometry.vertices.push( new THREE.Vector3(25.154140, 118.358597, -27.292421) );
geometry.vertices.push( new THREE.Vector3(29.803579, 113.005104, -27.275711) );
geometry.vertices.push( new THREE.Vector3(25.775169, 113.684204, -28.760290) );
geometry.vertices.push( new THREE.Vector3(29.094669, 117.743301, -25.820810) );
geometry.vertices.push( new THREE.Vector3(32.837399, 117.773994, -23.955341) );
geometry.vertices.push( new THREE.Vector3(28.298552, 122.380898, -24.294680) );
geometry.vertices.push( new THREE.Vector3(32.011650, 122.462997, -22.459539) );
geometry.vertices.push( new THREE.Vector3(4.240913, 122.175705, -30.089960) );
geometry.vertices.push( new THREE.Vector3(0.000553, 122.658394, -30.138081) );
geometry.vertices.push( new THREE.Vector3(20.412189, 123.490097, -26.778980) );
geometry.vertices.push( new THREE.Vector3(24.439421, 122.888992, -25.766399) );
geometry.vertices.push( new THREE.Vector3(21.003860, 119.028000, -28.312719) );
geometry.vertices.push( new THREE.Vector3(35.600700, 123.632599, -20.356800) );
geometry.vertices.push( new THREE.Vector3(36.394272, 119.041504, -21.753340) );
geometry.vertices.push( new THREE.Vector3(41.976749, 126.147697, -15.900069) );
geometry.vertices.push( new THREE.Vector3(39.719997, 120.690407, -19.371969) );
geometry.vertices.push( new THREE.Vector3(38.958370, 125.118401, -18.124350) );
geometry.vertices.push( new THREE.Vector3(42.768749, 121.863403, -16.968380) );
geometry.vertices.push( new THREE.Vector3(40.544998, 115.966499, -20.615850) );
geometry.vertices.push( new THREE.Vector3(43.668751, 117.227196, -18.080250) );
geometry.vertices.push( new THREE.Vector3(45.679119, 122.799004, -14.553600) );
geometry.vertices.push( new THREE.Vector3(46.677368, 118.267097, -15.522941) );
geometry.vertices.push( new THREE.Vector3(44.825989, 126.949097, -13.679891) );
geometry.vertices.push( new THREE.Vector3(3.716745, 138.155197, -24.539509) );
geometry.vertices.push( new THREE.Vector3(0.000056, 141.996399, -23.565521) );
geometry.vertices.push( new THREE.Vector3(3.571575, 141.600006, -23.337450) );
geometry.vertices.push( new THREE.Vector3(0.000257, 138.567703, -24.671659) );
geometry.vertices.push( new THREE.Vector3(38.051998, 109.299805, -24.457281) );
geometry.vertices.push( new THREE.Vector3(41.475002, 110.994003, -21.882490) );
geometry.vertices.push( new THREE.Vector3(37.190880, 114.264801, -23.107990) );
geometry.vertices.push( new THREE.Vector3(33.609478, 112.988998, -25.385141) );
geometry.vertices.push( new THREE.Vector3(34.403019, 108.071602, -26.780399) );
geometry.vertices.push( new THREE.Vector3(38.218128, 129.203995, -16.846350) );
geometry.vertices.push( new THREE.Vector3(34.078121, 132.064896, -17.367229) );
geometry.vertices.push( new THREE.Vector3(37.563751, 132.893295, -15.524290) );
geometry.vertices.push( new THREE.Vector3(34.748737, 128.040390, -18.881809) );
geometry.vertices.push( new THREE.Vector3(49.809750, 39.895119, -37.675121) );
geometry.vertices.push( new THREE.Vector3(48.821251, 45.522751, -36.838879) );
geometry.vertices.push( new THREE.Vector3(60.596634, 59.676369, -25.211781) );
geometry.vertices.push( new THREE.Vector3(24.435560, 79.454239, -39.274498) );
geometry.vertices.push( new THREE.Vector3(23.958038, 84.777748, -38.001747) );
geometry.vertices.push( new THREE.Vector3(30.487268, 108.145905, -28.666349) );
geometry.vertices.push( new THREE.Vector3(26.340940, 108.874908, -30.151918) );
geometry.vertices.push( new THREE.Vector3(43.813122, 44.756248, -39.836620) );
geometry.vertices.push( new THREE.Vector3(33.198261, 141.893188, -12.916270) );
geometry.vertices.push( new THREE.Vector3(36.685730, 139.185791, -12.670239) );
geometry.vertices.push( new THREE.Vector3(33.789600, 138.655502, -14.336141) );
geometry.vertices.push( new THREE.Vector3(36.107960, 142.673309, -11.334110) );
geometry.vertices.push( new THREE.Vector3(40.885868, 142.831497, -8.776613) );
geometry.vertices.push( new THREE.Vector3(39.232502, 139.471497, -11.399550) );
geometry.vertices.push( new THREE.Vector3(38.564251, 142.995804, -9.782174) );
geometry.vertices.push( new THREE.Vector3(41.720627, 139.716003, -10.194710) );
geometry.vertices.push( new THREE.Vector3(6.905887, 143.102997, -22.294800) );
geometry.vertices.push( new THREE.Vector3(3.452944, 143.718002, -22.563709) );
geometry.vertices.push( new THREE.Vector3(22.765949, 140.854095, -18.470930) );
geometry.vertices.push( new THREE.Vector3(20.580629, 138.867401, -20.499790) );
geometry.vertices.push( new THREE.Vector3(19.885271, 141.284302, -19.635639) );
geometry.vertices.push( new THREE.Vector3(23.622000, 138.490906, -19.321390) );
geometry.vertices.push( new THREE.Vector3(10.213280, 142.609894, -21.742121) );
geometry.vertices.push( new THREE.Vector3(13.119151, 144.387405, -20.353910) );
geometry.vertices.push( new THREE.Vector3(13.520700, 142.116699, -21.189449) );
geometry.vertices.push( new THREE.Vector3(9.894861, 144.847092, -20.920839) );
geometry.vertices.push( new THREE.Vector3(16.702990, 141.700500, -20.412571) );
geometry.vertices.push( new THREE.Vector3(17.274191, 139.345093, -21.279261) );
geometry.vertices.push( new THREE.Vector3(6.670575, 145.306900, -21.487799) );
geometry.vertices.push( new THREE.Vector3(3.335303, 145.832306, -21.783560) );
geometry.vertices.push( new THREE.Vector3(27.265120, 142.990509, -14.912661) );
geometry.vertices.push( new THREE.Vector3(30.340689, 140.798599, -14.860010) );
geometry.vertices.push( new THREE.Vector3(29.666021, 143.398102, -13.502290) );
geometry.vertices.push( new THREE.Vector3(41.255619, 129.999405, -14.869610) );
geometry.vertices.push( new THREE.Vector3(44.076748, 130.610306, -12.922239) );
geometry.vertices.push( new THREE.Vector3(29.948700, 24.748390, -50.593884) );
geometry.vertices.push( new THREE.Vector3(48.068619, 17.222061, -44.025749) );
geometry.vertices.push( new THREE.Vector3(47.235752, 22.637960, -43.270500) );
geometry.vertices.push( new THREE.Vector3(52.622627, 23.160980, -40.031620) );
geometry.vertices.push( new THREE.Vector3(38.582619, 2.902587, -51.825748) );
geometry.vertices.push( new THREE.Vector3(39.379879, -2.075141, -52.668751) );
geometry.vertices.push( new THREE.Vector3(37.840130, 8.032050, -51.035618) );
geometry.vertices.push( new THREE.Vector3(28.147951, 146.865005, -12.815170) );
geometry.vertices.push( new THREE.Vector3(25.981691, 145.862610, -14.383949) );
geometry.vertices.push( new THREE.Vector3(27.714220, 160.576492, -7.088512) );
geometry.vertices.push( new THREE.Vector3(27.303749, 156.008606, -10.258310) );
geometry.vertices.push( new THREE.Vector3(25.000200, 158.719894, -9.903188) );
geometry.vertices.push( new THREE.Vector3(30.024300, 158.332504, -7.144575) );
geometry.vertices.push( new THREE.Vector3(23.473240, 156.564407, 8.433712) );
geometry.vertices.push( new THREE.Vector3(27.337009, 157.200699, 6.709351) );
geometry.vertices.push( new THREE.Vector3(25.312010, 158.714996, 6.718313) );
geometry.vertices.push( new THREE.Vector3(25.613510, 155.481003, 8.124037) );
geometry.vertices.push( new THREE.Vector3(29.607681, 160.264099, 0.901905) );
geometry.vertices.push( new THREE.Vector3(26.334339, 160.711899, 4.608900) );
geometry.vertices.push( new THREE.Vector3(28.599380, 159.320602, 4.825650) );
geometry.vertices.push( new THREE.Vector3(27.480490, 161.775009, 0.941295) );
geometry.vertices.push( new THREE.Vector3(30.468410, 160.066910, -3.555716) );
geometry.vertices.push( new THREE.Vector3(28.386709, 161.896896, -3.522154) );
geometry.vertices.push( new THREE.Vector3(32.146130, 157.435501, -3.258720) );
geometry.vertices.push( new THREE.Vector3(31.834829, 155.508698, -6.970836) );
geometry.vertices.push( new THREE.Vector3(29.371271, 152.972992, -10.018459) );
geometry.vertices.push( new THREE.Vector3(38.572498, 149.167496, -3.363728) );
geometry.vertices.push( new THREE.Vector3(38.054249, 148.729507, -6.624338) );
geometry.vertices.push( new THREE.Vector3(37.521381, 150.396393, -4.098975) );
geometry.vertices.push( new THREE.Vector3(39.505882, 147.353195, -5.561550) );
geometry.vertices.push( new THREE.Vector3(16.018200, 162.584610, 1.787291) );
geometry.vertices.push( new THREE.Vector3(17.610001, 161.802002, 4.452413) );
geometry.vertices.push( new THREE.Vector3(18.832880, 162.586502, 2.486302) );
geometry.vertices.push( new THREE.Vector3(15.825410, 162.257599, 3.731816) );
geometry.vertices.push( new THREE.Vector3(16.067770, 160.657089, 6.006375) );
geometry.vertices.push( new THREE.Vector3(17.640490, 157.190598, 8.263614) );
geometry.vertices.push( new THREE.Vector3(21.263700, 157.614395, 8.424900) );
geometry.vertices.push( new THREE.Vector3(19.302450, 158.766693, 7.849912) );
geometry.vertices.push( new THREE.Vector3(19.883739, 155.556793, 9.306675) );
geometry.vertices.push( new THREE.Vector3(9.674775, 146.711304, -20.268600) );
geometry.vertices.push( new THREE.Vector3(6.494325, 147.040497, -20.863310) );
geometry.vertices.push( new THREE.Vector3(21.129749, 145.337601, -17.043409) );
geometry.vertices.push( new THREE.Vector3(24.864260, 142.582504, -16.323040) );
geometry.vertices.push( new THREE.Vector3(21.939791, 142.921494, -17.633631) );
geometry.vertices.push( new THREE.Vector3(23.667030, 145.266693, -15.888519) );
geometry.vertices.push( new THREE.Vector3(14.285509, 159.071304, 7.005525) );
geometry.vertices.push( new THREE.Vector3(12.662850, 157.764404, 9.385200) );
geometry.vertices.push( new THREE.Vector3(16.422600, 156.475494, 9.455888) );
geometry.vertices.push( new THREE.Vector3(9.613612, 160.347000, 7.125825) );
geometry.vertices.push( new THREE.Vector3(12.439540, 161.009598, 5.509200) );
geometry.vertices.push( new THREE.Vector3(14.192740, 161.577698, 4.851600) );
geometry.vertices.push( new THREE.Vector3(10.608860, 161.586700, 3.741499) );
geometry.vertices.push( new THREE.Vector3(12.722810, 161.938904, 3.000409) );
geometry.vertices.push( new THREE.Vector3(7.137414, 159.701599, 8.380051) );
geometry.vertices.push( new THREE.Vector3(7.582201, 161.000305, 4.871438) );
geometry.vertices.push( new THREE.Vector3(5.701875, 160.608398, 5.648925) );
geometry.vertices.push( new THREE.Vector3(7.787888, 159.069397, 9.052125) );
geometry.vertices.push( new THREE.Vector3(32.799751, 145.196609, -11.874790) );
geometry.vertices.push( new THREE.Vector3(38.184750, 146.262802, -8.666250) );
geometry.vertices.push( new THREE.Vector3(35.933510, 146.995102, -9.718612) );
geometry.vertices.push( new THREE.Vector3(40.056751, 145.457199, -6.942113) );
geometry.vertices.push( new THREE.Vector3(-0.000721, 59.388382, -48.897381) );
geometry.vertices.push( new THREE.Vector3(-0.000462, 64.915504, -47.413502) );
geometry.vertices.push( new THREE.Vector3(-0.000891, 53.866512, -50.347130) );
geometry.vertices.push( new THREE.Vector3(5.172713, 70.229630, -45.652870) );
geometry.vertices.push( new THREE.Vector3(-0.000199, 70.362000, -45.941631) );
geometry.vertices.push( new THREE.Vector3(19.209599, 85.354111, -39.156750) );
geometry.vertices.push( new THREE.Vector3(23.537100, 89.961365, -36.705818) );
geometry.vertices.push( new THREE.Vector3(18.863440, 90.585762, -37.810127) );
geometry.vertices.push( new THREE.Vector3(36.613567, 150.194199, -7.295025) );
geometry.vertices.push( new THREE.Vector3(36.421421, 151.529602, -4.887450) );
geometry.vertices.push( new THREE.Vector3(37.300007, 150.532898, -0.882315) );
geometry.vertices.push( new THREE.Vector3(36.331280, 151.420502, -1.511726) );
geometry.vertices.push( new THREE.Vector3(6.056850, 26.680241, -56.173122) );
geometry.vertices.push( new THREE.Vector3(6.163312, 21.377029, -57.088501) );
geometry.vertices.push( new THREE.Vector3(5.953687, 31.869040, -55.141876) );
geometry.vertices.push( new THREE.Vector3(0.000102, 3.349834, -60.112881) );
geometry.vertices.push( new THREE.Vector3(6.637050, -2.081992, -60.438751) );
geometry.vertices.push( new THREE.Vector3(0.000186, -2.491597, -60.907501) );
geometry.vertices.push( new THREE.Vector3(6.522000, 3.622429, -59.603630) );
geometry.vertices.push( new THREE.Vector3(6.398062, 9.570001, -58.791382) );
geometry.vertices.push( new THREE.Vector3(12.535990, 15.321859, -56.895382) );
geometry.vertices.push( new THREE.Vector3(12.778009, 9.645824, -57.691502) );
geometry.vertices.push( new THREE.Vector3(6.277801, 15.580911, -57.957001) );
geometry.vertices.push( new THREE.Vector3(0.000000, 9.491285, -59.300240) );
geometry.vertices.push( new THREE.Vector3(-0.000146, 15.698780, -58.440739) );
geometry.vertices.push( new THREE.Vector3(18.755100, 15.015340, -55.648144) );
geometry.vertices.push( new THREE.Vector3(41.278500, 89.282631, -29.072481) );
geometry.vertices.push( new THREE.Vector3(44.713879, 112.320007, -19.241550) );
geometry.vertices.push( new THREE.Vector3(47.860500, 113.461494, -16.567539) );
geometry.vertices.push( new THREE.Vector3(30.941061, 138.158600, -15.976990) );
geometry.vertices.push( new THREE.Vector3(30.945709, 135.239197, -17.239241) );
geometry.vertices.push( new THREE.Vector3(37.058277, 136.131699, -14.144620) );
geometry.vertices.push( new THREE.Vector3(33.828602, 135.505905, -15.851850) );
geometry.vertices.push( new THREE.Vector3(39.901131, 136.552887, -12.628759) );
geometry.vertices.push( new THREE.Vector3(40.573872, 133.455002, -13.803599) );
geometry.vertices.push( new THREE.Vector3(42.550503, 136.871201, -11.208640) );
geometry.vertices.push( new THREE.Vector3(43.346630, 133.883591, -12.144000) );
geometry.vertices.push( new THREE.Vector3(22.000050, 109.611404, -31.273762) );
geometry.vertices.push( new THREE.Vector3(21.526199, 114.397499, -29.819471) );
geometry.vertices.push( new THREE.Vector3(5.843587, 159.529495, 8.888476) );
geometry.vertices.push( new THREE.Vector3(3.254940, 160.058609, 6.574501) );
geometry.vertices.push( new THREE.Vector3(3.840675, 159.506195, 8.356650) );
geometry.vertices.push( new THREE.Vector3(1.675785, 159.504395, 7.817025) );
geometry.vertices.push( new THREE.Vector3(1.618567, 159.766098, 7.064663) );
geometry.vertices.push( new THREE.Vector3(-0.000018, 159.362198, 7.265550) );
geometry.vertices.push( new THREE.Vector3(31.610060, 149.764893, -10.194409) );
geometry.vertices.push( new THREE.Vector3(26.557949, 150.625900, -12.641780) );
geometry.vertices.push( new THREE.Vector3(33.876263, 153.432800, -6.803849) );
geometry.vertices.push( new THREE.Vector3(23.125841, 160.585907, -9.188325) );
geometry.vertices.push( new THREE.Vector3(19.206869, 159.595901, -11.961411) );
geometry.vertices.push( new THREE.Vector3(20.912289, 161.629898, -8.597963) );
geometry.vertices.push( new THREE.Vector3(21.564751, 159.048706, -11.302390) );
geometry.vertices.push( new THREE.Vector3(20.375469, 156.391098, -13.590039) );
geometry.vertices.push( new THREE.Vector3(22.937889, 157.362701, -11.728271) );
geometry.vertices.push( new THREE.Vector3(15.352011, 148.136200, -18.126820) );
geometry.vertices.push( new THREE.Vector3(12.855230, 146.381607, -19.673889) );
geometry.vertices.push( new THREE.Vector3(12.591299, 148.375900, -18.993900) );
geometry.vertices.push( new THREE.Vector3(14.461570, 152.543991, -16.650681) );
geometry.vertices.push( new THREE.Vector3(17.185390, 152.555603, -15.728701) );
geometry.vertices.push( new THREE.Vector3(16.552050, 156.355499, -14.407800) );
geometry.vertices.push( new THREE.Vector3(19.143339, 152.701904, -15.047850) );
geometry.vertices.push( new THREE.Vector3(14.112531, 159.936005, -12.745090) );
geometry.vertices.push( new THREE.Vector3(17.490261, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(11.148340, 155.937698, -16.521519) );
geometry.vertices.push( new THREE.Vector3(11.737730, 152.532394, -17.572611) );
geometry.vertices.push( new THREE.Vector3(5.404913, 155.473907, -17.428911) );
geometry.vertices.push( new THREE.Vector3(8.775039, 152.583389, -18.111000) );
geometry.vertices.push( new THREE.Vector3(5.812388, 152.634796, -18.649391) );
geometry.vertices.push( new THREE.Vector3(3.247170, 147.480408, -21.078560) );
geometry.vertices.push( new THREE.Vector3(6.318037, 148.774094, -20.238819) );
geometry.vertices.push( new THREE.Vector3(3.159038, 149.128098, -20.373531) );
geometry.vertices.push( new THREE.Vector3(2.906201, 152.602097, -18.537220) );
geometry.vertices.push( new THREE.Vector3(0.000030, 154.766998, -16.788830) );
geometry.vertices.push( new THREE.Vector3(4.216162, 157.786102, -15.638290) );
geometry.vertices.push( new THREE.Vector3(0.000025, 157.492493, -14.049641) );
geometry.vertices.push( new THREE.Vector3(0.000030, 152.569107, -18.425060) );
geometry.vertices.push( new THREE.Vector3(0.000030, 147.785599, -21.351709) );
geometry.vertices.push( new THREE.Vector3(0.000037, 149.347900, -20.575731) );
geometry.vertices.push( new THREE.Vector3(0.000009, 144.198792, -22.791151) );
geometry.vertices.push( new THREE.Vector3(0.000022, 146.222992, -22.019510) );
geometry.vertices.push( new THREE.Vector3(9.652426, 158.757812, -14.968760) );
geometry.vertices.push( new THREE.Vector3(32.765209, 155.511002, 1.061186) );
geometry.vertices.push( new THREE.Vector3(33.401402, 154.528107, -2.722151) );
geometry.vertices.push( new THREE.Vector3(31.504122, 158.029495, 0.858866) );
geometry.vertices.push( new THREE.Vector3(18.058430, 163.145599, -0.532808) );
geometry.vertices.push( new THREE.Vector3(19.928629, 163.395401, 0.193553) );
geometry.vertices.push( new THREE.Vector3(19.166140, 162.663696, -7.785111) );
geometry.vertices.push( new THREE.Vector3(21.409540, 162.988495, -5.815762) );
geometry.vertices.push( new THREE.Vector3(19.358292, 163.138504, -5.482463) );
geometry.vertices.push( new THREE.Vector3(20.806200, 163.977402, -2.666138) );
geometry.vertices.push( new THREE.Vector3(19.036419, 163.564896, -2.789096) );
geometry.vertices.push( new THREE.Vector3(22.524969, 163.866394, -2.654910) );
geometry.vertices.push( new THREE.Vector3(22.390310, 163.054092, 0.502530) );
geometry.vertices.push( new THREE.Vector3(25.482151, 163.114090, -3.136819) );
geometry.vertices.push( new THREE.Vector3(25.347450, 162.584610, 0.898950) );
geometry.vertices.push( new THREE.Vector3(21.911440, 162.228409, 3.273484) );
geometry.vertices.push( new THREE.Vector3(24.336941, 161.289001, 4.172812) );
geometry.vertices.push( new THREE.Vector3(20.951180, 160.879898, 5.987625) );
geometry.vertices.push( new THREE.Vector3(23.091860, 159.733505, 6.484763) );
geometry.vertices.push( new THREE.Vector3(26.938200, 154.911804, 7.780313) );
geometry.vertices.push( new THREE.Vector3(26.501699, 154.437012, 8.011650) );
geometry.vertices.push( new THREE.Vector3(28.206640, 154.158707, 7.371563) );
geometry.vertices.push( new THREE.Vector3(29.398272, 154.540100, 6.680175) );
geometry.vertices.push( new THREE.Vector3(28.400438, 155.795593, 6.628725) );
geometry.vertices.push( new THREE.Vector3(30.345600, 157.117905, 4.823662) );
geometry.vertices.push( new THREE.Vector3(30.039490, 153.768005, 6.645075) );
geometry.vertices.push( new THREE.Vector3(24.605551, 154.658600, 8.590838) );
geometry.vertices.push( new THREE.Vector3(22.291050, 155.027603, 9.050512) );
geometry.vertices.push( new THREE.Vector3(32.863503, 152.957199, 4.659600) );
geometry.vertices.push( new THREE.Vector3(34.040359, 153.057800, 1.629926) );
geometry.vertices.push( new THREE.Vector3(31.439812, 155.221909, 4.668412) );
geometry.vertices.push( new THREE.Vector3(24.651711, 162.031494, -6.757613) );
geometry.vertices.push( new THREE.Vector3(35.310410, 152.422089, -2.046315) );
geometry.vertices.push( new THREE.Vector3(35.060207, 151.774094, 2.115398) );
geometry.vertices.push( new THREE.Vector3(34.528610, 152.398102, 1.860322) );
geometry.vertices.push( new THREE.Vector3(29.989651, 131.849304, -19.166821) );
geometry.vertices.push( new THREE.Vector3(24.977619, 134.972305, -20.184000) );
geometry.vertices.push( new THREE.Vector3(26.249319, 131.204193, -21.241871) );
geometry.vertices.push( new THREE.Vector3(31.057009, 127.090897, -20.866350) );
geometry.vertices.push( new THREE.Vector3(27.353209, 126.937500, -22.690239) );
geometry.vertices.push( new THREE.Vector3(21.608021, 135.227600, -21.523870) );
geometry.vertices.push( new THREE.Vector3(22.639950, 131.409393, -22.738310) );
geometry.vertices.push( new THREE.Vector3(23.592529, 127.267899, -24.200439) );
geometry.vertices.push( new THREE.Vector3(18.138861, 135.652893, -22.493700) );
geometry.vertices.push( new THREE.Vector3(19.730400, 127.770699, -25.243912) );
geometry.vertices.push( new THREE.Vector3(18.969069, 131.836105, -23.788500) );
geometry.vertices.push( new THREE.Vector3(16.779150, 119.736397, -29.019039) );
geometry.vertices.push( new THREE.Vector3(17.199560, 115.137009, -30.573792) );
geometry.vertices.push( new THREE.Vector3(9.454687, 148.574997, -19.616360) );
geometry.vertices.push( new THREE.Vector3(19.121250, 143.530899, -18.720150) );
geometry.vertices.push( new THREE.Vector3(22.371670, 148.816895, -15.328010) );
geometry.vertices.push( new THREE.Vector3(24.464809, 149.721390, -13.984910) );
geometry.vertices.push( new THREE.Vector3(24.936520, 154.485001, -12.177370) );
geometry.vertices.push( new THREE.Vector3(23.018890, 153.666397, -13.272150) );
geometry.vertices.push( new THREE.Vector3(21.101290, 152.847809, -14.366961) );
geometry.vertices.push( new THREE.Vector3(20.242199, 148.356705, -16.293900) );
geometry.vertices.push( new THREE.Vector3(18.596960, 145.772598, -17.965950) );
geometry.vertices.push( new THREE.Vector3(18.081791, 148.051910, -17.208750) );
geometry.vertices.push( new THREE.Vector3(15.726081, 146.077103, -18.819941) );
geometry.vertices.push( new THREE.Vector3(16.100140, 144.017990, -19.513010) );
geometry.vertices.push( new THREE.Vector3(-0.000326, 21.608921, -57.555000) );
geometry.vertices.push( new THREE.Vector3(-0.000535, 26.858440, -56.662487) );
geometry.vertices.push( new THREE.Vector3(-0.000707, 31.956970, -55.650002) );
geometry.vertices.push( new THREE.Vector3(5.849175, 37.322021, -53.925003) );
geometry.vertices.push( new THREE.Vector3(-0.000778, 37.414310, -54.403877) );
geometry.vertices.push( new THREE.Vector3(28.870911, 35.625710, -48.587997) );
geometry.vertices.push( new THREE.Vector3(29.409489, 30.169651, -49.605381) );
geometry.vertices.push( new THREE.Vector3(24.030750, 25.379478, -52.378880) );
geometry.vertices.push( new THREE.Vector3(24.471941, 19.989340, -53.326118) );
geometry.vertices.push( new THREE.Vector3(24.933081, 14.601191, -54.160881) );
geometry.vertices.push( new THREE.Vector3(19.121738, 9.557702, -56.428890) );
geometry.vertices.push( new THREE.Vector3(25.420689, 9.271575, -54.947250) );
geometry.vertices.push( new THREE.Vector3(31.666279, 8.753512, -53.188503) );
geometry.vertices.push( new THREE.Vector3(25.941299, 4.056976, -55.749001) );
geometry.vertices.push( new THREE.Vector3(26.507250, -0.959376, -56.628754) );
geometry.vertices.push( new THREE.Vector3(32.302200, 3.606676, -53.997749) );
geometry.vertices.push( new THREE.Vector3(32.987698, -1.361177, -54.868500) );
geometry.vertices.push( new THREE.Vector3(40.245750, -6.863812, -53.628368) );
geometry.vertices.push( new THREE.Vector3(33.734921, -6.089962, -55.863369) );
geometry.vertices.push( new THREE.Vector3(27.130730, -5.694300, -57.648380) );
geometry.vertices.push( new THREE.Vector3(20.342211, -5.934262, -59.184750) );
geometry.vertices.push( new THREE.Vector3(13.499020, -6.570412, -60.429371) );
geometry.vertices.push( new THREE.Vector3(34.512978, -10.699240, -56.920116) );
geometry.vertices.push( new THREE.Vector3(27.783001, -10.288540, -58.737366) );
geometry.vertices.push( new THREE.Vector3(20.774891, -10.739440, -60.319130) );
geometry.vertices.push( new THREE.Vector3(13.711010, -11.603810, -61.539757) );
geometry.vertices.push( new THREE.Vector3(6.813863, -12.433460, -62.275513) );
geometry.vertices.push( new THREE.Vector3(6.730800, -7.363461, -61.340248) );
geometry.vertices.push( new THREE.Vector3(0.000276, -7.798987, -61.712246) );
geometry.vertices.push( new THREE.Vector3(0.000368, -12.839360, -62.522251) );
geometry.vertices.push( new THREE.Vector3(1.841415, 179.225189, 9.704288) );
geometry.vertices.push( new THREE.Vector3(1.657639, 179.124405, 9.807825) );
geometry.vertices.push( new THREE.Vector3(2.835750, 179.182510, 8.874900) );
geometry.vertices.push( new THREE.Vector3(-4.552200, 179.287094, 9.371550) );
geometry.vertices.push( new THREE.Vector3(-4.387537, 179.511398, 9.719213) );
geometry.vertices.push( new THREE.Vector3(-4.618350, 179.315598, 9.298275) );
geometry.vertices.push( new THREE.Vector3(-4.459913, 179.705292, 9.592875) );
geometry.vertices.push( new THREE.Vector3(-4.387537, 179.511398, 9.719213) );
geometry.vertices.push( new THREE.Vector3(-4.024575, 179.968903, 9.964275) );
geometry.vertices.push( new THREE.Vector3(-4.459913, 179.705292, 9.592875) );
geometry.vertices.push( new THREE.Vector3(-4.015875, 179.833496, 10.039240) );
geometry.vertices.push( new THREE.Vector3(-3.522769, 179.989899, 10.309540) );
geometry.vertices.push( new THREE.Vector3(-3.527741, 179.912201, 10.363950) );
geometry.vertices.push( new THREE.Vector3(-3.527741, 179.912201, 10.363950) );
geometry.vertices.push( new THREE.Vector3(-4.015875, 179.833496, 10.039240) );
geometry.vertices.push( new THREE.Vector3(-4.012725, 179.731506, 10.110450) );
geometry.vertices.push( new THREE.Vector3(-3.524490, 179.767090, 10.359449) );
geometry.vertices.push( new THREE.Vector3(-3.983175, 179.606995, 10.150610) );
geometry.vertices.push( new THREE.Vector3(-4.293075, 179.337799, 9.790726) );
geometry.vertices.push( new THREE.Vector3(-3.503932, 180.180801, 10.221681) );
geometry.vertices.push( new THREE.Vector3(-3.097841, 179.788895, 10.406509) );
geometry.vertices.push( new THREE.Vector3(-3.093154, 179.960999, 10.424100) );
geometry.vertices.push( new THREE.Vector3(-3.522769, 179.989899, 10.309540) );
geometry.vertices.push( new THREE.Vector3(-3.093154, 179.960999, 10.424100) );
geometry.vertices.push( new THREE.Vector3(-3.104344, 180.041199, 10.403440) );
geometry.vertices.push( new THREE.Vector3(-3.503932, 180.180801, 10.221681) );
geometry.vertices.push( new THREE.Vector3(-3.503932, 180.180801, 10.221681) );
geometry.vertices.push( new THREE.Vector3(-3.065906, 180.240005, 10.330570) );
geometry.vertices.push( new THREE.Vector3(-2.485980, 180.012802, 10.184361) );
geometry.vertices.push( new THREE.Vector3(-2.479095, 180.088501, 10.240689) );
geometry.vertices.push( new THREE.Vector3(-1.899934, 179.777603, 9.767850) );
geometry.vertices.push( new THREE.Vector3(-1.846961, 179.770096, 9.841387) );
geometry.vertices.push( new THREE.Vector3(-3.398944, 179.688400, 10.143560) );
geometry.vertices.push( new THREE.Vector3(-3.057300, 179.691696, 10.139060) );
geometry.vertices.push( new THREE.Vector3(-1.530083, 179.041901, 9.992962) );
geometry.vertices.push( new THREE.Vector3(-1.595295, 178.861496, 10.034249) );
geometry.vertices.push( new THREE.Vector3(-1.341716, 179.024307, 10.009500) );
geometry.vertices.push( new THREE.Vector3(-1.479120, 179.142410, 9.957561) );
geometry.vertices.push( new THREE.Vector3(-1.318766, 179.174988, 9.891412) );
geometry.vertices.push( new THREE.Vector3(-1.703152, 179.369293, 9.867899) );
geometry.vertices.push( new THREE.Vector3(-1.559917, 179.517395, 9.662513) );
geometry.vertices.push( new THREE.Vector3(-1.983026, 179.629105, 9.927187) );
geometry.vertices.push( new THREE.Vector3(-2.485980, 180.012802, 10.184361) );
geometry.vertices.push( new THREE.Vector3(-1.983026, 179.629105, 9.927187) );
geometry.vertices.push( new THREE.Vector3(-1.899934, 179.777603, 9.767850) );
geometry.vertices.push( new THREE.Vector3(-2.507494, 179.842102, 10.279240) );
geometry.vertices.push( new THREE.Vector3(-2.544881, 179.686493, 10.295890) );
geometry.vertices.push( new THREE.Vector3(-2.028540, 179.455109, 9.977662) );
geometry.vertices.push( new THREE.Vector3(-1.768174, 179.245102, 9.967424) );
geometry.vertices.push( new THREE.Vector3(-1.605337, 179.130402, 9.972787) );
geometry.vertices.push( new THREE.Vector3(-2.541724, 179.612991, 10.056940) );
geometry.vertices.push( new THREE.Vector3(-2.130855, 179.434891, 9.728287) );
geometry.vertices.push( new THREE.Vector3(-1.841419, 179.225189, 9.704288) );
geometry.vertices.push( new THREE.Vector3(-1.657639, 179.124405, 9.807824) );
geometry.vertices.push( new THREE.Vector3(-1.588125, 179.056503, 9.948600) );
geometry.vertices.push( new THREE.Vector3(-2.758301, 178.682999, 10.298550) );
geometry.vertices.push( new THREE.Vector3(-3.290130, 178.309494, 10.087131) );
geometry.vertices.push( new THREE.Vector3(-2.754000, 178.425003, 10.181890) );
geometry.vertices.push( new THREE.Vector3(-2.354123, 178.811600, 10.260190) );
geometry.vertices.push( new THREE.Vector3(-2.393708, 178.992706, 10.243270) );
geometry.vertices.push( new THREE.Vector3(-1.996796, 178.942093, 10.134940) );
geometry.vertices.push( new THREE.Vector3(-1.983698, 179.090302, 10.066010) );
geometry.vertices.push( new THREE.Vector3(-1.705065, 178.996902, 10.006840) );
geometry.vertices.push( new THREE.Vector3(-1.731266, 179.060989, 9.933750) );
geometry.vertices.push( new THREE.Vector3(-1.830900, 179.115402, 9.752475) );
geometry.vertices.push( new THREE.Vector3(-2.758301, 178.682999, 10.298550) );
geometry.vertices.push( new THREE.Vector3(-2.393708, 178.992706, 10.243270) );
geometry.vertices.push( new THREE.Vector3(-2.813089, 178.945892, 10.346660) );
geometry.vertices.push( new THREE.Vector3(-2.036194, 179.112000, 9.892349) );
geometry.vertices.push( new THREE.Vector3(-2.411779, 179.004395, 9.998402) );
geometry.vertices.push( new THREE.Vector3(-2.393708, 178.992706, 10.243270) );
geometry.vertices.push( new THREE.Vector3(-2.801329, 178.955597, 10.125680) );
geometry.vertices.push( new THREE.Vector3(-3.207038, 178.926392, 10.091929) );
geometry.vertices.push( new THREE.Vector3(-4.330350, 179.140503, 9.449550) );
geometry.vertices.push( new THREE.Vector3(-3.774450, 179.004700, 9.596325) );
geometry.vertices.push( new THREE.Vector3(-3.993225, 179.093201, 9.230213) );
geometry.vertices.push( new THREE.Vector3(-4.125638, 179.056900, 9.924000) );
geometry.vertices.push( new THREE.Vector3(-3.535965, 178.972107, 9.910050) );
geometry.vertices.push( new THREE.Vector3(-3.777225, 178.993912, 10.223590) );
geometry.vertices.push( new THREE.Vector3(-3.297491, 178.942505, 10.371300) );
geometry.vertices.push( new THREE.Vector3(-3.332681, 178.618500, 10.313101) );
geometry.vertices.push( new THREE.Vector3(-3.807412, 178.408890, 9.873713) );
geometry.vertices.push( new THREE.Vector3(-3.289174, 178.050003, 10.081990) );
geometry.vertices.push( new THREE.Vector3(-3.833137, 178.684097, 10.164670) );
geometry.vertices.push( new THREE.Vector3(-4.181663, 178.783493, 9.846187) );
geometry.vertices.push( new THREE.Vector3(-4.421100, 178.992004, 9.376875) );
geometry.vertices.push( new THREE.Vector3(-4.408275, 179.176910, 9.257063) );
geometry.vertices.push( new THREE.Vector3(-3.943125, 178.141495, 9.843488) );
geometry.vertices.push( new THREE.Vector3(-4.204987, 178.574295, 9.659326) );
geometry.vertices.push( new THREE.Vector3(-4.429987, 178.908005, 9.255825) );
geometry.vertices.push( new THREE.Vector3(-4.563487, 179.048599, 9.071850) );
geometry.vertices.push( new THREE.Vector3(-4.728713, 178.636505, 9.203325) );
geometry.vertices.push( new THREE.Vector3(-4.998525, 178.860001, 8.925674) );
geometry.vertices.push( new THREE.Vector3(-4.812075, 179.243607, 9.018712) );
geometry.vertices.push( new THREE.Vector3(-5.245613, 179.190796, 8.742825) );
geometry.vertices.push( new THREE.Vector3(-4.394025, 178.278000, 9.560287) );
geometry.vertices.push( new THREE.Vector3(-4.377600, 179.431503, 9.764812) );
geometry.vertices.push( new THREE.Vector3(-4.418438, 179.227905, 9.453375) );
geometry.vertices.push( new THREE.Vector3(-4.552200, 179.287094, 9.371550) );
geometry.vertices.push( new THREE.Vector3(-4.616925, 179.178406, 9.155437) );
geometry.vertices.push( new THREE.Vector3(-4.618350, 179.315598, 9.298275) );
geometry.vertices.push( new THREE.Vector3(-5.009063, 179.346802, 9.267673) );
geometry.vertices.push( new THREE.Vector3(-4.563000, 179.503906, 9.818174) );
geometry.vertices.push( new THREE.Vector3(-4.429613, 179.522598, 9.720824) );
geometry.vertices.push( new THREE.Vector3(-4.160812, 179.710495, 10.282880) );
geometry.vertices.push( new THREE.Vector3(-4.043512, 179.742004, 10.127100) );
geometry.vertices.push( new THREE.Vector3(-3.534626, 179.960297, 10.392449) );
geometry.vertices.push( new THREE.Vector3(-3.587501, 179.943802, 10.579650) );
geometry.vertices.push( new THREE.Vector3(-3.092010, 179.995895, 10.497640) );
geometry.vertices.push( new THREE.Vector3(-3.587501, 179.943802, 10.579650) );
geometry.vertices.push( new THREE.Vector3(-3.534626, 179.960297, 10.392449) );
geometry.vertices.push( new THREE.Vector3(-3.085699, 179.984604, 10.696690) );
geometry.vertices.push( new THREE.Vector3(-2.452897, 179.947495, 10.594760) );
geometry.vertices.push( new THREE.Vector3(-2.432723, 179.988403, 10.346850) );
geometry.vertices.push( new THREE.Vector3(-1.839315, 179.769806, 10.438160) );
geometry.vertices.push( new THREE.Vector3(-1.827649, 179.747604, 9.973650) );
geometry.vertices.push( new THREE.Vector3(-1.427678, 179.620895, 10.257151) );
geometry.vertices.push( new THREE.Vector3(-1.531328, 179.539902, 9.884625) );
geometry.vertices.push( new THREE.Vector3(-1.846961, 179.770096, 9.841387) );
geometry.vertices.push( new THREE.Vector3(-1.846961, 179.770096, 9.841387) );
geometry.vertices.push( new THREE.Vector3(-1.159084, 179.300598, 10.120880) );
geometry.vertices.push( new THREE.Vector3(-1.104007, 179.035492, 10.159540) );
geometry.vertices.push( new THREE.Vector3(-1.353383, 178.709305, 10.147840) );
geometry.vertices.push( new THREE.Vector3(-1.941817, 178.727203, 10.118890) );
geometry.vertices.push( new THREE.Vector3(-1.832332, 178.520294, 10.122340) );
geometry.vertices.push( new THREE.Vector3(-2.326965, 178.573898, 10.161150) );
geometry.vertices.push( new THREE.Vector3(-2.288336, 178.299408, 10.168870) );
geometry.vertices.push( new THREE.Vector3(-2.747689, 178.149399, 10.151100) );
geometry.vertices.push( new THREE.Vector3(-3.289174, 178.050003, 10.081990) );
geometry.vertices.push( new THREE.Vector3(-3.774450, 179.004700, 9.596325) );
geometry.vertices.push( new THREE.Vector3(-3.535965, 178.972107, 9.910050) );
geometry.vertices.push( new THREE.Vector3(-2.835750, 179.182510, 8.874900) );
geometry.vertices.push( new THREE.Vector3(-3.207038, 178.926392, 10.091929) );
geometry.vertices.push( new THREE.Vector3(-2.801329, 178.955597, 10.125680) );
geometry.vertices.push( new THREE.Vector3(-2.411779, 179.004395, 9.998402) );
geometry.vertices.push( new THREE.Vector3(-2.036194, 179.112000, 9.892349) );
geometry.vertices.push( new THREE.Vector3(-1.830900, 179.115402, 9.752475) );
geometry.vertices.push( new THREE.Vector3(-1.657639, 179.124405, 9.807824) );
geometry.vertices.push( new THREE.Vector3(-2.130855, 179.434891, 9.728287) );
geometry.vertices.push( new THREE.Vector3(-1.841419, 179.225189, 9.704288) );
geometry.vertices.push( new THREE.Vector3(-2.541724, 179.612991, 10.056940) );
geometry.vertices.push( new THREE.Vector3(-3.057300, 179.691696, 10.139060) );
geometry.vertices.push( new THREE.Vector3(-3.398944, 179.688400, 10.143560) );
geometry.vertices.push( new THREE.Vector3(-3.788288, 179.557098, 9.891675) );
geometry.vertices.push( new THREE.Vector3(-4.075650, 179.306992, 9.481012) );
geometry.vertices.push( new THREE.Vector3(-4.101075, 179.262802, 9.294863) );
geometry.vertices.push( new THREE.Vector3(-4.125562, 179.214401, 9.105037) );
geometry.vertices.push( new THREE.Vector3(-3.993225, 179.093201, 9.230213) );
geometry.vertices.push( new THREE.Vector3(7.569750, 160.927109, 4.856625) );
geometry.vertices.push( new THREE.Vector3(10.608860, 161.586700, 3.741502) );
geometry.vertices.push( new THREE.Vector3(7.582201, 161.000305, 4.871438) );
geometry.vertices.push( new THREE.Vector3(10.591390, 161.513596, 3.728921) );
geometry.vertices.push( new THREE.Vector3(-10.591431, 161.513596, 3.728906) );
geometry.vertices.push( new THREE.Vector3(-7.582201, 161.000305, 4.871438) );
geometry.vertices.push( new THREE.Vector3(-10.608860, 161.586700, 3.741484) );
geometry.vertices.push( new THREE.Vector3(-7.569787, 160.927109, 4.856588) );
geometry.vertices.push( new THREE.Vector3(-5.692538, 160.535294, 5.632500) );
geometry.vertices.push( new THREE.Vector3(-3.254966, 160.058609, 6.574501) );
geometry.vertices.push( new THREE.Vector3(-5.701875, 160.608398, 5.648925) );
geometry.vertices.push( new THREE.Vector3(-3.249630, 159.985489, 6.556275) );
geometry.vertices.push( new THREE.Vector3(18.028719, 163.072510, -0.536839) );
geometry.vertices.push( new THREE.Vector3(19.036390, 163.564896, -2.789096) );
geometry.vertices.push( new THREE.Vector3(18.058430, 163.145599, -0.532804) );
geometry.vertices.push( new THREE.Vector3(19.005110, 163.491699, -2.788620) );
geometry.vertices.push( new THREE.Vector3(-1.618597, 159.766098, 7.064663) );
geometry.vertices.push( new THREE.Vector3(-1.615946, 159.693008, 7.045425) );
geometry.vertices.push( new THREE.Vector3(1.615894, 159.693008, 7.045425) );
geometry.vertices.push( new THREE.Vector3(3.254940, 160.058609, 6.574501) );
geometry.vertices.push( new THREE.Vector3(1.618567, 159.766098, 7.064663) );
geometry.vertices.push( new THREE.Vector3(3.249577, 159.985489, 6.556275) );
geometry.vertices.push( new THREE.Vector3(5.701875, 160.608398, 5.648925) );
geometry.vertices.push( new THREE.Vector3(5.692462, 160.535294, 5.632537) );
geometry.vertices.push( new THREE.Vector3(-19.005110, 163.491699, -2.788620) );
geometry.vertices.push( new THREE.Vector3(-18.058430, 163.145599, -0.532804) );
geometry.vertices.push( new THREE.Vector3(-19.036390, 163.564896, -2.789092) );
geometry.vertices.push( new THREE.Vector3(-18.028759, 163.072510, -0.536839) );
geometry.vertices.push( new THREE.Vector3(-0.646297, 173.356491, 10.804760) );
geometry.vertices.push( new THREE.Vector3(0.000032, 174.635193, 10.802509) );
geometry.vertices.push( new THREE.Vector3(0.000032, 173.391693, 10.992150) );
geometry.vertices.push( new THREE.Vector3(-0.824674, 174.634094, 10.634330) );
geometry.vertices.push( new THREE.Vector3(-2.035406, 173.330200, 8.795062) );
geometry.vertices.push( new THREE.Vector3(-1.832659, 174.609802, 9.612263) );
geometry.vertices.push( new THREE.Vector3(-1.861252, 173.320908, 9.475125) );
geometry.vertices.push( new THREE.Vector3(-1.389450, 173.323898, 10.168159) );
geometry.vertices.push( new THREE.Vector3(-1.263724, 173.011505, 10.559179) );
geometry.vertices.push( new THREE.Vector3(-1.072583, 173.010010, 10.782560) );
geometry.vertices.push( new THREE.Vector3(-1.292355, 172.871307, 10.774950) );
geometry.vertices.push( new THREE.Vector3(-1.134960, 172.939499, 10.866671) );
geometry.vertices.push( new THREE.Vector3(-1.155157, 172.946198, 10.902640) );
geometry.vertices.push( new THREE.Vector3(-0.945938, 172.833008, 11.045771) );
geometry.vertices.push( new THREE.Vector3(-2.150100, 174.500305, 8.534513) );
geometry.vertices.push( new THREE.Vector3(-1.164067, 173.088699, 10.985100) );
geometry.vertices.push( new THREE.Vector3(-1.327492, 172.893402, 10.819580) );
geometry.vertices.push( new THREE.Vector3(-1.453939, 172.930893, 10.748440) );
geometry.vertices.push( new THREE.Vector3(-1.411339, 172.897507, 10.692639) );
geometry.vertices.push( new THREE.Vector3(-1.494915, 173.025406, 10.597310) );
geometry.vertices.push( new THREE.Vector3(-1.322467, 172.913605, 10.691660) );
geometry.vertices.push( new THREE.Vector3(-0.985815, 173.340408, 11.183700) );
geometry.vertices.push( new THREE.Vector3(-1.167472, 173.328705, 11.028750) );
geometry.vertices.push( new THREE.Vector3(-0.732686, 173.341095, 11.280190) );
geometry.vertices.push( new THREE.Vector3(-1.011300, 173.851089, 11.236050) );
geometry.vertices.push( new THREE.Vector3(-1.123710, 173.845505, 11.140350) );
geometry.vertices.push( new THREE.Vector3(-1.433104, 173.323898, 10.924160) );
geometry.vertices.push( new THREE.Vector3(-1.361996, 172.990891, 10.877770) );
geometry.vertices.push( new THREE.Vector3(-1.464866, 172.985992, 10.771279) );
geometry.vertices.push( new THREE.Vector3(-1.553981, 173.076706, 10.659860) );
geometry.vertices.push( new THREE.Vector3(-1.768639, 174.624390, 10.750390) );
geometry.vertices.push( new THREE.Vector3(-1.052779, 174.682495, 11.321290) );
geometry.vertices.push( new THREE.Vector3(-0.854475, 173.851501, 11.295830) );
geometry.vertices.push( new THREE.Vector3(-0.443145, 174.673904, 11.495740) );
geometry.vertices.push( new THREE.Vector3(-1.576279, 173.308899, 10.708200) );
geometry.vertices.push( new THREE.Vector3(-1.805779, 173.812103, 10.609610) );
geometry.vertices.push( new THREE.Vector3(-1.828260, 173.320496, 10.524370) );
geometry.vertices.push( new THREE.Vector3(-1.649014, 173.806503, 10.724170) );
geometry.vertices.push( new THREE.Vector3(-1.559509, 173.813599, 10.858690) );
geometry.vertices.push( new THREE.Vector3(-2.135940, 172.909500, 9.846750) );
geometry.vertices.push( new THREE.Vector3(-2.409356, 173.340408, 9.559387) );
geometry.vertices.push( new THREE.Vector3(-2.180280, 172.977402, 9.554851) );
geometry.vertices.push( new THREE.Vector3(-2.267381, 173.311905, 9.898426) );
geometry.vertices.push( new THREE.Vector3(-1.902814, 173.025406, 10.179530) );
geometry.vertices.push( new THREE.Vector3(-1.993129, 173.351303, 10.219650) );
geometry.vertices.push( new THREE.Vector3(-1.860270, 172.967300, 10.366540) );
geometry.vertices.push( new THREE.Vector3(-1.650829, 172.986404, 10.592440) );
geometry.vertices.push( new THREE.Vector3(-1.544306, 172.944397, 10.443410) );
geometry.vertices.push( new THREE.Vector3(-1.805779, 173.812103, 10.609610) );
geometry.vertices.push( new THREE.Vector3(-1.993129, 173.351303, 10.219650) );
geometry.vertices.push( new THREE.Vector3(-1.828260, 173.320496, 10.524370) );
geometry.vertices.push( new THREE.Vector3(-2.088911, 173.836502, 10.208210) );
geometry.vertices.push( new THREE.Vector3(-2.370926, 173.806091, 9.821287) );
geometry.vertices.push( new THREE.Vector3(-2.458942, 173.820404, 9.609900) );
geometry.vertices.push( new THREE.Vector3(-2.546006, 173.319702, 9.186825) );
geometry.vertices.push( new THREE.Vector3(-2.582378, 173.784393, 8.764049) );
geometry.vertices.push( new THREE.Vector3(-2.611267, 173.773102, 9.005925) );
geometry.vertices.push( new THREE.Vector3(-2.722687, 174.547104, 8.697075) );
geometry.vertices.push( new THREE.Vector3(-2.501070, 173.342590, 8.802862) );
geometry.vertices.push( new THREE.Vector3(-2.541653, 174.621002, 9.694088) );
geometry.vertices.push( new THREE.Vector3(-2.247964, 174.642700, 10.189280) );
geometry.vertices.push( new THREE.Vector3(-2.005421, 172.976990, 9.528337) );
geometry.vertices.push( new THREE.Vector3(-2.044725, 173.017090, 9.036450) );
geometry.vertices.push( new THREE.Vector3(-1.932004, 173.041901, 9.493950) );
geometry.vertices.push( new THREE.Vector3(-2.135580, 172.921097, 9.244237) );
geometry.vertices.push( new THREE.Vector3(-2.237527, 172.939102, 9.000187) );
geometry.vertices.push( new THREE.Vector3(-2.434991, 172.970993, 9.019087) );
geometry.vertices.push( new THREE.Vector3(-2.314054, 173.087601, 8.817675) );
geometry.vertices.push( new THREE.Vector3(-2.351115, 172.939896, 9.317175) );
geometry.vertices.push( new THREE.Vector3(-1.691059, 172.925995, 10.233110) );
geometry.vertices.push( new THREE.Vector3(-1.795796, 172.967987, 10.086110) );
geometry.vertices.push( new THREE.Vector3(-1.891237, 172.924103, 9.801900) );
geometry.vertices.push( new THREE.Vector3(-1.444553, 173.001694, 10.296790) );
geometry.vertices.push( new THREE.Vector3(-1.590885, 172.979996, 10.117460) );
geometry.vertices.push( new THREE.Vector3(-1.695206, 173.017899, 10.001400) );
geometry.vertices.push( new THREE.Vector3(-1.394321, 173.110901, 10.463890) );
geometry.vertices.push( new THREE.Vector3(1.605334, 179.130402, 9.972787) );
geometry.vertices.push( new THREE.Vector3(1.703152, 179.369293, 9.867899) );
geometry.vertices.push( new THREE.Vector3(1.479116, 179.142410, 9.957561) );
geometry.vertices.push( new THREE.Vector3(2.028540, 179.455109, 9.977663) );
geometry.vertices.push( new THREE.Vector3(1.983026, 179.629105, 9.927188) );
geometry.vertices.push( new THREE.Vector3(1.768174, 179.245102, 9.967424) );
geometry.vertices.push( new THREE.Vector3(1.657639, 179.124405, 9.807825) );
geometry.vertices.push( new THREE.Vector3(1.588121, 179.056503, 9.948601) );
geometry.vertices.push( new THREE.Vector3(1.530083, 179.041901, 9.992962) );
geometry.vertices.push( new THREE.Vector3(1.341712, 179.024307, 10.009500) );
geometry.vertices.push( new THREE.Vector3(1.318766, 179.174988, 9.891412) );
geometry.vertices.push( new THREE.Vector3(1.731263, 179.060989, 9.933750) );
geometry.vertices.push( new THREE.Vector3(1.830896, 179.115402, 9.752475) );
geometry.vertices.push( new THREE.Vector3(1.705065, 178.996902, 10.006801) );
geometry.vertices.push( new THREE.Vector3(1.595295, 178.861908, 10.034249) );
geometry.vertices.push( new THREE.Vector3(1.353379, 178.709305, 10.147840) );
geometry.vertices.push( new THREE.Vector3(1.104007, 179.035492, 10.159540) );
geometry.vertices.push( new THREE.Vector3(1.159084, 179.300598, 10.120880) );
geometry.vertices.push( new THREE.Vector3(1.941814, 178.727203, 10.118890) );
geometry.vertices.push( new THREE.Vector3(1.832332, 178.520294, 10.122340) );
geometry.vertices.push( new THREE.Vector3(2.326965, 178.573898, 10.161150) );
geometry.vertices.push( new THREE.Vector3(2.288333, 178.299408, 10.168870) );
geometry.vertices.push( new THREE.Vector3(2.747685, 178.149399, 10.151100) );
geometry.vertices.push( new THREE.Vector3(1.996796, 178.942093, 10.134940) );
geometry.vertices.push( new THREE.Vector3(2.354119, 178.811600, 10.260190) );
geometry.vertices.push( new THREE.Vector3(2.753996, 178.425003, 10.181890) );
geometry.vertices.push( new THREE.Vector3(3.289170, 178.050003, 10.081990) );
geometry.vertices.push( new THREE.Vector3(3.290126, 178.309494, 10.087131) );
geometry.vertices.push( new THREE.Vector3(2.758297, 178.682999, 10.298550) );
geometry.vertices.push( new THREE.Vector3(2.393708, 178.992706, 10.243270) );
geometry.vertices.push( new THREE.Vector3(1.983694, 179.090302, 10.066010) );
geometry.vertices.push( new THREE.Vector3(2.036190, 179.112000, 9.892349) );
geometry.vertices.push( new THREE.Vector3(2.411779, 179.004395, 9.998402) );
geometry.vertices.push( new THREE.Vector3(2.813089, 178.945892, 10.346620) );
geometry.vertices.push( new THREE.Vector3(3.332677, 178.618500, 10.313101) );
geometry.vertices.push( new THREE.Vector3(3.807412, 178.408890, 9.873713) );
geometry.vertices.push( new THREE.Vector3(3.297491, 178.942505, 10.371300) );
geometry.vertices.push( new THREE.Vector3(2.801325, 178.955597, 10.125680) );
geometry.vertices.push( new THREE.Vector3(3.207034, 178.926392, 10.091929) );
geometry.vertices.push( new THREE.Vector3(3.777225, 178.994293, 10.223590) );
geometry.vertices.push( new THREE.Vector3(3.833137, 178.684097, 10.164680) );
geometry.vertices.push( new THREE.Vector3(4.181663, 178.783493, 9.846187) );
geometry.vertices.push( new THREE.Vector3(4.015875, 179.833496, 10.039240) );
geometry.vertices.push( new THREE.Vector3(4.377600, 179.431503, 9.764812) );
geometry.vertices.push( new THREE.Vector3(4.387537, 179.511398, 9.719213) );
geometry.vertices.push( new THREE.Vector3(4.552200, 179.287094, 9.371550) );
geometry.vertices.push( new THREE.Vector3(4.418438, 179.227905, 9.453376) );
geometry.vertices.push( new THREE.Vector3(4.408275, 179.176910, 9.257063) );
geometry.vertices.push( new THREE.Vector3(4.616925, 179.178406, 9.155437) );
geometry.vertices.push( new THREE.Vector3(4.421100, 178.992004, 9.376875) );
geometry.vertices.push( new THREE.Vector3(4.330350, 179.140503, 9.449550) );
geometry.vertices.push( new THREE.Vector3(4.125638, 179.056900, 9.924002) );
geometry.vertices.push( new THREE.Vector3(3.535961, 178.972107, 9.910050) );
geometry.vertices.push( new THREE.Vector3(3.774450, 179.004700, 9.596325) );
geometry.vertices.push( new THREE.Vector3(3.993225, 179.093201, 9.230213) );
geometry.vertices.push( new THREE.Vector3(4.125525, 179.214401, 9.105037) );
geometry.vertices.push( new THREE.Vector3(4.101075, 179.262802, 9.294863) );
geometry.vertices.push( new THREE.Vector3(4.075650, 179.306992, 9.481012) );
geometry.vertices.push( new THREE.Vector3(4.293075, 179.337799, 9.790726) );
geometry.vertices.push( new THREE.Vector3(3.788288, 179.557098, 9.891712) );
geometry.vertices.push( new THREE.Vector3(3.983175, 179.606995, 10.150650) );
geometry.vertices.push( new THREE.Vector3(3.398944, 179.688400, 10.143560) );
geometry.vertices.push( new THREE.Vector3(3.524490, 179.767090, 10.359489) );
geometry.vertices.push( new THREE.Vector3(3.097841, 179.788895, 10.406509) );
geometry.vertices.push( new THREE.Vector3(3.527737, 179.912201, 10.363950) );
geometry.vertices.push( new THREE.Vector3(4.012725, 179.731506, 10.110490) );
geometry.vertices.push( new THREE.Vector3(4.024575, 179.968903, 9.964275) );
geometry.vertices.push( new THREE.Vector3(4.459913, 179.705292, 9.592875) );
geometry.vertices.push( new THREE.Vector3(3.522769, 179.989899, 10.309540) );
geometry.vertices.push( new THREE.Vector3(3.093154, 179.960999, 10.424100) );
geometry.vertices.push( new THREE.Vector3(2.507494, 179.842102, 10.279240) );
geometry.vertices.push( new THREE.Vector3(2.544877, 179.686493, 10.295890) );
geometry.vertices.push( new THREE.Vector3(3.104340, 180.041199, 10.403440) );
geometry.vertices.push( new THREE.Vector3(2.485976, 180.012802, 10.184400) );
geometry.vertices.push( new THREE.Vector3(1.899934, 179.777603, 9.767888) );
geometry.vertices.push( new THREE.Vector3(1.559914, 179.517395, 9.662513) );
geometry.vertices.push( new THREE.Vector3(1.846961, 179.770096, 9.841387) );
geometry.vertices.push( new THREE.Vector3(2.479095, 180.088501, 10.240689) );
geometry.vertices.push( new THREE.Vector3(3.065902, 180.240005, 10.330570) );
geometry.vertices.push( new THREE.Vector3(3.503929, 180.180801, 10.221681) );
geometry.vertices.push( new THREE.Vector3(1.531324, 179.539902, 9.884625) );
geometry.vertices.push( new THREE.Vector3(1.427674, 179.620895, 10.257151) );
geometry.vertices.push( new THREE.Vector3(1.827645, 179.747604, 9.973650) );
geometry.vertices.push( new THREE.Vector3(2.432719, 179.988403, 10.346850) );
geometry.vertices.push( new THREE.Vector3(1.839311, 179.769806, 10.438160) );
geometry.vertices.push( new THREE.Vector3(2.452894, 179.947495, 10.594760) );
geometry.vertices.push( new THREE.Vector3(3.092006, 179.995895, 10.497640) );
geometry.vertices.push( new THREE.Vector3(3.085695, 179.984604, 10.696690) );
geometry.vertices.push( new THREE.Vector3(3.587501, 179.943802, 10.579690) );
geometry.vertices.push( new THREE.Vector3(3.534622, 179.960297, 10.392449) );
geometry.vertices.push( new THREE.Vector3(4.160812, 179.710495, 10.282880) );
geometry.vertices.push( new THREE.Vector3(4.043512, 179.742004, 10.127100) );
geometry.vertices.push( new THREE.Vector3(4.429613, 179.522598, 9.720824) );
geometry.vertices.push( new THREE.Vector3(4.563000, 179.503906, 9.818174) );
geometry.vertices.push( new THREE.Vector3(4.618350, 179.315598, 9.298275) );
geometry.vertices.push( new THREE.Vector3(5.009063, 179.346802, 9.267673) );
geometry.vertices.push( new THREE.Vector3(4.812075, 179.243607, 9.018712) );
geometry.vertices.push( new THREE.Vector3(5.245613, 179.190796, 8.742825) );
geometry.vertices.push( new THREE.Vector3(4.998525, 178.860001, 8.925674) );
geometry.vertices.push( new THREE.Vector3(4.204987, 178.574295, 9.659326) );
geometry.vertices.push( new THREE.Vector3(4.429987, 178.908005, 9.255825) );
geometry.vertices.push( new THREE.Vector3(4.563487, 179.048599, 9.071850) );
geometry.vertices.push( new THREE.Vector3(4.728713, 178.636505, 9.203325) );
geometry.vertices.push( new THREE.Vector3(4.394025, 178.278000, 9.560287) );
geometry.vertices.push( new THREE.Vector3(3.943088, 178.141495, 9.843488) );
geometry.vertices.push( new THREE.Vector3(-1.846961, 179.770096, 9.841387) );
geometry.vertices.push( new THREE.Vector3(-2.432723, 179.988403, 10.346850) );
geometry.vertices.push( new THREE.Vector3(-2.479095, 180.088501, 10.240689) );
geometry.vertices.push( new THREE.Vector3(-3.092010, 179.995895, 10.497640) );
geometry.vertices.push( new THREE.Vector3(-3.065906, 180.240005, 10.330570) );
geometry.vertices.push( new THREE.Vector3(-3.503932, 180.180801, 10.221681) );
geometry.vertices.push( new THREE.Vector3(-3.534626, 179.960297, 10.392449) );
geometry.vertices.push( new THREE.Vector3(-4.024575, 179.968903, 9.964275) );
geometry.vertices.push( new THREE.Vector3(-4.043512, 179.742004, 10.127100) );
geometry.vertices.push( new THREE.Vector3(-4.429613, 179.522598, 9.720824) );
geometry.vertices.push( new THREE.Vector3(-4.459913, 179.705292, 9.592875) );
geometry.vertices.push( new THREE.Vector3(-4.618350, 179.315598, 9.298275) );
geometry.vertices.push( new THREE.Vector3(-2.835750, 179.182510, 8.874900) );
geometry.vertices.push( new THREE.Vector3(-1.657639, 179.124405, 9.807824) );
geometry.vertices.push( new THREE.Vector3(-1.841419, 179.225189, 9.704288) );
geometry.vertices.push( new THREE.Vector3(1.263787, 173.011505, 10.559179) );
geometry.vertices.push( new THREE.Vector3(1.494979, 173.025406, 10.597310) );
geometry.vertices.push( new THREE.Vector3(1.322531, 172.913605, 10.691660) );
geometry.vertices.push( new THREE.Vector3(1.394385, 173.110901, 10.463890) );
geometry.vertices.push( new THREE.Vector3(1.544370, 172.944397, 10.443410) );
geometry.vertices.push( new THREE.Vector3(1.554045, 173.076706, 10.659860) );
geometry.vertices.push( new THREE.Vector3(1.444616, 173.001694, 10.296790) );
geometry.vertices.push( new THREE.Vector3(1.389514, 173.323898, 10.168159) );
geometry.vertices.push( new THREE.Vector3(0.646361, 173.356491, 10.804760) );
geometry.vertices.push( new THREE.Vector3(1.072646, 173.010010, 10.782560) );
geometry.vertices.push( new THREE.Vector3(0.783289, 172.991302, 10.961250) );
geometry.vertices.push( new THREE.Vector3(1.135024, 172.939499, 10.866671) );
geometry.vertices.push( new THREE.Vector3(0.915011, 172.817307, 11.005270) );
geometry.vertices.push( new THREE.Vector3(0.398719, 172.947006, 11.066780) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.852905, 11.275311) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.865204, 11.240399) );
geometry.vertices.push( new THREE.Vector3(0.087133, 172.828094, 11.293870) );
geometry.vertices.push( new THREE.Vector3(0.070639, 172.802200, 11.246330) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.883194, 11.188730) );
geometry.vertices.push( new THREE.Vector3(0.000032, 173.391693, 10.992150) );
geometry.vertices.push( new THREE.Vector3(0.000032, 174.635193, 10.802509) );
geometry.vertices.push( new THREE.Vector3(0.824737, 174.634094, 10.634330) );
geometry.vertices.push( new THREE.Vector3(1.832722, 174.609802, 9.612263) );
geometry.vertices.push( new THREE.Vector3(2.035470, 173.330200, 8.795062) );
geometry.vertices.push( new THREE.Vector3(1.832722, 174.609802, 9.612263) );
geometry.vertices.push( new THREE.Vector3(2.150164, 174.500305, 8.534513) );
geometry.vertices.push( new THREE.Vector3(1.861316, 173.320908, 9.475125) );
geometry.vertices.push( new THREE.Vector3(2.044789, 173.017090, 9.036450) );
geometry.vertices.push( new THREE.Vector3(2.314118, 173.087601, 8.817675) );
geometry.vertices.push( new THREE.Vector3(2.237591, 172.939102, 9.000187) );
geometry.vertices.push( new THREE.Vector3(2.435055, 172.970993, 9.019087) );
geometry.vertices.push( new THREE.Vector3(2.135644, 172.921097, 9.244237) );
geometry.vertices.push( new THREE.Vector3(2.351179, 172.939896, 9.317175) );
geometry.vertices.push( new THREE.Vector3(2.180344, 172.977402, 9.554851) );
geometry.vertices.push( new THREE.Vector3(2.546074, 173.319702, 9.186825) );
geometry.vertices.push( new THREE.Vector3(2.459006, 173.820404, 9.609900) );
geometry.vertices.push( new THREE.Vector3(2.611331, 173.773102, 9.005925) );
geometry.vertices.push( new THREE.Vector3(2.248028, 174.642700, 10.189280) );
geometry.vertices.push( new THREE.Vector3(2.370990, 173.806091, 9.821287) );
geometry.vertices.push( new THREE.Vector3(2.541716, 174.621002, 9.694088) );
geometry.vertices.push( new THREE.Vector3(2.722751, 174.547104, 8.697075) );
geometry.vertices.push( new THREE.Vector3(2.582445, 173.784393, 8.764049) );
geometry.vertices.push( new THREE.Vector3(2.501134, 173.342590, 8.802862) );
geometry.vertices.push( new THREE.Vector3(2.409420, 173.340408, 9.559387) );
geometry.vertices.push( new THREE.Vector3(2.267445, 173.311905, 9.898426) );
geometry.vertices.push( new THREE.Vector3(2.088975, 173.836502, 10.208210) );
geometry.vertices.push( new THREE.Vector3(1.768703, 174.624390, 10.750390) );
geometry.vertices.push( new THREE.Vector3(1.805842, 173.812103, 10.609610) );
geometry.vertices.push( new THREE.Vector3(1.649078, 173.806503, 10.724170) );
geometry.vertices.push( new THREE.Vector3(1.828324, 173.320496, 10.524370) );
geometry.vertices.push( new THREE.Vector3(1.993193, 173.351303, 10.219650) );
geometry.vertices.push( new THREE.Vector3(1.559572, 173.813599, 10.858690) );
geometry.vertices.push( new THREE.Vector3(1.650893, 172.986404, 10.592440) );
geometry.vertices.push( new THREE.Vector3(1.576342, 173.308899, 10.708200) );
geometry.vertices.push( new THREE.Vector3(1.433168, 173.323898, 10.924160) );
geometry.vertices.push( new THREE.Vector3(1.123774, 173.845505, 11.140350) );
geometry.vertices.push( new THREE.Vector3(1.052842, 174.682495, 11.321290) );
geometry.vertices.push( new THREE.Vector3(1.011364, 173.851089, 11.236050) );
geometry.vertices.push( new THREE.Vector3(1.164128, 173.088699, 10.985100) );
geometry.vertices.push( new THREE.Vector3(1.362060, 172.990891, 10.877770) );
geometry.vertices.push( new THREE.Vector3(0.985879, 173.340408, 11.183700) );
geometry.vertices.push( new THREE.Vector3(0.958005, 172.943298, 11.105920) );
geometry.vertices.push( new THREE.Vector3(1.167536, 173.328705, 11.028750) );
geometry.vertices.push( new THREE.Vector3(0.732750, 173.341095, 11.280190) );
geometry.vertices.push( new THREE.Vector3(0.703414, 172.923401, 11.174290) );
geometry.vertices.push( new THREE.Vector3(0.821771, 172.850998, 11.107240) );
geometry.vertices.push( new THREE.Vector3(0.946001, 172.833008, 11.045771) );
geometry.vertices.push( new THREE.Vector3(1.155221, 172.946198, 10.902640) );
geometry.vertices.push( new THREE.Vector3(1.327556, 172.893402, 10.819580) );
geometry.vertices.push( new THREE.Vector3(0.564941, 172.821396, 11.212690) );
geometry.vertices.push( new THREE.Vector3(0.575955, 173.217697, 11.347610) );
geometry.vertices.push( new THREE.Vector3(0.794014, 172.840088, 11.055901) );
geometry.vertices.push( new THREE.Vector3(0.673556, 172.883606, 11.090961) );
geometry.vertices.push( new THREE.Vector3(0.563704, 172.808304, 11.112680) );
geometry.vertices.push( new THREE.Vector3(0.348619, 172.807495, 11.278049) );
geometry.vertices.push( new THREE.Vector3(0.238103, 173.212509, 11.433410) );
geometry.vertices.push( new THREE.Vector3(0.362639, 172.788406, 11.187940) );
geometry.vertices.push( new THREE.Vector3(0.854539, 173.851501, 11.295830) );
geometry.vertices.push( new THREE.Vector3(0.524194, 173.785492, 11.405360) );
geometry.vertices.push( new THREE.Vector3(0.318161, 173.782898, 11.457750) );
geometry.vertices.push( new THREE.Vector3(0.000032, 173.788498, 11.460260) );
geometry.vertices.push( new THREE.Vector3(0.000032, 173.213608, 11.401050) );
geometry.vertices.push( new THREE.Vector3(0.000032, 174.684006, 11.552550) );
geometry.vertices.push( new THREE.Vector3(0.443209, 174.673904, 11.495740) );
geometry.vertices.push( new THREE.Vector3(1.860334, 172.967300, 10.366540) );
geometry.vertices.push( new THREE.Vector3(1.902878, 173.025406, 10.179530) );
geometry.vertices.push( new THREE.Vector3(1.691122, 172.925995, 10.233110) );
geometry.vertices.push( new THREE.Vector3(1.795860, 172.967987, 10.086110) );
geometry.vertices.push( new THREE.Vector3(1.590949, 172.979996, 10.117460) );
geometry.vertices.push( new THREE.Vector3(1.695270, 173.017899, 10.001400) );
geometry.vertices.push( new THREE.Vector3(1.891301, 172.924103, 9.801900) );
geometry.vertices.push( new THREE.Vector3(1.932067, 173.041901, 9.493950) );
geometry.vertices.push( new THREE.Vector3(2.005485, 172.976990, 9.528337) );
geometry.vertices.push( new THREE.Vector3(2.136004, 172.909500, 9.846750) );
geometry.vertices.push( new THREE.Vector3(-1.685456, 171.098999, 9.471750) );
geometry.vertices.push( new THREE.Vector3(-0.723806, 172.524002, 10.636990) );
geometry.vertices.push( new THREE.Vector3(-1.015354, 171.027008, 10.067290) );
geometry.vertices.push( new THREE.Vector3(-1.641529, 172.486099, 9.519113) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.496613, 10.725750) );
geometry.vertices.push( new THREE.Vector3(0.000032, 171.166901, 10.365680) );
geometry.vertices.push( new THREE.Vector3(-0.302377, 172.732895, 10.924280) );
geometry.vertices.push( new THREE.Vector3(-0.702619, 172.772598, 10.780690) );
geometry.vertices.push( new THREE.Vector3(-0.433133, 172.912506, 11.024930) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.905396, 11.053610) );
geometry.vertices.push( new THREE.Vector3(-0.101961, 172.943298, 11.104760) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.624100, 11.118940) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.907196, 11.105740) );
geometry.vertices.push( new THREE.Vector3(-0.091919, 172.940598, 11.036930) );
geometry.vertices.push( new THREE.Vector3(-0.308694, 172.918503, 11.010900) );
geometry.vertices.push( new THREE.Vector3(-0.322304, 172.954910, 11.097450) );
geometry.vertices.push( new THREE.Vector3(-0.945023, 172.935699, 10.764000) );
geometry.vertices.push( new THREE.Vector3(-1.121490, 172.934601, 10.762950) );
geometry.vertices.push( new THREE.Vector3(-0.976954, 172.939102, 10.853769) );
geometry.vertices.push( new THREE.Vector3(-0.802969, 172.903503, 10.876090) );
geometry.vertices.push( new THREE.Vector3(-0.620760, 172.938400, 10.957690) );
geometry.vertices.push( new THREE.Vector3(-0.438322, 172.908401, 11.075250) );
geometry.vertices.push( new THREE.Vector3(-0.307046, 172.621902, 11.119949) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.142609, 11.127790) );
geometry.vertices.push( new THREE.Vector3(-0.842111, 172.910599, 10.944000) );
geometry.vertices.push( new THREE.Vector3(-0.631380, 172.936493, 11.041390) );
geometry.vertices.push( new THREE.Vector3(-0.693754, 172.597900, 11.036060) );
geometry.vertices.push( new THREE.Vector3(-0.321121, 172.124298, 11.099620) );
geometry.vertices.push( new THREE.Vector3(0.000032, 171.158188, 11.145940) );
geometry.vertices.push( new THREE.Vector3(-0.349421, 171.123810, 11.058710) );
geometry.vertices.push( new THREE.Vector3(-0.741686, 172.125809, 10.993760) );
geometry.vertices.push( new THREE.Vector3(-0.840682, 171.150803, 10.906430) );
geometry.vertices.push( new THREE.Vector3(-0.899918, 172.117493, 10.948950) );
geometry.vertices.push( new THREE.Vector3(-0.928327, 172.581009, 10.969350) );
geometry.vertices.push( new THREE.Vector3(-2.093059, 172.527390, 9.806550) );
geometry.vertices.push( new THREE.Vector3(-1.932844, 172.050400, 10.101600) );
geometry.vertices.push( new THREE.Vector3(-1.839154, 172.533401, 10.167830) );
geometry.vertices.push( new THREE.Vector3(-1.552575, 172.065704, 10.514509) );
geometry.vertices.push( new THREE.Vector3(-1.474868, 171.072403, 10.455151) );
geometry.vertices.push( new THREE.Vector3(-1.327031, 172.067596, 10.655250) );
geometry.vertices.push( new THREE.Vector3(-1.253906, 172.559998, 10.754250) );
geometry.vertices.push( new THREE.Vector3(-1.108136, 172.901199, 10.580590) );
geometry.vertices.push( new THREE.Vector3(-0.880695, 172.778198, 10.676700) );
geometry.vertices.push( new THREE.Vector3(-1.112122, 172.767395, 10.331400) );
geometry.vertices.push( new THREE.Vector3(-1.064764, 172.936905, 10.654760) );
geometry.vertices.push( new THREE.Vector3(-1.186766, 172.909103, 10.699460) );
geometry.vertices.push( new THREE.Vector3(-1.590941, 172.556305, 10.543800) );
geometry.vertices.push( new THREE.Vector3(-1.967681, 172.912903, 9.854362) );
geometry.vertices.push( new THREE.Vector3(-1.850340, 172.958191, 10.027349) );
geometry.vertices.push( new THREE.Vector3(-1.635889, 172.903503, 10.323820) );
geometry.vertices.push( new THREE.Vector3(-1.286902, 172.931595, 10.660050) );
geometry.vertices.push( new THREE.Vector3(-1.162346, 172.944702, 10.618429) );
geometry.vertices.push( new THREE.Vector3(-1.146533, 172.932404, 10.469810) );
geometry.vertices.push( new THREE.Vector3(-1.479510, 172.941803, 10.181400) );
geometry.vertices.push( new THREE.Vector3(-1.544216, 172.945496, 9.918562) );
geometry.vertices.push( new THREE.Vector3(-1.663129, 173.005493, 9.982574) );
geometry.vertices.push( new THREE.Vector3(-1.760160, 173.022003, 9.839137) );
geometry.vertices.push( new THREE.Vector3(-1.698889, 172.907196, 9.685650) );
geometry.vertices.push( new THREE.Vector3(-1.826257, 172.972900, 9.752287) );
geometry.vertices.push( new THREE.Vector3(-1.928884, 172.479004, 8.662388) );
geometry.vertices.push( new THREE.Vector3(-2.057644, 171.222702, 8.321662) );
geometry.vertices.push( new THREE.Vector3(-1.878829, 172.960907, 9.265988) );
geometry.vertices.push( new THREE.Vector3(-1.859557, 173.026901, 9.561487) );
geometry.vertices.push( new THREE.Vector3(-2.052075, 172.988602, 9.699300) );
geometry.vertices.push( new THREE.Vector3(-2.103240, 172.047394, 9.858974) );
geometry.vertices.push( new THREE.Vector3(-2.302110, 172.507095, 9.408937) );
geometry.vertices.push( new THREE.Vector3(-2.153771, 172.978104, 9.518326) );
geometry.vertices.push( new THREE.Vector3(-2.236504, 172.959000, 9.264151) );
geometry.vertices.push( new THREE.Vector3(-1.957774, 173.011505, 9.367613) );
geometry.vertices.push( new THREE.Vector3(-2.020522, 172.971405, 9.155514) );
geometry.vertices.push( new THREE.Vector3(-1.997040, 172.932404, 8.957850) );
geometry.vertices.push( new THREE.Vector3(-2.102321, 172.926407, 8.952563) );
geometry.vertices.push( new THREE.Vector3(-2.269822, 172.883606, 8.983951) );
geometry.vertices.push( new THREE.Vector3(-2.305571, 172.490295, 9.043500) );
geometry.vertices.push( new THREE.Vector3(-2.426254, 171.981400, 9.216900) );
geometry.vertices.push( new THREE.Vector3(-2.124094, 171.064499, 9.966337) );
geometry.vertices.push( new THREE.Vector3(-2.427904, 171.973099, 8.975400) );
geometry.vertices.push( new THREE.Vector3(-2.669201, 170.953094, 8.841112) );
geometry.vertices.push( new THREE.Vector3(-4.125562, 179.214401, 9.105037) );
geometry.vertices.push( new THREE.Vector3(-4.101075, 179.262802, 9.294863) );
geometry.vertices.push( new THREE.Vector3(-4.075650, 179.306992, 9.481012) );
geometry.vertices.push( new THREE.Vector3(-3.788288, 179.557098, 9.891675) );
geometry.vertices.push( new THREE.Vector3(1.186830, 172.909103, 10.699460) );
geometry.vertices.push( new THREE.Vector3(1.064827, 172.936905, 10.654760) );
geometry.vertices.push( new THREE.Vector3(1.121554, 172.934601, 10.762950) );
geometry.vertices.push( new THREE.Vector3(1.108200, 172.901199, 10.580590) );
geometry.vertices.push( new THREE.Vector3(1.162410, 172.944702, 10.618429) );
geometry.vertices.push( new THREE.Vector3(1.146596, 172.932404, 10.469810) );
geometry.vertices.push( new THREE.Vector3(1.286966, 172.931595, 10.660050) );
geometry.vertices.push( new THREE.Vector3(1.641593, 172.486099, 9.519113) );
geometry.vertices.push( new THREE.Vector3(1.112183, 172.767395, 10.331400) );
geometry.vertices.push( new THREE.Vector3(1.544280, 172.945496, 9.918562) );
geometry.vertices.push( new THREE.Vector3(1.479574, 172.941803, 10.181400) );
geometry.vertices.push( new THREE.Vector3(1.635952, 172.903503, 10.323820) );
geometry.vertices.push( new THREE.Vector3(1.591005, 172.556305, 10.543800) );
geometry.vertices.push( new THREE.Vector3(1.253970, 172.559998, 10.754250) );
geometry.vertices.push( new THREE.Vector3(0.928391, 172.581009, 10.969350) );
geometry.vertices.push( new THREE.Vector3(1.552639, 172.065704, 10.514509) );
geometry.vertices.push( new THREE.Vector3(1.839218, 172.533401, 10.167830) );
geometry.vertices.push( new THREE.Vector3(1.850404, 172.958191, 10.027349) );
geometry.vertices.push( new THREE.Vector3(1.663193, 173.005493, 9.982574) );
geometry.vertices.push( new THREE.Vector3(1.760224, 173.022003, 9.839137) );
geometry.vertices.push( new THREE.Vector3(1.698953, 172.907196, 9.685650) );
geometry.vertices.push( new THREE.Vector3(1.826321, 172.972900, 9.752287) );
geometry.vertices.push( new THREE.Vector3(1.967745, 172.912903, 9.854362) );
geometry.vertices.push( new THREE.Vector3(2.093123, 172.527390, 9.806550) );
geometry.vertices.push( new THREE.Vector3(2.052139, 172.988602, 9.699300) );
geometry.vertices.push( new THREE.Vector3(1.859621, 173.026901, 9.561487) );
geometry.vertices.push( new THREE.Vector3(2.153835, 172.978104, 9.518326) );
geometry.vertices.push( new THREE.Vector3(2.280487, 172.585495, 9.434663) );
geometry.vertices.push( new THREE.Vector3(2.103304, 172.047394, 9.858974) );
geometry.vertices.push( new THREE.Vector3(2.426318, 171.981400, 9.216900) );
geometry.vertices.push( new THREE.Vector3(2.427967, 171.973099, 8.975400) );
geometry.vertices.push( new THREE.Vector3(2.305635, 172.490295, 9.043500) );
geometry.vertices.push( new THREE.Vector3(2.236567, 172.959000, 9.264151) );
geometry.vertices.push( new THREE.Vector3(1.957837, 173.011505, 9.367613) );
geometry.vertices.push( new THREE.Vector3(1.878892, 172.960907, 9.265988) );
geometry.vertices.push( new THREE.Vector3(2.269886, 172.883606, 8.983951) );
geometry.vertices.push( new THREE.Vector3(2.102385, 172.926407, 8.952563) );
geometry.vertices.push( new THREE.Vector3(2.020586, 172.971405, 9.155514) );
geometry.vertices.push( new THREE.Vector3(1.997107, 172.932404, 8.957850) );
geometry.vertices.push( new THREE.Vector3(1.928947, 172.479004, 8.662388) );
geometry.vertices.push( new THREE.Vector3(0.880759, 172.778198, 10.676700) );
geometry.vertices.push( new THREE.Vector3(0.723870, 172.524002, 10.636990) );
geometry.vertices.push( new THREE.Vector3(1.685520, 171.098999, 9.471750) );
geometry.vertices.push( new THREE.Vector3(2.057707, 171.222702, 8.321662) );
geometry.vertices.push( new THREE.Vector3(0.702682, 172.772598, 10.780690) );
geometry.vertices.push( new THREE.Vector3(0.302441, 172.732895, 10.924280) );
geometry.vertices.push( new THREE.Vector3(1.015417, 171.027008, 10.067290) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.496613, 10.725750) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.905396, 11.053610) );
geometry.vertices.push( new THREE.Vector3(0.091983, 172.940598, 11.036930) );
geometry.vertices.push( new THREE.Vector3(0.000032, 171.166901, 10.365680) );
geometry.vertices.push( new THREE.Vector3(0.977018, 172.939102, 10.853769) );
geometry.vertices.push( new THREE.Vector3(0.842175, 172.910599, 10.944000) );
geometry.vertices.push( new THREE.Vector3(0.803033, 172.903503, 10.876090) );
geometry.vertices.push( new THREE.Vector3(0.620824, 172.938400, 10.957690) );
geometry.vertices.push( new THREE.Vector3(0.433196, 172.912506, 11.024930) );
geometry.vertices.push( new THREE.Vector3(0.308758, 172.918503, 11.010900) );
geometry.vertices.push( new THREE.Vector3(0.102025, 172.943298, 11.104760) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.905396, 11.053610) );
geometry.vertices.push( new THREE.Vector3(0.693817, 172.597900, 11.036060) );
geometry.vertices.push( new THREE.Vector3(0.631444, 172.936493, 11.041390) );
geometry.vertices.push( new THREE.Vector3(0.438386, 172.908401, 11.075250) );
geometry.vertices.push( new THREE.Vector3(0.322367, 172.954910, 11.097450) );
geometry.vertices.push( new THREE.Vector3(0.307110, 172.621902, 11.119949) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.624100, 11.118940) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.907196, 11.105740) );
geometry.vertices.push( new THREE.Vector3(0.321185, 172.124298, 11.099620) );
geometry.vertices.push( new THREE.Vector3(0.741750, 172.125809, 10.993760) );
geometry.vertices.push( new THREE.Vector3(0.899978, 172.117493, 10.948950) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.142609, 11.127790) );
geometry.vertices.push( new THREE.Vector3(0.000032, 171.158188, 11.145940) );
geometry.vertices.push( new THREE.Vector3(0.349485, 171.123810, 11.058710) );
geometry.vertices.push( new THREE.Vector3(0.840746, 171.150803, 10.906430) );
geometry.vertices.push( new THREE.Vector3(1.327095, 172.067596, 10.655250) );
geometry.vertices.push( new THREE.Vector3(1.932907, 172.050400, 10.101600) );
geometry.vertices.push( new THREE.Vector3(1.474931, 171.072403, 10.455151) );
geometry.vertices.push( new THREE.Vector3(2.124158, 171.064499, 9.966337) );
geometry.vertices.push( new THREE.Vector3(2.669265, 170.953094, 8.841112) );
geometry.vertices.push( new THREE.Vector3(0.000022, 157.006897, -14.049641) );
geometry.vertices.push( new THREE.Vector3(4.209225, 157.712997, -15.612110) );
geometry.vertices.push( new THREE.Vector3(0.000010, 157.419403, -14.026649) );
geometry.vertices.push( new THREE.Vector3(0.000000, 160.345108, -14.098459) );
geometry.vertices.push( new THREE.Vector3(4.318275, 157.810898, -16.142059) );
geometry.vertices.push( new THREE.Vector3(0.000000, 157.306503, -14.596200) );
geometry.vertices.push( new THREE.Vector3(4.162275, 160.670609, -14.957931) );
geometry.vertices.push( new THREE.Vector3(0.000000, 163.150497, -13.143520) );
geometry.vertices.push( new THREE.Vector3(3.472662, 163.440399, -13.454780) );
geometry.vertices.push( new THREE.Vector3(0.000000, 165.522003, -11.877260) );
geometry.vertices.push( new THREE.Vector3(2.930793, 165.708405, -12.066150) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.062607, -10.449970) );
geometry.vertices.push( new THREE.Vector3(2.498029, 168.271103, -10.396610) );
geometry.vertices.push( new THREE.Vector3(2.329643, 169.995697, -9.854850) );
geometry.vertices.push( new THREE.Vector3(0.000000, 169.919296, -9.861524) );
geometry.vertices.push( new THREE.Vector3(15.525640, 163.601303, -10.225760) );
geometry.vertices.push( new THREE.Vector3(14.126290, 160.210495, -13.224191) );
geometry.vertices.push( new THREE.Vector3(12.281850, 162.460495, -12.779779) );
geometry.vertices.push( new THREE.Vector3(17.787560, 161.978195, -10.360690) );
geometry.vertices.push( new THREE.Vector3(10.695681, 165.058105, -11.838530) );
geometry.vertices.push( new THREE.Vector3(13.540880, 165.547897, -9.925653) );
geometry.vertices.push( new THREE.Vector3(11.144589, 168.190506, -8.261550) );
geometry.vertices.push( new THREE.Vector3(8.935987, 167.533905, -10.177160) );
geometry.vertices.push( new THREE.Vector3(16.947750, 164.452499, -7.977825) );
geometry.vertices.push( new THREE.Vector3(19.387310, 163.306107, -7.884413) );
geometry.vertices.push( new THREE.Vector3(14.648030, 165.878708, -8.194052) );
geometry.vertices.push( new THREE.Vector3(17.541639, 164.960602, -5.419537) );
geometry.vertices.push( new THREE.Vector3(19.766100, 163.900101, -5.372287) );
geometry.vertices.push( new THREE.Vector3(15.204830, 166.122406, -5.859151) );
geometry.vertices.push( new THREE.Vector3(6.657525, 170.586807, -8.176350) );
geometry.vertices.push( new THREE.Vector3(5.150962, 168.742508, -9.914324) );
geometry.vertices.push( new THREE.Vector3(4.787588, 170.287506, -9.428776) );
geometry.vertices.push( new THREE.Vector3(7.352099, 169.252090, -8.655974) );
geometry.vertices.push( new THREE.Vector3(6.191175, 166.691193, -11.584690) );
geometry.vertices.push( new THREE.Vector3(8.009662, 170.038910, -3.233269) );
geometry.vertices.push( new THREE.Vector3(8.928750, 169.294907, -5.201400) );
geometry.vertices.push( new THREE.Vector3(7.865850, 170.244400, -4.775587) );
geometry.vertices.push( new THREE.Vector3(8.653461, 168.959198, -3.683054) );
geometry.vertices.push( new THREE.Vector3(7.532248, 170.479904, -6.423488) );
geometry.vertices.push( new THREE.Vector3(8.571112, 169.501495, -6.933713) );
geometry.vertices.push( new THREE.Vector3(7.267462, 164.398102, -13.248190) );
geometry.vertices.push( new THREE.Vector3(8.286563, 161.596497, -14.659201) );
geometry.vertices.push( new THREE.Vector3(11.656240, 167.480194, -4.083600) );
geometry.vertices.push( new THREE.Vector3(15.013459, 165.819000, -3.838613) );
geometry.vertices.push( new THREE.Vector3(12.064540, 167.988800, -5.978850) );
geometry.vertices.push( new THREE.Vector3(9.683475, 158.669601, -15.405750) );
geometry.vertices.push( new THREE.Vector3(-4.162275, 160.670609, -14.957931) );
geometry.vertices.push( new THREE.Vector3(-3.472662, 163.440399, -13.454780) );
geometry.vertices.push( new THREE.Vector3(-4.318275, 157.810898, -16.142059) );
geometry.vertices.push( new THREE.Vector3(4.216162, 157.455399, -15.638290) );
geometry.vertices.push( new THREE.Vector3(-2.930793, 165.708405, -12.066150) );
geometry.vertices.push( new THREE.Vector3(-2.498025, 168.271103, -10.396610) );
geometry.vertices.push( new THREE.Vector3(-2.329643, 169.995697, -9.854850) );
geometry.vertices.push( new THREE.Vector3(-15.525640, 163.601303, -10.225760) );
geometry.vertices.push( new THREE.Vector3(-14.126290, 160.210495, -13.224191) );
geometry.vertices.push( new THREE.Vector3(-17.787560, 161.978195, -10.360690) );
geometry.vertices.push( new THREE.Vector3(-12.281890, 162.460495, -12.779810) );
geometry.vertices.push( new THREE.Vector3(-10.695681, 165.058105, -11.838530) );
geometry.vertices.push( new THREE.Vector3(-13.540880, 165.547897, -9.925653) );
geometry.vertices.push( new THREE.Vector3(-11.144589, 168.190506, -8.261550) );
geometry.vertices.push( new THREE.Vector3(-8.935987, 167.533905, -10.177160) );
geometry.vertices.push( new THREE.Vector3(-16.947750, 164.452499, -7.977825) );
geometry.vertices.push( new THREE.Vector3(-19.387310, 163.306107, -7.884413) );
geometry.vertices.push( new THREE.Vector3(-14.648030, 165.878708, -8.194089) );
geometry.vertices.push( new THREE.Vector3(-17.541639, 164.960602, -5.419537) );
geometry.vertices.push( new THREE.Vector3(-19.766140, 163.900101, -5.372287) );
geometry.vertices.push( new THREE.Vector3(-15.204830, 166.122406, -5.859151) );
geometry.vertices.push( new THREE.Vector3(-5.150962, 168.742508, -9.914324) );
geometry.vertices.push( new THREE.Vector3(-6.191175, 166.691193, -11.584690) );
geometry.vertices.push( new THREE.Vector3(-8.009662, 170.038910, -3.233269) );
geometry.vertices.push( new THREE.Vector3(-8.928750, 169.294907, -5.201400) );
geometry.vertices.push( new THREE.Vector3(-8.653461, 168.959198, -3.683054) );
geometry.vertices.push( new THREE.Vector3(-7.865850, 170.244400, -4.775587) );
geometry.vertices.push( new THREE.Vector3(-7.532248, 170.479904, -6.423488) );
geometry.vertices.push( new THREE.Vector3(-8.571112, 169.501495, -6.933713) );
geometry.vertices.push( new THREE.Vector3(-7.352099, 169.252090, -8.655974) );
geometry.vertices.push( new THREE.Vector3(-6.657525, 170.586807, -8.176350) );
geometry.vertices.push( new THREE.Vector3(-7.267462, 164.398102, -13.248190) );
geometry.vertices.push( new THREE.Vector3(-8.286563, 161.596497, -14.659201) );
geometry.vertices.push( new THREE.Vector3(-11.656240, 167.480194, -4.083600) );
geometry.vertices.push( new THREE.Vector3(-12.064540, 167.988800, -5.978850) );
geometry.vertices.push( new THREE.Vector3(-15.013459, 165.819000, -3.838613) );
geometry.vertices.push( new THREE.Vector3(-9.683475, 158.669601, -15.405750) );
geometry.vertices.push( new THREE.Vector3(4.424588, 179.046005, 9.640125) );
geometry.vertices.push( new THREE.Vector3(4.536787, 179.161499, 9.642937) );
geometry.vertices.push( new THREE.Vector3(4.632300, 179.272110, 9.530550) );
geometry.vertices.push( new THREE.Vector3(4.459687, 179.065887, 9.746812) );
geometry.vertices.push( new THREE.Vector3(4.206075, 178.923401, 9.878738) );
geometry.vertices.push( new THREE.Vector3(4.561688, 179.590500, 10.156200) );
geometry.vertices.push( new THREE.Vector3(4.778212, 179.480606, 9.802687) );
geometry.vertices.push( new THREE.Vector3(4.639687, 179.750305, 10.253100) );
geometry.vertices.push( new THREE.Vector3(4.688175, 179.367798, 9.752437) );
geometry.vertices.push( new THREE.Vector3(4.629600, 179.299103, 9.676950) );
geometry.vertices.push( new THREE.Vector3(4.703137, 179.223007, 9.617925) );
geometry.vertices.push( new THREE.Vector3(4.576725, 179.161499, 9.648113) );
geometry.vertices.push( new THREE.Vector3(4.493137, 179.057205, 9.783487) );
geometry.vertices.push( new THREE.Vector3(4.275037, 178.940201, 9.994650) );
geometry.vertices.push( new THREE.Vector3(4.221112, 178.945099, 9.977888) );
geometry.vertices.push( new THREE.Vector3(4.862962, 180.541504, 10.598590) );
geometry.vertices.push( new THREE.Vector3(4.427137, 180.423004, 10.997700) );
geometry.vertices.push( new THREE.Vector3(4.742362, 180.074997, 10.453540) );
geometry.vertices.push( new THREE.Vector3(4.346925, 180.079102, 10.834240) );
geometry.vertices.push( new THREE.Vector3(4.221075, 179.841003, 10.597580) );
geometry.vertices.push( new THREE.Vector3(4.455675, 179.416504, 10.038860) );
geometry.vertices.push( new THREE.Vector3(4.421175, 179.410904, 10.026710) );
geometry.vertices.push( new THREE.Vector3(4.597763, 179.290497, 9.662288) );
geometry.vertices.push( new THREE.Vector3(4.412662, 179.608902, 9.910275) );
geometry.vertices.push( new THREE.Vector3(4.661063, 179.395905, 9.576637) );
geometry.vertices.push( new THREE.Vector3(4.126800, 179.613403, 10.463660) );
geometry.vertices.push( new THREE.Vector3(4.060875, 179.810196, 10.295180) );
geometry.vertices.push( new THREE.Vector3(4.055700, 179.639999, 10.396199) );
geometry.vertices.push( new THREE.Vector3(3.625515, 179.949707, 10.538250) );
geometry.vertices.push( new THREE.Vector3(3.701850, 179.789307, 10.692861) );
geometry.vertices.push( new THREE.Vector3(3.748669, 179.778397, 10.800600) );
geometry.vertices.push( new THREE.Vector3(3.817950, 179.972992, 10.939569) );
geometry.vertices.push( new THREE.Vector3(4.541662, 181.142288, 11.272500) );
geometry.vertices.push( new THREE.Vector3(4.475887, 180.799896, 11.154110) );
geometry.vertices.push( new THREE.Vector3(3.935850, 180.580902, 11.403410) );
geometry.vertices.push( new THREE.Vector3(3.901425, 180.208099, 11.202190) );
geometry.vertices.push( new THREE.Vector3(3.386055, 180.000000, 11.118600) );
geometry.vertices.push( new THREE.Vector3(3.365288, 179.834991, 10.911110) );
geometry.vertices.push( new THREE.Vector3(3.984975, 180.995590, 11.587840) );
geometry.vertices.push( new THREE.Vector3(3.377906, 180.774002, 11.772790) );
geometry.vertices.push( new THREE.Vector3(3.425048, 180.485992, 11.593500) );
geometry.vertices.push( new THREE.Vector3(3.431742, 180.223206, 11.385230) );
geometry.vertices.push( new THREE.Vector3(2.856281, 179.915207, 11.043489) );
geometry.vertices.push( new THREE.Vector3(2.907315, 179.797501, 10.726430) );
geometry.vertices.push( new THREE.Vector3(2.766046, 180.209991, 11.622000) );
geometry.vertices.push( new THREE.Vector3(2.680275, 180.426712, 11.902430) );
geometry.vertices.push( new THREE.Vector3(3.464251, 181.168900, 12.105150) );
geometry.vertices.push( new THREE.Vector3(4.079475, 181.426895, 11.893240) );
geometry.vertices.push( new THREE.Vector3(4.657200, 181.633499, 11.456660) );
geometry.vertices.push( new THREE.Vector3(4.995488, 181.001602, 10.680900) );
geometry.vertices.push( new THREE.Vector3(2.579400, 180.662292, 12.345640) );
geometry.vertices.push( new THREE.Vector3(5.569462, 181.563797, 10.303240) );
geometry.vertices.push( new THREE.Vector3(5.256337, 182.278091, 10.552799) );
geometry.vertices.push( new THREE.Vector3(5.277187, 181.643204, 10.841550) );
geometry.vertices.push( new THREE.Vector3(5.685750, 182.196793, 9.634838) );
geometry.vertices.push( new THREE.Vector3(5.861025, 181.301605, 9.487125) );
geometry.vertices.push( new THREE.Vector3(5.472787, 180.647598, 9.766987) );
geometry.vertices.push( new THREE.Vector3(5.160225, 180.154495, 10.027090) );
geometry.vertices.push( new THREE.Vector3(4.944788, 179.727005, 9.934987) );
geometry.vertices.push( new THREE.Vector3(6.377625, 182.395508, 7.583175) );
geometry.vertices.push( new THREE.Vector3(5.923837, 183.262100, 8.246850) );
geometry.vertices.push( new THREE.Vector3(4.836225, 179.246201, 9.603711) );
geometry.vertices.push( new THREE.Vector3(5.035087, 179.287506, 9.547125) );
geometry.vertices.push( new THREE.Vector3(5.251575, 179.389908, 9.400575) );
geometry.vertices.push( new THREE.Vector3(5.623425, 179.574005, 9.126637) );
geometry.vertices.push( new THREE.Vector3(6.175987, 180.177399, 8.607225) );
geometry.vertices.push( new THREE.Vector3(6.628349, 180.944305, 7.370700) );
geometry.vertices.push( new THREE.Vector3(7.120988, 179.652405, 5.918250) );
geometry.vertices.push( new THREE.Vector3(6.867225, 179.134094, 7.629150) );
geometry.vertices.push( new THREE.Vector3(6.932512, 181.443405, 5.940450) );
geometry.vertices.push( new THREE.Vector3(6.714975, 183.102402, 6.290325) );
geometry.vertices.push( new THREE.Vector3(6.195788, 184.142609, 7.267050) );
geometry.vertices.push( new THREE.Vector3(5.343712, 183.766907, 9.052238) );
geometry.vertices.push( new THREE.Vector3(5.236350, 182.758911, 10.101000) );
geometry.vertices.push( new THREE.Vector3(5.546325, 184.682999, 8.256901) );
geometry.vertices.push( new THREE.Vector3(4.664250, 176.460403, 9.206362) );
geometry.vertices.push( new THREE.Vector3(5.520900, 176.535400, 8.765661) );
geometry.vertices.push( new THREE.Vector3(4.791825, 176.293106, 9.660750) );
geometry.vertices.push( new THREE.Vector3(4.921950, 176.331406, 9.789938) );
geometry.vertices.push( new THREE.Vector3(5.696925, 176.569504, 8.901150) );
geometry.vertices.push( new THREE.Vector3(5.866162, 177.132706, 9.059401) );
geometry.vertices.push( new THREE.Vector3(6.504413, 176.849609, 7.712175) );
geometry.vertices.push( new THREE.Vector3(6.666712, 177.499908, 7.747237) );
geometry.vertices.push( new THREE.Vector3(7.089600, 178.077393, 6.216600) );
geometry.vertices.push( new THREE.Vector3(6.790125, 178.180893, 7.723725) );
geometry.vertices.push( new THREE.Vector3(5.343450, 176.584488, 8.576438) );
geometry.vertices.push( new THREE.Vector3(6.081750, 176.796402, 7.545263) );
geometry.vertices.push( new THREE.Vector3(6.634612, 177.132401, 6.364913) );
geometry.vertices.push( new THREE.Vector3(6.932512, 177.242599, 6.443588) );
geometry.vertices.push( new THREE.Vector3(1.930530, 175.658203, 12.037650) );
geometry.vertices.push( new THREE.Vector3(2.369708, 175.876495, 11.568939) );
geometry.vertices.push( new THREE.Vector3(1.954148, 175.767395, 12.114711) );
geometry.vertices.push( new THREE.Vector3(2.338057, 175.718613, 11.486771) );
geometry.vertices.push( new THREE.Vector3(2.799701, 175.850601, 11.257760) );
geometry.vertices.push( new THREE.Vector3(2.660438, 175.830002, 11.092050) );
geometry.vertices.push( new THREE.Vector3(3.503261, 175.976593, 10.846730) );
geometry.vertices.push( new THREE.Vector3(3.455929, 175.940598, 10.716001) );
geometry.vertices.push( new THREE.Vector3(4.107188, 176.111603, 10.264690) );
geometry.vertices.push( new THREE.Vector3(3.789413, 176.303192, 9.873863) );
geometry.vertices.push( new THREE.Vector3(1.759567, 175.609512, 11.837890) );
geometry.vertices.push( new THREE.Vector3(2.222359, 175.714905, 11.372890) );
geometry.vertices.push( new THREE.Vector3(2.282138, 176.040695, 10.806600) );
geometry.vertices.push( new THREE.Vector3(3.255570, 176.116104, 10.361440) );
geometry.vertices.push( new THREE.Vector3(2.013855, 175.796204, 11.289530) );
geometry.vertices.push( new THREE.Vector3(1.619344, 176.308899, 10.914260) );
geometry.vertices.push( new THREE.Vector3(1.623788, 175.937607, 11.912180) );
geometry.vertices.push( new THREE.Vector3(1.282568, 176.644104, 11.351170) );
geometry.vertices.push( new THREE.Vector3(1.184423, 176.541702, 12.071660) );
geometry.vertices.push( new THREE.Vector3(1.399946, 175.975891, 12.391800) );
geometry.vertices.push( new THREE.Vector3(0.870544, 176.140106, 12.832459) );
geometry.vertices.push( new THREE.Vector3(0.991654, 175.558899, 13.161079) );
geometry.vertices.push( new THREE.Vector3(0.371189, 175.953705, 13.445470) );
geometry.vertices.push( new THREE.Vector3(0.486026, 175.621109, 13.953940) );
geometry.vertices.push( new THREE.Vector3(0.417660, 175.503403, 13.888730) );
geometry.vertices.push( new THREE.Vector3(1.123324, 175.651505, 13.271210) );
geometry.vertices.push( new THREE.Vector3(1.403389, 175.588501, 12.547280) );
geometry.vertices.push( new THREE.Vector3(1.145029, 175.760605, 13.279800) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.949997, 13.548560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.470001, 14.055861) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.602798, 14.180250) );
geometry.vertices.push( new THREE.Vector3(0.474360, 175.735901, 13.936800) );
geometry.vertices.push( new THREE.Vector3(0.416415, 176.497894, 13.636390) );
geometry.vertices.push( new THREE.Vector3(0.000000, 176.496002, 13.763480) );
geometry.vertices.push( new THREE.Vector3(0.000000, 177.401596, 13.293859) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.743408, 14.151560) );
geometry.vertices.push( new THREE.Vector3(0.387731, 177.414001, 13.188789) );
geometry.vertices.push( new THREE.Vector3(0.000000, 178.417099, 12.733459) );
geometry.vertices.push( new THREE.Vector3(1.018238, 176.461502, 13.067471) );
geometry.vertices.push( new THREE.Vector3(1.585826, 175.765503, 12.748580) );
geometry.vertices.push( new THREE.Vector3(1.547486, 175.664307, 12.711189) );
geometry.vertices.push( new THREE.Vector3(0.700789, 178.466599, 12.457390) );
geometry.vertices.push( new THREE.Vector3(0.488325, 179.110092, 12.235950) );
geometry.vertices.push( new THREE.Vector3(0.361820, 178.448608, 12.671770) );
geometry.vertices.push( new THREE.Vector3(0.000000, 179.156189, 12.437620) );
geometry.vertices.push( new THREE.Vector3(0.975308, 177.436905, 12.650929) );
geometry.vertices.push( new THREE.Vector3(1.409318, 176.407898, 12.646049) );
geometry.vertices.push( new THREE.Vector3(2.226851, 176.490402, 11.638050) );
geometry.vertices.push( new THREE.Vector3(2.252096, 177.730499, 11.497010) );
geometry.vertices.push( new THREE.Vector3(2.513329, 177.123398, 11.483550) );
geometry.vertices.push( new THREE.Vector3(2.833072, 177.716309, 11.366590) );
geometry.vertices.push( new THREE.Vector3(1.998900, 177.189392, 11.683580) );
geometry.vertices.push( new THREE.Vector3(1.762054, 176.469009, 12.180110) );
geometry.vertices.push( new THREE.Vector3(1.351181, 177.021805, 12.400050) );
geometry.vertices.push( new THREE.Vector3(1.451299, 178.129105, 11.823830) );
geometry.vertices.push( new THREE.Vector3(1.728398, 177.563995, 11.773460) );
geometry.vertices.push( new THREE.Vector3(1.983315, 178.068695, 11.415560) );
geometry.vertices.push( new THREE.Vector3(1.620255, 178.434402, 11.240470) );
geometry.vertices.push( new THREE.Vector3(1.771714, 178.654099, 10.940810) );
geometry.vertices.push( new THREE.Vector3(2.079987, 178.419006, 11.120960) );
geometry.vertices.push( new THREE.Vector3(1.840841, 178.840500, 10.666650) );
geometry.vertices.push( new THREE.Vector3(2.131508, 178.677002, 10.802060) );
geometry.vertices.push( new THREE.Vector3(1.896975, 178.941406, 10.427770) );
geometry.vertices.push( new THREE.Vector3(2.126351, 178.802597, 10.522840) );
geometry.vertices.push( new THREE.Vector3(2.136120, 178.999100, 10.251680) );
geometry.vertices.push( new THREE.Vector3(1.950593, 179.128891, 10.204990) );
geometry.vertices.push( new THREE.Vector3(1.757666, 179.132996, 10.313060) );
geometry.vertices.push( new THREE.Vector3(1.617574, 179.031006, 10.550660) );
geometry.vertices.push( new THREE.Vector3(2.972374, 178.840897, 10.477270) );
geometry.vertices.push( new THREE.Vector3(2.518403, 178.867096, 10.306090) );
geometry.vertices.push( new THREE.Vector3(2.565349, 178.905701, 10.374149) );
geometry.vertices.push( new THREE.Vector3(2.134189, 179.018204, 10.199550) );
geometry.vertices.push( new THREE.Vector3(1.946273, 179.144592, 10.139210) );
geometry.vertices.push( new THREE.Vector3(1.886003, 179.234299, 10.204650) );
geometry.vertices.push( new THREE.Vector3(1.666065, 179.284088, 10.282161) );
geometry.vertices.push( new THREE.Vector3(1.533240, 179.259399, 10.549049) );
geometry.vertices.push( new THREE.Vector3(2.160217, 178.965408, 10.149341) );
geometry.vertices.push( new THREE.Vector3(1.915148, 179.047897, 10.089790) );
geometry.vertices.push( new THREE.Vector3(1.889254, 179.245499, 10.144310) );
geometry.vertices.push( new THREE.Vector3(1.787591, 179.262405, 10.040740) );
geometry.vertices.push( new THREE.Vector3(2.097491, 179.471603, 10.169550) );
geometry.vertices.push( new THREE.Vector3(1.965060, 179.400009, 10.172030) );
geometry.vertices.push( new THREE.Vector3(1.971274, 179.396194, 10.133210) );
geometry.vertices.push( new THREE.Vector3(1.867624, 179.296509, 10.164001) );
geometry.vertices.push( new THREE.Vector3(1.803754, 179.459198, 10.324460) );
geometry.vertices.push( new THREE.Vector3(1.877666, 179.298401, 10.088290) );
geometry.vertices.push( new THREE.Vector3(1.803656, 179.344498, 10.063129) );
geometry.vertices.push( new THREE.Vector3(1.911322, 179.412399, 10.118470) );
geometry.vertices.push( new THREE.Vector3(2.027306, 179.492599, 10.159610) );
geometry.vertices.push( new THREE.Vector3(1.648650, 179.548096, 10.596670) );
geometry.vertices.push( new THREE.Vector3(2.048344, 179.582596, 10.457250) );
geometry.vertices.push( new THREE.Vector3(1.932446, 179.698105, 10.765540) );
geometry.vertices.push( new THREE.Vector3(2.351370, 179.740906, 10.773190) );
geometry.vertices.push( new THREE.Vector3(2.308800, 179.869492, 11.063100) );
geometry.vertices.push( new THREE.Vector3(2.800658, 180.060699, 11.368200) );
geometry.vertices.push( new THREE.Vector3(2.396246, 179.668503, 10.420461) );
geometry.vertices.push( new THREE.Vector3(2.083245, 179.472809, 10.216800) );
geometry.vertices.push( new THREE.Vector3(3.334144, 179.830902, 10.793620) );
geometry.vertices.push( new THREE.Vector3(2.888872, 179.785889, 10.649100) );
geometry.vertices.push( new THREE.Vector3(2.416519, 179.690598, 10.351049) );
geometry.vertices.push( new THREE.Vector3(3.266599, 179.984604, 10.623000) );
geometry.vertices.push( new THREE.Vector3(2.930959, 180.037506, 10.557560) );
geometry.vertices.push( new THREE.Vector3(2.366314, 179.718002, 10.340441) );
geometry.vertices.push( new THREE.Vector3(19.166140, 162.664108, -7.785111) );
geometry.vertices.push( new THREE.Vector3(19.326450, 163.065399, -5.476613) );
geometry.vertices.push( new THREE.Vector3(19.134640, 162.591003, -7.774650) );
geometry.vertices.push( new THREE.Vector3(4.337625, 176.478699, 10.546950) );
geometry.vertices.push( new THREE.Vector3(4.224413, 176.162201, 10.391470) );
geometry.vertices.push( new THREE.Vector3(5.059463, 176.769394, 9.964238) );
geometry.vertices.push( new THREE.Vector3(3.607387, 176.277008, 10.970930) );
geometry.vertices.push( new THREE.Vector3(3.737906, 176.828598, 11.039960) );
geometry.vertices.push( new THREE.Vector3(4.438012, 177.051407, 10.697741) );
geometry.vertices.push( new THREE.Vector3(3.827962, 177.409103, 11.081060) );
geometry.vertices.push( new THREE.Vector3(3.152535, 177.203598, 11.296310) );
geometry.vertices.push( new THREE.Vector3(3.857925, 177.877502, 11.021319) );
geometry.vertices.push( new THREE.Vector3(3.330382, 177.770599, 11.240960) );
geometry.vertices.push( new THREE.Vector3(4.471875, 177.654800, 10.742770) );
geometry.vertices.push( new THREE.Vector3(2.905072, 176.654602, 11.332459) );
geometry.vertices.push( new THREE.Vector3(2.830297, 176.035904, 11.308950) );
geometry.vertices.push( new THREE.Vector3(5.089575, 177.345001, 10.130920) );
geometry.vertices.push( new THREE.Vector3(2.934142, 178.461700, 10.839940) );
geometry.vertices.push( new THREE.Vector3(2.539046, 178.278397, 11.160450) );
geometry.vertices.push( new THREE.Vector3(2.942557, 178.203705, 11.121410) );
geometry.vertices.push( new THREE.Vector3(2.539909, 178.532593, 10.863070) );
geometry.vertices.push( new THREE.Vector3(2.924673, 178.590698, 10.731070) );
geometry.vertices.push( new THREE.Vector3(2.566785, 178.656799, 10.702570) );
geometry.vertices.push( new THREE.Vector3(3.328470, 178.428406, 10.783420) );
geometry.vertices.push( new THREE.Vector3(3.348071, 178.162506, 11.035760) );
geometry.vertices.push( new THREE.Vector3(3.857925, 177.877502, 11.021319) );
geometry.vertices.push( new THREE.Vector3(3.811237, 178.200699, 10.841060) );
geometry.vertices.push( new THREE.Vector3(3.741623, 178.433304, 10.640511) );
geometry.vertices.push( new THREE.Vector3(3.698982, 178.608002, 10.541550) );
geometry.vertices.push( new THREE.Vector3(3.311385, 178.592606, 10.653040) );
geometry.vertices.push( new THREE.Vector3(2.963002, 178.840897, 10.561120) );
geometry.vertices.push( new THREE.Vector3(2.565352, 178.887695, 10.433440) );
geometry.vertices.push( new THREE.Vector3(2.126351, 178.802597, 10.522840) );
geometry.vertices.push( new THREE.Vector3(2.136120, 178.999100, 10.251680) );
geometry.vertices.push( new THREE.Vector3(2.972374, 178.840897, 10.477270) );
geometry.vertices.push( new THREE.Vector3(2.565349, 178.905701, 10.374149) );
geometry.vertices.push( new THREE.Vector3(3.321097, 178.824402, 10.449300) );
geometry.vertices.push( new THREE.Vector3(3.321559, 178.813095, 10.503980) );
geometry.vertices.push( new THREE.Vector3(3.698884, 178.820999, 10.446000) );
geometry.vertices.push( new THREE.Vector3(4.121700, 178.670303, 10.351880) );
geometry.vertices.push( new THREE.Vector3(4.174913, 178.546906, 10.428451) );
geometry.vertices.push( new THREE.Vector3(4.038000, 178.869400, 10.301890) );
geometry.vertices.push( new THREE.Vector3(4.002075, 178.869400, 10.237801) );
geometry.vertices.push( new THREE.Vector3(3.685294, 178.825897, 10.376170) );
geometry.vertices.push( new THREE.Vector3(4.275037, 178.940201, 9.994650) );
geometry.vertices.push( new THREE.Vector3(4.221112, 178.945099, 9.977888) );
geometry.vertices.push( new THREE.Vector3(4.405575, 178.740387, 10.080520) );
geometry.vertices.push( new THREE.Vector3(4.537088, 178.688995, 10.146790) );
geometry.vertices.push( new THREE.Vector3(4.688737, 178.574600, 10.241170) );
geometry.vertices.push( new THREE.Vector3(4.283213, 178.390198, 10.540840) );
geometry.vertices.push( new THREE.Vector3(4.864875, 178.357895, 10.297200) );
geometry.vertices.push( new THREE.Vector3(4.397587, 178.082306, 10.681880) );
geometry.vertices.push( new THREE.Vector3(4.471875, 177.654800, 10.742770) );
geometry.vertices.push( new THREE.Vector3(3.827962, 177.409103, 11.081060) );
geometry.vertices.push( new THREE.Vector3(5.043112, 177.979904, 10.252840) );
geometry.vertices.push( new THREE.Vector3(6.247425, 178.882507, 8.761575) );
geometry.vertices.push( new THREE.Vector3(5.984550, 177.861404, 9.099375) );
geometry.vertices.push( new THREE.Vector3(5.618737, 178.711502, 9.510637) );
geometry.vertices.push( new THREE.Vector3(5.623425, 179.574005, 9.126637) );
geometry.vertices.push( new THREE.Vector3(5.249925, 178.822510, 9.742050) );
geometry.vertices.push( new THREE.Vector3(5.251575, 179.389908, 9.400575) );
geometry.vertices.push( new THREE.Vector3(5.035087, 179.287506, 9.547125) );
geometry.vertices.push( new THREE.Vector3(4.908225, 178.875809, 9.814050) );
geometry.vertices.push( new THREE.Vector3(4.836225, 179.246201, 9.603711) );
geometry.vertices.push( new THREE.Vector3(4.715625, 178.879089, 9.777338) );
geometry.vertices.push( new THREE.Vector3(4.703137, 179.223007, 9.617925) );
geometry.vertices.push( new THREE.Vector3(4.590899, 178.893005, 9.781386) );
geometry.vertices.push( new THREE.Vector3(4.493137, 179.057205, 9.783487) );
geometry.vertices.push( new THREE.Vector3(4.576725, 179.161499, 9.648113) );
geometry.vertices.push( new THREE.Vector3(19.358250, 163.138504, -5.482463) );
geometry.vertices.push( new THREE.Vector3(1.214640, 179.171204, 11.144361) );
geometry.vertices.push( new THREE.Vector3(1.403486, 179.591995, 10.841360) );
geometry.vertices.push( new THREE.Vector3(1.158799, 179.557892, 11.285550) );
geometry.vertices.push( new THREE.Vector3(1.752682, 179.835693, 11.661190) );
geometry.vertices.push( new THREE.Vector3(1.797049, 179.824493, 11.079450) );
geometry.vertices.push( new THREE.Vector3(2.200560, 179.986893, 11.320610) );
geometry.vertices.push( new THREE.Vector3(2.125309, 180.128708, 11.887310) );
geometry.vertices.push( new THREE.Vector3(1.431979, 179.836899, 12.023030) );
geometry.vertices.push( new THREE.Vector3(1.879762, 180.278595, 12.421460) );
geometry.vertices.push( new THREE.Vector3(1.256329, 179.960297, 12.386439) );
geometry.vertices.push( new THREE.Vector3(1.151531, 180.227997, 12.558560) );
geometry.vertices.push( new THREE.Vector3(1.230416, 180.639008, 12.604950) );
geometry.vertices.push( new THREE.Vector3(0.526856, 180.515594, 12.415421) );
geometry.vertices.push( new THREE.Vector3(0.000000, 181.353409, 12.571759) );
geometry.vertices.push( new THREE.Vector3(0.000000, 180.495804, 12.469050) );
geometry.vertices.push( new THREE.Vector3(0.667894, 181.238602, 12.530060) );
geometry.vertices.push( new THREE.Vector3(1.344296, 181.249100, 12.487350) );
geometry.vertices.push( new THREE.Vector3(2.414074, 181.480499, 12.225150) );
geometry.vertices.push( new THREE.Vector3(1.363039, 179.224091, 10.822610) );
geometry.vertices.push( new THREE.Vector3(1.507616, 178.906494, 10.792310) );
geometry.vertices.push( new THREE.Vector3(1.533240, 179.259399, 10.549049) );
geometry.vertices.push( new THREE.Vector3(1.363039, 179.224091, 10.822610) );
geometry.vertices.push( new THREE.Vector3(1.617574, 179.031006, 10.550660) );
geometry.vertices.push( new THREE.Vector3(1.771714, 178.654099, 10.940810) );
geometry.vertices.push( new THREE.Vector3(1.840841, 178.840500, 10.666650) );
geometry.vertices.push( new THREE.Vector3(1.620255, 178.434402, 11.240470) );
geometry.vertices.push( new THREE.Vector3(1.357972, 178.737396, 11.129661) );
geometry.vertices.push( new THREE.Vector3(1.451299, 178.129105, 11.823830) );
geometry.vertices.push( new THREE.Vector3(1.241033, 178.605408, 11.773240) );
geometry.vertices.push( new THREE.Vector3(1.015279, 179.071899, 11.672850) );
geometry.vertices.push( new THREE.Vector3(17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(17.461500, 161.463699, -10.243390) );
geometry.vertices.push( new THREE.Vector3(-4.724888, 192.885010, -1.423691) );
geometry.vertices.push( new THREE.Vector3(-4.985438, 194.874802, -3.260996) );
geometry.vertices.push( new THREE.Vector3(-5.253638, 194.928391, -1.860476) );
geometry.vertices.push( new THREE.Vector3(-4.385250, 192.904099, -3.325635) );
geometry.vertices.push( new THREE.Vector3(-5.776125, 194.794495, -1.121921) );
geometry.vertices.push( new THREE.Vector3(-5.911688, 197.170502, -1.821847) );
geometry.vertices.push( new THREE.Vector3(-5.647500, 197.198196, -2.242856) );
geometry.vertices.push( new THREE.Vector3(-5.537925, 197.225204, -2.994986) );
geometry.vertices.push( new THREE.Vector3(-5.707650, 197.144608, -3.561431) );
geometry.vertices.push( new THREE.Vector3(-5.243813, 194.639603, -4.287188) );
geometry.vertices.push( new THREE.Vector3(-4.841813, 192.565506, -4.941788) );
geometry.vertices.push( new THREE.Vector3(-3.968738, 192.003403, -3.297045) );
geometry.vertices.push( new THREE.Vector3(-4.150987, 191.591202, -1.009856) );
geometry.vertices.push( new THREE.Vector3(-5.596538, 192.507401, -0.348561) );
geometry.vertices.push( new THREE.Vector3(-6.230100, 192.177399, -0.184671) );
geometry.vertices.push( new THREE.Vector3(-6.214725, 194.708298, -0.915101) );
geometry.vertices.push( new THREE.Vector3(-6.252000, 197.140900, -1.677176) );
geometry.vertices.push( new THREE.Vector3(-6.256987, 199.874603, -2.529806) );
geometry.vertices.push( new THREE.Vector3(-4.890862, 190.949600, 0.026741) );
geometry.vertices.push( new THREE.Vector3(-3.781988, 191.450592, -0.873315) );
geometry.vertices.push( new THREE.Vector3(-5.652000, 190.146393, 0.605996) );
geometry.vertices.push( new THREE.Vector3(-6.245775, 189.990799, 0.520324) );
geometry.vertices.push( new THREE.Vector3(-5.730113, 189.485596, 1.380791) );
geometry.vertices.push( new THREE.Vector3(-6.555112, 188.000595, 1.556156) );
geometry.vertices.push( new THREE.Vector3(-4.386862, 190.823303, 0.581520) );
geometry.vertices.push( new THREE.Vector3(-5.823712, 194.307800, -4.468650) );
geometry.vertices.push( new THREE.Vector3(-5.414475, 191.694397, -5.292112) );
geometry.vertices.push( new THREE.Vector3(-5.164237, 189.926605, -5.852438) );
geometry.vertices.push( new THREE.Vector3(-4.471575, 191.022400, -5.379225) );
geometry.vertices.push( new THREE.Vector3(-4.467075, 188.927307, -6.257475) );
geometry.vertices.push( new THREE.Vector3(-4.010813, 190.649200, -5.210925) );
geometry.vertices.push( new THREE.Vector3(-3.535005, 191.513596, -3.324296) );
geometry.vertices.push( new THREE.Vector3(-5.504175, 187.434692, -6.444975) );
geometry.vertices.push( new THREE.Vector3(-6.387188, 191.652405, -4.558425) );
geometry.vertices.push( new THREE.Vector3(-6.717750, 194.260895, -3.325062) );
geometry.vertices.push( new THREE.Vector3(-6.304388, 194.283707, -4.101375) );
geometry.vertices.push( new THREE.Vector3(-6.746812, 191.688004, -3.472027) );
geometry.vertices.push( new THREE.Vector3(-6.515625, 189.587997, -4.865962) );
geometry.vertices.push( new THREE.Vector3(-7.109512, 189.575607, -3.399739) );
geometry.vertices.push( new THREE.Vector3(-6.755325, 187.406998, -5.067112) );
geometry.vertices.push( new THREE.Vector3(-7.283437, 187.349609, -3.397350) );
geometry.vertices.push( new THREE.Vector3(-7.360875, 187.414505, -1.660537) );
geometry.vertices.push( new THREE.Vector3(-5.164237, 189.926605, -5.852438) );
geometry.vertices.push( new THREE.Vector3(-5.504175, 187.434692, -6.444975) );
geometry.vertices.push( new THREE.Vector3(-5.414475, 191.694397, -5.292112) );
geometry.vertices.push( new THREE.Vector3(-5.823712, 194.307800, -4.468650) );
geometry.vertices.push( new THREE.Vector3(-6.333750, 197.071106, -3.395437) );
geometry.vertices.push( new THREE.Vector3(-6.552713, 197.101898, -2.834445) );
geometry.vertices.push( new THREE.Vector3(-6.805049, 189.856903, -0.212878) );
geometry.vertices.push( new THREE.Vector3(-7.081950, 187.488403, 0.238822) );
geometry.vertices.push( new THREE.Vector3(-7.189162, 189.658905, -1.689701) );
geometry.vertices.push( new THREE.Vector3(-7.011488, 191.833099, -1.898820) );
geometry.vertices.push( new THREE.Vector3(-6.814238, 194.385391, -2.099235) );
geometry.vertices.push( new THREE.Vector3(-6.553013, 197.117996, -2.268480) );
geometry.vertices.push( new THREE.Vector3(-6.294375, 199.894897, -2.678970) );
geometry.vertices.push( new THREE.Vector3(-6.266325, 199.890808, -2.753456) );
geometry.vertices.push( new THREE.Vector3(-6.291487, 199.888901, -2.610795) );
geometry.vertices.push( new THREE.Vector3(-6.430050, 197.141998, -1.825290) );
geometry.vertices.push( new THREE.Vector3(-6.556462, 194.499008, -1.181490) );
geometry.vertices.push( new THREE.Vector3(-6.651000, 191.983109, -0.660660) );
geometry.vertices.push( new THREE.Vector3(-6.256987, 199.874603, -2.529806) );
geometry.vertices.push( new THREE.Vector3(-6.252000, 197.140900, -1.677176) );
geometry.vertices.push( new THREE.Vector3(-6.214725, 194.708298, -0.915101) );
geometry.vertices.push( new THREE.Vector3(-6.230100, 192.177399, -0.184671) );
geometry.vertices.push( new THREE.Vector3(-6.245775, 189.990799, 0.520324) );
geometry.vertices.push( new THREE.Vector3(-6.555112, 188.000595, 1.556156) );
geometry.vertices.push( new THREE.Vector3(-6.257550, 199.915894, -2.563943) );
geometry.vertices.push( new THREE.Vector3(-6.211950, 199.875702, -2.525216) );
geometry.vertices.push( new THREE.Vector3(-6.072037, 197.048294, -3.628174) );
geometry.vertices.push( new THREE.Vector3(-6.223688, 199.882095, -2.759576) );
geometry.vertices.push( new THREE.Vector3(-6.266325, 199.890808, -2.753456) );
geometry.vertices.push( new THREE.Vector3(-6.259537, 199.945496, -2.633074) );
geometry.vertices.push( new THREE.Vector3(-6.256987, 199.874603, -2.529806) );
geometry.vertices.push( new THREE.Vector3(6.333750, 197.071106, -3.395437) );
geometry.vertices.push( new THREE.Vector3(6.294375, 199.894897, -2.678970) );
geometry.vertices.push( new THREE.Vector3(6.552713, 197.101898, -2.834445) );
geometry.vertices.push( new THREE.Vector3(6.237863, 199.921494, -2.719702) );
geometry.vertices.push( new THREE.Vector3(5.823712, 194.307800, -4.468650) );
geometry.vertices.push( new THREE.Vector3(6.072037, 197.048294, -3.628170) );
geometry.vertices.push( new THREE.Vector3(6.223688, 199.882095, -2.759576) );
geometry.vertices.push( new THREE.Vector3(6.237863, 199.921494, -2.719702) );
geometry.vertices.push( new THREE.Vector3(6.259537, 199.945496, -2.633074) );
geometry.vertices.push( new THREE.Vector3(6.278850, 199.882095, -2.560305) );
geometry.vertices.push( new THREE.Vector3(6.211950, 199.875702, -2.525216) );
geometry.vertices.push( new THREE.Vector3(6.256987, 199.874603, -2.529806) );
geometry.vertices.push( new THREE.Vector3(5.164237, 189.926605, -5.852438) );
geometry.vertices.push( new THREE.Vector3(6.755325, 187.406998, -5.067112) );
geometry.vertices.push( new THREE.Vector3(5.504175, 187.434692, -6.444975) );
geometry.vertices.push( new THREE.Vector3(6.515625, 189.587997, -4.865962) );
geometry.vertices.push( new THREE.Vector3(5.414475, 191.694397, -5.292112) );
geometry.vertices.push( new THREE.Vector3(6.387188, 191.652405, -4.558425) );
geometry.vertices.push( new THREE.Vector3(6.304388, 194.283707, -4.101375) );
geometry.vertices.push( new THREE.Vector3(6.717750, 194.260895, -3.325062) );
geometry.vertices.push( new THREE.Vector3(6.553013, 197.117996, -2.268480) );
geometry.vertices.push( new THREE.Vector3(7.109512, 189.575607, -3.399739) );
geometry.vertices.push( new THREE.Vector3(7.360875, 187.414505, -1.660537) );
geometry.vertices.push( new THREE.Vector3(7.283437, 187.349609, -3.397346) );
geometry.vertices.push( new THREE.Vector3(6.746812, 191.688004, -3.472024) );
geometry.vertices.push( new THREE.Vector3(6.814238, 194.385391, -2.099235) );
geometry.vertices.push( new THREE.Vector3(7.011488, 191.833099, -1.898820) );
geometry.vertices.push( new THREE.Vector3(6.430050, 197.141998, -1.825290) );
geometry.vertices.push( new THREE.Vector3(6.291487, 199.888901, -2.610795) );
geometry.vertices.push( new THREE.Vector3(6.278850, 199.882095, -2.560305) );
geometry.vertices.push( new THREE.Vector3(6.556462, 194.499008, -1.181490) );
geometry.vertices.push( new THREE.Vector3(6.651000, 191.983109, -0.660656) );
geometry.vertices.push( new THREE.Vector3(7.189162, 189.658905, -1.689701) );
geometry.vertices.push( new THREE.Vector3(6.805049, 189.856903, -0.212877) );
geometry.vertices.push( new THREE.Vector3(6.230100, 192.177399, -0.184670) );
geometry.vertices.push( new THREE.Vector3(6.245775, 189.990799, 0.520324) );
geometry.vertices.push( new THREE.Vector3(6.555112, 188.000595, 1.556156) );
geometry.vertices.push( new THREE.Vector3(7.081950, 187.488403, 0.238824) );
geometry.vertices.push( new THREE.Vector3(6.252000, 197.140900, -1.677176) );
geometry.vertices.push( new THREE.Vector3(6.214725, 194.708298, -0.915097) );
geometry.vertices.push( new THREE.Vector3(5.776125, 194.794495, -1.121921) );
geometry.vertices.push( new THREE.Vector3(6.230100, 192.177399, -0.184670) );
geometry.vertices.push( new THREE.Vector3(6.214725, 194.708298, -0.915097) );
geometry.vertices.push( new THREE.Vector3(5.596538, 192.507401, -0.348560) );
geometry.vertices.push( new THREE.Vector3(4.724888, 192.885010, -1.423691) );
geometry.vertices.push( new THREE.Vector3(4.150987, 191.591202, -1.009856) );
geometry.vertices.push( new THREE.Vector3(4.385250, 192.904099, -3.325635) );
geometry.vertices.push( new THREE.Vector3(3.968738, 192.003403, -3.297045) );
geometry.vertices.push( new THREE.Vector3(4.841813, 192.565506, -4.941788) );
geometry.vertices.push( new THREE.Vector3(4.471575, 191.022400, -5.379225) );
geometry.vertices.push( new THREE.Vector3(4.985438, 194.874802, -3.260996) );
geometry.vertices.push( new THREE.Vector3(5.253638, 194.928391, -1.860476) );
geometry.vertices.push( new THREE.Vector3(5.911688, 197.170502, -1.821847) );
geometry.vertices.push( new THREE.Vector3(6.252000, 197.140900, -1.677176) );
geometry.vertices.push( new THREE.Vector3(6.256987, 199.874603, -2.529806) );
geometry.vertices.push( new THREE.Vector3(5.647500, 197.198196, -2.242853) );
geometry.vertices.push( new THREE.Vector3(5.537925, 197.225204, -2.994986) );
geometry.vertices.push( new THREE.Vector3(5.707650, 197.144608, -3.561427) );
geometry.vertices.push( new THREE.Vector3(5.243813, 194.639603, -4.287188) );
geometry.vertices.push( new THREE.Vector3(6.211950, 199.875702, -2.525216) );
geometry.vertices.push( new THREE.Vector3(6.175687, 199.889999, -2.605342) );
geometry.vertices.push( new THREE.Vector3(6.182962, 199.888092, -2.687576) );
geometry.vertices.push( new THREE.Vector3(6.223688, 199.882095, -2.759576) );
geometry.vertices.push( new THREE.Vector3(6.072037, 197.048294, -3.628170) );
geometry.vertices.push( new THREE.Vector3(5.823712, 194.307800, -4.468650) );
geometry.vertices.push( new THREE.Vector3(6.237863, 199.921494, -2.719702) );
geometry.vertices.push( new THREE.Vector3(6.259537, 199.945496, -2.633074) );
geometry.vertices.push( new THREE.Vector3(6.278850, 199.882095, -2.560305) );
geometry.vertices.push( new THREE.Vector3(5.414475, 191.694397, -5.292112) );
geometry.vertices.push( new THREE.Vector3(5.164237, 189.926605, -5.852438) );
geometry.vertices.push( new THREE.Vector3(4.467113, 188.927307, -6.257475) );
geometry.vertices.push( new THREE.Vector3(4.010813, 190.649200, -5.210925) );
geometry.vertices.push( new THREE.Vector3(3.535009, 191.513596, -3.324296) );
geometry.vertices.push( new THREE.Vector3(3.781988, 191.450592, -0.873311) );
geometry.vertices.push( new THREE.Vector3(5.504175, 187.434692, -6.444975) );
geometry.vertices.push( new THREE.Vector3(4.890862, 190.949600, 0.026742) );
geometry.vertices.push( new THREE.Vector3(5.652000, 190.146393, 0.605996) );
geometry.vertices.push( new THREE.Vector3(6.245775, 189.990799, 0.520324) );
geometry.vertices.push( new THREE.Vector3(5.730113, 189.485596, 1.380791) );
geometry.vertices.push( new THREE.Vector3(6.555112, 188.000595, 1.556156) );
geometry.vertices.push( new THREE.Vector3(4.386862, 190.823303, 0.581520) );
geometry.vertices.push( new THREE.Vector3(0.000000, 192.276001, -1.011960) );
geometry.vertices.push( new THREE.Vector3(1.583246, 191.857895, 1.330687) );
geometry.vertices.push( new THREE.Vector3(1.519946, 192.069397, -1.077555) );
geometry.vertices.push( new THREE.Vector3(0.000000, 192.098999, 1.459583) );
geometry.vertices.push( new THREE.Vector3(0.000000, 187.177505, -8.667525) );
geometry.vertices.push( new THREE.Vector3(1.858534, 185.414200, -9.154725) );
geometry.vertices.push( new THREE.Vector3(0.000000, 185.546188, -9.362100) );
geometry.vertices.push( new THREE.Vector3(1.836446, 187.278000, -8.367975) );
geometry.vertices.push( new THREE.Vector3(6.380700, 175.950394, 6.340837) );
geometry.vertices.push( new THREE.Vector3(6.977662, 177.178894, 6.162375) );
geometry.vertices.push( new THREE.Vector3(6.651750, 177.069702, 6.262425) );
geometry.vertices.push( new THREE.Vector3(6.932512, 177.242599, 6.443588) );
geometry.vertices.push( new THREE.Vector3(7.089600, 178.077393, 6.216600) );
geometry.vertices.push( new THREE.Vector3(6.634612, 177.132401, 6.364913) );
geometry.vertices.push( new THREE.Vector3(7.316326, 176.229401, 4.227525) );
geometry.vertices.push( new THREE.Vector3(7.344338, 178.322189, 4.306800) );
geometry.vertices.push( new THREE.Vector3(6.782100, 175.974792, 6.221363) );
geometry.vertices.push( new THREE.Vector3(6.680737, 175.281799, 6.219938) );
geometry.vertices.push( new THREE.Vector3(6.234825, 175.276505, 6.307575) );
geometry.vertices.push( new THREE.Vector3(6.128963, 174.537689, 6.300750) );
geometry.vertices.push( new THREE.Vector3(7.715738, 175.023407, 1.576624) );
geometry.vertices.push( new THREE.Vector3(7.694026, 176.439804, 2.241360) );
geometry.vertices.push( new THREE.Vector3(7.269862, 174.693802, 4.096350) );
geometry.vertices.push( new THREE.Vector3(6.486937, 174.537689, 6.236662) );
geometry.vertices.push( new THREE.Vector3(6.025013, 173.834305, 6.308587) );
geometry.vertices.push( new THREE.Vector3(6.371887, 173.837601, 6.225562) );
geometry.vertices.push( new THREE.Vector3(6.189375, 172.889297, 6.276337) );
geometry.vertices.push( new THREE.Vector3(7.155675, 173.411301, 3.965363) );
geometry.vertices.push( new THREE.Vector3(6.895875, 171.718903, 3.784238) );
geometry.vertices.push( new THREE.Vector3(7.510800, 172.609100, 1.932416) );
geometry.vertices.push( new THREE.Vector3(7.612088, 173.668503, 1.921421) );
geometry.vertices.push( new THREE.Vector3(8.044950, 178.843506, -1.945575) );
geometry.vertices.push( new THREE.Vector3(7.613025, 177.483704, -2.876033) );
geometry.vertices.push( new THREE.Vector3(7.548600, 179.117996, -3.139654) );
geometry.vertices.push( new THREE.Vector3(7.873762, 176.864304, -1.666177) );
geometry.vertices.push( new THREE.Vector3(7.950562, 176.459595, 0.526541) );
geometry.vertices.push( new THREE.Vector3(7.866974, 175.732895, 0.242652) );
geometry.vertices.push( new THREE.Vector3(7.765913, 174.374207, 0.671884) );
geometry.vertices.push( new THREE.Vector3(7.618387, 173.330994, 0.944490) );
geometry.vertices.push( new THREE.Vector3(7.377714, 171.796494, 0.950134) );
geometry.vertices.push( new THREE.Vector3(8.124300, 178.706604, 0.508088) );
geometry.vertices.push( new THREE.Vector3(7.573162, 173.950500, -0.290228) );
geometry.vertices.push( new THREE.Vector3(7.806562, 175.067596, -0.006434) );
geometry.vertices.push( new THREE.Vector3(7.634250, 175.654495, -1.628216) );
geometry.vertices.push( new THREE.Vector3(7.575937, 172.223602, -0.884685) );
geometry.vertices.push( new THREE.Vector3(7.447313, 174.413605, -2.095309) );
geometry.vertices.push( new THREE.Vector3(7.500787, 175.880203, -2.481799) );
geometry.vertices.push( new THREE.Vector3(7.405725, 176.074509, -3.201135) );
geometry.vertices.push( new THREE.Vector3(6.935588, 178.506012, -5.044275) );
geometry.vertices.push( new THREE.Vector3(7.235063, 176.263504, -4.247400) );
geometry.vertices.push( new THREE.Vector3(7.011000, 176.475006, -5.258250) );
geometry.vertices.push( new THREE.Vector3(7.004887, 174.956589, -5.564813) );
geometry.vertices.push( new THREE.Vector3(7.367212, 174.590195, -3.632085) );
geometry.vertices.push( new THREE.Vector3(7.493512, 170.419495, 0.108503) );
geometry.vertices.push( new THREE.Vector3(7.754250, 170.931000, -1.355411) );
geometry.vertices.push( new THREE.Vector3(7.381725, 172.472198, -2.632680) );
geometry.vertices.push( new THREE.Vector3(7.451550, 172.752411, -4.074413) );
geometry.vertices.push( new THREE.Vector3(7.188863, 173.156204, -5.846213) );
geometry.vertices.push( new THREE.Vector3(6.297150, 175.207901, -7.339875) );
geometry.vertices.push( new THREE.Vector3(6.352688, 173.478394, -7.646625) );
geometry.vertices.push( new THREE.Vector3(6.384900, 171.913101, -7.829437) );
geometry.vertices.push( new THREE.Vector3(7.734000, 171.120407, -2.970315) );
geometry.vertices.push( new THREE.Vector3(7.553926, 171.472092, -4.405725) );
geometry.vertices.push( new THREE.Vector3(7.198725, 171.752304, -6.094350) );
geometry.vertices.push( new THREE.Vector3(4.424438, 173.488907, -8.897023) );
geometry.vertices.push( new THREE.Vector3(4.500563, 171.943497, -9.116662) );
geometry.vertices.push( new THREE.Vector3(2.117085, 173.310013, -9.270225) );
geometry.vertices.push( new THREE.Vector3(2.209260, 171.704605, -9.464025) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.281509, -9.302551) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.505905, -9.487087) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.057907, -9.294488) );
geometry.vertices.push( new THREE.Vector3(2.041545, 175.021500, -9.247838) );
geometry.vertices.push( new THREE.Vector3(4.382850, 175.161011, -8.772038) );
geometry.vertices.push( new THREE.Vector3(6.730650, 176.597198, -6.197625) );
geometry.vertices.push( new THREE.Vector3(6.266550, 176.766800, -7.224075) );
geometry.vertices.push( new THREE.Vector3(4.278525, 176.774292, -8.747362) );
geometry.vertices.push( new THREE.Vector3(1.938375, 176.539093, -9.282637) );
geometry.vertices.push( new THREE.Vector3(0.000000, 176.485504, -9.374738) );
geometry.vertices.push( new THREE.Vector3(1.915140, 178.570099, -9.562538) );
geometry.vertices.push( new THREE.Vector3(4.139400, 180.908600, -8.928300) );
geometry.vertices.push( new THREE.Vector3(4.170000, 178.705902, -8.856375) );
geometry.vertices.push( new THREE.Vector3(6.216150, 178.643600, -7.089638) );
geometry.vertices.push( new THREE.Vector3(6.957075, 181.051102, -5.105963) );
geometry.vertices.push( new THREE.Vector3(6.042225, 180.966003, -7.133999) );
geometry.vertices.push( new THREE.Vector3(7.321762, 181.573502, -3.237855) );
geometry.vertices.push( new THREE.Vector3(6.907350, 183.499893, -5.124675) );
geometry.vertices.push( new THREE.Vector3(5.925000, 183.324005, -7.141950) );
geometry.vertices.push( new THREE.Vector3(3.972375, 183.304901, -8.900288) );
geometry.vertices.push( new THREE.Vector3(1.942294, 183.277100, -9.603637) );
geometry.vertices.push( new THREE.Vector3(1.886741, 180.771011, -9.767249) );
geometry.vertices.push( new THREE.Vector3(0.000000, 178.523300, -9.775837) );
geometry.vertices.push( new THREE.Vector3(0.000000, 180.882004, -10.023231) );
geometry.vertices.push( new THREE.Vector3(0.000000, 183.230194, -9.864188) );
geometry.vertices.push( new THREE.Vector3(3.922462, 185.491898, -8.454113) );
geometry.vertices.push( new THREE.Vector3(5.868075, 185.509903, -6.855300) );
geometry.vertices.push( new THREE.Vector3(6.870937, 185.572891, -5.080050) );
geometry.vertices.push( new THREE.Vector3(7.302375, 183.699005, -3.436451) );
geometry.vertices.push( new THREE.Vector3(7.301400, 185.643692, -3.477570) );
geometry.vertices.push( new THREE.Vector3(7.424362, 185.776901, -1.691805) );
geometry.vertices.push( new THREE.Vector3(7.360875, 187.414505, -1.660537) );
geometry.vertices.push( new THREE.Vector3(7.081950, 187.488403, 0.238824) );
geometry.vertices.push( new THREE.Vector3(7.307925, 185.862000, 0.389520) );
geometry.vertices.push( new THREE.Vector3(7.059975, 185.825592, 2.233136) );
geometry.vertices.push( new THREE.Vector3(7.490063, 184.340591, 0.433215) );
geometry.vertices.push( new THREE.Vector3(7.507576, 184.062393, -1.750511) );
geometry.vertices.push( new THREE.Vector3(6.555112, 188.000595, 1.556156) );
geometry.vertices.push( new THREE.Vector3(7.692375, 182.701508, -1.709587) );
geometry.vertices.push( new THREE.Vector3(7.851601, 182.368896, 0.524340) );
geometry.vertices.push( new THREE.Vector3(7.550512, 182.156601, 2.594092) );
geometry.vertices.push( new THREE.Vector3(8.099550, 180.518600, 0.544039) );
geometry.vertices.push( new THREE.Vector3(7.682625, 180.289108, 2.572965) );
geometry.vertices.push( new THREE.Vector3(7.676512, 178.514603, 2.425328) );
geometry.vertices.push( new THREE.Vector3(7.298625, 180.054001, 4.322400) );
geometry.vertices.push( new THREE.Vector3(7.175100, 181.884003, 4.318462) );
geometry.vertices.push( new THREE.Vector3(7.824712, 181.748199, -1.936489) );
geometry.vertices.push( new THREE.Vector3(7.964812, 180.801697, -2.037461) );
geometry.vertices.push( new THREE.Vector3(5.504175, 187.434692, -6.444975) );
geometry.vertices.push( new THREE.Vector3(3.513304, 188.912994, -6.723638) );
geometry.vertices.push( new THREE.Vector3(4.467113, 188.927307, -6.257475) );
geometry.vertices.push( new THREE.Vector3(3.766688, 187.297897, -7.641750) );
geometry.vertices.push( new THREE.Vector3(3.535009, 191.513596, -3.324296) );
geometry.vertices.push( new THREE.Vector3(2.730285, 191.677109, -0.950381) );
geometry.vertices.push( new THREE.Vector3(3.781988, 191.450592, -0.873311) );
geometry.vertices.push( new THREE.Vector3(2.868165, 191.464096, -3.310144) );
geometry.vertices.push( new THREE.Vector3(1.669399, 190.717102, -5.399587) );
geometry.vertices.push( new THREE.Vector3(3.074224, 190.579498, -5.111025) );
geometry.vertices.push( new THREE.Vector3(1.862168, 188.916000, -7.265475) );
geometry.vertices.push( new THREE.Vector3(4.010813, 190.649200, -5.210925) );
geometry.vertices.push( new THREE.Vector3(0.000000, 187.603104, 10.120990) );
geometry.vertices.push( new THREE.Vector3(1.492028, 189.139496, 8.428912) );
geometry.vertices.push( new THREE.Vector3(0.000000, 189.277100, 8.479500) );
geometry.vertices.push( new THREE.Vector3(1.293236, 187.526596, 10.000690) );
geometry.vertices.push( new THREE.Vector3(2.900963, 188.718002, 8.093663) );
geometry.vertices.push( new THREE.Vector3(3.813750, 186.876404, 8.996888) );
geometry.vertices.push( new THREE.Vector3(4.141500, 188.042999, 7.534388) );
geometry.vertices.push( new THREE.Vector3(2.648434, 187.294098, 9.637238) );
geometry.vertices.push( new THREE.Vector3(4.956450, 186.269196, 8.096437) );
geometry.vertices.push( new THREE.Vector3(5.912850, 186.718506, 5.802938) );
geometry.vertices.push( new THREE.Vector3(5.169787, 187.362000, 6.652912) );
geometry.vertices.push( new THREE.Vector3(5.782913, 185.706696, 7.125900) );
geometry.vertices.push( new THREE.Vector3(6.423938, 185.001404, 6.030712) );
geometry.vertices.push( new THREE.Vector3(6.714975, 183.102402, 6.290325) );
geometry.vertices.push( new THREE.Vector3(6.965962, 183.829910, 4.675500) );
geometry.vertices.push( new THREE.Vector3(6.195788, 184.142609, 7.267050) );
geometry.vertices.push( new THREE.Vector3(5.546325, 184.682999, 8.256901) );
geometry.vertices.push( new THREE.Vector3(4.584788, 185.119904, 9.206288) );
geometry.vertices.push( new THREE.Vector3(3.585491, 185.435196, 10.001140) );
geometry.vertices.push( new THREE.Vector3(2.444385, 185.643005, 10.598590) );
geometry.vertices.push( new THREE.Vector3(1.069965, 185.758499, 11.005160) );
geometry.vertices.push( new THREE.Vector3(0.000000, 185.802399, 11.105850) );
geometry.vertices.push( new THREE.Vector3(0.000000, 190.821396, -5.625262) );
geometry.vertices.push( new THREE.Vector3(0.000000, 189.069702, -7.448588) );
geometry.vertices.push( new THREE.Vector3(1.519946, 192.069397, -1.077555) );
geometry.vertices.push( new THREE.Vector3(0.000000, 191.908890, -3.637541) );
geometry.vertices.push( new THREE.Vector3(0.000000, 192.276001, -1.011960) );
geometry.vertices.push( new THREE.Vector3(1.528650, 191.728104, -3.564011) );
geometry.vertices.push( new THREE.Vector3(2.730285, 191.677109, -0.950381) );
geometry.vertices.push( new THREE.Vector3(2.856979, 191.441208, 1.062191) );
geometry.vertices.push( new THREE.Vector3(0.000000, 190.500397, 6.389175) );
geometry.vertices.push( new THREE.Vector3(1.620442, 190.349304, 6.282675) );
geometry.vertices.push( new THREE.Vector3(0.000000, 191.314896, 4.039350) );
geometry.vertices.push( new THREE.Vector3(1.685846, 191.102600, 3.927975) );
geometry.vertices.push( new THREE.Vector3(5.258512, 188.404099, 4.878225) );
geometry.vertices.push( new THREE.Vector3(4.216200, 190.168503, 3.270019) );
geometry.vertices.push( new THREE.Vector3(4.330087, 189.161606, 5.464163) );
geometry.vertices.push( new THREE.Vector3(5.085075, 189.520096, 2.835814) );
geometry.vertices.push( new THREE.Vector3(6.017438, 187.626007, 4.176300) );
geometry.vertices.push( new THREE.Vector3(5.883675, 188.780289, 2.304563) );
geometry.vertices.push( new THREE.Vector3(5.730113, 189.485596, 1.380791) );
geometry.vertices.push( new THREE.Vector3(4.386862, 190.823303, 0.581520) );
geometry.vertices.push( new THREE.Vector3(3.012836, 190.760193, 3.662242) );
geometry.vertices.push( new THREE.Vector3(3.105870, 189.871094, 5.901638) );
geometry.vertices.push( new THREE.Vector3(3.890325, 190.993500, 0.794175) );
geometry.vertices.push( new THREE.Vector3(-14.112491, 159.936005, -12.745131) );
geometry.vertices.push( new THREE.Vector3(-9.636526, 158.684601, -14.943939) );
geometry.vertices.push( new THREE.Vector3(-14.089310, 159.862900, -12.724720) );
geometry.vertices.push( new THREE.Vector3(6.578625, 185.917099, 4.735950) );
geometry.vertices.push( new THREE.Vector3(7.207125, 184.309097, 2.946829) );
geometry.vertices.push( new THREE.Vector3(6.648450, 186.760498, 3.317636) );
geometry.vertices.push( new THREE.Vector3(6.932512, 181.443405, 5.940450) );
geometry.vertices.push( new THREE.Vector3(7.120988, 179.652405, 5.918250) );
geometry.vertices.push( new THREE.Vector3(-9.652388, 158.427002, -14.968760) );
geometry.vertices.push( new THREE.Vector3(16.018200, 162.584610, 1.787291) );
geometry.vertices.push( new THREE.Vector3(12.701890, 161.865799, 2.989312) );
geometry.vertices.push( new THREE.Vector3(15.991880, 162.511505, 1.778621) );
geometry.vertices.push( new THREE.Vector3(10.494189, 166.859604, -2.506755) );
geometry.vertices.push( new THREE.Vector3(7.635489, 168.052094, 0.223150) );
geometry.vertices.push( new THREE.Vector3(9.323925, 166.471512, -0.192122) );
geometry.vertices.push( new THREE.Vector3(8.532787, 168.677200, -1.748310) );
geometry.vertices.push( new THREE.Vector3(7.943588, 169.859299, -1.407907) );
geometry.vertices.push( new THREE.Vector3(4.636950, 161.572098, 5.927513) );
geometry.vertices.push( new THREE.Vector3(7.566038, 161.433395, 5.093325) );
geometry.vertices.push( new THREE.Vector3(7.216425, 161.807297, 4.898475) );
geometry.vertices.push( new THREE.Vector3(4.920563, 160.936493, 6.100500) );
geometry.vertices.push( new THREE.Vector3(13.536599, 165.144394, -2.325769) );
geometry.vertices.push( new THREE.Vector3(11.701840, 164.832001, -0.124041) );
geometry.vertices.push( new THREE.Vector3(9.416513, 164.000198, 1.423549) );
geometry.vertices.push( new THREE.Vector3(6.854325, 164.957596, 3.277253) );
geometry.vertices.push( new THREE.Vector3(7.941824, 163.485703, 3.263561) );
geometry.vertices.push( new THREE.Vector3(7.660840, 165.429001, 1.279796) );
geometry.vertices.push( new THREE.Vector3(5.934600, 163.130295, 4.871925) );
geometry.vertices.push( new THREE.Vector3(9.506212, 162.511505, 3.631571) );
geometry.vertices.push( new THREE.Vector3(16.013660, 164.350494, -1.361104) );
geometry.vertices.push( new THREE.Vector3(17.440460, 164.975601, -3.151110) );
geometry.vertices.push( new THREE.Vector3(11.317841, 163.131790, 2.079705) );
geometry.vertices.push( new THREE.Vector3(13.872830, 163.860794, 0.510795) );
geometry.vertices.push( new THREE.Vector3(10.307549, 162.022903, 4.100925) );
geometry.vertices.push( new THREE.Vector3(12.629630, 162.439896, 3.204334) );
geometry.vertices.push( new THREE.Vector3(15.831409, 163.096497, 1.843691) );
geometry.vertices.push( new THREE.Vector3(19.148891, 164.265396, -2.771951) );
geometry.vertices.push( new THREE.Vector3(6.384900, 171.913101, -7.829437) );
geometry.vertices.push( new THREE.Vector3(4.500563, 171.943497, -9.116662) );
geometry.vertices.push( new THREE.Vector3(2.209260, 171.704605, -9.464025) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.505905, -9.487087) );
geometry.vertices.push( new THREE.Vector3(7.203600, 169.215805, 1.189657) );
geometry.vertices.push( new THREE.Vector3(7.493512, 170.419495, 0.108503) );
geometry.vertices.push( new THREE.Vector3(7.754250, 170.931000, -1.355411) );
geometry.vertices.push( new THREE.Vector3(7.734000, 171.120407, -2.970315) );
geometry.vertices.push( new THREE.Vector3(7.553926, 171.472092, -4.405725) );
geometry.vertices.push( new THREE.Vector3(7.198725, 171.752304, -6.094350) );
geometry.vertices.push( new THREE.Vector3(7.066761, 170.070404, 1.366553) );
geometry.vertices.push( new THREE.Vector3(6.072037, 169.750092, 2.755598) );
geometry.vertices.push( new THREE.Vector3(5.381925, 165.020599, 4.777725) );
geometry.vertices.push( new THREE.Vector3(6.127988, 166.537903, 3.528379) );
geometry.vertices.push( new THREE.Vector3(7.005525, 166.611404, 1.508599) );
geometry.vertices.push( new THREE.Vector3(6.725962, 167.886398, 2.347024) );
geometry.vertices.push( new THREE.Vector3(6.382800, 168.721100, 2.501542) );
geometry.vertices.push( new THREE.Vector3(5.080087, 168.419998, 3.698014) );
geometry.vertices.push( new THREE.Vector3(4.959712, 169.139999, 4.081725) );
geometry.vertices.push( new THREE.Vector3(5.436262, 167.488892, 3.622092) );
geometry.vertices.push( new THREE.Vector3(4.400625, 162.614594, 5.922638) );
geometry.vertices.push( new THREE.Vector3(4.050375, 164.646393, 5.172788) );
geometry.vertices.push( new THREE.Vector3(4.291163, 167.244003, 4.170262) );
geometry.vertices.push( new THREE.Vector3(3.496564, 165.759399, 4.611112) );
geometry.vertices.push( new THREE.Vector3(3.979050, 167.802399, 4.222763) );
geometry.vertices.push( new THREE.Vector3(3.027274, 166.906494, 4.452712) );
geometry.vertices.push( new THREE.Vector3(2.991008, 164.092499, 5.112075) );
geometry.vertices.push( new THREE.Vector3(2.850195, 162.096405, 6.281963) );
geometry.vertices.push( new THREE.Vector3(2.939464, 161.008102, 6.559725) );
geometry.vertices.push( new THREE.Vector3(3.885150, 168.473602, 4.847250) );
geometry.vertices.push( new THREE.Vector3(2.918842, 167.941910, 5.158874) );
geometry.vertices.push( new THREE.Vector3(1.405095, 160.052597, 7.310850) );
geometry.vertices.push( new THREE.Vector3(2.851703, 160.402908, 6.827177) );
geometry.vertices.push( new THREE.Vector3(1.404548, 160.546509, 6.783900) );
geometry.vertices.push( new THREE.Vector3(0.000000, 159.857590, 7.420875) );
geometry.vertices.push( new THREE.Vector3(0.000000, 160.225494, 6.669375) );
geometry.vertices.push( new THREE.Vector3(1.080596, 161.390991, 5.986125) );
geometry.vertices.push( new THREE.Vector3(-0.000019, 159.362198, 7.265550) );
geometry.vertices.push( new THREE.Vector3(0.767580, 163.258896, 5.231512) );
geometry.vertices.push( new THREE.Vector3(1.796771, 163.519104, 4.963313) );
geometry.vertices.push( new THREE.Vector3(0.000000, 161.018997, 6.211350) );
geometry.vertices.push( new THREE.Vector3(0.000000, 163.013596, 5.342025) );
geometry.vertices.push( new THREE.Vector3(0.000000, 164.854889, 5.384100) );
geometry.vertices.push( new THREE.Vector3(0.943264, 165.228409, 5.310412) );
geometry.vertices.push( new THREE.Vector3(1.905319, 165.915710, 4.921875) );
geometry.vertices.push( new THREE.Vector3(1.921830, 167.093307, 5.404238) );
geometry.vertices.push( new THREE.Vector3(0.934267, 166.635803, 5.471175) );
geometry.vertices.push( new THREE.Vector3(0.000000, 166.494797, 5.523300) );
geometry.vertices.push( new THREE.Vector3(18.030149, 163.658295, -0.441473) );
geometry.vertices.push( new THREE.Vector3(14.112531, 159.936005, -12.745090) );
geometry.vertices.push( new THREE.Vector3(9.652426, 158.427002, -14.968760) );
geometry.vertices.push( new THREE.Vector3(12.722810, 161.938904, 3.000409) );
geometry.vertices.push( new THREE.Vector3(-1.583246, 191.857895, 1.330687) );
geometry.vertices.push( new THREE.Vector3(-1.519946, 192.069397, -1.077555) );
geometry.vertices.push( new THREE.Vector3(-1.858530, 185.414200, -9.154725) );
geometry.vertices.push( new THREE.Vector3(-1.836442, 187.278000, -8.367975) );
geometry.vertices.push( new THREE.Vector3(-6.977662, 177.178894, 6.162375) );
geometry.vertices.push( new THREE.Vector3(-6.932512, 177.242599, 6.443588) );
geometry.vertices.push( new THREE.Vector3(-7.089600, 178.077393, 6.216600) );
geometry.vertices.push( new THREE.Vector3(-6.651750, 177.069702, 6.262387) );
geometry.vertices.push( new THREE.Vector3(-6.380700, 175.950394, 6.340837) );
geometry.vertices.push( new THREE.Vector3(-6.634612, 177.132401, 6.364913) );
geometry.vertices.push( new THREE.Vector3(-7.175100, 181.884003, 4.318462) );
geometry.vertices.push( new THREE.Vector3(-6.714975, 183.102402, 6.290325) );
geometry.vertices.push( new THREE.Vector3(-6.966000, 183.829910, 4.675500) );
geometry.vertices.push( new THREE.Vector3(-6.932512, 181.443405, 5.940450) );
geometry.vertices.push( new THREE.Vector3(-7.298625, 180.054001, 4.322400) );
geometry.vertices.push( new THREE.Vector3(-7.120988, 179.652405, 5.918250) );
geometry.vertices.push( new THREE.Vector3(-7.344338, 178.322189, 4.306800) );
geometry.vertices.push( new THREE.Vector3(-7.316326, 176.229401, 4.227525) );
geometry.vertices.push( new THREE.Vector3(-6.782100, 175.974792, 6.221363) );
geometry.vertices.push( new THREE.Vector3(-7.676512, 178.514603, 2.425328) );
geometry.vertices.push( new THREE.Vector3(-7.682625, 180.289108, 2.572961) );
geometry.vertices.push( new THREE.Vector3(-7.550512, 182.156601, 2.594092) );
geometry.vertices.push( new THREE.Vector3(-8.099550, 180.518600, 0.544039) );
geometry.vertices.push( new THREE.Vector3(-7.851601, 182.368896, 0.524340) );
geometry.vertices.push( new THREE.Vector3(-7.490063, 184.340591, 0.433215) );
geometry.vertices.push( new THREE.Vector3(-7.424362, 185.776901, -1.691805) );
geometry.vertices.push( new THREE.Vector3(-7.307925, 185.862000, 0.389516) );
geometry.vertices.push( new THREE.Vector3(-7.301400, 185.643692, -3.477574) );
geometry.vertices.push( new THREE.Vector3(-7.360875, 187.414505, -1.660537) );
geometry.vertices.push( new THREE.Vector3(-7.283437, 187.349609, -3.397350) );
geometry.vertices.push( new THREE.Vector3(-7.081950, 187.488403, 0.238822) );
geometry.vertices.push( new THREE.Vector3(-7.059975, 185.825592, 2.233133) );
geometry.vertices.push( new THREE.Vector3(-7.207125, 184.309097, 2.946829) );
geometry.vertices.push( new THREE.Vector3(-6.555112, 188.000595, 1.556156) );
geometry.vertices.push( new THREE.Vector3(-6.578625, 185.917099, 4.735950) );
geometry.vertices.push( new THREE.Vector3(-6.648450, 186.760498, 3.317636) );
geometry.vertices.push( new THREE.Vector3(-5.883675, 188.780289, 2.304559) );
geometry.vertices.push( new THREE.Vector3(-6.017438, 187.626007, 4.176300) );
geometry.vertices.push( new THREE.Vector3(-5.912850, 186.718506, 5.802938) );
geometry.vertices.push( new THREE.Vector3(-6.423938, 185.001404, 6.030712) );
geometry.vertices.push( new THREE.Vector3(-5.782913, 185.706696, 7.125938) );
geometry.vertices.push( new THREE.Vector3(-4.956450, 186.269196, 8.096437) );
geometry.vertices.push( new THREE.Vector3(-5.169787, 187.362000, 6.652912) );
geometry.vertices.push( new THREE.Vector3(-6.195788, 184.142609, 7.267050) );
geometry.vertices.push( new THREE.Vector3(-5.546325, 184.682602, 8.256901) );
geometry.vertices.push( new THREE.Vector3(-4.584788, 185.119904, 9.206288) );
geometry.vertices.push( new THREE.Vector3(-3.813750, 186.876404, 8.996888) );
geometry.vertices.push( new THREE.Vector3(-3.585495, 185.435196, 10.001181) );
geometry.vertices.push( new THREE.Vector3(-2.648434, 187.294098, 9.637238) );
geometry.vertices.push( new THREE.Vector3(-2.444385, 185.643005, 10.598590) );
geometry.vertices.push( new THREE.Vector3(-1.293236, 187.526596, 10.000690) );
geometry.vertices.push( new THREE.Vector3(-1.069969, 185.758499, 11.005160) );
geometry.vertices.push( new THREE.Vector3(-2.948775, 168.503601, 9.164550) );
geometry.vertices.push( new THREE.Vector3(-1.999282, 168.036697, 9.251625) );
geometry.vertices.push( new THREE.Vector3(-3.026415, 168.284195, 9.012000) );
geometry.vertices.push( new THREE.Vector3(-2.214495, 168.154495, 9.932888) );
geometry.vertices.push( new THREE.Vector3(-0.910766, 167.938095, 9.172350) );
geometry.vertices.push( new THREE.Vector3(-1.110799, 167.861603, 10.122040) );
geometry.vertices.push( new THREE.Vector3(-1.113379, 167.588989, 10.140110) );
geometry.vertices.push( new THREE.Vector3(-2.413691, 167.832001, 10.005750) );
geometry.vertices.push( new THREE.Vector3(-3.148230, 168.200302, 9.199013) );
geometry.vertices.push( new THREE.Vector3(-3.449929, 168.840393, 8.219513) );
geometry.vertices.push( new THREE.Vector3(-3.820350, 168.425598, 8.381100) );
geometry.vertices.push( new THREE.Vector3(-4.390687, 169.466599, 6.754762) );
geometry.vertices.push( new THREE.Vector3(-4.944300, 169.175995, 6.742350) );
geometry.vertices.push( new THREE.Vector3(-5.113200, 169.317398, 6.631538) );
geometry.vertices.push( new THREE.Vector3(-4.639725, 169.551804, 6.607800) );
geometry.vertices.push( new THREE.Vector3(-4.491675, 168.798691, 6.397013) );
geometry.vertices.push( new THREE.Vector3(-3.300934, 168.060394, 8.100451) );
geometry.vertices.push( new THREE.Vector3(-2.245594, 167.689499, 9.206775) );
geometry.vertices.push( new THREE.Vector3(-1.063849, 167.503098, 9.289762) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.516602, 9.326475) );
geometry.vertices.push( new THREE.Vector3(-0.893265, 167.642609, 7.135876) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.653091, 7.110038) );
geometry.vertices.push( new THREE.Vector3(-2.064686, 167.873306, 6.889837) );
geometry.vertices.push( new THREE.Vector3(-3.026509, 168.207001, 6.434888) );
geometry.vertices.push( new THREE.Vector3(-4.044187, 168.630402, 5.834400) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.652405, 10.082550) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.826401, 10.107110) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.945602, 8.958262) );
geometry.vertices.push( new THREE.Vector3(-4.959712, 169.139999, 4.081725) );
geometry.vertices.push( new THREE.Vector3(-6.355350, 170.346802, 3.384570) );
geometry.vertices.push( new THREE.Vector3(-6.072037, 169.750092, 2.755598) );
geometry.vertices.push( new THREE.Vector3(-6.820050, 170.896500, 2.550491) );
geometry.vertices.push( new THREE.Vector3(-6.895875, 171.718903, 3.784238) );
geometry.vertices.push( new THREE.Vector3(-7.410900, 171.934097, 1.775700) );
geometry.vertices.push( new THREE.Vector3(-5.406787, 169.450897, 5.029950) );
geometry.vertices.push( new THREE.Vector3(-3.885150, 168.473602, 4.847250) );
geometry.vertices.push( new THREE.Vector3(-2.954216, 168.053192, 5.511338) );
geometry.vertices.push( new THREE.Vector3(-2.918842, 167.941910, 5.158874) );
geometry.vertices.push( new THREE.Vector3(-1.921834, 167.093307, 5.404238) );
geometry.vertices.push( new THREE.Vector3(-1.958321, 167.726303, 5.768325) );
geometry.vertices.push( new THREE.Vector3(-5.657925, 170.674896, 6.466837) );
geometry.vertices.push( new THREE.Vector3(-6.189375, 172.889297, 6.276337) );
geometry.vertices.push( new THREE.Vector3(-5.926912, 172.889297, 6.341475) );
geometry.vertices.push( new THREE.Vector3(-6.025013, 173.834305, 6.308587) );
geometry.vertices.push( new THREE.Vector3(-5.348212, 170.679703, 6.524213) );
geometry.vertices.push( new THREE.Vector3(-6.680737, 175.281799, 6.219938) );
geometry.vertices.push( new THREE.Vector3(-6.234825, 175.276505, 6.307538) );
geometry.vertices.push( new THREE.Vector3(-6.128963, 174.537689, 6.300750) );
geometry.vertices.push( new THREE.Vector3(-6.486937, 174.537689, 6.236662) );
geometry.vertices.push( new THREE.Vector3(-6.371887, 173.837601, 6.225562) );
geometry.vertices.push( new THREE.Vector3(-7.155675, 173.411301, 3.965363) );
geometry.vertices.push( new THREE.Vector3(-7.510800, 172.609100, 1.932416) );
geometry.vertices.push( new THREE.Vector3(-7.269862, 174.693802, 4.096350) );
geometry.vertices.push( new THREE.Vector3(-7.612088, 173.668503, 1.921421) );
geometry.vertices.push( new THREE.Vector3(-7.618387, 173.330994, 0.944490) );
geometry.vertices.push( new THREE.Vector3(-7.765913, 174.374207, 0.671880) );
geometry.vertices.push( new THREE.Vector3(-7.573162, 173.950500, -0.290229) );
geometry.vertices.push( new THREE.Vector3(-7.377714, 171.796494, 0.950130) );
geometry.vertices.push( new THREE.Vector3(-7.866974, 175.732895, 0.242650) );
geometry.vertices.push( new THREE.Vector3(-7.806562, 175.067596, -0.006435) );
geometry.vertices.push( new THREE.Vector3(-7.715738, 175.023407, 1.576620) );
geometry.vertices.push( new THREE.Vector3(-7.694026, 176.439804, 2.241356) );
geometry.vertices.push( new THREE.Vector3(-7.950562, 176.459595, 0.526541) );
geometry.vertices.push( new THREE.Vector3(-8.124300, 178.706604, 0.508084) );
geometry.vertices.push( new THREE.Vector3(-7.634250, 175.654495, -1.628216) );
geometry.vertices.push( new THREE.Vector3(-7.873762, 176.864304, -1.666177) );
geometry.vertices.push( new THREE.Vector3(-8.044950, 178.843506, -1.945575) );
geometry.vertices.push( new THREE.Vector3(-7.548600, 179.117996, -3.139654) );
geometry.vertices.push( new THREE.Vector3(-6.935588, 178.506012, -5.044275) );
geometry.vertices.push( new THREE.Vector3(-7.613025, 177.483704, -2.876036) );
geometry.vertices.push( new THREE.Vector3(-7.824712, 181.748199, -1.936493) );
geometry.vertices.push( new THREE.Vector3(-7.964812, 180.801697, -2.037465) );
geometry.vertices.push( new THREE.Vector3(-7.321762, 181.573502, -3.237855) );
geometry.vertices.push( new THREE.Vector3(-6.957075, 181.051102, -5.105963) );
geometry.vertices.push( new THREE.Vector3(-6.216150, 178.643600, -7.089638) );
geometry.vertices.push( new THREE.Vector3(-7.011000, 176.475006, -5.258250) );
geometry.vertices.push( new THREE.Vector3(-6.730650, 176.597198, -6.197625) );
geometry.vertices.push( new THREE.Vector3(-6.266550, 176.766800, -7.224075) );
geometry.vertices.push( new THREE.Vector3(-6.907350, 183.499893, -5.124675) );
geometry.vertices.push( new THREE.Vector3(-7.302375, 183.699005, -3.436455) );
geometry.vertices.push( new THREE.Vector3(-7.507576, 184.062393, -1.750515) );
geometry.vertices.push( new THREE.Vector3(-7.692375, 182.701508, -1.709591) );
geometry.vertices.push( new THREE.Vector3(-5.868075, 185.509903, -6.855300) );
geometry.vertices.push( new THREE.Vector3(-6.870937, 185.572891, -5.080050) );
geometry.vertices.push( new THREE.Vector3(-5.504175, 187.434692, -6.444975) );
geometry.vertices.push( new THREE.Vector3(-6.755325, 187.406998, -5.067112) );
geometry.vertices.push( new THREE.Vector3(-1.915136, 178.570099, -9.562538) );
geometry.vertices.push( new THREE.Vector3(-1.886738, 180.771011, -9.767249) );
geometry.vertices.push( new THREE.Vector3(-1.942294, 183.277100, -9.603637) );
geometry.vertices.push( new THREE.Vector3(-3.972375, 183.304901, -8.900288) );
geometry.vertices.push( new THREE.Vector3(-3.922462, 185.491898, -8.454113) );
geometry.vertices.push( new THREE.Vector3(-5.925000, 183.324005, -7.141950) );
geometry.vertices.push( new THREE.Vector3(-6.042225, 180.966003, -7.133999) );
geometry.vertices.push( new THREE.Vector3(-4.139400, 180.908600, -8.928300) );
geometry.vertices.push( new THREE.Vector3(-4.170000, 178.705902, -8.856375) );
geometry.vertices.push( new THREE.Vector3(-4.278525, 176.774292, -8.747362) );
geometry.vertices.push( new THREE.Vector3(-1.938371, 176.539093, -9.282637) );
geometry.vertices.push( new THREE.Vector3(-6.297113, 175.207901, -7.339875) );
geometry.vertices.push( new THREE.Vector3(-7.004887, 174.956589, -5.564813) );
geometry.vertices.push( new THREE.Vector3(-4.382850, 175.161011, -8.772038) );
geometry.vertices.push( new THREE.Vector3(-2.041545, 175.021500, -9.247838) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.057907, -9.294488) );
geometry.vertices.push( new THREE.Vector3(-4.424438, 173.488907, -8.897023) );
geometry.vertices.push( new THREE.Vector3(-6.352688, 173.478394, -7.646625) );
geometry.vertices.push( new THREE.Vector3(-2.117081, 173.310013, -9.270225) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.281509, -9.302551) );
geometry.vertices.push( new THREE.Vector3(-2.209260, 171.704605, -9.464025) );
geometry.vertices.push( new THREE.Vector3(-4.500563, 171.943497, -9.116662) );
geometry.vertices.push( new THREE.Vector3(-6.384900, 171.913101, -7.829437) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.505905, -9.487087) );
geometry.vertices.push( new THREE.Vector3(-7.754250, 170.931000, -1.355415) );
geometry.vertices.push( new THREE.Vector3(-7.493512, 170.419495, 0.108501) );
geometry.vertices.push( new THREE.Vector3(-7.575937, 172.223602, -0.884685) );
geometry.vertices.push( new THREE.Vector3(-7.381725, 172.472198, -2.632684) );
geometry.vertices.push( new THREE.Vector3(-7.734000, 171.120407, -2.970319) );
geometry.vertices.push( new THREE.Vector3(-7.451513, 172.752411, -4.074413) );
geometry.vertices.push( new THREE.Vector3(-7.553926, 171.472092, -4.405725) );
geometry.vertices.push( new THREE.Vector3(-7.198725, 171.752304, -6.094350) );
geometry.vertices.push( new THREE.Vector3(-7.188863, 173.156204, -5.846213) );
geometry.vertices.push( new THREE.Vector3(-7.367212, 174.590195, -3.632089) );
geometry.vertices.push( new THREE.Vector3(-7.235063, 176.263504, -4.247400) );
geometry.vertices.push( new THREE.Vector3(-7.405725, 176.074509, -3.201135) );
geometry.vertices.push( new THREE.Vector3(-7.500787, 175.880203, -2.481803) );
geometry.vertices.push( new THREE.Vector3(-7.447313, 174.413605, -2.095309) );
geometry.vertices.push( new THREE.Vector3(-7.049551, 170.783691, 1.627684) );
geometry.vertices.push( new THREE.Vector3(-7.066761, 170.070404, 1.366553) );
geometry.vertices.push( new THREE.Vector3(-3.513300, 188.912994, -6.723638) );
geometry.vertices.push( new THREE.Vector3(-3.766688, 187.297897, -7.641750) );
geometry.vertices.push( new THREE.Vector3(-4.467075, 188.927307, -6.257475) );
geometry.vertices.push( new THREE.Vector3(-3.535005, 191.513596, -3.324296) );
geometry.vertices.push( new THREE.Vector3(-2.730285, 191.677109, -0.950381) );
geometry.vertices.push( new THREE.Vector3(-2.868165, 191.464096, -3.310144) );
geometry.vertices.push( new THREE.Vector3(-3.781988, 191.450592, -0.873315) );
geometry.vertices.push( new THREE.Vector3(-1.669399, 190.717102, -5.399587) );
geometry.vertices.push( new THREE.Vector3(-1.862164, 188.916000, -7.265475) );
geometry.vertices.push( new THREE.Vector3(-3.074224, 190.579498, -5.111025) );
geometry.vertices.push( new THREE.Vector3(-4.010813, 190.649200, -5.210925) );
geometry.vertices.push( new THREE.Vector3(-1.492028, 189.139496, 8.428912) );
geometry.vertices.push( new THREE.Vector3(-2.900963, 188.718002, 8.093663) );
geometry.vertices.push( new THREE.Vector3(-4.141500, 188.042999, 7.534388) );
geometry.vertices.push( new THREE.Vector3(-2.856979, 191.441208, 1.062191) );
geometry.vertices.push( new THREE.Vector3(-3.781988, 191.450592, -0.873315) );
geometry.vertices.push( new THREE.Vector3(-3.890325, 190.993500, 0.794175) );
geometry.vertices.push( new THREE.Vector3(-2.730285, 191.677109, -0.950381) );
geometry.vertices.push( new THREE.Vector3(-1.685846, 191.102600, 3.927975) );
geometry.vertices.push( new THREE.Vector3(-3.105874, 189.871094, 5.901638) );
geometry.vertices.push( new THREE.Vector3(-1.620442, 190.349304, 6.282675) );
geometry.vertices.push( new THREE.Vector3(-3.012836, 190.760193, 3.662242) );
geometry.vertices.push( new THREE.Vector3(-1.519946, 192.069397, -1.077555) );
geometry.vertices.push( new THREE.Vector3(-1.528650, 191.728104, -3.564011) );
geometry.vertices.push( new THREE.Vector3(-4.330087, 189.161606, 5.464163) );
geometry.vertices.push( new THREE.Vector3(-4.216200, 190.168503, 3.270015) );
geometry.vertices.push( new THREE.Vector3(-4.386862, 190.823303, 0.581520) );
geometry.vertices.push( new THREE.Vector3(-5.085075, 189.520096, 2.835814) );
geometry.vertices.push( new THREE.Vector3(-19.565140, 163.279907, -5.307900) );
geometry.vertices.push( new THREE.Vector3(-19.597349, 163.352997, -5.313412) );
geometry.vertices.push( new THREE.Vector3(-16.018200, 162.584610, 1.787291) );
geometry.vertices.push( new THREE.Vector3(-15.991880, 162.511505, 1.778618) );
geometry.vertices.push( new THREE.Vector3(-0.000031, 159.289093, 7.245937) );
geometry.vertices.push( new THREE.Vector3(-12.701930, 161.865799, 2.989301) );
geometry.vertices.push( new THREE.Vector3(-12.722810, 161.938904, 3.000401) );
geometry.vertices.push( new THREE.Vector3(14.089310, 159.862900, -12.724720) );
geometry.vertices.push( new THREE.Vector3(9.636526, 158.684601, -14.943939) );
geometry.vertices.push( new THREE.Vector3(-10.494189, 166.859604, -2.506755) );
geometry.vertices.push( new THREE.Vector3(-7.635489, 168.052094, 0.223148) );
geometry.vertices.push( new THREE.Vector3(-8.532787, 168.677200, -1.748310) );
geometry.vertices.push( new THREE.Vector3(-9.323925, 166.471512, -0.192124) );
geometry.vertices.push( new THREE.Vector3(-7.943588, 169.859299, -1.407907) );
geometry.vertices.push( new THREE.Vector3(-4.636950, 161.572098, 5.927475) );
geometry.vertices.push( new THREE.Vector3(-7.566038, 161.433395, 5.093325) );
geometry.vertices.push( new THREE.Vector3(-4.920563, 160.936493, 6.100500) );
geometry.vertices.push( new THREE.Vector3(-7.216425, 161.807297, 4.898475) );
geometry.vertices.push( new THREE.Vector3(-13.536599, 165.144394, -2.325772) );
geometry.vertices.push( new THREE.Vector3(-11.701840, 164.832001, -0.124043) );
geometry.vertices.push( new THREE.Vector3(-9.416513, 164.000198, 1.423549) );
geometry.vertices.push( new THREE.Vector3(-6.854325, 164.957596, 3.277249) );
geometry.vertices.push( new THREE.Vector3(-7.660840, 165.429001, 1.279796) );
geometry.vertices.push( new THREE.Vector3(-7.941824, 163.485703, 3.263557) );
geometry.vertices.push( new THREE.Vector3(-5.934600, 163.130295, 4.871925) );
geometry.vertices.push( new THREE.Vector3(-9.506212, 162.511505, 3.631567) );
geometry.vertices.push( new THREE.Vector3(-16.013660, 164.350494, -1.361107) );
geometry.vertices.push( new THREE.Vector3(-17.440460, 164.975601, -3.151114) );
geometry.vertices.push( new THREE.Vector3(-11.317841, 163.131790, 2.079701) );
geometry.vertices.push( new THREE.Vector3(-13.872830, 163.860794, 0.510791) );
geometry.vertices.push( new THREE.Vector3(-10.307549, 162.022903, 4.100925) );
geometry.vertices.push( new THREE.Vector3(-12.629630, 162.439896, 3.204334) );
geometry.vertices.push( new THREE.Vector3(-15.831409, 163.096497, 1.843688) );
geometry.vertices.push( new THREE.Vector3(-19.148891, 164.265396, -2.771955) );
geometry.vertices.push( new THREE.Vector3(-7.203600, 169.215805, 1.189657) );
geometry.vertices.push( new THREE.Vector3(-6.725962, 167.886398, 2.347020) );
geometry.vertices.push( new THREE.Vector3(-7.005525, 166.611404, 1.508595) );
geometry.vertices.push( new THREE.Vector3(-6.127988, 166.537903, 3.528375) );
geometry.vertices.push( new THREE.Vector3(-5.381925, 165.020599, 4.777725) );
geometry.vertices.push( new THREE.Vector3(-4.400625, 162.614594, 5.922638) );
geometry.vertices.push( new THREE.Vector3(-2.939464, 161.008102, 6.559725) );
geometry.vertices.push( new THREE.Vector3(-6.382800, 168.721100, 2.501539) );
geometry.vertices.push( new THREE.Vector3(-4.291163, 167.244003, 4.170262) );
geometry.vertices.push( new THREE.Vector3(-5.436262, 167.488892, 3.622092) );
geometry.vertices.push( new THREE.Vector3(-5.080087, 168.419998, 3.698010) );
geometry.vertices.push( new THREE.Vector3(-6.072037, 169.750092, 2.755598) );
geometry.vertices.push( new THREE.Vector3(-7.066761, 170.070404, 1.366553) );
geometry.vertices.push( new THREE.Vector3(-7.493512, 170.419495, 0.108501) );
geometry.vertices.push( new THREE.Vector3(-4.050375, 164.646393, 5.172750) );
geometry.vertices.push( new THREE.Vector3(-3.496564, 165.759399, 4.611112) );
geometry.vertices.push( new THREE.Vector3(-3.979050, 167.802399, 4.222763) );
geometry.vertices.push( new THREE.Vector3(-3.027274, 166.906494, 4.452712) );
geometry.vertices.push( new THREE.Vector3(-2.991008, 164.092499, 5.112075) );
geometry.vertices.push( new THREE.Vector3(-2.850195, 162.096405, 6.281963) );
geometry.vertices.push( new THREE.Vector3(-1.796775, 163.519104, 4.963313) );
geometry.vertices.push( new THREE.Vector3(-1.080600, 161.390991, 5.986125) );
geometry.vertices.push( new THREE.Vector3(-0.767584, 163.258896, 5.231512) );
geometry.vertices.push( new THREE.Vector3(-1.905319, 165.915710, 4.921875) );
geometry.vertices.push( new THREE.Vector3(-0.943264, 165.228409, 5.310412) );
geometry.vertices.push( new THREE.Vector3(-1.404551, 160.546509, 6.783900) );
geometry.vertices.push( new THREE.Vector3(-0.934267, 166.635803, 5.471175) );
geometry.vertices.push( new THREE.Vector3(-1.921834, 167.093307, 5.404238) );
geometry.vertices.push( new THREE.Vector3(-2.918842, 167.941910, 5.158874) );
geometry.vertices.push( new THREE.Vector3(-3.885150, 168.473602, 4.847250) );
geometry.vertices.push( new THREE.Vector3(-4.959712, 169.139999, 4.081725) );
geometry.vertices.push( new THREE.Vector3(-18.030190, 163.658295, -0.441476) );
geometry.vertices.push( new THREE.Vector3(-2.341406, 184.453506, 11.106979) );
geometry.vertices.push( new THREE.Vector3(-1.126286, 183.115494, 12.035620) );
geometry.vertices.push( new THREE.Vector3(-1.078478, 184.547195, 11.451110) );
geometry.vertices.push( new THREE.Vector3(-2.344751, 182.998901, 11.778339) );
geometry.vertices.push( new THREE.Vector3(-3.383742, 184.318497, 10.659000) );
geometry.vertices.push( new THREE.Vector3(-3.110557, 182.923492, 11.287910) );
geometry.vertices.push( new THREE.Vector3(-4.299562, 184.103302, 9.956326) );
geometry.vertices.push( new THREE.Vector3(-3.991875, 182.939606, 11.000290) );
geometry.vertices.push( new THREE.Vector3(-3.585495, 185.435196, 10.001181) );
geometry.vertices.push( new THREE.Vector3(-2.444385, 185.643005, 10.598590) );
geometry.vertices.push( new THREE.Vector3(-1.069969, 185.758499, 11.005160) );
geometry.vertices.push( new THREE.Vector3(0.000000, 185.802399, 11.105850) );
geometry.vertices.push( new THREE.Vector3(0.000000, 184.539398, 11.525210) );
geometry.vertices.push( new THREE.Vector3(-4.584788, 185.119904, 9.206288) );
geometry.vertices.push( new THREE.Vector3(-5.343712, 183.766907, 9.052238) );
geometry.vertices.push( new THREE.Vector3(-5.236349, 182.758789, 10.101000) );
geometry.vertices.push( new THREE.Vector3(-5.546325, 184.682602, 8.256901) );
geometry.vertices.push( new THREE.Vector3(0.000000, 183.161606, 12.125890) );
geometry.vertices.push( new THREE.Vector3(0.000000, 182.136398, 12.466880) );
geometry.vertices.push( new THREE.Vector3(-0.856549, 182.090607, 12.411970) );
geometry.vertices.push( new THREE.Vector3(-0.667894, 181.238602, 12.530060) );
geometry.vertices.push( new THREE.Vector3(-1.703055, 182.096191, 12.347250) );
geometry.vertices.push( new THREE.Vector3(-1.344296, 181.249100, 12.487350) );
geometry.vertices.push( new THREE.Vector3(-2.347140, 181.993896, 12.026740) );
geometry.vertices.push( new THREE.Vector3(-2.414070, 181.480499, 12.225150) );
geometry.vertices.push( new THREE.Vector3(-3.207322, 182.175690, 11.721149) );
geometry.vertices.push( new THREE.Vector3(-3.274350, 181.682297, 11.987550) );
geometry.vertices.push( new THREE.Vector3(-4.079475, 181.426895, 11.893270) );
geometry.vertices.push( new THREE.Vector3(-3.464250, 181.168900, 12.105150) );
geometry.vertices.push( new THREE.Vector3(-2.579396, 180.662292, 12.345640) );
geometry.vertices.push( new THREE.Vector3(-4.599825, 182.309601, 11.145520) );
geometry.vertices.push( new THREE.Vector3(-4.032525, 182.063995, 11.622000) );
geometry.vertices.push( new THREE.Vector3(-4.657200, 181.633499, 11.456660) );
geometry.vertices.push( new THREE.Vector3(-5.256337, 182.278091, 10.552799) );
geometry.vertices.push( new THREE.Vector3(-4.511287, 182.979004, 10.662070) );
geometry.vertices.push( new THREE.Vector3(-5.277187, 181.643204, 10.841550) );
geometry.vertices.push( new THREE.Vector3(-4.346927, 180.079193, 10.834240) );
geometry.vertices.push( new THREE.Vector3(-3.817950, 179.972992, 10.939569) );
geometry.vertices.push( new THREE.Vector3(-3.901425, 180.208099, 11.202190) );
geometry.vertices.push( new THREE.Vector3(-4.221075, 179.841003, 10.597580) );
geometry.vertices.push( new THREE.Vector3(-4.639687, 179.750305, 10.253100) );
geometry.vertices.push( new THREE.Vector3(-4.455675, 179.416504, 10.038860) );
geometry.vertices.push( new THREE.Vector3(-4.126800, 179.613403, 10.463660) );
geometry.vertices.push( new THREE.Vector3(-4.561687, 179.590500, 10.156200) );
geometry.vertices.push( new THREE.Vector3(-4.778250, 179.480606, 9.802649) );
geometry.vertices.push( new THREE.Vector3(-4.944788, 179.727005, 9.934987) );
geometry.vertices.push( new THREE.Vector3(-4.742362, 180.074997, 10.453540) );
geometry.vertices.push( new THREE.Vector3(-4.427137, 180.423004, 10.997700) );
geometry.vertices.push( new THREE.Vector3(-3.935850, 180.580902, 11.403410) );
geometry.vertices.push( new THREE.Vector3(-3.425047, 180.485992, 11.593500) );
geometry.vertices.push( new THREE.Vector3(-3.377906, 180.774002, 11.772790) );
geometry.vertices.push( new THREE.Vector3(-2.680275, 180.426712, 11.902430) );
geometry.vertices.push( new THREE.Vector3(-3.984975, 180.995590, 11.587840) );
geometry.vertices.push( new THREE.Vector3(-4.475887, 180.799896, 11.154110) );
geometry.vertices.push( new THREE.Vector3(-4.862962, 180.541504, 10.598590) );
geometry.vertices.push( new THREE.Vector3(-5.160225, 180.154495, 10.027090) );
geometry.vertices.push( new THREE.Vector3(-5.035087, 179.287506, 9.547125) );
geometry.vertices.push( new THREE.Vector3(-4.836225, 179.246201, 9.603711) );
geometry.vertices.push( new THREE.Vector3(-5.251575, 179.389908, 9.400575) );
geometry.vertices.push( new THREE.Vector3(-5.623425, 179.574005, 9.126637) );
geometry.vertices.push( new THREE.Vector3(-5.472825, 180.647598, 9.766987) );
geometry.vertices.push( new THREE.Vector3(-6.175987, 180.177399, 8.607225) );
geometry.vertices.push( new THREE.Vector3(-4.995488, 181.001602, 10.680900) );
geometry.vertices.push( new THREE.Vector3(-5.861025, 181.301605, 9.487125) );
geometry.vertices.push( new THREE.Vector3(-6.628349, 180.944305, 7.370700) );
geometry.vertices.push( new THREE.Vector3(-6.377625, 182.395508, 7.583175) );
geometry.vertices.push( new THREE.Vector3(-5.685750, 182.196793, 9.634838) );
geometry.vertices.push( new THREE.Vector3(-5.923837, 183.262100, 8.246850) );
geometry.vertices.push( new THREE.Vector3(-5.569462, 181.563797, 10.303240) );
geometry.vertices.push( new THREE.Vector3(-7.089600, 178.077393, 6.216600) );
geometry.vertices.push( new THREE.Vector3(-6.867225, 179.134094, 7.629150) );
geometry.vertices.push( new THREE.Vector3(-7.120988, 179.652405, 5.918250) );
geometry.vertices.push( new THREE.Vector3(-6.932512, 181.443405, 5.940450) );
geometry.vertices.push( new THREE.Vector3(-6.714975, 183.102402, 6.290325) );
geometry.vertices.push( new THREE.Vector3(-6.195788, 184.142609, 7.267050) );
geometry.vertices.push( new THREE.Vector3(-5.520900, 176.535400, 8.765661) );
geometry.vertices.push( new THREE.Vector3(-4.664250, 176.460403, 9.206362) );
geometry.vertices.push( new THREE.Vector3(-4.791825, 176.293106, 9.660750) );
geometry.vertices.push( new THREE.Vector3(-5.343450, 176.584488, 8.576438) );
geometry.vertices.push( new THREE.Vector3(-6.081750, 176.796402, 7.545263) );
geometry.vertices.push( new THREE.Vector3(-6.504450, 176.849609, 7.712175) );
geometry.vertices.push( new THREE.Vector3(-6.634612, 177.132401, 6.364913) );
geometry.vertices.push( new THREE.Vector3(-6.932512, 177.242599, 6.443588) );
geometry.vertices.push( new THREE.Vector3(-6.666712, 177.499908, 7.747237) );
geometry.vertices.push( new THREE.Vector3(-6.790125, 178.180893, 7.723725) );
geometry.vertices.push( new THREE.Vector3(-4.921950, 176.331406, 9.789938) );
geometry.vertices.push( new THREE.Vector3(-5.696925, 176.569504, 8.901150) );
geometry.vertices.push( new THREE.Vector3(-5.866200, 177.132706, 9.059401) );
geometry.vertices.push( new THREE.Vector3(-4.337625, 176.478699, 10.546950) );
geometry.vertices.push( new THREE.Vector3(-3.737910, 176.828598, 11.039960) );
geometry.vertices.push( new THREE.Vector3(-4.438012, 177.051407, 10.697741) );
geometry.vertices.push( new THREE.Vector3(-5.089575, 177.345001, 10.130920) );
geometry.vertices.push( new THREE.Vector3(-5.059463, 176.769394, 9.964238) );
geometry.vertices.push( new THREE.Vector3(-2.513325, 177.123398, 11.483510) );
geometry.vertices.push( new THREE.Vector3(-3.330386, 177.770599, 11.240960) );
geometry.vertices.push( new THREE.Vector3(-3.152535, 177.203598, 11.296310) );
geometry.vertices.push( new THREE.Vector3(-2.905076, 176.654602, 11.332459) );
geometry.vertices.push( new THREE.Vector3(-3.607391, 176.277008, 10.970930) );
geometry.vertices.push( new THREE.Vector3(-4.224413, 176.162201, 10.391470) );
geometry.vertices.push( new THREE.Vector3(-4.107188, 176.111603, 10.264690) );
geometry.vertices.push( new THREE.Vector3(-2.942558, 178.203705, 11.121410) );
geometry.vertices.push( new THREE.Vector3(-3.348075, 178.162506, 11.035760) );
geometry.vertices.push( new THREE.Vector3(-1.728397, 177.563995, 11.773460) );
geometry.vertices.push( new THREE.Vector3(-1.762054, 176.469391, 12.180110) );
geometry.vertices.push( new THREE.Vector3(-1.351181, 177.021805, 12.400050) );
geometry.vertices.push( new THREE.Vector3(-1.998900, 177.189392, 11.683580) );
geometry.vertices.push( new THREE.Vector3(-1.983312, 178.068802, 11.415560) );
geometry.vertices.push( new THREE.Vector3(-2.252093, 177.730499, 11.497010) );
geometry.vertices.push( new THREE.Vector3(-2.226855, 176.490402, 11.638050) );
geometry.vertices.push( new THREE.Vector3(-2.830301, 176.035904, 11.308950) );
geometry.vertices.push( new THREE.Vector3(-3.503265, 175.976593, 10.846730) );
geometry.vertices.push( new THREE.Vector3(-2.833072, 177.716309, 11.366590) );
geometry.vertices.push( new THREE.Vector3(-2.799705, 175.850601, 11.257760) );
geometry.vertices.push( new THREE.Vector3(-2.369708, 175.876495, 11.568939) );
geometry.vertices.push( new THREE.Vector3(-1.954151, 175.767395, 12.114711) );
geometry.vertices.push( new THREE.Vector3(-1.409318, 176.407898, 12.646049) );
geometry.vertices.push( new THREE.Vector3(-0.975308, 177.436905, 12.650929) );
geometry.vertices.push( new THREE.Vector3(-1.451295, 178.129105, 11.823830) );
geometry.vertices.push( new THREE.Vector3(-0.361818, 178.448608, 12.671770) );
geometry.vertices.push( new THREE.Vector3(-0.700785, 178.466705, 12.457390) );
geometry.vertices.push( new THREE.Vector3(-0.488321, 179.110092, 12.235950) );
geometry.vertices.push( new THREE.Vector3(-0.387735, 177.414001, 13.188789) );
geometry.vertices.push( new THREE.Vector3(-1.018241, 176.461502, 13.067471) );
geometry.vertices.push( new THREE.Vector3(-1.585830, 175.765503, 12.748580) );
geometry.vertices.push( new THREE.Vector3(-1.930534, 175.658203, 12.037650) );
geometry.vertices.push( new THREE.Vector3(-1.547486, 175.664307, 12.711189) );
geometry.vertices.push( new THREE.Vector3(-1.123324, 175.651505, 13.271210) );
geometry.vertices.push( new THREE.Vector3(-1.145029, 175.760605, 13.279800) );
geometry.vertices.push( new THREE.Vector3(-0.416419, 176.497894, 13.636390) );
geometry.vertices.push( new THREE.Vector3(-1.759567, 175.609512, 11.837890) );
geometry.vertices.push( new THREE.Vector3(-2.013855, 175.796204, 11.289530) );
geometry.vertices.push( new THREE.Vector3(-1.623791, 175.937607, 11.912180) );
geometry.vertices.push( new THREE.Vector3(-1.403389, 175.588501, 12.547280) );
geometry.vertices.push( new THREE.Vector3(-1.399950, 175.975891, 12.391800) );
geometry.vertices.push( new THREE.Vector3(-0.991658, 175.558899, 13.161079) );
geometry.vertices.push( new THREE.Vector3(-0.486030, 175.621109, 13.953940) );
geometry.vertices.push( new THREE.Vector3(-0.474364, 175.735901, 13.936800) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.743408, 14.151560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.602798, 14.180250) );
geometry.vertices.push( new THREE.Vector3(-0.417664, 175.503403, 13.888730) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.949997, 13.548560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.470001, 14.055861) );
geometry.vertices.push( new THREE.Vector3(-2.222359, 175.714905, 11.372890) );
geometry.vertices.push( new THREE.Vector3(-2.282141, 176.040695, 10.806600) );
geometry.vertices.push( new THREE.Vector3(-1.619344, 176.308899, 10.914260) );
geometry.vertices.push( new THREE.Vector3(-1.282571, 176.644104, 11.351170) );
geometry.vertices.push( new THREE.Vector3(-1.184426, 176.541702, 12.071660) );
geometry.vertices.push( new THREE.Vector3(-0.870547, 176.140106, 12.832459) );
geometry.vertices.push( new THREE.Vector3(-0.371192, 175.953705, 13.445470) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.949997, 13.548560) );
geometry.vertices.push( new THREE.Vector3(-2.856281, 179.915207, 11.043489) );
geometry.vertices.push( new THREE.Vector3(-2.308800, 179.869492, 11.063100) );
geometry.vertices.push( new THREE.Vector3(-2.800658, 180.060699, 11.368200) );
geometry.vertices.push( new THREE.Vector3(-2.200556, 179.986893, 11.320610) );
geometry.vertices.push( new THREE.Vector3(-3.701850, 179.789307, 10.692861) );
geometry.vertices.push( new THREE.Vector3(-3.748672, 179.778397, 10.800600) );
geometry.vertices.push( new THREE.Vector3(-3.365288, 179.834991, 10.911110) );
geometry.vertices.push( new THREE.Vector3(-3.386055, 180.000000, 11.118600) );
geometry.vertices.push( new THREE.Vector3(-3.431742, 180.223206, 11.385230) );
geometry.vertices.push( new THREE.Vector3(-2.766045, 180.209991, 11.622000) );
geometry.vertices.push( new THREE.Vector3(-2.125305, 180.128601, 11.887310) );
geometry.vertices.push( new THREE.Vector3(-1.752682, 179.835693, 11.661190) );
geometry.vertices.push( new THREE.Vector3(-1.431975, 179.836899, 12.023030) );
geometry.vertices.push( new THREE.Vector3(-1.879755, 180.278595, 12.421460) );
geometry.vertices.push( new THREE.Vector3(-1.256325, 179.960297, 12.386439) );
geometry.vertices.push( new THREE.Vector3(-1.151528, 180.227997, 12.558560) );
geometry.vertices.push( new THREE.Vector3(-1.230412, 180.639008, 12.604950) );
geometry.vertices.push( new THREE.Vector3(-0.526856, 180.515594, 12.415421) );
geometry.vertices.push( new THREE.Vector3(-4.541662, 181.142288, 11.272500) );
geometry.vertices.push( new THREE.Vector3(-4.537088, 178.688995, 10.146790) );
geometry.vertices.push( new THREE.Vector3(-4.121700, 178.670303, 10.351871) );
geometry.vertices.push( new THREE.Vector3(-4.405575, 178.740387, 10.080520) );
geometry.vertices.push( new THREE.Vector3(-4.715625, 178.879089, 9.777338) );
geometry.vertices.push( new THREE.Vector3(-4.590899, 178.893005, 9.781386) );
geometry.vertices.push( new THREE.Vector3(-4.703137, 179.223007, 9.617925) );
geometry.vertices.push( new THREE.Vector3(-4.836225, 179.246201, 9.603711) );
geometry.vertices.push( new THREE.Vector3(-4.629600, 179.299103, 9.676950) );
geometry.vertices.push( new THREE.Vector3(-4.688175, 179.367798, 9.752437) );
geometry.vertices.push( new THREE.Vector3(-4.493175, 179.057205, 9.783487) );
geometry.vertices.push( new THREE.Vector3(-4.593487, 179.161499, 9.648112) );
geometry.vertices.push( new THREE.Vector3(-4.553550, 179.161499, 9.642937) );
geometry.vertices.push( new THREE.Vector3(-4.597763, 179.290497, 9.662288) );
geometry.vertices.push( new THREE.Vector3(-3.698888, 178.820999, 10.446000) );
geometry.vertices.push( new THREE.Vector3(-3.321097, 178.824402, 10.449300) );
geometry.vertices.push( new THREE.Vector3(-3.685298, 178.825897, 10.376210) );
geometry.vertices.push( new THREE.Vector3(-4.002075, 178.869003, 10.237801) );
geometry.vertices.push( new THREE.Vector3(-4.038000, 178.869400, 10.301890) );
geometry.vertices.push( new THREE.Vector3(-4.275037, 178.940201, 9.994649) );
geometry.vertices.push( new THREE.Vector3(-4.221112, 178.945099, 9.977888) );
geometry.vertices.push( new THREE.Vector3(-4.459687, 179.065887, 9.746812) );
geometry.vertices.push( new THREE.Vector3(-3.311385, 178.592606, 10.653040) );
geometry.vertices.push( new THREE.Vector3(-2.963002, 178.840897, 10.561120) );
geometry.vertices.push( new THREE.Vector3(-3.321562, 178.813095, 10.503980) );
geometry.vertices.push( new THREE.Vector3(-3.698982, 178.608002, 10.541550) );
geometry.vertices.push( new THREE.Vector3(-2.972374, 178.840897, 10.477270) );
geometry.vertices.push( new THREE.Vector3(-2.565352, 178.887695, 10.433440) );
geometry.vertices.push( new THREE.Vector3(-2.924677, 178.590698, 10.731070) );
geometry.vertices.push( new THREE.Vector3(-3.328474, 178.428406, 10.783420) );
geometry.vertices.push( new THREE.Vector3(-3.741626, 178.433304, 10.640511) );
geometry.vertices.push( new THREE.Vector3(-2.934142, 178.461700, 10.839940) );
geometry.vertices.push( new THREE.Vector3(-2.136124, 178.999100, 10.251680) );
geometry.vertices.push( new THREE.Vector3(-1.896975, 178.941406, 10.427770) );
geometry.vertices.push( new THREE.Vector3(-1.950596, 179.128891, 10.205029) );
geometry.vertices.push( new THREE.Vector3(-2.126351, 178.802597, 10.522840) );
geometry.vertices.push( new THREE.Vector3(-2.566785, 178.656799, 10.702570) );
geometry.vertices.push( new THREE.Vector3(-2.539905, 178.532593, 10.863070) );
geometry.vertices.push( new THREE.Vector3(-2.539046, 178.278397, 11.160450) );
geometry.vertices.push( new THREE.Vector3(-2.942558, 178.203705, 11.121410) );
geometry.vertices.push( new THREE.Vector3(-2.131508, 178.677002, 10.802060) );
geometry.vertices.push( new THREE.Vector3(-1.840841, 178.840500, 10.666650) );
geometry.vertices.push( new THREE.Vector3(-2.079982, 178.419006, 11.120960) );
geometry.vertices.push( new THREE.Vector3(-1.771706, 178.654099, 10.940810) );
geometry.vertices.push( new THREE.Vector3(-3.348075, 178.162506, 11.035760) );
geometry.vertices.push( new THREE.Vector3(-3.811237, 178.200699, 10.841060) );
geometry.vertices.push( new THREE.Vector3(-3.857925, 177.877502, 11.021319) );
geometry.vertices.push( new THREE.Vector3(-4.397587, 178.082306, 10.681880) );
geometry.vertices.push( new THREE.Vector3(-4.471875, 177.654800, 10.742770) );
geometry.vertices.push( new THREE.Vector3(-5.043112, 177.979904, 10.252840) );
geometry.vertices.push( new THREE.Vector3(-5.984550, 177.861404, 9.099375) );
geometry.vertices.push( new THREE.Vector3(-3.330386, 177.770599, 11.240960) );
geometry.vertices.push( new THREE.Vector3(-3.152535, 177.203598, 11.296310) );
geometry.vertices.push( new THREE.Vector3(-3.828000, 177.409103, 11.081060) );
geometry.vertices.push( new THREE.Vector3(-3.737910, 176.828598, 11.039960) );
geometry.vertices.push( new THREE.Vector3(-1.757666, 179.132996, 10.313060) );
geometry.vertices.push( new THREE.Vector3(-1.950596, 179.128891, 10.205029) );
geometry.vertices.push( new THREE.Vector3(-1.896975, 178.941406, 10.427770) );
geometry.vertices.push( new THREE.Vector3(-1.617574, 179.031006, 10.550660) );
geometry.vertices.push( new THREE.Vector3(-1.840841, 178.840500, 10.666650) );
geometry.vertices.push( new THREE.Vector3(-1.771706, 178.654099, 10.940810) );
geometry.vertices.push( new THREE.Vector3(-1.507609, 178.906494, 10.792310) );
geometry.vertices.push( new THREE.Vector3(-1.533236, 179.259399, 10.549049) );
geometry.vertices.push( new THREE.Vector3(-1.666061, 179.284088, 10.282161) );
geometry.vertices.push( new THREE.Vector3(-1.886003, 179.234299, 10.204650) );
geometry.vertices.push( new THREE.Vector3(-1.946276, 179.144592, 10.139210) );
geometry.vertices.push( new THREE.Vector3(-2.136124, 178.999100, 10.251680) );
geometry.vertices.push( new THREE.Vector3(-2.134193, 179.018204, 10.199550) );
geometry.vertices.push( new THREE.Vector3(-2.565352, 178.905701, 10.374149) );
geometry.vertices.push( new THREE.Vector3(-2.565352, 178.887695, 10.433440) );
geometry.vertices.push( new THREE.Vector3(-2.518406, 178.867096, 10.306090) );
geometry.vertices.push( new THREE.Vector3(-2.160221, 178.965408, 10.149341) );
geometry.vertices.push( new THREE.Vector3(-1.915151, 179.047897, 10.089790) );
geometry.vertices.push( new THREE.Vector3(-1.889254, 179.245499, 10.144310) );
geometry.vertices.push( new THREE.Vector3(-1.787595, 179.262405, 10.040740) );
geometry.vertices.push( new THREE.Vector3(-2.972374, 178.840897, 10.477270) );
geometry.vertices.push( new THREE.Vector3(-2.957284, 178.801102, 10.363760) );
geometry.vertices.push( new THREE.Vector3(-3.304354, 178.814301, 10.388700) );
geometry.vertices.push( new THREE.Vector3(-3.321097, 178.824402, 10.449300) );
geometry.vertices.push( new THREE.Vector3(-3.685298, 178.825897, 10.376210) );
geometry.vertices.push( new THREE.Vector3(-3.662464, 178.808609, 10.271590) );
geometry.vertices.push( new THREE.Vector3(-4.002075, 178.869003, 10.237801) );
geometry.vertices.push( new THREE.Vector3(-3.953625, 178.855103, 10.120090) );
geometry.vertices.push( new THREE.Vector3(-4.206075, 178.923401, 9.878738) );
geometry.vertices.push( new THREE.Vector3(-4.221112, 178.945099, 9.977888) );
geometry.vertices.push( new THREE.Vector3(-4.459687, 179.065887, 9.746812) );
geometry.vertices.push( new THREE.Vector3(-4.424588, 179.046005, 9.640125) );
geometry.vertices.push( new THREE.Vector3(-4.632300, 179.272110, 9.530550) );
geometry.vertices.push( new THREE.Vector3(-4.553550, 179.161499, 9.642937) );
geometry.vertices.push( new THREE.Vector3(-4.661063, 179.395905, 9.576637) );
geometry.vertices.push( new THREE.Vector3(-4.597763, 179.290497, 9.662288) );
geometry.vertices.push( new THREE.Vector3(-4.412662, 179.608902, 9.910275) );
geometry.vertices.push( new THREE.Vector3(-4.421175, 179.410904, 10.026710) );
geometry.vertices.push( new THREE.Vector3(-4.629600, 179.299103, 9.676950) );
geometry.vertices.push( new THREE.Vector3(-3.625515, 179.949707, 10.538210) );
geometry.vertices.push( new THREE.Vector3(-4.055700, 179.639999, 10.396199) );
geometry.vertices.push( new THREE.Vector3(-4.060875, 179.810196, 10.295180) );
geometry.vertices.push( new THREE.Vector3(-4.703137, 179.223007, 9.617925) );
geometry.vertices.push( new THREE.Vector3(-4.688175, 179.367798, 9.752437) );
geometry.vertices.push( new THREE.Vector3(-3.334144, 179.830902, 10.793620) );
geometry.vertices.push( new THREE.Vector3(-2.907315, 179.797501, 10.726430) );
geometry.vertices.push( new THREE.Vector3(-2.888876, 179.785889, 10.649100) );
geometry.vertices.push( new THREE.Vector3(-3.266603, 179.984604, 10.623000) );
geometry.vertices.push( new THREE.Vector3(-2.930959, 180.037506, 10.557560) );
geometry.vertices.push( new THREE.Vector3(-2.416522, 179.690598, 10.351049) );
geometry.vertices.push( new THREE.Vector3(-2.396246, 179.668503, 10.420461) );
geometry.vertices.push( new THREE.Vector3(-2.351374, 179.740906, 10.773190) );
geometry.vertices.push( new THREE.Vector3(-2.366314, 179.718002, 10.340441) );
geometry.vertices.push( new THREE.Vector3(-2.027310, 179.492599, 10.159610) );
geometry.vertices.push( new THREE.Vector3(-2.097495, 179.471603, 10.169550) );
geometry.vertices.push( new THREE.Vector3(-1.971278, 179.396194, 10.133210) );
geometry.vertices.push( new THREE.Vector3(-1.911326, 179.412399, 10.118470) );
geometry.vertices.push( new THREE.Vector3(-1.877666, 179.298401, 10.088250) );
geometry.vertices.push( new THREE.Vector3(-1.803660, 179.344498, 10.063129) );
geometry.vertices.push( new THREE.Vector3(-1.867627, 179.296509, 10.164001) );
geometry.vertices.push( new THREE.Vector3(-1.965064, 179.400009, 10.172030) );
geometry.vertices.push( new THREE.Vector3(-2.083245, 179.472809, 10.216760) );
geometry.vertices.push( new THREE.Vector3(-2.048344, 179.582596, 10.457250) );
geometry.vertices.push( new THREE.Vector3(-1.648650, 179.548096, 10.596670) );
geometry.vertices.push( new THREE.Vector3(-1.803754, 179.459198, 10.324460) );
geometry.vertices.push( new THREE.Vector3(-1.932446, 179.698105, 10.765540) );
geometry.vertices.push( new THREE.Vector3(-1.797049, 179.824493, 11.079450) );
geometry.vertices.push( new THREE.Vector3(-1.403482, 179.591995, 10.841360) );
geometry.vertices.push( new THREE.Vector3(-1.158795, 179.557892, 11.285550) );
geometry.vertices.push( new THREE.Vector3(-1.214636, 179.171204, 11.144361) );
geometry.vertices.push( new THREE.Vector3(-1.363039, 179.224091, 10.822610) );
geometry.vertices.push( new THREE.Vector3(-5.618737, 178.711502, 9.510637) );
geometry.vertices.push( new THREE.Vector3(-4.864875, 178.357895, 10.297200) );
geometry.vertices.push( new THREE.Vector3(-5.249925, 178.822510, 9.742050) );
geometry.vertices.push( new THREE.Vector3(-4.688737, 178.574600, 10.241170) );
geometry.vertices.push( new THREE.Vector3(-4.283213, 178.390198, 10.540840) );
geometry.vertices.push( new THREE.Vector3(-4.174950, 178.546906, 10.428451) );
geometry.vertices.push( new THREE.Vector3(-4.908225, 178.876099, 9.814050) );
geometry.vertices.push( new THREE.Vector3(-5.035087, 179.287506, 9.547125) );
geometry.vertices.push( new THREE.Vector3(-5.251575, 179.389908, 9.400575) );
geometry.vertices.push( new THREE.Vector3(-6.247425, 178.882507, 8.761575) );
geometry.vertices.push( new THREE.Vector3(-1.620247, 178.434402, 11.240470) );
geometry.vertices.push( new THREE.Vector3(-1.507609, 178.906494, 10.792310) );
geometry.vertices.push( new THREE.Vector3(-1.771706, 178.654099, 10.940810) );
geometry.vertices.push( new THREE.Vector3(-1.357965, 178.737396, 11.129661) );
geometry.vertices.push( new THREE.Vector3(-1.451295, 178.129105, 11.823830) );
geometry.vertices.push( new THREE.Vector3(-1.241025, 178.605408, 11.773240) );
geometry.vertices.push( new THREE.Vector3(-1.015271, 179.071899, 11.672850) );
geometry.vertices.push( new THREE.Vector3(-1.363039, 179.224091, 10.822610) );
geometry.vertices.push( new THREE.Vector3(-4.216088, 157.455399, -15.638290) );
geometry.vertices.push( new THREE.Vector3(-4.209188, 157.712997, -15.612151) );
geometry.vertices.push( new THREE.Vector3(-0.564244, 180.092300, 12.247800) );
geometry.vertices.push( new THREE.Vector3(-0.686348, 179.886795, 12.013431) );
geometry.vertices.push( new THREE.Vector3(-1.431975, 179.836899, 12.023030) );
geometry.vertices.push( new THREE.Vector3(-0.913916, 179.597992, 11.734240) );
geometry.vertices.push( new THREE.Vector3(-0.465277, 179.532394, 12.116100) );
geometry.vertices.push( new THREE.Vector3(-1.752682, 179.835693, 11.661190) );
geometry.vertices.push( new THREE.Vector3(0.000000, 179.535706, 12.274690) );
geometry.vertices.push( new THREE.Vector3(0.000000, 179.738205, 12.208690) );
geometry.vertices.push( new THREE.Vector3(-1.620247, 178.434402, 11.240470) );
geometry.vertices.push( new THREE.Vector3(-2.079982, 178.419006, 11.120960) );
geometry.vertices.push( new THREE.Vector3(-2.539046, 178.278397, 11.160450) );
geometry.vertices.push( new THREE.Vector3(-2.338057, 175.718613, 11.486771) );
geometry.vertices.push( new THREE.Vector3(-2.660441, 175.830002, 11.092050) );
geometry.vertices.push( new THREE.Vector3(-3.455932, 175.940598, 10.716001) );
geometry.vertices.push( new THREE.Vector3(-3.789413, 176.303192, 9.873863) );
geometry.vertices.push( new THREE.Vector3(-3.255574, 176.116104, 10.361440) );
geometry.vertices.push( new THREE.Vector3(4.237875, 178.775604, 9.061011) );
geometry.vertices.push( new THREE.Vector3(4.285762, 179.048996, 8.651775) );
geometry.vertices.push( new THREE.Vector3(4.366050, 179.085007, 9.061011) );
geometry.vertices.push( new THREE.Vector3(4.101412, 178.714096, 8.611425) );
geometry.vertices.push( new THREE.Vector3(4.033950, 178.509796, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.829538, 178.442307, 8.611425) );
geometry.vertices.push( new THREE.Vector3(3.768150, 178.305695, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.494565, 178.257797, 8.651775) );
geometry.vertices.push( new THREE.Vector3(3.458670, 178.177505, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.177505, 9.393150) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.134003, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.177505, 8.728875) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.305695, 8.419388) );
geometry.vertices.push( new THREE.Vector3(3.497959, 178.458405, 8.293088) );
geometry.vertices.push( new THREE.Vector3(3.829425, 178.714096, 8.249400) );
geometry.vertices.push( new THREE.Vector3(4.085213, 179.045609, 8.293088) );
geometry.vertices.push( new THREE.Vector3(4.237875, 179.417297, 8.419388) );
geometry.vertices.push( new THREE.Vector3(4.366050, 179.417297, 8.728875) );
geometry.vertices.push( new THREE.Vector3(4.409812, 179.417297, 9.061011) );
geometry.vertices.push( new THREE.Vector3(4.366050, 179.417297, 9.393150) );
geometry.vertices.push( new THREE.Vector3(4.285762, 179.048996, 9.470250) );
geometry.vertices.push( new THREE.Vector3(4.101412, 178.714096, 9.510601) );
geometry.vertices.push( new THREE.Vector3(3.829538, 178.442307, 9.510601) );
geometry.vertices.push( new THREE.Vector3(3.494565, 178.257797, 9.470250) );
geometry.vertices.push( new THREE.Vector3(4.237875, 179.416901, 9.702638) );
geometry.vertices.push( new THREE.Vector3(4.085213, 179.045609, 9.828938) );
geometry.vertices.push( new THREE.Vector3(3.829425, 178.714096, 9.872624) );
geometry.vertices.push( new THREE.Vector3(3.497959, 178.458405, 9.828938) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.305695, 9.702638) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.509796, 9.968400) );
geometry.vertices.push( new THREE.Vector3(3.484901, 178.743698, 10.092859) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.775604, 10.172320) );
geometry.vertices.push( new THREE.Vector3(3.469504, 179.074097, 10.249050) );
geometry.vertices.push( new THREE.Vector3(3.126544, 179.085007, 10.300540) );
geometry.vertices.push( new THREE.Vector3(3.800025, 179.058701, 10.092859) );
geometry.vertices.push( new THREE.Vector3(3.458674, 179.417297, 10.300540) );
geometry.vertices.push( new THREE.Vector3(3.126544, 179.417297, 10.344260) );
geometry.vertices.push( new THREE.Vector3(3.768150, 179.417297, 10.172359) );
geometry.vertices.push( new THREE.Vector3(4.033950, 179.417297, 9.968400) );
geometry.vertices.push( new THREE.Vector3(4.285762, 179.785095, 9.470250) );
geometry.vertices.push( new THREE.Vector3(4.085213, 179.788498, 9.828938) );
geometry.vertices.push( new THREE.Vector3(3.800025, 179.775406, 10.092859) );
geometry.vertices.push( new THREE.Vector3(3.469507, 179.760010, 10.249090) );
geometry.vertices.push( new THREE.Vector3(3.126544, 179.749100, 10.300540) );
geometry.vertices.push( new THREE.Vector3(2.794414, 179.417297, 10.300540) );
geometry.vertices.push( new THREE.Vector3(4.101412, 180.120010, 9.510601) );
geometry.vertices.push( new THREE.Vector3(3.829425, 180.120010, 9.872624) );
geometry.vertices.push( new THREE.Vector3(3.484901, 180.090408, 10.092859) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.058899, 10.172320) );
geometry.vertices.push( new THREE.Vector3(2.783580, 179.760010, 10.249090) );
geometry.vertices.push( new THREE.Vector3(2.484915, 179.417297, 10.172359) );
geometry.vertices.push( new THREE.Vector3(2.783580, 179.074097, 10.249090) );
geometry.vertices.push( new THREE.Vector3(4.237875, 180.058899, 9.061011) );
geometry.vertices.push( new THREE.Vector3(4.033950, 180.324402, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.829538, 180.391891, 9.510601) );
geometry.vertices.push( new THREE.Vector3(3.497959, 180.375702, 9.828938) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.324402, 9.968400) );
geometry.vertices.push( new THREE.Vector3(2.768182, 180.090408, 10.092859) );
geometry.vertices.push( new THREE.Vector3(3.768150, 180.528397, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.494565, 180.576401, 9.470250) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.528397, 9.702638) );
geometry.vertices.push( new THREE.Vector3(2.755125, 180.375702, 9.828938) );
geometry.vertices.push( new THREE.Vector3(2.423678, 180.120010, 9.872624) );
geometry.vertices.push( new THREE.Vector3(2.453047, 179.775406, 10.092859) );
geometry.vertices.push( new THREE.Vector3(2.167864, 179.788498, 9.828938) );
geometry.vertices.push( new THREE.Vector3(1.967310, 179.785095, 9.470250) );
geometry.vertices.push( new THREE.Vector3(2.151664, 180.120010, 9.510601) );
geometry.vertices.push( new THREE.Vector3(2.423535, 180.391891, 9.510601) );
geometry.vertices.push( new THREE.Vector3(2.758523, 180.576401, 9.470250) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.656601, 9.393150) );
geometry.vertices.push( new THREE.Vector3(3.458670, 180.656601, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.219149, 180.324402, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.484915, 180.528397, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.794410, 180.656601, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.700500, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.656601, 8.728875) );
geometry.vertices.push( new THREE.Vector3(3.494565, 180.576401, 8.651775) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.528397, 8.419388) );
geometry.vertices.push( new THREE.Vector3(3.497959, 180.375702, 8.293088) );
geometry.vertices.push( new THREE.Vector3(2.015213, 180.058899, 9.061011) );
geometry.vertices.push( new THREE.Vector3(1.967306, 179.785095, 8.651775) );
geometry.vertices.push( new THREE.Vector3(1.887019, 179.749100, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.151664, 180.120010, 8.611425) );
geometry.vertices.push( new THREE.Vector3(2.423535, 180.391891, 8.611425) );
geometry.vertices.push( new THREE.Vector3(2.758523, 180.576401, 8.651775) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.656601, 8.728875) );
geometry.vertices.push( new THREE.Vector3(1.887019, 179.417297, 8.728875) );
geometry.vertices.push( new THREE.Vector3(1.843294, 179.417297, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.015213, 179.417297, 8.419388) );
geometry.vertices.push( new THREE.Vector3(2.167864, 179.788498, 8.293088) );
geometry.vertices.push( new THREE.Vector3(2.423678, 180.120010, 8.249400) );
geometry.vertices.push( new THREE.Vector3(2.755125, 180.375702, 8.293088) );
geometry.vertices.push( new THREE.Vector3(3.126544, 180.528397, 8.419388) );
geometry.vertices.push( new THREE.Vector3(3.829538, 180.391891, 8.611425) );
geometry.vertices.push( new THREE.Vector3(4.101412, 180.120010, 8.611425) );
geometry.vertices.push( new THREE.Vector3(4.285762, 179.785095, 8.651775) );
geometry.vertices.push( new THREE.Vector3(4.366050, 179.749100, 9.061011) );
geometry.vertices.push( new THREE.Vector3(3.829425, 180.120010, 8.249400) );
geometry.vertices.push( new THREE.Vector3(4.085213, 179.788498, 8.293088) );
geometry.vertices.push( new THREE.Vector3(4.237875, 179.417297, 8.419388) );
geometry.vertices.push( new THREE.Vector3(4.366050, 179.417297, 8.728875) );
geometry.vertices.push( new THREE.Vector3(2.219149, 178.509796, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.423535, 178.442307, 8.611425) );
geometry.vertices.push( new THREE.Vector3(2.484915, 178.305695, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.151664, 178.714096, 8.611425) );
geometry.vertices.push( new THREE.Vector3(2.015213, 178.775604, 9.061011) );
geometry.vertices.push( new THREE.Vector3(1.967306, 179.048996, 8.651775) );
geometry.vertices.push( new THREE.Vector3(1.887019, 179.085007, 9.061011) );
geometry.vertices.push( new THREE.Vector3(1.967306, 179.048996, 9.470250) );
geometry.vertices.push( new THREE.Vector3(1.887019, 179.417297, 9.393150) );
geometry.vertices.push( new THREE.Vector3(2.015216, 179.416901, 9.702638) );
geometry.vertices.push( new THREE.Vector3(2.219149, 179.417297, 9.968400) );
geometry.vertices.push( new THREE.Vector3(2.167864, 179.045609, 9.828938) );
geometry.vertices.push( new THREE.Vector3(2.151664, 178.714096, 9.510601) );
geometry.vertices.push( new THREE.Vector3(2.453047, 179.058701, 10.092859) );
geometry.vertices.push( new THREE.Vector3(2.423678, 178.714096, 9.872624) );
geometry.vertices.push( new THREE.Vector3(2.423535, 178.442307, 9.510601) );
geometry.vertices.push( new THREE.Vector3(2.768182, 178.743698, 10.092859) );
geometry.vertices.push( new THREE.Vector3(2.755125, 178.458405, 9.828938) );
geometry.vertices.push( new THREE.Vector3(2.758523, 178.257797, 9.470250) );
geometry.vertices.push( new THREE.Vector3(2.794410, 178.177505, 9.061011) );
geometry.vertices.push( new THREE.Vector3(2.758523, 178.257797, 8.651775) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.177505, 8.728875) );
geometry.vertices.push( new THREE.Vector3(3.126544, 178.305695, 8.419388) );
geometry.vertices.push( new THREE.Vector3(2.755125, 178.458405, 8.293088) );
geometry.vertices.push( new THREE.Vector3(2.423678, 178.714096, 8.249400) );
geometry.vertices.push( new THREE.Vector3(2.167864, 179.045609, 8.293088) );
geometry.vertices.push( new THREE.Vector3(2.015213, 179.417297, 8.419388) );
geometry.vertices.push( new THREE.Vector3(1.887019, 179.417297, 8.728875) );
geometry.vertices.push( new THREE.Vector3(-3.768187, 178.305695, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.494569, 178.257797, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-3.458674, 178.177505, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.829538, 178.442307, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-4.033950, 178.509796, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-4.101412, 178.714096, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-4.237875, 178.775299, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-4.285762, 179.048996, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-4.366088, 179.085007, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.494569, 178.257797, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 178.177505, 9.393148) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 178.134003, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 178.177505, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 178.305695, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-3.497962, 178.458405, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-3.829425, 178.714096, 8.249399) );
geometry.vertices.push( new THREE.Vector3(-4.085213, 179.045609, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-4.237875, 179.416901, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-4.366088, 179.416901, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-4.409812, 179.417297, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-4.366088, 179.749100, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-4.366088, 179.416901, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-4.366088, 179.416901, 9.393148) );
geometry.vertices.push( new THREE.Vector3(-4.285762, 179.048996, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-4.101412, 178.714096, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-3.829538, 178.442307, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-4.237875, 179.416901, 9.702637) );
geometry.vertices.push( new THREE.Vector3(-4.085213, 179.045609, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-4.033950, 179.416901, 9.968399) );
geometry.vertices.push( new THREE.Vector3(-3.800025, 179.058701, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-3.768187, 179.416901, 10.172320) );
geometry.vertices.push( new THREE.Vector3(-3.829425, 178.714096, 9.872624) );
geometry.vertices.push( new THREE.Vector3(-3.469507, 179.074097, 10.249090) );
geometry.vertices.push( new THREE.Vector3(-3.458674, 179.416901, 10.300540) );
geometry.vertices.push( new THREE.Vector3(-3.484905, 178.743698, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-3.497962, 178.458405, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 179.085007, 10.300540) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 179.416901, 10.344260) );
geometry.vertices.push( new THREE.Vector3(-3.126547, 178.775604, 10.172359) );
geometry.vertices.push( new THREE.Vector3(-3.126547, 178.509796, 9.968399) );
geometry.vertices.push( new THREE.Vector3(-3.126547, 178.305695, 9.702637) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 179.749100, 10.300540) );
geometry.vertices.push( new THREE.Vector3(-2.794414, 179.416901, 10.300540) );
geometry.vertices.push( new THREE.Vector3(-2.783584, 179.074097, 10.249090) );
geometry.vertices.push( new THREE.Vector3(-2.768186, 178.743698, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-2.755129, 178.458405, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-2.758523, 178.257797, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-2.758523, 178.257797, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-2.423539, 178.442307, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-2.484919, 178.305695, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.794414, 178.177505, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.423542, 178.442307, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-2.423681, 178.714096, 9.872624) );
geometry.vertices.push( new THREE.Vector3(-2.453051, 179.058701, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-2.484919, 179.416901, 10.172320) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 178.177505, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 178.305695, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-2.755129, 178.458405, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-2.423681, 178.714096, 8.249399) );
geometry.vertices.push( new THREE.Vector3(-2.151668, 178.714096, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-2.167867, 179.045609, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-2.167867, 179.788498, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-2.015216, 179.416901, 9.702637) );
geometry.vertices.push( new THREE.Vector3(-1.967310, 179.785095, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-1.887019, 179.416901, 9.393148) );
geometry.vertices.push( new THREE.Vector3(-1.967310, 179.048996, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-1.887019, 179.085007, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.015216, 178.775299, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-1.967310, 179.048996, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-2.219149, 178.509796, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.151668, 178.714096, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-2.167867, 179.045609, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-2.219149, 179.416901, 9.968399) );
geometry.vertices.push( new THREE.Vector3(-2.453051, 179.775406, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-2.423681, 180.120010, 9.872624) );
geometry.vertices.push( new THREE.Vector3(-2.768186, 180.090408, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-2.755129, 180.375702, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.324402, 9.968399) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.528397, 9.702637) );
geometry.vertices.push( new THREE.Vector3(-3.497962, 180.375702, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-3.494569, 180.576401, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-3.768187, 180.528397, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.458674, 180.656601, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.656601, 9.393148) );
geometry.vertices.push( new THREE.Vector3(-2.758523, 180.576401, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-2.423539, 180.391891, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-2.151668, 180.120010, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-2.219149, 180.324402, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.015216, 180.058502, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.484919, 180.528397, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.794414, 180.656601, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.700500, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.656601, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-3.494569, 180.576401, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.656601, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-2.758523, 180.576401, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.528397, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-2.423539, 180.391891, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-2.151668, 180.120010, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-1.967310, 179.785095, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-1.887019, 179.749100, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-1.887019, 179.416901, 8.728874) );
geometry.vertices.push( new THREE.Vector3(-1.843294, 179.416901, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-2.755129, 180.375702, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-2.423681, 180.120010, 8.249399) );
geometry.vertices.push( new THREE.Vector3(-2.167867, 179.788498, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-2.015216, 179.416901, 8.419387) );
geometry.vertices.push( new THREE.Vector3(2.047065, 179.022003, 9.714149) );
geometry.vertices.push( new THREE.Vector3(1.613003, 179.148407, 9.728513) );
geometry.vertices.push( new THREE.Vector3(1.613411, 179.073410, 9.678000) );
geometry.vertices.push( new THREE.Vector3(1.930346, 179.269104, 9.742126) );
geometry.vertices.push( new THREE.Vector3(2.196998, 179.014893, 9.603000) );
geometry.vertices.push( new THREE.Vector3(2.079011, 179.262802, 9.603075) );
geometry.vertices.push( new THREE.Vector3(2.132640, 179.421402, 9.615226) );
geometry.vertices.push( new THREE.Vector3(1.983499, 179.428101, 9.732112) );
geometry.vertices.push( new THREE.Vector3(1.612552, 179.225189, 9.678262) );
geometry.vertices.push( new THREE.Vector3(-19.166140, 162.664108, -7.785111) );
geometry.vertices.push( new THREE.Vector3(-17.461500, 161.463699, -10.243390) );
geometry.vertices.push( new THREE.Vector3(-19.134640, 162.591003, -7.774650) );
geometry.vertices.push( new THREE.Vector3(-1.930350, 179.269104, 9.742126) );
geometry.vertices.push( new THREE.Vector3(-1.613411, 179.073410, 9.678000) );
geometry.vertices.push( new THREE.Vector3(-1.613006, 179.148407, 9.728549) );
geometry.vertices.push( new THREE.Vector3(-2.047065, 179.022003, 9.714149) );
geometry.vertices.push( new THREE.Vector3(-2.197001, 179.014893, 9.603000) );
geometry.vertices.push( new THREE.Vector3(-2.079015, 179.262802, 9.603075) );
geometry.vertices.push( new THREE.Vector3(-2.132644, 179.421402, 9.615226) );
geometry.vertices.push( new THREE.Vector3(-1.983499, 179.428101, 9.732112) );
geometry.vertices.push( new THREE.Vector3(-1.612552, 179.225189, 9.678262) );
geometry.vertices.push( new THREE.Vector3(1.675699, 172.110397, 9.019199) );
geometry.vertices.push( new THREE.Vector3(0.825937, 171.309799, 7.838850) );
geometry.vertices.push( new THREE.Vector3(1.737285, 171.852402, 7.782001) );
geometry.vertices.push( new THREE.Vector3(0.435742, 171.662292, 9.046725) );
geometry.vertices.push( new THREE.Vector3(2.049536, 171.754105, 6.371662) );
geometry.vertices.push( new THREE.Vector3(1.969294, 171.512192, 6.599625) );
geometry.vertices.push( new THREE.Vector3(1.036841, 170.962097, 6.939188) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.539993, 7.872450) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.750397, 9.053175) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.928894, 9.882863) );
geometry.vertices.push( new THREE.Vector3(0.408199, 171.996002, 9.855112) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.075897, 10.324050) );
geometry.vertices.push( new THREE.Vector3(0.405945, 172.127991, 10.324500) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.386597, 6.801600) );
geometry.vertices.push( new THREE.Vector3(1.856411, 172.435898, 9.012300) );
geometry.vertices.push( new THREE.Vector3(2.036213, 172.175293, 7.626750) );
geometry.vertices.push( new THREE.Vector3(1.279684, 172.188400, 9.933225) );
geometry.vertices.push( new THREE.Vector3(0.952350, 172.213501, 10.334100) );
geometry.vertices.push( new THREE.Vector3(0.673710, 172.217209, 10.626300) );
geometry.vertices.push( new THREE.Vector3(1.148085, 172.390106, 10.479640) );
geometry.vertices.push( new THREE.Vector3(1.495237, 172.393890, 9.972900) );
geometry.vertices.push( new THREE.Vector3(1.007805, 172.643600, 10.380301) );
geometry.vertices.push( new THREE.Vector3(1.368469, 172.651901, 9.874575) );
geometry.vertices.push( new THREE.Vector3(1.684928, 172.632690, 8.982825) );
geometry.vertices.push( new THREE.Vector3(1.893840, 172.414505, 7.530862) );
geometry.vertices.push( new THREE.Vector3(1.062919, 172.804901, 7.576650) );
geometry.vertices.push( new THREE.Vector3(0.719344, 172.823593, 9.916200) );
geometry.vertices.push( new THREE.Vector3(0.993720, 172.846497, 9.000225) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.760605, 7.667249) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.139297, 6.265388) );
geometry.vertices.push( new THREE.Vector3(0.996454, 172.162109, 6.235125) );
geometry.vertices.push( new THREE.Vector3(1.794787, 172.005707, 6.207900) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.903091, 9.039225) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.813904, 9.951000) );
geometry.vertices.push( new THREE.Vector3(0.605321, 172.776703, 10.392190) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.795502, 10.383600) );
geometry.vertices.push( new THREE.Vector3(0.487373, 172.704391, 10.760019) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.702499, 10.812819) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.395004, 10.924720) );
geometry.vertices.push( new THREE.Vector3(0.425130, 172.394302, 10.881860) );
geometry.vertices.push( new THREE.Vector3(0.757586, 172.393494, 10.798460) );
geometry.vertices.push( new THREE.Vector3(0.398130, 172.218002, 10.704070) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.227005, 10.746000) );
geometry.vertices.push( new THREE.Vector3(0.748388, 172.669495, 10.677000) );
geometry.vertices.push( new THREE.Vector3(-17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.903091, 9.039225) );
geometry.vertices.push( new THREE.Vector3(-0.719340, 172.823593, 9.916200) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.813904, 9.951000) );
geometry.vertices.push( new THREE.Vector3(-0.993712, 172.846497, 9.000225) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.760605, 7.667249) );
geometry.vertices.push( new THREE.Vector3(-1.062915, 172.804901, 7.576650) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.139297, 6.265388) );
geometry.vertices.push( new THREE.Vector3(-0.996450, 172.162109, 6.235125) );
geometry.vertices.push( new THREE.Vector3(-1.893836, 172.414505, 7.530862) );
geometry.vertices.push( new THREE.Vector3(-1.794784, 172.005707, 6.207900) );
geometry.vertices.push( new THREE.Vector3(-2.049533, 171.754105, 6.371662) );
geometry.vertices.push( new THREE.Vector3(-1.737278, 171.852402, 7.782001) );
geometry.vertices.push( new THREE.Vector3(-1.969290, 171.512192, 6.599625) );
geometry.vertices.push( new THREE.Vector3(-2.036209, 172.175293, 7.626750) );
geometry.vertices.push( new THREE.Vector3(-1.684920, 172.632690, 8.982825) );
geometry.vertices.push( new THREE.Vector3(-1.368465, 172.651901, 9.874575) );
geometry.vertices.push( new THREE.Vector3(-0.605317, 172.776703, 10.392190) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.795502, 10.383600) );
geometry.vertices.push( new THREE.Vector3(-1.495234, 172.393890, 9.972900) );
geometry.vertices.push( new THREE.Vector3(-0.435739, 171.662292, 9.046725) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.928894, 9.882863) );
geometry.vertices.push( new THREE.Vector3(-0.408195, 171.996002, 9.855112) );
geometry.vertices.push( new THREE.Vector3(-1.279680, 172.188400, 9.933225) );
geometry.vertices.push( new THREE.Vector3(-1.675695, 172.110397, 9.019199) );
geometry.vertices.push( new THREE.Vector3(-1.856408, 172.435898, 9.012300) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.750397, 9.053175) );
geometry.vertices.push( new THREE.Vector3(-0.825934, 171.309799, 7.838850) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.539993, 7.872450) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.386597, 6.801600) );
geometry.vertices.push( new THREE.Vector3(-1.036838, 170.962097, 6.939188) );
geometry.vertices.push( new THREE.Vector3(-0.952346, 172.213501, 10.334100) );
geometry.vertices.push( new THREE.Vector3(-0.398126, 172.218002, 10.704070) );
geometry.vertices.push( new THREE.Vector3(-0.673706, 172.217209, 10.626300) );
geometry.vertices.push( new THREE.Vector3(-0.405941, 172.127991, 10.324500) );
geometry.vertices.push( new THREE.Vector3(-1.148077, 172.390106, 10.479640) );
geometry.vertices.push( new THREE.Vector3(-0.757579, 172.393097, 10.798460) );
geometry.vertices.push( new THREE.Vector3(-1.007801, 172.643600, 10.380301) );
geometry.vertices.push( new THREE.Vector3(-0.748384, 172.669495, 10.677000) );
geometry.vertices.push( new THREE.Vector3(-0.425126, 172.394302, 10.881860) );
geometry.vertices.push( new THREE.Vector3(-0.487369, 172.704391, 10.760019) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.702499, 10.812819) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.395004, 10.924720) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.227005, 10.746000) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.075897, 10.324050) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.095505, 11.377310) );
geometry.vertices.push( new THREE.Vector3(0.480188, 172.903091, 11.624660) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.878799, 11.689130) );
geometry.vertices.push( new THREE.Vector3(0.632989, 173.135300, 11.313070) );
geometry.vertices.push( new THREE.Vector3(0.484110, 172.919601, 11.939660) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.090988, 12.303860) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.869400, 11.965461) );
geometry.vertices.push( new THREE.Vector3(0.871942, 172.940598, 11.846630) );
geometry.vertices.push( new THREE.Vector3(0.850823, 172.912506, 11.587500) );
geometry.vertices.push( new THREE.Vector3(1.164338, 172.938004, 11.411360) );
geometry.vertices.push( new THREE.Vector3(1.131064, 173.134903, 11.185690) );
geometry.vertices.push( new THREE.Vector3(1.560866, 172.885498, 11.126030) );
geometry.vertices.push( new THREE.Vector3(1.551690, 173.070007, 10.885159) );
geometry.vertices.push( new THREE.Vector3(1.858620, 172.809006, 10.888910) );
geometry.vertices.push( new THREE.Vector3(1.801729, 172.992004, 10.647070) );
geometry.vertices.push( new THREE.Vector3(1.970974, 172.937592, 10.428410) );
geometry.vertices.push( new THREE.Vector3(1.230218, 172.947006, 11.640070) );
geometry.vertices.push( new THREE.Vector3(0.463076, 173.509903, 12.489640) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.413498, 12.471300) );
geometry.vertices.push( new THREE.Vector3(0.535076, 173.190002, 12.297150) );
geometry.vertices.push( new THREE.Vector3(0.978266, 173.246597, 12.226430) );
geometry.vertices.push( new THREE.Vector3(1.380626, 173.193008, 11.956280) );
geometry.vertices.push( new THREE.Vector3(1.614795, 172.925598, 11.348440) );
geometry.vertices.push( new THREE.Vector3(1.915515, 172.835999, 11.094370) );
geometry.vertices.push( new THREE.Vector3(1.427670, 173.473099, 11.994710) );
geometry.vertices.push( new THREE.Vector3(1.730779, 173.093201, 11.589970) );
geometry.vertices.push( new THREE.Vector3(1.813110, 173.279602, 11.665310) );
geometry.vertices.push( new THREE.Vector3(2.093366, 173.108994, 11.309440) );
geometry.vertices.push( new THREE.Vector3(2.034750, 172.984894, 11.255400) );
geometry.vertices.push( new THREE.Vector3(2.360426, 172.898193, 10.996350) );
geometry.vertices.push( new THREE.Vector3(2.283743, 172.817307, 10.943590) );
geometry.vertices.push( new THREE.Vector3(2.839954, 173.657303, 10.987690) );
geometry.vertices.push( new THREE.Vector3(2.271982, 173.547394, 11.340110) );
geometry.vertices.push( new THREE.Vector3(2.559217, 173.213196, 11.062719) );
geometry.vertices.push( new THREE.Vector3(1.869334, 173.733795, 11.622860) );
geometry.vertices.push( new THREE.Vector3(1.435702, 173.816605, 11.917160) );
geometry.vertices.push( new THREE.Vector3(1.064321, 173.558990, 12.262280) );
geometry.vertices.push( new THREE.Vector3(2.408523, 174.050598, 11.233610) );
geometry.vertices.push( new THREE.Vector3(3.116287, 174.102707, 10.762950) );
geometry.vertices.push( new THREE.Vector3(2.698534, 175.010300, 10.804760) );
geometry.vertices.push( new THREE.Vector3(2.613435, 174.557999, 10.997810) );
geometry.vertices.push( new THREE.Vector3(1.926323, 174.211502, 11.493000) );
geometry.vertices.push( new THREE.Vector3(1.454160, 174.296600, 11.756890) );
geometry.vertices.push( new THREE.Vector3(2.005208, 174.836594, 11.211411) );
geometry.vertices.push( new THREE.Vector3(1.418782, 174.748093, 11.596010) );
geometry.vertices.push( new THREE.Vector3(0.990795, 174.325104, 11.965720) );
geometry.vertices.push( new THREE.Vector3(0.984960, 173.876999, 12.125740) );
geometry.vertices.push( new THREE.Vector3(0.441589, 173.896896, 12.322310) );
geometry.vertices.push( new THREE.Vector3(1.256996, 175.195801, 11.338310) );
geometry.vertices.push( new THREE.Vector3(0.426439, 174.336807, 12.167400) );
geometry.vertices.push( new THREE.Vector3(1.181554, 175.252502, 11.554870) );
geometry.vertices.push( new THREE.Vector3(0.855210, 174.980194, 11.723850) );
geometry.vertices.push( new THREE.Vector3(0.956467, 174.690704, 11.853411) );
geometry.vertices.push( new THREE.Vector3(0.398209, 174.669006, 12.094840) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.293304, 12.012560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.867203, 12.167891) );
geometry.vertices.push( new THREE.Vector3(0.357133, 174.935196, 12.094160) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.595901, 12.033751) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.143295, 12.274010) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.833298, 12.063560) );
geometry.vertices.push( new THREE.Vector3(0.302726, 175.164398, 12.235880) );
geometry.vertices.push( new THREE.Vector3(0.417469, 175.191803, 11.996620) );
geometry.vertices.push( new THREE.Vector3(0.817151, 175.226608, 11.688940) );
geometry.vertices.push( new THREE.Vector3(1.036882, 175.653809, 11.511260) );
geometry.vertices.push( new THREE.Vector3(1.305859, 175.287003, 11.536990) );
geometry.vertices.push( new THREE.Vector3(1.397554, 175.382202, 11.793560) );
geometry.vertices.push( new THREE.Vector3(1.613269, 175.345093, 11.483439) );
geometry.vertices.push( new THREE.Vector3(1.570339, 175.387894, 11.862000) );
geometry.vertices.push( new THREE.Vector3(1.162237, 175.602798, 12.037459) );
geometry.vertices.push( new THREE.Vector3(1.200487, 175.636902, 11.713050) );
geometry.vertices.push( new THREE.Vector3(1.319816, 175.460999, 12.126000) );
geometry.vertices.push( new THREE.Vector3(1.118160, 175.531906, 12.433310) );
geometry.vertices.push( new THREE.Vector3(0.750315, 175.813904, 11.929050) );
geometry.vertices.push( new THREE.Vector3(1.030095, 175.724197, 12.274500) );
geometry.vertices.push( new THREE.Vector3(0.789806, 175.763199, 12.512700) );
geometry.vertices.push( new THREE.Vector3(0.841249, 175.561096, 12.812060) );
geometry.vertices.push( new THREE.Vector3(1.267706, 175.637192, 12.490420) );
geometry.vertices.push( new THREE.Vector3(1.483804, 175.518402, 12.142950) );
geometry.vertices.push( new THREE.Vector3(1.681350, 175.781998, 11.944051) );
geometry.vertices.push( new THREE.Vector3(1.362367, 175.981110, 12.441940) );
geometry.vertices.push( new THREE.Vector3(1.346209, 176.346008, 12.266660) );
geometry.vertices.push( new THREE.Vector3(0.909998, 176.773911, 12.510679) );
geometry.vertices.push( new THREE.Vector3(0.942124, 176.412003, 12.730800) );
geometry.vertices.push( new THREE.Vector3(0.976260, 175.943298, 12.941440) );
geometry.vertices.push( new THREE.Vector3(0.923861, 175.638397, 12.902141) );
geometry.vertices.push( new THREE.Vector3(0.530392, 175.572800, 13.378310) );
geometry.vertices.push( new THREE.Vector3(0.512797, 175.440002, 12.999110) );
geometry.vertices.push( new THREE.Vector3(0.497404, 175.640701, 12.722219) );
geometry.vertices.push( new THREE.Vector3(0.658140, 175.931595, 13.519160) );
geometry.vertices.push( new THREE.Vector3(0.598856, 176.480194, 13.310141) );
geometry.vertices.push( new THREE.Vector3(0.374153, 175.510895, 12.472160) );
geometry.vertices.push( new THREE.Vector3(0.359332, 175.345093, 12.668550) );
geometry.vertices.push( new THREE.Vector3(0.000000, 176.524490, 13.576651) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.991592, 13.751030) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.520294, 13.617000) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.331604, 13.117200) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.251694, 12.724569) );
geometry.vertices.push( new THREE.Vector3(0.421196, 175.456100, 12.026170) );
geometry.vertices.push( new THREE.Vector3(0.677550, 175.568207, 11.606140) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.938889, 6.171862) );
geometry.vertices.push( new THREE.Vector3(0.981713, 172.441101, 6.318900) );
geometry.vertices.push( new THREE.Vector3(1.124663, 173.965897, 6.429825) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.433609, 6.079500) );
geometry.vertices.push( new THREE.Vector3(1.124663, 173.965897, 6.429825) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.026398, 8.150100) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.938889, 6.171862) );
geometry.vertices.push( new THREE.Vector3(0.792292, 175.041000, 8.174588) );
geometry.vertices.push( new THREE.Vector3(0.769534, 174.803192, 11.148110) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.832001, 11.606210) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.756393, 11.256070) );
geometry.vertices.push( new THREE.Vector3(1.434367, 174.842209, 10.775020) );
geometry.vertices.push( new THREE.Vector3(1.412854, 175.012894, 8.144663) );
geometry.vertices.push( new THREE.Vector3(1.282718, 173.906189, 11.269840) );
geometry.vertices.push( new THREE.Vector3(0.700687, 173.864990, 11.509950) );
geometry.vertices.push( new THREE.Vector3(0.632989, 173.135300, 11.313070) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.095505, 11.377310) );
geometry.vertices.push( new THREE.Vector3(1.101904, 171.714401, 7.303613) );
geometry.vertices.push( new THREE.Vector3(3.187148, 172.715302, 7.932563) );
geometry.vertices.push( new THREE.Vector3(1.926896, 172.450897, 6.912713) );
geometry.vertices.push( new THREE.Vector3(2.115360, 173.908096, 6.756862) );
geometry.vertices.push( new THREE.Vector3(0.981713, 172.441101, 6.318900) );
geometry.vertices.push( new THREE.Vector3(3.093630, 174.902588, 8.102100) );
geometry.vertices.push( new THREE.Vector3(2.093370, 174.852798, 10.253401) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.651810, 7.284863) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.433609, 6.079500) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.676498, 8.108512) );
geometry.vertices.push( new THREE.Vector3(1.131064, 173.134903, 11.185690) );
geometry.vertices.push( new THREE.Vector3(1.551690, 173.070007, 10.885159) );
geometry.vertices.push( new THREE.Vector3(1.776488, 173.901703, 10.846610) );
geometry.vertices.push( new THREE.Vector3(2.072235, 173.692902, 10.594500) );
geometry.vertices.push( new THREE.Vector3(1.801729, 172.992004, 10.647070) );
geometry.vertices.push( new THREE.Vector3(2.323519, 173.543594, 10.226170) );
geometry.vertices.push( new THREE.Vector3(1.970974, 172.937592, 10.428410) );
geometry.vertices.push( new THREE.Vector3(2.090021, 172.898605, 10.277889) );
geometry.vertices.push( new THREE.Vector3(3.265841, 173.758896, 7.953526) );
geometry.vertices.push( new THREE.Vector3(2.571652, 174.530991, 9.865800) );
geometry.vertices.push( new THREE.Vector3(2.756865, 173.398102, 9.312524) );
geometry.vertices.push( new THREE.Vector3(2.872178, 172.593399, 9.070051) );
geometry.vertices.push( new THREE.Vector3(2.741947, 171.635605, 7.955887) );
geometry.vertices.push( new THREE.Vector3(2.297130, 171.404602, 9.406537) );
geometry.vertices.push( new THREE.Vector3(2.236605, 172.827393, 10.043440) );
geometry.vertices.push( new THREE.Vector3(2.335091, 172.773697, 9.875250) );
geometry.vertices.push( new THREE.Vector3(2.461500, 172.541595, 9.721575) );
geometry.vertices.push( new THREE.Vector3(2.367030, 172.364288, 9.791775) );
geometry.vertices.push( new THREE.Vector3(1.894579, 171.679108, 10.332860) );
geometry.vertices.push( new THREE.Vector3(1.615661, 171.622894, 10.532630) );
geometry.vertices.push( new THREE.Vector3(2.220926, 172.431000, 10.051650) );
geometry.vertices.push( new THREE.Vector3(2.019458, 172.506409, 10.357719) );
geometry.vertices.push( new THREE.Vector3(1.681639, 172.588104, 10.697551) );
geometry.vertices.push( new THREE.Vector3(1.205460, 172.724991, 10.966909) );
geometry.vertices.push( new THREE.Vector3(1.252789, 171.629593, 10.661631) );
geometry.vertices.push( new THREE.Vector3(0.915544, 171.633392, 10.753870) );
geometry.vertices.push( new THREE.Vector3(0.578299, 171.636703, 10.846160) );
geometry.vertices.push( new THREE.Vector3(0.930795, 172.779404, 11.061640) );
geometry.vertices.push( new THREE.Vector3(0.656134, 172.833801, 11.156330) );
geometry.vertices.push( new THREE.Vector3(0.330264, 172.867889, 11.241711) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.861893, 11.247750) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.635193, 10.942240) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.658905, 9.352311) );
geometry.vertices.push( new THREE.Vector3(0.486409, 177.673904, 12.497780) );
geometry.vertices.push( new THREE.Vector3(0.000000, 177.370102, 12.961989) );
geometry.vertices.push( new THREE.Vector3(0.505151, 177.285797, 12.757270) );
geometry.vertices.push( new THREE.Vector3(0.000000, 177.828705, 12.695511) );
geometry.vertices.push( new THREE.Vector3(0.000000, 176.935501, 13.303650) );
geometry.vertices.push( new THREE.Vector3(0.530681, 176.897202, 13.046921) );
geometry.vertices.push( new THREE.Vector3(0.877965, 177.102402, 12.260740) );
geometry.vertices.push( new THREE.Vector3(0.820309, 177.474701, 12.035920) );
geometry.vertices.push( new THREE.Vector3(1.110604, 177.291000, 11.637980) );
geometry.vertices.push( new THREE.Vector3(1.886835, 176.760010, 11.009851) );
geometry.vertices.push( new THREE.Vector3(1.724475, 177.545593, 10.805140) );
geometry.vertices.push( new THREE.Vector3(1.460377, 177.154510, 11.245540) );
geometry.vertices.push( new THREE.Vector3(1.487629, 176.472702, 11.273849) );
geometry.vertices.push( new THREE.Vector3(1.213298, 176.877792, 11.766300) );
geometry.vertices.push( new THREE.Vector3(1.623499, 176.186600, 10.928850) );
geometry.vertices.push( new THREE.Vector3(1.447466, 175.369507, 11.071730) );
geometry.vertices.push( new THREE.Vector3(1.556951, 175.727997, 10.836790) );
geometry.vertices.push( new THREE.Vector3(2.178277, 175.403595, 10.845680) );
geometry.vertices.push( new THREE.Vector3(2.397146, 175.845398, 10.951910) );
geometry.vertices.push( new THREE.Vector3(2.535604, 176.382401, 10.854750) );
geometry.vertices.push( new THREE.Vector3(2.648625, 176.926102, 10.625469) );
geometry.vertices.push( new THREE.Vector3(1.911120, 177.397095, 10.747760) );
geometry.vertices.push( new THREE.Vector3(3.436230, 176.456299, 10.432690) );
geometry.vertices.push( new THREE.Vector3(4.134338, 175.655991, 9.947926) );
geometry.vertices.push( new THREE.Vector3(5.045963, 176.595001, 9.205912) );
geometry.vertices.push( new THREE.Vector3(4.226888, 176.378998, 9.845512) );
geometry.vertices.push( new THREE.Vector3(3.342427, 175.946609, 10.664101) );
geometry.vertices.push( new THREE.Vector3(3.013598, 175.461700, 10.800450) );
geometry.vertices.push( new THREE.Vector3(4.398900, 174.907104, 9.603675) );
geometry.vertices.push( new THREE.Vector3(5.142637, 175.297897, 8.738924) );
geometry.vertices.push( new THREE.Vector3(3.593614, 175.079590, 10.465119) );
geometry.vertices.push( new THREE.Vector3(3.303030, 174.569595, 10.562170) );
geometry.vertices.push( new THREE.Vector3(3.508991, 174.038605, 10.410040) );
geometry.vertices.push( new THREE.Vector3(3.948262, 174.463898, 10.147460) );
geometry.vertices.push( new THREE.Vector3(3.522383, 172.318497, 10.328770) );
geometry.vertices.push( new THREE.Vector3(3.194411, 172.745300, 10.639350) );
geometry.vertices.push( new THREE.Vector3(3.076898, 172.477097, 10.597350) );
geometry.vertices.push( new THREE.Vector3(3.570093, 172.813904, 10.341110) );
geometry.vertices.push( new THREE.Vector3(3.247095, 173.064697, 10.657880) );
geometry.vertices.push( new THREE.Vector3(3.619050, 173.312302, 10.334320) );
geometry.vertices.push( new THREE.Vector3(3.277406, 173.589401, 10.700330) );
geometry.vertices.push( new THREE.Vector3(3.010537, 173.227890, 10.840691) );
geometry.vertices.push( new THREE.Vector3(3.365951, 171.784103, 10.344939) );
geometry.vertices.push( new THREE.Vector3(2.902969, 172.026001, 10.585200) );
geometry.vertices.push( new THREE.Vector3(2.698440, 172.948502, 10.866150) );
geometry.vertices.push( new THREE.Vector3(2.670330, 171.548599, 10.779040) );
geometry.vertices.push( new THREE.Vector3(2.548035, 170.729309, 10.706170) );
geometry.vertices.push( new THREE.Vector3(2.987017, 171.149307, 10.511400) );
geometry.vertices.push( new THREE.Vector3(2.697105, 172.210098, 10.774611) );
geometry.vertices.push( new THREE.Vector3(2.881549, 172.487198, 10.640480) );
geometry.vertices.push( new THREE.Vector3(2.695762, 172.515289, 10.606911) );
geometry.vertices.push( new THREE.Vector3(2.561707, 172.345490, 10.876460) );
geometry.vertices.push( new THREE.Vector3(2.502139, 172.465103, 10.886700) );
geometry.vertices.push( new THREE.Vector3(2.226184, 172.133301, 11.177470) );
geometry.vertices.push( new THREE.Vector3(2.412255, 171.877899, 11.036060) );
geometry.vertices.push( new THREE.Vector3(2.241769, 171.157104, 11.016820) );
geometry.vertices.push( new THREE.Vector3(2.065256, 170.667404, 11.154040) );
geometry.vertices.push( new THREE.Vector3(2.842826, 170.228302, 10.688661) );
geometry.vertices.push( new THREE.Vector3(2.315490, 170.079391, 11.246140) );
geometry.vertices.push( new THREE.Vector3(2.343026, 169.572403, 11.227390) );
geometry.vertices.push( new THREE.Vector3(1.915327, 171.557602, 11.310750) );
geometry.vertices.push( new THREE.Vector3(2.037818, 172.720505, 11.158390) );
geometry.vertices.push( new THREE.Vector3(2.446965, 172.543503, 10.829700) );
geometry.vertices.push( new THREE.Vector3(2.358615, 172.637207, 10.706850) );
geometry.vertices.push( new THREE.Vector3(2.097863, 172.516098, 11.206420) );
geometry.vertices.push( new THREE.Vector3(2.126932, 172.357101, 11.225471) );
geometry.vertices.push( new THREE.Vector3(1.797120, 171.912399, 11.453250) );
geometry.vertices.push( new THREE.Vector3(1.518225, 171.480408, 11.397600) );
geometry.vertices.push( new THREE.Vector3(1.788918, 171.077591, 11.184260) );
geometry.vertices.push( new THREE.Vector3(1.341904, 170.998505, 11.348249) );
geometry.vertices.push( new THREE.Vector3(1.121411, 171.402802, 11.473500) );
geometry.vertices.push( new THREE.Vector3(1.516410, 170.603592, 11.358749) );
geometry.vertices.push( new THREE.Vector3(0.780052, 170.595001, 11.479050) );
geometry.vertices.push( new THREE.Vector3(0.688736, 170.997696, 11.466830) );
geometry.vertices.push( new THREE.Vector3(0.571125, 171.397491, 11.560800) );
geometry.vertices.push( new THREE.Vector3(0.993949, 171.753387, 11.681100) );
geometry.vertices.push( new THREE.Vector3(1.360504, 171.814896, 11.589680) );
geometry.vertices.push( new THREE.Vector3(1.719506, 172.182007, 11.558810) );
geometry.vertices.push( new THREE.Vector3(0.500944, 171.740204, 11.798329) );
geometry.vertices.push( new THREE.Vector3(1.682306, 169.954102, 11.543510) );
geometry.vertices.push( new THREE.Vector3(0.865057, 169.940994, 11.685600) );
geometry.vertices.push( new THREE.Vector3(0.000000, 170.582199, 11.478860) );
geometry.vertices.push( new THREE.Vector3(0.000000, 170.994400, 11.467760) );
geometry.vertices.push( new THREE.Vector3(0.000000, 169.922989, 11.698800) );
geometry.vertices.push( new THREE.Vector3(0.000000, 169.379608, 11.721149) );
geometry.vertices.push( new THREE.Vector3(1.700092, 169.474487, 11.556710) );
geometry.vertices.push( new THREE.Vector3(0.874620, 169.406204, 11.731580) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.676498, 11.459620) );
geometry.vertices.push( new THREE.Vector3(0.842779, 168.683197, 11.435061) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.095596, 11.019410) );
geometry.vertices.push( new THREE.Vector3(0.769249, 168.071304, 10.993310) );
geometry.vertices.push( new THREE.Vector3(0.615686, 167.791107, 10.183721) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.785095, 10.237840) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.029297, 8.954062) );
geometry.vertices.push( new THREE.Vector3(0.528769, 168.030411, 8.944200) );
geometry.vertices.push( new THREE.Vector3(1.201826, 167.838394, 10.007480) );
geometry.vertices.push( new THREE.Vector3(1.043287, 168.031097, 8.859225) );
geometry.vertices.push( new THREE.Vector3(1.423181, 168.024002, 8.809312) );
geometry.vertices.push( new THREE.Vector3(1.497859, 168.087402, 10.845300) );
geometry.vertices.push( new THREE.Vector3(1.805846, 167.937805, 9.790613) );
geometry.vertices.push( new THREE.Vector3(1.804125, 168.016510, 8.704988) );
geometry.vertices.push( new THREE.Vector3(2.325626, 168.049896, 9.424125) );
geometry.vertices.push( new THREE.Vector3(2.167091, 168.098999, 8.505712) );
geometry.vertices.push( new THREE.Vector3(2.683144, 168.142105, 9.012675) );
geometry.vertices.push( new THREE.Vector3(2.788417, 168.261398, 8.227763) );
geometry.vertices.push( new THREE.Vector3(3.209520, 168.676498, 9.488100) );
geometry.vertices.push( new THREE.Vector3(2.686680, 168.373093, 10.128340) );
geometry.vertices.push( new THREE.Vector3(3.363847, 169.264908, 9.747487) );
geometry.vertices.push( new THREE.Vector3(3.708840, 169.566406, 9.090037) );
geometry.vertices.push( new THREE.Vector3(2.151026, 168.170593, 10.626900) );
geometry.vertices.push( new THREE.Vector3(2.836133, 169.000900, 10.382139) );
geometry.vertices.push( new THREE.Vector3(3.389093, 170.022003, 9.982724) );
geometry.vertices.push( new THREE.Vector3(3.853500, 170.381195, 9.332813) );
geometry.vertices.push( new THREE.Vector3(4.253662, 170.026901, 8.306325) );
geometry.vertices.push( new THREE.Vector3(4.401675, 170.780594, 8.564887) );
geometry.vertices.push( new THREE.Vector3(4.934587, 171.156708, 7.954650) );
geometry.vertices.push( new THREE.Vector3(4.403775, 171.613800, 8.928337) );
geometry.vertices.push( new THREE.Vector3(2.887669, 169.758698, 10.602900) );
geometry.vertices.push( new THREE.Vector3(2.286326, 168.846802, 10.977070) );
geometry.vertices.push( new THREE.Vector3(1.640902, 168.748505, 11.270510) );
geometry.vertices.push( new THREE.Vector3(3.864712, 171.272202, 9.679424) );
geometry.vertices.push( new THREE.Vector3(3.300454, 170.569092, 10.140410) );
geometry.vertices.push( new THREE.Vector3(3.853500, 170.381195, 9.332813) );
geometry.vertices.push( new THREE.Vector3(4.401675, 170.780594, 8.564887) );
geometry.vertices.push( new THREE.Vector3(4.449600, 172.427994, 9.201600) );
geometry.vertices.push( new THREE.Vector3(4.886362, 173.513199, 8.425950) );
geometry.vertices.push( new THREE.Vector3(4.463363, 173.250397, 9.309376) );
geometry.vertices.push( new THREE.Vector3(4.914863, 172.589188, 8.269238) );
geometry.vertices.push( new THREE.Vector3(4.926712, 171.916901, 8.137762) );
geometry.vertices.push( new THREE.Vector3(3.949500, 172.271591, 9.911288) );
geometry.vertices.push( new THREE.Vector3(3.365951, 171.784103, 10.344939) );
geometry.vertices.push( new THREE.Vector3(2.987017, 171.149307, 10.511400) );
geometry.vertices.push( new THREE.Vector3(2.548035, 170.729309, 10.706170) );
geometry.vertices.push( new THREE.Vector3(3.570093, 172.813904, 10.341110) );
geometry.vertices.push( new THREE.Vector3(3.522383, 172.318497, 10.328770) );
geometry.vertices.push( new THREE.Vector3(4.468425, 173.989105, 9.422325) );
geometry.vertices.push( new THREE.Vector3(4.938300, 174.441391, 8.526374) );
geometry.vertices.push( new THREE.Vector3(3.973687, 173.597595, 9.995550) );
geometry.vertices.push( new THREE.Vector3(3.508991, 174.038605, 10.410040) );
geometry.vertices.push( new THREE.Vector3(3.619050, 173.312302, 10.334320) );
geometry.vertices.push( new THREE.Vector3(3.986213, 172.884003, 9.989025) );
geometry.vertices.push( new THREE.Vector3(2.446103, 172.662003, 10.589620) );
geometry.vertices.push( new THREE.Vector3(2.493338, 172.749695, 10.774910) );
geometry.vertices.push( new THREE.Vector3(2.405179, 172.714493, 10.717840) );
geometry.vertices.push( new THREE.Vector3(2.542676, 172.691208, 10.653110) );
geometry.vertices.push( new THREE.Vector3(2.730949, 172.771896, 10.720241) );
geometry.vertices.push( new THREE.Vector3(2.168044, 172.738098, 10.811810) );
geometry.vertices.push( new THREE.Vector3(2.273700, 172.681107, 10.612949) );
geometry.vertices.push( new THREE.Vector3(2.324858, 172.648895, 10.468161) );
geometry.vertices.push( new THREE.Vector3(2.397146, 172.619995, 10.299490) );
geometry.vertices.push( new THREE.Vector3(2.508352, 172.621902, 10.442440) );
geometry.vertices.push( new THREE.Vector3(2.592877, 172.624100, 10.513390) );
geometry.vertices.push( new THREE.Vector3(2.739844, 172.633499, 10.657580) );
geometry.vertices.push( new THREE.Vector3(2.924963, 172.674408, 10.689450) );
geometry.vertices.push( new THREE.Vector3(2.077875, 172.733612, 10.671070) );
geometry.vertices.push( new THREE.Vector3(2.166799, 172.701401, 10.489310) );
geometry.vertices.push( new THREE.Vector3(2.166799, 172.701401, 10.489310) );
geometry.vertices.push( new THREE.Vector3(2.324858, 172.648895, 10.468161) );
geometry.vertices.push( new THREE.Vector3(2.273700, 172.681107, 10.612949) );
geometry.vertices.push( new THREE.Vector3(2.259742, 172.655197, 10.299900) );
geometry.vertices.push( new THREE.Vector3(2.397146, 172.619995, 10.299490) );
geometry.vertices.push( new THREE.Vector3(2.090021, 172.898605, 10.277889) );
geometry.vertices.push( new THREE.Vector3(2.236605, 172.827393, 10.043440) );
geometry.vertices.push( new THREE.Vector3(2.362151, 172.610611, 10.098599) );
geometry.vertices.push( new THREE.Vector3(2.381374, 172.577209, 10.098110) );
geometry.vertices.push( new THREE.Vector3(2.335091, 172.773697, 9.875250) );
geometry.vertices.push( new THREE.Vector3(2.461500, 172.541595, 9.721575) );
geometry.vertices.push( new THREE.Vector3(2.220926, 172.431000, 10.051650) );
geometry.vertices.push( new THREE.Vector3(2.367030, 172.364288, 9.791775) );
geometry.vertices.push( new THREE.Vector3(2.205720, 172.685593, 10.532701) );
geometry.vertices.push( new THREE.Vector3(2.503905, 172.610291, 10.317980) );
geometry.vertices.push( new THREE.Vector3(2.580735, 172.579498, 10.528419) );
geometry.vertices.push( new THREE.Vector3(2.970476, 172.871597, 10.731899) );
geometry.vertices.push( new THREE.Vector3(0.389644, 173.001694, 11.724220) );
geometry.vertices.push( new THREE.Vector3(0.656134, 172.833801, 11.156330) );
geometry.vertices.push( new THREE.Vector3(0.330264, 172.867889, 11.241711) );
geometry.vertices.push( new THREE.Vector3(0.774889, 173.017502, 11.606210) );
geometry.vertices.push( new THREE.Vector3(0.852626, 172.868301, 11.916490) );
geometry.vertices.push( new THREE.Vector3(0.472256, 172.302002, 12.161100) );
geometry.vertices.push( new THREE.Vector3(0.940024, 172.340302, 12.059440) );
geometry.vertices.push( new THREE.Vector3(0.428464, 172.830399, 12.024560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.787201, 12.011169) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.967606, 11.729170) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.861893, 11.247750) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.945007, 11.959240) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.264099, 12.137850) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.392593, 11.528661) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.726807, 11.787790) );
geometry.vertices.push( new THREE.Vector3(0.483446, 171.973099, 11.966590) );
geometry.vertices.push( new THREE.Vector3(0.962111, 172.001602, 11.845950) );
geometry.vertices.push( new THREE.Vector3(1.262974, 172.386002, 11.910490) );
geometry.vertices.push( new THREE.Vector3(1.296821, 172.072906, 11.738359) );
geometry.vertices.push( new THREE.Vector3(1.649940, 172.447510, 11.692090) );
geometry.vertices.push( new THREE.Vector3(1.170127, 172.876892, 11.773840) );
geometry.vertices.push( new THREE.Vector3(1.563570, 172.808594, 11.552999) );
geometry.vertices.push( new THREE.Vector3(1.085198, 172.996902, 11.470720) );
geometry.vertices.push( new THREE.Vector3(1.428577, 172.946594, 11.335240) );
geometry.vertices.push( new THREE.Vector3(1.901077, 172.816101, 10.948460) );
geometry.vertices.push( new THREE.Vector3(0.930795, 172.779404, 11.061640) );
geometry.vertices.push( new THREE.Vector3(1.205460, 172.724991, 10.966909) );
geometry.vertices.push( new THREE.Vector3(1.681639, 172.588104, 10.697551) );
geometry.vertices.push( new THREE.Vector3(2.019458, 172.506409, 10.357719) );
geometry.vertices.push( new THREE.Vector3(1.836349, 175.987106, 11.497010) );
geometry.vertices.push( new THREE.Vector3(1.840268, 175.595291, 11.412789) );
geometry.vertices.push( new THREE.Vector3(1.828699, 175.796600, 11.293950) );
geometry.vertices.push( new THREE.Vector3(1.734417, 176.223404, 11.258360) );
geometry.vertices.push( new THREE.Vector3(1.758612, 176.003601, 11.118300) );
geometry.vertices.push( new THREE.Vector3(1.564504, 176.167908, 10.998560) );
geometry.vertices.push( new THREE.Vector3(1.679820, 175.724609, 11.031940) );
geometry.vertices.push( new THREE.Vector3(1.703246, 175.517593, 11.223380) );
geometry.vertices.push( new THREE.Vector3(1.613269, 175.345093, 11.483439) );
geometry.vertices.push( new THREE.Vector3(1.764060, 175.645493, 11.733110) );
geometry.vertices.push( new THREE.Vector3(1.785765, 176.138306, 11.728540) );
geometry.vertices.push( new THREE.Vector3(1.653907, 176.396301, 11.525890) );
geometry.vertices.push( new THREE.Vector3(1.260056, 176.551102, 11.996551) );
geometry.vertices.push( new THREE.Vector3(6.447263, 176.218491, 6.895125) );
geometry.vertices.push( new THREE.Vector3(6.821100, 177.623199, 6.174900) );
geometry.vertices.push( new THREE.Vector3(6.455852, 177.061493, 7.247100) );
geometry.vertices.push( new THREE.Vector3(6.739950, 176.617889, 5.815125) );
geometry.vertices.push( new THREE.Vector3(6.289088, 175.371002, 6.578138) );
geometry.vertices.push( new THREE.Vector3(5.861287, 175.661606, 7.890599) );
geometry.vertices.push( new THREE.Vector3(5.889225, 176.452103, 8.148187) );
geometry.vertices.push( new THREE.Vector3(5.071987, 175.969894, 8.995762) );
geometry.vertices.push( new THREE.Vector3(5.837288, 177.079498, 8.378061) );
geometry.vertices.push( new THREE.Vector3(6.414450, 178.204498, 7.550099) );
geometry.vertices.push( new THREE.Vector3(6.766314, 178.691605, 6.486450) );
geometry.vertices.push( new THREE.Vector3(5.531625, 172.783508, 7.039200) );
geometry.vertices.push( new THREE.Vector3(5.542124, 172.288895, 7.011674) );
geometry.vertices.push( new THREE.Vector3(6.312975, 173.128906, 5.863125) );
geometry.vertices.push( new THREE.Vector3(6.197888, 174.467300, 6.181800) );
geometry.vertices.push( new THREE.Vector3(5.561437, 174.009003, 7.223549) );
geometry.vertices.push( new THREE.Vector3(5.757187, 174.925095, 7.537275) );
geometry.vertices.push( new THREE.Vector3(3.433267, 168.796097, 8.690137) );
geometry.vertices.push( new THREE.Vector3(4.046100, 169.281403, 8.042137) );
geometry.vertices.push( new THREE.Vector3(4.885238, 170.552597, 7.690275) );
geometry.vertices.push( new THREE.Vector3(5.558475, 171.520493, 6.968850) );
geometry.vertices.push( new THREE.Vector3(6.068213, 171.836304, 5.882325) );
geometry.vertices.push( new THREE.Vector3(5.474813, 170.356506, 6.258488) );
geometry.vertices.push( new THREE.Vector3(5.611462, 170.457001, 5.901638) );
geometry.vertices.push( new THREE.Vector3(4.782337, 169.780106, 7.261425) );
geometry.vertices.push( new THREE.Vector3(3.575835, 168.683197, 7.346325) );
geometry.vertices.push( new THREE.Vector3(4.274025, 169.018906, 6.429375) );
geometry.vertices.push( new THREE.Vector3(5.281650, 170.066208, 5.907188) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.938889, 6.171862) );
geometry.vertices.push( new THREE.Vector3(-0.981713, 172.441101, 6.318900) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.433609, 6.079500) );
geometry.vertices.push( new THREE.Vector3(-1.124663, 173.965897, 6.429825) );
geometry.vertices.push( new THREE.Vector3(-1.131071, 173.134903, 11.185690) );
geometry.vertices.push( new THREE.Vector3(-0.700691, 173.864990, 11.509950) );
geometry.vertices.push( new THREE.Vector3(-0.632996, 173.135193, 11.313070) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.095505, 11.377310) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.832001, 11.606210) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.756393, 11.256070) );
geometry.vertices.push( new THREE.Vector3(-2.090025, 172.898605, 10.277889) );
geometry.vertices.push( new THREE.Vector3(-2.323526, 173.543594, 10.226170) );
geometry.vertices.push( new THREE.Vector3(-1.970981, 172.937592, 10.428410) );
geometry.vertices.push( new THREE.Vector3(-1.801736, 172.992004, 10.647070) );
geometry.vertices.push( new THREE.Vector3(-2.072239, 173.693298, 10.594500) );
geometry.vertices.push( new THREE.Vector3(-1.551694, 173.070007, 10.885159) );
geometry.vertices.push( new THREE.Vector3(-1.776491, 173.901703, 10.846650) );
geometry.vertices.push( new THREE.Vector3(-1.282721, 173.906189, 11.269840) );
geometry.vertices.push( new THREE.Vector3(-0.769538, 174.803192, 11.148110) );
geometry.vertices.push( new THREE.Vector3(-2.756869, 173.398102, 9.312524) );
geometry.vertices.push( new THREE.Vector3(-2.571656, 174.530991, 9.865800) );
geometry.vertices.push( new THREE.Vector3(-2.093370, 174.852798, 10.253440) );
geometry.vertices.push( new THREE.Vector3(-1.434371, 174.842209, 10.775020) );
geometry.vertices.push( new THREE.Vector3(-1.412858, 175.012894, 8.144663) );
geometry.vertices.push( new THREE.Vector3(-0.792292, 175.041000, 8.174588) );
geometry.vertices.push( new THREE.Vector3(-1.124663, 173.965897, 6.429825) );
geometry.vertices.push( new THREE.Vector3(-3.093634, 174.902588, 8.102100) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.026398, 8.150100) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.938889, 6.171862) );
geometry.vertices.push( new THREE.Vector3(-2.115364, 173.908096, 6.756862) );
geometry.vertices.push( new THREE.Vector3(-3.265841, 173.758896, 7.953526) );
geometry.vertices.push( new THREE.Vector3(-1.926900, 172.450897, 6.912713) );
geometry.vertices.push( new THREE.Vector3(-3.187148, 172.715302, 7.932563) );
geometry.vertices.push( new THREE.Vector3(-1.101904, 171.714401, 7.303613) );
geometry.vertices.push( new THREE.Vector3(-2.741947, 171.635605, 7.955887) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.651810, 7.284863) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.676498, 8.108512) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.658905, 9.352311) );
geometry.vertices.push( new THREE.Vector3(-0.981713, 172.441101, 6.318900) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.433609, 6.079500) );
geometry.vertices.push( new THREE.Vector3(-2.872182, 172.593399, 9.070051) );
geometry.vertices.push( new THREE.Vector3(-2.297134, 171.404602, 9.406537) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.635193, 10.942240) );
geometry.vertices.push( new THREE.Vector3(-1.615665, 171.622101, 10.532630) );
geometry.vertices.push( new THREE.Vector3(-1.894582, 171.677994, 10.332860) );
geometry.vertices.push( new THREE.Vector3(-2.220926, 172.431396, 10.051650) );
geometry.vertices.push( new THREE.Vector3(-2.367030, 172.364288, 9.791775) );
geometry.vertices.push( new THREE.Vector3(-2.461503, 172.541595, 9.721573) );
geometry.vertices.push( new THREE.Vector3(-2.335095, 172.773697, 9.875250) );
geometry.vertices.push( new THREE.Vector3(-2.236609, 172.827393, 10.043440) );
geometry.vertices.push( new THREE.Vector3(-2.019458, 172.506409, 10.357719) );
geometry.vertices.push( new THREE.Vector3(-1.681639, 172.588104, 10.697551) );
geometry.vertices.push( new THREE.Vector3(-0.578299, 171.636703, 10.846160) );
geometry.vertices.push( new THREE.Vector3(-0.330267, 172.867889, 11.241711) );
geometry.vertices.push( new THREE.Vector3(-0.656134, 172.833801, 11.156330) );
geometry.vertices.push( new THREE.Vector3(-0.930795, 172.779404, 11.061640) );
geometry.vertices.push( new THREE.Vector3(-0.915548, 171.633392, 10.753870) );
geometry.vertices.push( new THREE.Vector3(-1.205460, 172.724991, 10.966909) );
geometry.vertices.push( new THREE.Vector3(-1.252792, 171.629593, 10.661631) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.861893, 11.247750) );
geometry.vertices.push( new THREE.Vector3(-5.474813, 170.356506, 6.258488) );
geometry.vertices.push( new THREE.Vector3(-4.452863, 169.122391, 5.920462) );
geometry.vertices.push( new THREE.Vector3(-4.274025, 169.018906, 6.429375) );
geometry.vertices.push( new THREE.Vector3(-5.282325, 170.067001, 5.907188) );
geometry.vertices.push( new THREE.Vector3(-1.828699, 175.796600, 11.293950) );
geometry.vertices.push( new THREE.Vector3(-1.764064, 175.645493, 11.733110) );
geometry.vertices.push( new THREE.Vector3(-1.836349, 175.987106, 11.497010) );
geometry.vertices.push( new THREE.Vector3(-1.840271, 175.595200, 11.412789) );
geometry.vertices.push( new THREE.Vector3(-1.679824, 175.724609, 11.031940) );
geometry.vertices.push( new THREE.Vector3(-1.703250, 175.517593, 11.223380) );
geometry.vertices.push( new THREE.Vector3(-1.758611, 176.003601, 11.118300) );
geometry.vertices.push( new THREE.Vector3(-1.734420, 176.223404, 11.258360) );
geometry.vertices.push( new THREE.Vector3(-1.785769, 176.138306, 11.728540) );
geometry.vertices.push( new THREE.Vector3(-1.681354, 175.781998, 11.944051) );
geometry.vertices.push( new THREE.Vector3(-1.483804, 175.518402, 12.142950) );
geometry.vertices.push( new THREE.Vector3(-1.570339, 175.387894, 11.862000) );
geometry.vertices.push( new THREE.Vector3(-1.653911, 176.396301, 11.525920) );
geometry.vertices.push( new THREE.Vector3(-1.613272, 175.345093, 11.483439) );
geometry.vertices.push( new THREE.Vector3(-1.447470, 175.369507, 11.071730) );
geometry.vertices.push( new THREE.Vector3(-1.556951, 175.727997, 10.836790) );
geometry.vertices.push( new THREE.Vector3(-1.564508, 176.167908, 10.998560) );
geometry.vertices.push( new THREE.Vector3(-1.487629, 176.472702, 11.273849) );
geometry.vertices.push( new THREE.Vector3(-0.877969, 177.102402, 12.260740) );
geometry.vertices.push( new THREE.Vector3(-1.110607, 177.291000, 11.637980) );
geometry.vertices.push( new THREE.Vector3(-1.213301, 176.877792, 11.766300) );
geometry.vertices.push( new THREE.Vector3(-1.460377, 177.154510, 11.245540) );
geometry.vertices.push( new THREE.Vector3(-1.623503, 176.186600, 10.928850) );
geometry.vertices.push( new THREE.Vector3(-2.397150, 175.845398, 10.951910) );
geometry.vertices.push( new THREE.Vector3(-2.178281, 175.403595, 10.845680) );
geometry.vertices.push( new THREE.Vector3(-2.698541, 175.010300, 10.804760) );
geometry.vertices.push( new THREE.Vector3(-2.613439, 174.557999, 10.997810) );
geometry.vertices.push( new THREE.Vector3(-2.005211, 174.836594, 11.211411) );
geometry.vertices.push( new THREE.Vector3(-0.910001, 176.773911, 12.510679) );
geometry.vertices.push( new THREE.Vector3(-1.418782, 174.748093, 11.596010) );
geometry.vertices.push( new THREE.Vector3(-1.926326, 174.211502, 11.493000) );
geometry.vertices.push( new THREE.Vector3(-2.408527, 174.050598, 11.233610) );
geometry.vertices.push( new THREE.Vector3(-3.116295, 174.102707, 10.762950) );
geometry.vertices.push( new THREE.Vector3(-3.303041, 174.569595, 10.562170) );
geometry.vertices.push( new THREE.Vector3(-3.277414, 173.589401, 10.700330) );
geometry.vertices.push( new THREE.Vector3(-2.839961, 173.657303, 10.987690) );
geometry.vertices.push( new THREE.Vector3(-2.271986, 173.547394, 11.340110) );
geometry.vertices.push( new THREE.Vector3(-1.869244, 173.733795, 11.622860) );
geometry.vertices.push( new THREE.Vector3(-3.010545, 173.227890, 10.840731) );
geometry.vertices.push( new THREE.Vector3(-2.559225, 173.213196, 11.062719) );
geometry.vertices.push( new THREE.Vector3(-2.093373, 173.108994, 11.309319) );
geometry.vertices.push( new THREE.Vector3(-1.813117, 173.279602, 11.665310) );
geometry.vertices.push( new THREE.Vector3(-1.427678, 173.473099, 11.994710) );
geometry.vertices.push( new THREE.Vector3(-1.380634, 173.193008, 11.956280) );
geometry.vertices.push( new THREE.Vector3(-1.064329, 173.558990, 12.262270) );
geometry.vertices.push( new THREE.Vector3(-0.978274, 173.246597, 12.226430) );
geometry.vertices.push( new THREE.Vector3(-3.247103, 173.064697, 10.657880) );
geometry.vertices.push( new THREE.Vector3(-2.970476, 172.871597, 10.731899) );
geometry.vertices.push( new THREE.Vector3(-2.698444, 172.948502, 10.866150) );
geometry.vertices.push( new THREE.Vector3(-2.360433, 172.898193, 10.996350) );
geometry.vertices.push( new THREE.Vector3(-2.034758, 172.984894, 11.255400) );
geometry.vertices.push( new THREE.Vector3(-2.283750, 172.817307, 10.943590) );
geometry.vertices.push( new THREE.Vector3(-2.493345, 172.749695, 10.774910) );
geometry.vertices.push( new THREE.Vector3(-2.730956, 172.771896, 10.720241) );
geometry.vertices.push( new THREE.Vector3(-2.924966, 172.674408, 10.689450) );
geometry.vertices.push( new THREE.Vector3(-3.194415, 172.745590, 10.639350) );
geometry.vertices.push( new THREE.Vector3(-2.881552, 172.487198, 10.640480) );
geometry.vertices.push( new THREE.Vector3(-2.739847, 172.633896, 10.657580) );
geometry.vertices.push( new THREE.Vector3(-2.542684, 172.691208, 10.653110) );
geometry.vertices.push( new THREE.Vector3(-2.446110, 172.662003, 10.589620) );
geometry.vertices.push( new THREE.Vector3(-2.405186, 172.714493, 10.717840) );
geometry.vertices.push( new THREE.Vector3(-2.273711, 172.681107, 10.612949) );
geometry.vertices.push( new THREE.Vector3(-2.592881, 172.624100, 10.513390) );
geometry.vertices.push( new THREE.Vector3(-2.259750, 172.655197, 10.299900) );
geometry.vertices.push( new THREE.Vector3(-2.166810, 172.701401, 10.489310) );
geometry.vertices.push( new THREE.Vector3(-2.324865, 172.648895, 10.468161) );
geometry.vertices.push( new THREE.Vector3(-2.508356, 172.621902, 10.442440) );
geometry.vertices.push( new THREE.Vector3(-2.580739, 172.579498, 10.528419) );
geometry.vertices.push( new THREE.Vector3(-2.695766, 172.515411, 10.606911) );
geometry.vertices.push( new THREE.Vector3(-2.697105, 172.210098, 10.774611) );
geometry.vertices.push( new THREE.Vector3(-2.397154, 172.619995, 10.299490) );
geometry.vertices.push( new THREE.Vector3(-2.503905, 172.610291, 10.317980) );
geometry.vertices.push( new THREE.Vector3(-2.358619, 172.637207, 10.706850) );
geometry.vertices.push( new THREE.Vector3(-2.446969, 172.543503, 10.829700) );
geometry.vertices.push( new THREE.Vector3(-2.502139, 172.465103, 10.886700) );
geometry.vertices.push( new THREE.Vector3(-2.561711, 172.345490, 10.876460) );
geometry.vertices.push( new THREE.Vector3(-2.412259, 171.877899, 11.036060) );
geometry.vertices.push( new THREE.Vector3(-2.226184, 172.133301, 11.177470) );
geometry.vertices.push( new THREE.Vector3(-2.126933, 172.357101, 11.225480) );
geometry.vertices.push( new THREE.Vector3(-2.097866, 172.516098, 11.206420) );
geometry.vertices.push( new THREE.Vector3(-2.037818, 172.720505, 11.158390) );
geometry.vertices.push( new THREE.Vector3(-1.901081, 172.816101, 10.948460) );
geometry.vertices.push( new THREE.Vector3(-1.428577, 172.946594, 11.335240) );
geometry.vertices.push( new THREE.Vector3(-1.205460, 172.724991, 10.966909) );
geometry.vertices.push( new THREE.Vector3(-0.930795, 172.779404, 11.061640) );
geometry.vertices.push( new THREE.Vector3(-1.681639, 172.588104, 10.697551) );
geometry.vertices.push( new THREE.Vector3(-1.085198, 172.996902, 11.470730) );
geometry.vertices.push( new THREE.Vector3(-0.656134, 172.833801, 11.156330) );
geometry.vertices.push( new THREE.Vector3(-1.563574, 172.808594, 11.552999) );
geometry.vertices.push( new THREE.Vector3(-1.719506, 172.182007, 11.558810) );
geometry.vertices.push( new THREE.Vector3(-1.649944, 172.447510, 11.692090) );
geometry.vertices.push( new THREE.Vector3(-1.170131, 172.876892, 11.773840) );
geometry.vertices.push( new THREE.Vector3(-0.774893, 173.017502, 11.606210) );
geometry.vertices.push( new THREE.Vector3(-0.330267, 172.867889, 11.241711) );
geometry.vertices.push( new THREE.Vector3(-0.389644, 173.001694, 11.724220) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.967606, 11.729170) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.861893, 11.247750) );
geometry.vertices.push( new THREE.Vector3(-0.428467, 172.830399, 12.024560) );
geometry.vertices.push( new THREE.Vector3(-0.940024, 172.340302, 12.059440) );
geometry.vertices.push( new THREE.Vector3(-0.472260, 172.302002, 12.161100) );
geometry.vertices.push( new THREE.Vector3(-0.852630, 172.868301, 11.916490) );
geometry.vertices.push( new THREE.Vector3(-1.262974, 172.386002, 11.910490) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.787201, 12.011169) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.264099, 12.137850) );
geometry.vertices.push( new THREE.Vector3(-0.483446, 171.973099, 11.966590) );
geometry.vertices.push( new THREE.Vector3(-0.962111, 172.001602, 11.845950) );
geometry.vertices.push( new THREE.Vector3(-1.296825, 172.072906, 11.738359) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.726807, 11.787790) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.945007, 11.959240) );
geometry.vertices.push( new THREE.Vector3(-0.993953, 171.753387, 11.681100) );
geometry.vertices.push( new THREE.Vector3(-0.500944, 171.740204, 11.798329) );
geometry.vertices.push( new THREE.Vector3(-1.360504, 171.814896, 11.589680) );
geometry.vertices.push( new THREE.Vector3(-1.518229, 171.479996, 11.397560) );
geometry.vertices.push( new THREE.Vector3(-1.121411, 171.402802, 11.473500) );
geometry.vertices.push( new THREE.Vector3(-1.788922, 171.077591, 11.184260) );
geometry.vertices.push( new THREE.Vector3(-1.341907, 170.998505, 11.348249) );
geometry.vertices.push( new THREE.Vector3(-0.688740, 170.997696, 11.466830) );
geometry.vertices.push( new THREE.Vector3(-0.571129, 171.397491, 11.560800) );
geometry.vertices.push( new THREE.Vector3(-1.516410, 170.603592, 11.358749) );
geometry.vertices.push( new THREE.Vector3(-0.780056, 170.595001, 11.479050) );
geometry.vertices.push( new THREE.Vector3(0.000000, 170.582199, 11.478860) );
geometry.vertices.push( new THREE.Vector3(0.000000, 170.994400, 11.467760) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.392593, 11.528661) );
geometry.vertices.push( new THREE.Vector3(0.000000, 169.922989, 11.698800) );
geometry.vertices.push( new THREE.Vector3(-0.842779, 168.683197, 11.435061) );
geometry.vertices.push( new THREE.Vector3(0.000000, 169.379608, 11.721149) );
geometry.vertices.push( new THREE.Vector3(-0.874620, 169.406204, 11.731580) );
geometry.vertices.push( new THREE.Vector3(-0.865061, 169.940994, 11.685600) );
geometry.vertices.push( new THREE.Vector3(-1.682310, 169.954102, 11.543510) );
geometry.vertices.push( new THREE.Vector3(-2.065260, 170.667404, 11.154040) );
geometry.vertices.push( new THREE.Vector3(-2.548035, 170.729309, 10.706170) );
geometry.vertices.push( new THREE.Vector3(-2.315494, 170.079391, 11.246140) );
geometry.vertices.push( new THREE.Vector3(-1.640906, 168.748505, 11.270510) );
geometry.vertices.push( new THREE.Vector3(-2.343030, 169.572403, 11.227390) );
geometry.vertices.push( new THREE.Vector3(-2.286330, 168.846802, 10.977070) );
geometry.vertices.push( new THREE.Vector3(-2.887672, 169.758698, 10.602900) );
geometry.vertices.push( new THREE.Vector3(-1.700092, 169.474487, 11.556710) );
geometry.vertices.push( new THREE.Vector3(-2.842826, 170.228302, 10.688661) );
geometry.vertices.push( new THREE.Vector3(-3.389093, 170.022003, 9.982724) );
geometry.vertices.push( new THREE.Vector3(-2.836133, 169.000900, 10.382139) );
geometry.vertices.push( new THREE.Vector3(-2.151030, 168.170593, 10.626900) );
geometry.vertices.push( new THREE.Vector3(-1.497862, 168.087402, 10.845300) );
geometry.vertices.push( new THREE.Vector3(-0.769249, 168.071304, 10.993310) );
geometry.vertices.push( new THREE.Vector3(-1.201826, 167.838394, 10.007480) );
geometry.vertices.push( new THREE.Vector3(-0.615686, 167.791107, 10.183721) );
geometry.vertices.push( new THREE.Vector3(-1.805846, 167.937805, 9.790613) );
geometry.vertices.push( new THREE.Vector3(-1.423181, 168.024002, 8.809312) );
geometry.vertices.push( new THREE.Vector3(-1.043291, 168.031097, 8.859225) );
geometry.vertices.push( new THREE.Vector3(-0.528769, 168.030411, 8.944200) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.785095, 10.237840) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.095596, 11.019410) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.676498, 11.459620) );
geometry.vertices.push( new THREE.Vector3(0.000000, 168.029297, 8.954062) );
geometry.vertices.push( new THREE.Vector3(-3.433271, 168.796097, 8.690137) );
geometry.vertices.push( new THREE.Vector3(-3.363851, 169.264908, 9.747487) );
geometry.vertices.push( new THREE.Vector3(-3.708840, 169.566406, 9.090037) );
geometry.vertices.push( new THREE.Vector3(-3.209524, 168.676498, 9.488100) );
geometry.vertices.push( new THREE.Vector3(-2.686684, 168.373093, 10.128340) );
geometry.vertices.push( new THREE.Vector3(-2.683144, 168.142105, 9.012675) );
geometry.vertices.push( new THREE.Vector3(-2.325626, 168.049896, 9.424125) );
geometry.vertices.push( new THREE.Vector3(-1.804125, 168.016510, 8.704988) );
geometry.vertices.push( new THREE.Vector3(-2.788421, 168.261398, 8.227763) );
geometry.vertices.push( new THREE.Vector3(-2.167091, 168.098999, 8.505712) );
geometry.vertices.push( new THREE.Vector3(-4.401675, 170.780594, 8.564887) );
geometry.vertices.push( new THREE.Vector3(-4.253662, 170.026901, 8.306325) );
geometry.vertices.push( new THREE.Vector3(-3.853500, 170.381195, 9.332813) );
geometry.vertices.push( new THREE.Vector3(-3.300457, 170.569092, 10.140410) );
geometry.vertices.push( new THREE.Vector3(-2.987021, 171.149307, 10.511400) );
geometry.vertices.push( new THREE.Vector3(-1.797120, 171.912399, 11.453250) );
geometry.vertices.push( new THREE.Vector3(-1.915331, 171.557602, 11.310750) );
geometry.vertices.push( new THREE.Vector3(-2.241773, 171.157104, 11.016830) );
geometry.vertices.push( new THREE.Vector3(-2.670330, 171.548996, 10.779040) );
geometry.vertices.push( new THREE.Vector3(-3.076901, 172.477097, 10.597350) );
geometry.vertices.push( new THREE.Vector3(-2.902972, 172.026001, 10.585200) );
geometry.vertices.push( new THREE.Vector3(-3.365955, 171.784103, 10.344939) );
geometry.vertices.push( new THREE.Vector3(-3.522386, 172.318497, 10.328770) );
geometry.vertices.push( new THREE.Vector3(-3.570101, 172.813904, 10.341110) );
geometry.vertices.push( new THREE.Vector3(-3.619057, 173.312302, 10.334320) );
geometry.vertices.push( new THREE.Vector3(-3.948262, 174.463898, 10.147460) );
geometry.vertices.push( new THREE.Vector3(-3.509003, 174.038605, 10.410040) );
geometry.vertices.push( new THREE.Vector3(-3.973725, 173.597595, 9.995550) );
geometry.vertices.push( new THREE.Vector3(-3.593625, 175.079590, 10.465119) );
geometry.vertices.push( new THREE.Vector3(-4.398938, 174.907104, 9.603675) );
geometry.vertices.push( new THREE.Vector3(-4.938300, 174.441391, 8.526374) );
geometry.vertices.push( new THREE.Vector3(-4.468425, 173.989105, 9.422325) );
geometry.vertices.push( new THREE.Vector3(-3.013605, 175.461700, 10.800450) );
geometry.vertices.push( new THREE.Vector3(-4.134338, 175.655991, 9.947926) );
geometry.vertices.push( new THREE.Vector3(-5.142637, 175.297897, 8.738924) );
geometry.vertices.push( new THREE.Vector3(-5.757187, 174.925095, 7.537275) );
geometry.vertices.push( new THREE.Vector3(-5.561437, 174.009003, 7.223549) );
geometry.vertices.push( new THREE.Vector3(-6.197888, 174.467300, 6.181800) );
geometry.vertices.push( new THREE.Vector3(-5.531625, 172.783508, 7.039200) );
geometry.vertices.push( new THREE.Vector3(-6.289088, 175.371002, 6.578138) );
geometry.vertices.push( new THREE.Vector3(-5.861287, 175.661606, 7.890599) );
geometry.vertices.push( new THREE.Vector3(-5.071987, 175.969894, 8.995762) );
geometry.vertices.push( new THREE.Vector3(-6.447263, 176.218491, 6.895125) );
geometry.vertices.push( new THREE.Vector3(-3.342431, 175.946609, 10.664101) );
geometry.vertices.push( new THREE.Vector3(-4.226888, 176.378998, 9.845512) );
geometry.vertices.push( new THREE.Vector3(-5.045963, 176.595001, 9.205912) );
geometry.vertices.push( new THREE.Vector3(-5.889225, 176.452103, 8.148187) );
geometry.vertices.push( new THREE.Vector3(-6.455852, 177.061493, 7.247100) );
geometry.vertices.push( new THREE.Vector3(-6.821137, 177.623199, 6.174900) );
geometry.vertices.push( new THREE.Vector3(-6.739950, 176.617508, 5.815087) );
geometry.vertices.push( new THREE.Vector3(-5.837288, 177.079498, 8.378061) );
geometry.vertices.push( new THREE.Vector3(-6.414450, 178.204498, 7.550099) );
geometry.vertices.push( new THREE.Vector3(-6.766314, 178.691605, 6.486450) );
geometry.vertices.push( new THREE.Vector3(-0.923865, 175.638397, 12.902141) );
geometry.vertices.push( new THREE.Vector3(-0.512801, 175.440002, 12.999110) );
geometry.vertices.push( new THREE.Vector3(-0.530396, 175.572800, 13.378310) );
geometry.vertices.push( new THREE.Vector3(-0.841249, 175.561096, 12.812060) );
geometry.vertices.push( new THREE.Vector3(-0.658140, 175.931595, 13.519160) );
geometry.vertices.push( new THREE.Vector3(-0.976264, 175.943298, 12.941440) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.991592, 13.751030) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.520294, 13.617000) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.331604, 13.117200) );
geometry.vertices.push( new THREE.Vector3(0.000000, 176.524490, 13.576651) );
geometry.vertices.push( new THREE.Vector3(-0.789806, 175.763199, 12.512700) );
geometry.vertices.push( new THREE.Vector3(-0.497408, 175.640594, 12.722211) );
geometry.vertices.push( new THREE.Vector3(-1.118160, 175.531906, 12.433310) );
geometry.vertices.push( new THREE.Vector3(-1.267706, 175.637192, 12.490420) );
geometry.vertices.push( new THREE.Vector3(-1.362371, 175.981110, 12.441940) );
geometry.vertices.push( new THREE.Vector3(-1.346209, 176.346008, 12.266660) );
geometry.vertices.push( new THREE.Vector3(-0.942128, 176.412003, 12.730800) );
geometry.vertices.push( new THREE.Vector3(-1.260060, 176.551102, 11.996551) );
geometry.vertices.push( new THREE.Vector3(-1.319820, 175.460999, 12.126000) );
geometry.vertices.push( new THREE.Vector3(-1.397557, 175.382202, 11.793530) );
geometry.vertices.push( new THREE.Vector3(-1.162241, 175.602798, 12.037459) );
geometry.vertices.push( new THREE.Vector3(-0.750319, 175.813904, 11.929050) );
geometry.vertices.push( new THREE.Vector3(-1.030095, 175.724197, 12.274500) );
geometry.vertices.push( new THREE.Vector3(-1.200487, 175.636902, 11.713050) );
geometry.vertices.push( new THREE.Vector3(-1.305859, 175.287003, 11.536990) );
geometry.vertices.push( new THREE.Vector3(-1.036886, 175.653809, 11.511260) );
geometry.vertices.push( new THREE.Vector3(-1.181557, 175.252502, 11.554870) );
geometry.vertices.push( new THREE.Vector3(-0.677554, 175.568207, 11.606140) );
geometry.vertices.push( new THREE.Vector3(-0.817155, 175.226608, 11.688940) );
geometry.vertices.push( new THREE.Vector3(-1.256996, 175.195801, 11.338310) );
geometry.vertices.push( new THREE.Vector3(-0.855210, 174.980194, 11.723850) );
geometry.vertices.push( new THREE.Vector3(-0.956471, 174.690704, 11.853411) );
geometry.vertices.push( new THREE.Vector3(-0.357135, 174.935303, 12.094160) );
geometry.vertices.push( new THREE.Vector3(-0.398209, 174.669006, 12.094840) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.143295, 12.274010) );
geometry.vertices.push( new THREE.Vector3(-0.359335, 175.345093, 12.668550) );
geometry.vertices.push( new THREE.Vector3(-0.302729, 175.164398, 12.235880) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.833298, 12.063560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.595901, 12.033751) );
geometry.vertices.push( new THREE.Vector3(-0.426443, 174.336807, 12.167400) );
geometry.vertices.push( new THREE.Vector3(-0.990799, 174.325104, 11.965720) );
geometry.vertices.push( new THREE.Vector3(-1.454164, 174.296600, 11.756890) );
geometry.vertices.push( new THREE.Vector3(0.000000, 174.293304, 12.012560) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.867203, 12.167891) );
geometry.vertices.push( new THREE.Vector3(-0.441593, 173.896896, 12.322310) );
geometry.vertices.push( new THREE.Vector3(-0.984870, 173.876999, 12.125700) );
geometry.vertices.push( new THREE.Vector3(-1.435710, 173.816605, 11.917160) );
geometry.vertices.push( new THREE.Vector3(-0.463080, 173.509903, 12.489640) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.413498, 12.471300) );
geometry.vertices.push( new THREE.Vector3(-0.535084, 173.190002, 12.297150) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.090988, 12.303860) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.869400, 11.965461) );
geometry.vertices.push( new THREE.Vector3(-0.484118, 172.919601, 11.939660) );
geometry.vertices.push( new THREE.Vector3(-0.480195, 172.903091, 11.624660) );
geometry.vertices.push( new THREE.Vector3(-0.871954, 172.940598, 11.846630) );
geometry.vertices.push( new THREE.Vector3(-0.850834, 172.912506, 11.587500) );
geometry.vertices.push( new THREE.Vector3(-1.230229, 172.947006, 11.640070) );
geometry.vertices.push( new THREE.Vector3(-1.164349, 172.938004, 11.411360) );
geometry.vertices.push( new THREE.Vector3(-1.551694, 173.070007, 10.885159) );
geometry.vertices.push( new THREE.Vector3(-1.131071, 173.134903, 11.185690) );
geometry.vertices.push( new THREE.Vector3(-0.632996, 173.135193, 11.313070) );
geometry.vertices.push( new THREE.Vector3(0.000000, 173.095505, 11.377310) );
geometry.vertices.push( new THREE.Vector3(0.000000, 172.878799, 11.689130) );
geometry.vertices.push( new THREE.Vector3(-1.560877, 172.885498, 11.126030) );
geometry.vertices.push( new THREE.Vector3(-1.858631, 172.809006, 10.888870) );
geometry.vertices.push( new THREE.Vector3(-1.801736, 172.992004, 10.647070) );
geometry.vertices.push( new THREE.Vector3(-1.970981, 172.937592, 10.428410) );
geometry.vertices.push( new THREE.Vector3(-2.077882, 172.733612, 10.671070) );
geometry.vertices.push( new THREE.Vector3(-2.090025, 172.898605, 10.277889) );
geometry.vertices.push( new THREE.Vector3(-2.167957, 172.738098, 10.811810) );
geometry.vertices.push( new THREE.Vector3(-2.335095, 172.773697, 9.875250) );
geometry.vertices.push( new THREE.Vector3(-2.236609, 172.827393, 10.043440) );
geometry.vertices.push( new THREE.Vector3(-2.205724, 172.685593, 10.532701) );
geometry.vertices.push( new THREE.Vector3(-2.019458, 172.506409, 10.357719) );
geometry.vertices.push( new THREE.Vector3(-2.220926, 172.431396, 10.051650) );
geometry.vertices.push( new THREE.Vector3(-2.381374, 172.577209, 10.098110) );
geometry.vertices.push( new THREE.Vector3(-2.461503, 172.541595, 9.721573) );
geometry.vertices.push( new THREE.Vector3(-2.362155, 172.610992, 10.098599) );
geometry.vertices.push( new THREE.Vector3(-2.367030, 172.364288, 9.791775) );
geometry.vertices.push( new THREE.Vector3(-1.730790, 173.093201, 11.589970) );
geometry.vertices.push( new THREE.Vector3(-1.915526, 172.835602, 11.094370) );
geometry.vertices.push( new THREE.Vector3(-1.614806, 172.925598, 11.348440) );
geometry.vertices.push( new THREE.Vector3(-4.463363, 173.250397, 9.309376) );
geometry.vertices.push( new THREE.Vector3(-4.886400, 173.513199, 8.425950) );
geometry.vertices.push( new THREE.Vector3(-3.986250, 172.884003, 9.989025) );
geometry.vertices.push( new THREE.Vector3(-4.449600, 172.427994, 9.201600) );
geometry.vertices.push( new THREE.Vector3(-4.914863, 172.589188, 8.269238) );
geometry.vertices.push( new THREE.Vector3(-4.403812, 171.613892, 8.928338) );
geometry.vertices.push( new THREE.Vector3(-4.926750, 171.916901, 8.137762) );
geometry.vertices.push( new THREE.Vector3(-3.864712, 171.272202, 9.679424) );
geometry.vertices.push( new THREE.Vector3(-3.949500, 172.271591, 9.911288) );
geometry.vertices.push( new THREE.Vector3(-3.570101, 172.813904, 10.341110) );
geometry.vertices.push( new THREE.Vector3(-3.619057, 173.312302, 10.334320) );
geometry.vertices.push( new THREE.Vector3(-3.522386, 172.318497, 10.328770) );
geometry.vertices.push( new THREE.Vector3(-3.365955, 171.784103, 10.344939) );
geometry.vertices.push( new THREE.Vector3(-3.300457, 170.569092, 10.140410) );
geometry.vertices.push( new THREE.Vector3(-3.853500, 170.381195, 9.332813) );
geometry.vertices.push( new THREE.Vector3(-4.401675, 170.780594, 8.564887) );
geometry.vertices.push( new THREE.Vector3(-2.987021, 171.149307, 10.511400) );
geometry.vertices.push( new THREE.Vector3(-6.352875, 174.561005, 5.844000) );
geometry.vertices.push( new THREE.Vector3(-6.312412, 173.130005, 5.864137) );
geometry.vertices.push( new THREE.Vector3(-6.533025, 175.647003, 5.828775) );
geometry.vertices.push( new THREE.Vector3(-6.739950, 176.617508, 5.815087) );
geometry.vertices.push( new THREE.Vector3(-5.542124, 172.288895, 7.011674) );
geometry.vertices.push( new THREE.Vector3(-6.068213, 171.836304, 5.882325) );
geometry.vertices.push( new THREE.Vector3(-5.558475, 171.520096, 6.968850) );
geometry.vertices.push( new THREE.Vector3(-5.383012, 170.457001, 5.901638) );
geometry.vertices.push( new THREE.Vector3(-4.885238, 170.552597, 7.690275) );
geometry.vertices.push( new THREE.Vector3(-4.934587, 171.156708, 7.954650) );
geometry.vertices.push( new THREE.Vector3(-4.403812, 171.613892, 8.928338) );
geometry.vertices.push( new THREE.Vector3(-4.926750, 171.916901, 8.137762) );
geometry.vertices.push( new THREE.Vector3(-4.914863, 172.589188, 8.269238) );
geometry.vertices.push( new THREE.Vector3(-3.575835, 168.683197, 7.346325) );
geometry.vertices.push( new THREE.Vector3(-4.046100, 169.281403, 8.042137) );
geometry.vertices.push( new THREE.Vector3(-4.782337, 169.780106, 7.261425) );
geometry.vertices.push( new THREE.Vector3(-3.436234, 176.456299, 10.432690) );
geometry.vertices.push( new THREE.Vector3(-2.535608, 176.382401, 10.854750) );
geometry.vertices.push( new THREE.Vector3(-2.648629, 176.926102, 10.625469) );
geometry.vertices.push( new THREE.Vector3(-1.911124, 177.397095, 10.747760) );
geometry.vertices.push( new THREE.Vector3(-1.886835, 176.760010, 11.009851) );
geometry.vertices.push( new THREE.Vector3(-1.724475, 177.545593, 10.805140) );
geometry.vertices.push( new THREE.Vector3(-0.348555, 172.807495, 11.278049) );
geometry.vertices.push( new THREE.Vector3(-0.563640, 172.808304, 11.112680) );
geometry.vertices.push( new THREE.Vector3(-0.362575, 172.788406, 11.187940) );
geometry.vertices.push( new THREE.Vector3(-0.957941, 172.943298, 11.105920) );
geometry.vertices.push( new THREE.Vector3(-0.821707, 172.850998, 11.107240) );
geometry.vertices.push( new THREE.Vector3(-0.703350, 172.923401, 11.174290) );
geometry.vertices.push( new THREE.Vector3(-0.673492, 172.883606, 11.090961) );
geometry.vertices.push( new THREE.Vector3(-0.398655, 172.947006, 11.066780) );
geometry.vertices.push( new THREE.Vector3(-0.070575, 172.802200, 11.246330) );
geometry.vertices.push( new THREE.Vector3(-0.087070, 172.828094, 11.293870) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.883194, 11.188730) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.865204, 11.240399) );
geometry.vertices.push( new THREE.Vector3(0.000032, 172.852905, 11.275311) );
geometry.vertices.push( new THREE.Vector3(0.000032, 173.213608, 11.401050) );
geometry.vertices.push( new THREE.Vector3(-0.783225, 172.991302, 10.961250) );
geometry.vertices.push( new THREE.Vector3(-0.793950, 172.840088, 11.055901) );
geometry.vertices.push( new THREE.Vector3(-0.914948, 172.817307, 11.005270) );
geometry.vertices.push( new THREE.Vector3(1.464930, 172.985992, 10.771279) );
geometry.vertices.push( new THREE.Vector3(1.454002, 172.930893, 10.748440) );
geometry.vertices.push( new THREE.Vector3(1.292419, 172.871307, 10.774950) );
geometry.vertices.push( new THREE.Vector3(1.411403, 172.897507, 10.692639) );
geometry.vertices.push( new THREE.Vector3(4.459913, 179.705292, 9.592875) );
geometry.vertices.push( new THREE.Vector3(4.618350, 179.315598, 9.298275) );
geometry.vertices.push( new THREE.Vector3(4.429613, 179.522598, 9.720824) );
geometry.vertices.push( new THREE.Vector3(4.024575, 179.968903, 9.964275) );
geometry.vertices.push( new THREE.Vector3(4.043512, 179.742004, 10.127100) );
geometry.vertices.push( new THREE.Vector3(3.534622, 179.960297, 10.392449) );
geometry.vertices.push( new THREE.Vector3(3.503929, 180.180801, 10.221681) );
geometry.vertices.push( new THREE.Vector3(3.092006, 179.995895, 10.497640) );
geometry.vertices.push( new THREE.Vector3(3.065902, 180.240005, 10.330570) );
geometry.vertices.push( new THREE.Vector3(2.479095, 180.088501, 10.240689) );
geometry.vertices.push( new THREE.Vector3(2.432719, 179.988403, 10.346850) );
geometry.vertices.push( new THREE.Vector3(1.846961, 179.770096, 9.841387) );
geometry.vertices.push( new THREE.Vector3(4.075650, 179.306992, 9.481012) );
geometry.vertices.push( new THREE.Vector3(2.835750, 179.182510, 8.874900) );
geometry.vertices.push( new THREE.Vector3(4.101075, 179.262802, 9.294863) );
geometry.vertices.push( new THREE.Vector3(3.788288, 179.557098, 9.891712) );
geometry.vertices.push( new THREE.Vector3(3.398944, 179.688400, 10.143560) );
geometry.vertices.push( new THREE.Vector3(3.057296, 179.691696, 10.139060) );
geometry.vertices.push( new THREE.Vector3(2.541724, 179.612991, 10.056940) );
geometry.vertices.push( new THREE.Vector3(2.130851, 179.434891, 9.728287) );
geometry.vertices.push( new THREE.Vector3(1.841415, 179.225189, 9.704288) );
geometry.vertices.push( new THREE.Vector3(1.830896, 179.115402, 9.752475) );
geometry.vertices.push( new THREE.Vector3(1.657639, 179.124405, 9.807825) );
geometry.vertices.push( new THREE.Vector3(2.036190, 179.112000, 9.892349) );
geometry.vertices.push( new THREE.Vector3(2.411779, 179.004395, 9.998402) );
geometry.vertices.push( new THREE.Vector3(2.801325, 178.955597, 10.125680) );
geometry.vertices.push( new THREE.Vector3(3.207034, 178.926392, 10.091929) );
geometry.vertices.push( new THREE.Vector3(3.535961, 178.972107, 9.910050) );
geometry.vertices.push( new THREE.Vector3(3.774450, 179.004700, 9.596325) );
geometry.vertices.push( new THREE.Vector3(3.993225, 179.093201, 9.230213) );
geometry.vertices.push( new THREE.Vector3(4.125525, 179.214401, 9.105037) );
geometry.vertices.push( new THREE.Vector3(-4.787588, 170.287506, -9.428776) );
geometry.vertices.push( new THREE.Vector3(2.413691, 167.832001, 10.005750) );
geometry.vertices.push( new THREE.Vector3(1.063849, 167.503098, 9.289762) );
geometry.vertices.push( new THREE.Vector3(2.245594, 167.689499, 9.206775) );
geometry.vertices.push( new THREE.Vector3(1.113379, 167.588989, 10.140110) );
geometry.vertices.push( new THREE.Vector3(3.148230, 168.200302, 9.199013) );
geometry.vertices.push( new THREE.Vector3(2.214491, 168.154495, 9.932888) );
geometry.vertices.push( new THREE.Vector3(1.110795, 167.861603, 10.122040) );
geometry.vertices.push( new THREE.Vector3(0.910762, 167.938095, 9.172350) );
geometry.vertices.push( new THREE.Vector3(0.893265, 167.642609, 7.135876) );
geometry.vertices.push( new THREE.Vector3(2.064683, 167.873306, 6.889837) );
geometry.vertices.push( new THREE.Vector3(3.300934, 168.060394, 8.100451) );
geometry.vertices.push( new THREE.Vector3(3.026509, 168.207001, 6.434888) );
geometry.vertices.push( new THREE.Vector3(4.044187, 168.630402, 5.834400) );
geometry.vertices.push( new THREE.Vector3(4.491675, 168.798691, 6.397013) );
geometry.vertices.push( new THREE.Vector3(3.820312, 168.425598, 8.381100) );
geometry.vertices.push( new THREE.Vector3(3.449929, 168.840393, 8.219513) );
geometry.vertices.push( new THREE.Vector3(2.948771, 168.503601, 9.164550) );
geometry.vertices.push( new THREE.Vector3(1.999279, 168.036697, 9.251625) );
geometry.vertices.push( new THREE.Vector3(3.026411, 168.284195, 9.012000) );
geometry.vertices.push( new THREE.Vector3(4.390687, 169.466599, 6.754762) );
geometry.vertices.push( new THREE.Vector3(4.944300, 169.175995, 6.742350) );
geometry.vertices.push( new THREE.Vector3(5.113200, 169.317398, 6.631538) );
geometry.vertices.push( new THREE.Vector3(4.639725, 169.551804, 6.607800) );
geometry.vertices.push( new THREE.Vector3(3.781988, 191.450592, -0.873311) );
geometry.vertices.push( new THREE.Vector3(-5.258512, 188.404099, 4.878225) );
geometry.vertices.push( new THREE.Vector3(-5.730113, 189.485596, 1.380791) );
geometry.vertices.push( new THREE.Vector3(2.131508, 178.677002, 10.802060) );
geometry.vertices.push( new THREE.Vector3(2.079987, 178.419006, 11.120960) );
geometry.vertices.push( new THREE.Vector3(2.252096, 177.730499, 11.497010) );
geometry.vertices.push( new THREE.Vector3(2.833072, 177.716309, 11.366590) );
geometry.vertices.push( new THREE.Vector3(3.330382, 177.770599, 11.240960) );
geometry.vertices.push( new THREE.Vector3(1.983315, 178.068695, 11.415560) );
geometry.vertices.push( new THREE.Vector3(0.913920, 179.597992, 11.734240) );
geometry.vertices.push( new THREE.Vector3(0.465277, 179.532394, 12.116100) );
geometry.vertices.push( new THREE.Vector3(0.686347, 179.886703, 12.013460) );
geometry.vertices.push( new THREE.Vector3(0.564244, 180.092300, 12.247800) );
geometry.vertices.push( new THREE.Vector3(1.431979, 179.836899, 12.023030) );
geometry.vertices.push( new THREE.Vector3(1.752682, 179.835693, 11.661190) );
geometry.vertices.push( new THREE.Vector3(0.945086, 172.935699, 10.764000) );
geometry.vertices.push( new THREE.Vector3(4.032525, 182.063995, 11.622000) );
geometry.vertices.push( new THREE.Vector3(4.599826, 182.309692, 11.145530) );
geometry.vertices.push( new THREE.Vector3(4.511287, 182.979004, 10.662070) );
geometry.vertices.push( new THREE.Vector3(4.299562, 184.103302, 9.956326) );
geometry.vertices.push( new THREE.Vector3(3.991875, 182.939606, 11.000290) );
geometry.vertices.push( new THREE.Vector3(4.584788, 185.119904, 9.206288) );
geometry.vertices.push( new THREE.Vector3(3.585491, 185.435196, 10.001140) );
geometry.vertices.push( new THREE.Vector3(3.274350, 181.682205, 11.987550) );
geometry.vertices.push( new THREE.Vector3(3.207321, 182.175690, 11.721149) );
geometry.vertices.push( new THREE.Vector3(3.110557, 182.923492, 11.287880) );
geometry.vertices.push( new THREE.Vector3(3.383737, 184.318497, 10.659000) );
geometry.vertices.push( new THREE.Vector3(2.341403, 184.453506, 11.106979) );
geometry.vertices.push( new THREE.Vector3(2.444385, 185.643005, 10.598590) );
geometry.vertices.push( new THREE.Vector3(2.347140, 181.993896, 12.026740) );
geometry.vertices.push( new THREE.Vector3(2.344751, 182.998901, 11.778300) );
geometry.vertices.push( new THREE.Vector3(1.126286, 183.115494, 12.035620) );
geometry.vertices.push( new THREE.Vector3(1.078478, 184.547195, 11.451110) );
geometry.vertices.push( new THREE.Vector3(1.703059, 182.096191, 12.347250) );
geometry.vertices.push( new THREE.Vector3(0.856549, 182.090607, 12.411970) );
geometry.vertices.push( new THREE.Vector3(1.069965, 185.758499, 11.005160) );
geometry.vertices.push( new THREE.Vector3(5.406787, 169.450897, 5.029950) );
geometry.vertices.push( new THREE.Vector3(5.657925, 170.674896, 6.466837) );
geometry.vertices.push( new THREE.Vector3(5.348212, 170.679703, 6.524213) );
geometry.vertices.push( new THREE.Vector3(5.926912, 172.889297, 6.341475) );
geometry.vertices.push( new THREE.Vector3(6.355350, 170.346802, 3.384574) );
geometry.vertices.push( new THREE.Vector3(4.959712, 169.139999, 4.081725) );
geometry.vertices.push( new THREE.Vector3(6.072037, 169.750092, 2.755598) );
geometry.vertices.push( new THREE.Vector3(6.820050, 170.896500, 2.550495) );
geometry.vertices.push( new THREE.Vector3(7.410900, 171.934097, 1.775700) );
geometry.vertices.push( new THREE.Vector3(7.049551, 170.783691, 1.627684) );
geometry.vertices.push( new THREE.Vector3(7.066761, 170.070404, 1.366553) );
geometry.vertices.push( new THREE.Vector3(0.934267, 166.635803, 5.471175) );
geometry.vertices.push( new THREE.Vector3(0.000000, 167.546997, 5.796412) );
geometry.vertices.push( new THREE.Vector3(0.000000, 166.494797, 5.523300) );
geometry.vertices.push( new THREE.Vector3(0.778361, 167.533905, 5.752800) );
geometry.vertices.push( new THREE.Vector3(1.921830, 167.093307, 5.404238) );
geometry.vertices.push( new THREE.Vector3(1.958317, 167.726303, 5.768325) );
geometry.vertices.push( new THREE.Vector3(2.954212, 168.053192, 5.511338) );
geometry.vertices.push( new THREE.Vector3(3.885150, 168.473602, 4.847250) );
geometry.vertices.push( new THREE.Vector3(2.918842, 167.941910, 5.158874) );
geometry.vertices.push( new THREE.Vector3(4.002075, 178.869400, 10.237801) );
geometry.vertices.push( new THREE.Vector3(3.953625, 178.855103, 10.120090) );
geometry.vertices.push( new THREE.Vector3(3.662464, 178.831512, 10.271590) );
geometry.vertices.push( new THREE.Vector3(3.685294, 178.825897, 10.376170) );
geometry.vertices.push( new THREE.Vector3(3.304350, 178.814301, 10.388700) );
geometry.vertices.push( new THREE.Vector3(3.321097, 178.824402, 10.449300) );
geometry.vertices.push( new THREE.Vector3(2.957280, 178.801102, 10.363720) );
geometry.vertices.push( new THREE.Vector3(6.755325, 187.406998, -5.067112) );
geometry.vertices.push( new THREE.Vector3(7.283437, 187.349609, -3.397346) );
geometry.vertices.push( new THREE.Vector3(-0.318097, 173.782898, 11.457750) );
geometry.vertices.push( new THREE.Vector3(-0.575891, 173.217697, 11.347610) );
geometry.vertices.push( new THREE.Vector3(-0.238040, 173.212509, 11.433410) );
geometry.vertices.push( new THREE.Vector3(-0.564878, 172.821396, 11.212690) );
geometry.vertices.push( new THREE.Vector3(-0.524130, 173.785492, 11.405360) );
geometry.vertices.push( new THREE.Vector3(0.000032, 173.788498, 11.460260) );
geometry.vertices.push( new THREE.Vector3(0.000032, 174.684006, 11.552550) );
geometry.vertices.push( new THREE.Vector3(-0.598860, 176.480194, 13.310141) );
geometry.vertices.push( new THREE.Vector3(-0.530681, 176.897202, 13.046890) );
geometry.vertices.push( new THREE.Vector3(-0.505151, 177.285797, 12.757270) );
geometry.vertices.push( new THREE.Vector3(0.000000, 176.935501, 13.303650) );
geometry.vertices.push( new THREE.Vector3(0.000000, 177.370102, 12.961989) );
geometry.vertices.push( new THREE.Vector3(-0.486412, 177.673904, 12.497780) );
geometry.vertices.push( new THREE.Vector3(-0.820309, 177.474701, 12.035920) );
geometry.vertices.push( new THREE.Vector3(0.000000, 177.828705, 12.695511) );
geometry.vertices.push( new THREE.Vector3(-4.500563, 171.943497, -9.116662) );
geometry.vertices.push( new THREE.Vector3(-2.209260, 171.704605, -9.464025) );
geometry.vertices.push( new THREE.Vector3(0.000000, 171.505905, -9.487087) );
geometry.vertices.push( new THREE.Vector3(-7.754250, 170.931000, -1.355415) );
geometry.vertices.push( new THREE.Vector3(-7.734000, 171.120407, -2.970319) );
geometry.vertices.push( new THREE.Vector3(-7.553926, 171.472092, -4.405725) );
geometry.vertices.push( new THREE.Vector3(-7.198725, 171.752304, -6.094350) );
geometry.vertices.push( new THREE.Vector3(-6.384900, 171.913101, -7.829437) );
geometry.vertices.push( new THREE.Vector3(-1.405099, 160.052597, 7.310850) );
geometry.vertices.push( new THREE.Vector3(-2.851703, 160.402908, 6.827177) );
geometry.vertices.push( new THREE.Vector3(-0.417469, 175.191803, 11.996620) );
geometry.vertices.push( new THREE.Vector3(-0.421200, 175.456100, 12.026170) );
geometry.vertices.push( new THREE.Vector3(-0.374155, 175.510895, 12.472160) );
geometry.vertices.push( new THREE.Vector3(0.000000, 175.251694, 12.724569) );
geometry.vertices.push( new THREE.Vector3(-3.126544, 180.528397, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-3.497962, 180.375702, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-3.829538, 180.391891, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-3.829425, 180.120010, 8.249399) );
geometry.vertices.push( new THREE.Vector3(-4.101412, 180.120010, 8.611424) );
geometry.vertices.push( new THREE.Vector3(-4.085213, 179.788498, 8.293087) );
geometry.vertices.push( new THREE.Vector3(-4.285762, 179.785095, 8.651773) );
geometry.vertices.push( new THREE.Vector3(-4.237875, 179.416901, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-4.285762, 179.785095, 9.470249) );
geometry.vertices.push( new THREE.Vector3(-4.085213, 179.788498, 9.828937) );
geometry.vertices.push( new THREE.Vector3(-4.101412, 180.120010, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-4.237875, 180.058502, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-4.033950, 180.324402, 9.061011) );
geometry.vertices.push( new THREE.Vector3(-3.829538, 180.391891, 9.510600) );
geometry.vertices.push( new THREE.Vector3(-2.783580, 179.760010, 10.249090) );
geometry.vertices.push( new THREE.Vector3(-3.126547, 180.058502, 10.172320) );
geometry.vertices.push( new THREE.Vector3(-3.484905, 180.090408, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-3.829425, 180.120010, 9.872624) );
geometry.vertices.push( new THREE.Vector3(-3.469507, 179.760010, 10.249090) );
geometry.vertices.push( new THREE.Vector3(-3.800025, 179.775406, 10.092859) );
geometry.vertices.push( new THREE.Vector3(-2.015216, 179.416901, 8.419387) );
geometry.vertices.push( new THREE.Vector3(-1.887019, 179.416901, 8.728874) );
geometry.vertices.push( new THREE.Vector3(4.536787, 179.161499, 9.642937) );
geometry.vertices.push( new THREE.Vector3(4.661063, 179.395905, 9.576637) );
geometry.vertices.push( new THREE.Vector3(4.632300, 179.272110, 9.530550) );
geometry.vertices.push( new THREE.Vector3(1.841415, 179.225189, 9.704288) );
geometry.vertices.push( new THREE.Vector3(2.130851, 179.434891, 9.728287) );
geometry.vertices.push( new THREE.Vector3(2.541724, 179.612991, 10.056940) );
geometry.vertices.push( new THREE.Vector3(3.057296, 179.691696, 10.139060) );
geometry.vertices.push( new THREE.Vector3(1.803656, 179.344498, 10.063129) );
geometry.vertices.push( new THREE.Vector3(1.889254, 179.245499, 10.144310) );
geometry.vertices.push( new THREE.Vector3(1.787591, 179.262405, 10.040740) );
geometry.vertices.push( new THREE.Vector3(6.352875, 174.561005, 5.844000) );
geometry.vertices.push( new THREE.Vector3(6.533025, 175.647003, 5.828775) );
geometry.vertices.push( new THREE.Vector3(6.002513, 171.937103, 5.535413) );
geometry.vertices.push( new THREE.Vector3(2.565352, 178.887695, 10.433440) );
geometry.vertices.push( new THREE.Vector3(4.453425, 169.122803, 5.920462) );
geometry.vertices.push( new THREE.Vector3(-6.211950, 199.875702, -2.525216) );
geometry.vertices.push( new THREE.Vector3(-6.259537, 199.945496, -2.633074) );
geometry.vertices.push( new THREE.Vector3(-6.257550, 199.915894, -2.563943) );
geometry.vertices.push( new THREE.Vector3(-6.175687, 199.889999, -2.605346) );
geometry.vertices.push( new THREE.Vector3(-6.266325, 199.890808, -2.753456) );
geometry.vertices.push( new THREE.Vector3(-6.182962, 199.888092, -2.687576) );
geometry.vertices.push( new THREE.Vector3(-6.223688, 199.882095, -2.759576) );
geometry.vertices.push( new THREE.Vector3(-6.072037, 197.048294, -3.628174) );
geometry.vertices.push( new THREE.Vector3(-2.047065, 179.022003, 9.714149) );
geometry.vertices.push( new THREE.Vector3(-2.197001, 179.014893, 9.603000) );
geometry.vertices.push( new THREE.Vector3(-1.613411, 179.073410, 9.678000) );
geometry.vertices.push( new THREE.Vector3(-1.612552, 179.225189, 9.678262) );
geometry.vertices.push( new THREE.Vector3(-2.132644, 179.421402, 9.615226) );
geometry.vertices.push( new THREE.Vector3(-1.983499, 179.428101, 9.732112) );
geometry.vertices.push( new THREE.Vector3(1.613411, 179.073410, 9.678000) );
geometry.vertices.push( new THREE.Vector3(2.196998, 179.014893, 9.603000) );
geometry.vertices.push( new THREE.Vector3(2.047065, 179.022003, 9.714149) );
geometry.vertices.push( new THREE.Vector3(1.983499, 179.428101, 9.732112) );
geometry.vertices.push( new THREE.Vector3(2.132640, 179.421402, 9.615226) );
geometry.vertices.push( new THREE.Vector3(1.612552, 179.225189, 9.678262) );
geometry.vertices.push( new THREE.Vector3(-3.828000, 177.409103, 11.081060) );
geometry.vertices.push( new THREE.Vector3(-2.972374, 178.840897, 10.477270) );
geometry.vertices.push( new THREE.Vector3(-2.565352, 178.887695, 10.433440) );
geometry.vertices.push( new THREE.Vector3(-2.565352, 178.905701, 10.374149) );
geometry.vertices.push( new THREE.Vector3(-1.889254, 179.245499, 10.144310) );
geometry.vertices.push( new THREE.Vector3(-1.803660, 179.344498, 10.063129) );
geometry.vertices.push( new THREE.Vector3(-1.787595, 179.262405, 10.040740) );
geometry.vertices.push( new THREE.Vector3(-0.778365, 167.533905, 5.752800) );
geometry.vertices.push( new THREE.Vector3(-0.934267, 166.635803, 5.471175) );
geometry.vertices.push( new THREE.Vector3(-15.479030, 7.390349, 6.929475) );
geometry.vertices.push( new THREE.Vector3(-14.192321, 5.821237, 3.375585) );
geometry.vertices.push( new THREE.Vector3(-15.216970, 9.519337, 2.520086) );
geometry.vertices.push( new THREE.Vector3(-14.171180, 4.271512, 7.192013) );
geometry.vertices.push( new THREE.Vector3(-15.650620, 115.884804, 0.589879) );
geometry.vertices.push( new THREE.Vector3(-15.474340, 112.138107, 4.422975) );
geometry.vertices.push( new THREE.Vector3(-14.965580, 115.296700, 4.842600) );
geometry.vertices.push( new THREE.Vector3(-15.188210, 113.373695, -3.778462) );
geometry.vertices.push( new THREE.Vector3(-14.706559, 116.427696, -3.265481) );
geometry.vertices.push( new THREE.Vector3(-16.024120, 112.752701, 0.275974) );
geometry.vertices.push( new THREE.Vector3(-16.461750, 109.032402, 5.088638) );
geometry.vertices.push( new THREE.Vector3(-14.152760, 108.599197, 8.477175) );
geometry.vertices.push( new THREE.Vector3(-14.638990, 105.842194, 8.535638) );
geometry.vertices.push( new THREE.Vector3(-11.290130, 108.171402, 10.083899) );
geometry.vertices.push( new THREE.Vector3(-11.816810, 105.555405, 10.098710) );
geometry.vertices.push( new THREE.Vector3(-14.909551, 103.571198, 8.691113) );
geometry.vertices.push( new THREE.Vector3(-12.089960, 102.848991, 10.107410) );
geometry.vertices.push( new THREE.Vector3(-17.344570, 103.948502, 5.460750) );
geometry.vertices.push( new THREE.Vector3(-16.980261, 106.170403, 5.419125) );
geometry.vertices.push( new THREE.Vector3(-17.227989, 109.433998, 1.012507) );
geometry.vertices.push( new THREE.Vector3(-16.462870, 109.895599, -3.453533) );
geometry.vertices.push( new THREE.Vector3(-14.292790, 110.261597, -7.852313) );
geometry.vertices.push( new THREE.Vector3(-12.918900, 113.920906, -7.519500) );
geometry.vertices.push( new THREE.Vector3(-10.349100, 114.250900, -9.884888) );
geometry.vertices.push( new THREE.Vector3(-11.821650, 110.500099, -10.816130) );
geometry.vertices.push( new THREE.Vector3(-15.145050, 106.793198, -7.877925) );
geometry.vertices.push( new THREE.Vector3(-8.871788, 106.657501, -14.156030) );
geometry.vertices.push( new THREE.Vector3(-12.835119, 103.448997, -11.579021) );
geometry.vertices.push( new THREE.Vector3(-12.623620, 106.812706, -11.384920) );
geometry.vertices.push( new THREE.Vector3(-7.988064, 110.666298, -13.113681) );
geometry.vertices.push( new THREE.Vector3(-6.304012, 114.583099, -11.623870) );
geometry.vertices.push( new THREE.Vector3(-9.237451, 117.138000, -8.220150) );
geometry.vertices.push( new THREE.Vector3(-12.274540, 116.882301, -6.347700) );
geometry.vertices.push( new THREE.Vector3(-5.443125, 117.349503, -10.171010) );
geometry.vertices.push( new THREE.Vector3(-5.603138, 102.782997, -15.179400) );
geometry.vertices.push( new THREE.Vector3(-2.813943, 106.270897, -15.129410) );
geometry.vertices.push( new THREE.Vector3(-2.319889, 102.699402, -14.780210) );
geometry.vertices.push( new THREE.Vector3(-5.583712, 106.335701, -15.228860) );
geometry.vertices.push( new THREE.Vector3(-9.108488, 103.214203, -14.162511) );
geometry.vertices.push( new THREE.Vector3(-4.099125, 110.683098, -14.107651) );
geometry.vertices.push( new THREE.Vector3(-3.394523, 114.634499, -12.173590) );
geometry.vertices.push( new THREE.Vector3(-2.964694, 117.397903, -11.183470) );
geometry.vertices.push( new THREE.Vector3(0.000029, 117.272995, -11.282590) );
geometry.vertices.push( new THREE.Vector3(0.000020, 114.478508, -12.413290) );
geometry.vertices.push( new THREE.Vector3(0.000012, 110.152100, -13.872411) );
geometry.vertices.push( new THREE.Vector3(0.000000, 106.279503, -14.713650) );
geometry.vertices.push( new THREE.Vector3(0.000000, 102.518997, -14.515050) );
geometry.vertices.push( new THREE.Vector3(-2.382139, 100.116394, -13.724589) );
geometry.vertices.push( new THREE.Vector3(0.000000, 100.147102, -13.248970) );
geometry.vertices.push( new THREE.Vector3(-2.372479, 97.750870, -12.039081) );
geometry.vertices.push( new THREE.Vector3(0.000000, 97.946640, -11.310680) );
geometry.vertices.push( new THREE.Vector3(-2.451754, 96.488998, -10.381910) );
geometry.vertices.push( new THREE.Vector3(0.000000, 96.744751, -9.396375) );
geometry.vertices.push( new THREE.Vector3(-1.072166, 96.036758, -7.572375) );
geometry.vertices.push( new THREE.Vector3(0.000005, 95.797119, -7.828837) );
geometry.vertices.push( new THREE.Vector3(0.000007, 94.455742, -3.829312) );
geometry.vertices.push( new THREE.Vector3(-0.404081, 93.779984, 1.536986) );
geometry.vertices.push( new THREE.Vector3(0.000005, 93.755630, 1.587184) );
geometry.vertices.push( new THREE.Vector3(-8.928187, 100.566010, -13.411691) );
geometry.vertices.push( new THREE.Vector3(-5.491050, 100.038399, -14.295600) );
geometry.vertices.push( new THREE.Vector3(-5.365050, 97.966866, -12.758480) );
geometry.vertices.push( new THREE.Vector3(-4.874138, 95.721016, -11.334081) );
geometry.vertices.push( new THREE.Vector3(-2.872762, 95.215500, -9.585600) );
geometry.vertices.push( new THREE.Vector3(-4.787137, 93.409500, -10.016250) );
geometry.vertices.push( new THREE.Vector3(-8.730338, 91.291870, -10.843610) );
geometry.vertices.push( new THREE.Vector3(-4.863450, 90.868126, -9.781386) );
geometry.vertices.push( new THREE.Vector3(-8.719163, 94.206749, -11.037070) );
geometry.vertices.push( new THREE.Vector3(-8.833237, 96.499504, -11.819620) );
geometry.vertices.push( new THREE.Vector3(-8.766000, 98.707878, -12.501981) );
geometry.vertices.push( new THREE.Vector3(-12.818210, 91.709633, -10.222580) );
geometry.vertices.push( new THREE.Vector3(-12.540820, 94.867126, -10.111010) );
geometry.vertices.push( new THREE.Vector3(-12.357520, 97.780136, -10.519800) );
geometry.vertices.push( new THREE.Vector3(-12.489640, 99.741379, -10.582459) );
geometry.vertices.push( new THREE.Vector3(-12.641891, 101.321602, -11.310300) );
geometry.vertices.push( new THREE.Vector3(-16.001139, 95.620499, -7.401299) );
geometry.vertices.push( new THREE.Vector3(-15.387639, 103.663895, -7.904400) );
geometry.vertices.push( new THREE.Vector3(-15.463760, 102.334908, -7.952213) );
geometry.vertices.push( new THREE.Vector3(-15.129490, 101.353096, -7.547138) );
geometry.vertices.push( new THREE.Vector3(-15.234980, 99.987755, -7.666463) );
geometry.vertices.push( new THREE.Vector3(-20.014420, 96.660385, 1.143915) );
geometry.vertices.push( new THREE.Vector3(-17.971649, 99.660370, -3.182453) );
geometry.vertices.push( new THREE.Vector3(-18.700951, 96.421501, -3.270015) );
geometry.vertices.push( new THREE.Vector3(-15.377630, 99.064514, -7.630050) );
geometry.vertices.push( new THREE.Vector3(-17.498890, 102.062202, -3.121177) );
geometry.vertices.push( new THREE.Vector3(-17.679340, 103.708900, -3.211451) );
geometry.vertices.push( new THREE.Vector3(-17.253790, 106.587006, -3.225221) );
geometry.vertices.push( new THREE.Vector3(-18.469351, 103.869400, 1.412456) );
geometry.vertices.push( new THREE.Vector3(-18.069260, 106.266403, 1.366204) );
geometry.vertices.push( new THREE.Vector3(-18.374100, 102.338600, 1.402144) );
geometry.vertices.push( new THREE.Vector3(-17.444321, 102.515999, 5.505675) );
geometry.vertices.push( new THREE.Vector3(-18.065550, 100.198494, 5.445750) );
geometry.vertices.push( new THREE.Vector3(-18.962360, 100.122406, 1.285215) );
geometry.vertices.push( new THREE.Vector3(-18.926291, 96.822754, 5.492063) );
geometry.vertices.push( new THREE.Vector3(-16.488340, 96.452248, 9.004200) );
geometry.vertices.push( new THREE.Vector3(-15.724720, 99.944252, 8.674125) );
geometry.vertices.push( new THREE.Vector3(-15.175690, 102.035606, 8.710727) );
geometry.vertices.push( new THREE.Vector3(-12.423380, 100.970993, 9.724575) );
geometry.vertices.push( new THREE.Vector3(-12.697909, 99.383621, 9.972525) );
geometry.vertices.push( new THREE.Vector3(-13.331211, 96.036758, 10.628961) );
geometry.vertices.push( new THREE.Vector3(-13.869260, 92.388382, 11.092650) );
geometry.vertices.push( new THREE.Vector3(-9.954901, 95.234993, 10.526740) );
geometry.vertices.push( new THREE.Vector3(-10.408050, 91.921135, 11.255780) );
geometry.vertices.push( new THREE.Vector3(-6.907275, 94.370255, 8.755800) );
geometry.vertices.push( new THREE.Vector3(-0.696397, 93.844498, 1.570856) );
geometry.vertices.push( new THREE.Vector3(-2.245699, 92.759995, 4.862924) );
geometry.vertices.push( new THREE.Vector3(-0.833704, 92.432617, 1.333931) );
geometry.vertices.push( new THREE.Vector3(-1.837597, 94.399117, 4.975612) );
geometry.vertices.push( new THREE.Vector3(-2.801336, 95.170502, 6.574088) );
geometry.vertices.push( new THREE.Vector3(-4.439288, 93.150749, 7.132013) );
geometry.vertices.push( new THREE.Vector3(-3.988350, 95.913368, 7.653037) );
geometry.vertices.push( new THREE.Vector3(-6.110475, 97.358253, 8.480776) );
geometry.vertices.push( new THREE.Vector3(-9.866625, 98.616371, 9.991763) );
geometry.vertices.push( new THREE.Vector3(-9.812551, 99.598495, 9.937313) );
geometry.vertices.push( new THREE.Vector3(-7.239075, 91.329376, 9.080550) );
geometry.vertices.push( new THREE.Vector3(-4.658363, 90.918365, 6.922350) );
geometry.vertices.push( new THREE.Vector3(-2.346394, 90.777000, 4.658025) );
geometry.vertices.push( new THREE.Vector3(-0.879135, 90.876373, 0.940673) );
geometry.vertices.push( new THREE.Vector3(-2.292184, 86.953125, 4.323750) );
geometry.vertices.push( new THREE.Vector3(-0.795086, 87.220131, 0.634436) );
geometry.vertices.push( new THREE.Vector3(-1.441661, 82.485001, 0.127596) );
geometry.vertices.push( new THREE.Vector3(-4.904100, 86.907738, 6.811950) );
geometry.vertices.push( new THREE.Vector3(-3.063341, 81.939384, 3.841875) );
geometry.vertices.push( new THREE.Vector3(-2.543194, 77.723625, -0.474199) );
geometry.vertices.push( new THREE.Vector3(-4.125000, 77.367371, 3.030502) );
geometry.vertices.push( new THREE.Vector3(-4.557600, 72.561752, -0.759866) );
geometry.vertices.push( new THREE.Vector3(-5.871487, 72.181114, 3.398385) );
geometry.vertices.push( new THREE.Vector3(-6.293437, 67.672119, -0.024525) );
geometry.vertices.push( new THREE.Vector3(-5.911275, 67.058250, 2.715131) );
geometry.vertices.push( new THREE.Vector3(-6.675825, 62.071121, -0.395392) );
geometry.vertices.push( new THREE.Vector3(-6.424650, 61.928242, 1.814160) );
geometry.vertices.push( new THREE.Vector3(-7.406475, 58.345127, 1.125442) );
geometry.vertices.push( new THREE.Vector3(-7.390837, 86.950119, 9.604688) );
geometry.vertices.push( new THREE.Vector3(-5.523337, 82.310631, 6.513638) );
geometry.vertices.push( new THREE.Vector3(-6.364388, 77.358002, 6.198150) );
geometry.vertices.push( new THREE.Vector3(-6.837225, 71.911118, 6.440663) );
geometry.vertices.push( new THREE.Vector3(-7.252125, 66.599632, 5.942813) );
geometry.vertices.push( new THREE.Vector3(-7.981799, 61.828117, 5.028750) );
geometry.vertices.push( new THREE.Vector3(-10.071040, 66.721115, 7.165800) );
geometry.vertices.push( new THREE.Vector3(-11.221990, 82.406631, 11.356430) );
geometry.vertices.push( new THREE.Vector3(-7.878300, 82.120872, 9.589499) );
geometry.vertices.push( new THREE.Vector3(-8.661037, 77.130005, 8.952037) );
geometry.vertices.push( new THREE.Vector3(-9.356850, 71.961365, 7.983075) );
geometry.vertices.push( new THREE.Vector3(-12.459109, 66.794998, 7.564313) );
geometry.vertices.push( new THREE.Vector3(-12.105970, 72.064880, 9.409425) );
geometry.vertices.push( new THREE.Vector3(-21.279940, 82.789116, 5.030888) );
geometry.vertices.push( new THREE.Vector3(-18.546829, 77.479881, 8.287688) );
geometry.vertices.push( new THREE.Vector3(-18.596510, 82.686005, 8.675100) );
geometry.vertices.push( new THREE.Vector3(-14.814641, 77.492615, 10.142400) );
geometry.vertices.push( new THREE.Vector3(-14.710240, 72.187500, 9.262538) );
geometry.vertices.push( new THREE.Vector3(-11.533501, 77.365120, 10.645460) );
geometry.vertices.push( new THREE.Vector3(-14.832041, 82.682625, 10.955400) );
geometry.vertices.push( new THREE.Vector3(-20.179501, 87.659622, -3.654240) );
geometry.vertices.push( new THREE.Vector3(-21.758060, 82.799988, 0.376009) );
geometry.vertices.push( new THREE.Vector3(-21.322689, 87.957748, 0.552292) );
geometry.vertices.push( new THREE.Vector3(-20.720699, 88.080750, 5.419275) );
geometry.vertices.push( new THREE.Vector3(-18.118130, 87.908630, 8.883113) );
geometry.vertices.push( new THREE.Vector3(-14.580260, 87.614998, 11.387959) );
geometry.vertices.push( new THREE.Vector3(-10.953939, 87.334129, 11.625080) );
geometry.vertices.push( new THREE.Vector3(-20.698009, 92.685745, 0.826493) );
geometry.vertices.push( new THREE.Vector3(-19.871401, 92.657631, 5.474100) );
geometry.vertices.push( new THREE.Vector3(-17.336660, 92.539505, 8.935125) );
geometry.vertices.push( new THREE.Vector3(-19.447241, 92.506866, -3.408341) );
geometry.vertices.push( new THREE.Vector3(-9.800814, 82.573494, -11.237289) );
geometry.vertices.push( new THREE.Vector3(-6.485550, 77.511383, -9.789712) );
geometry.vertices.push( new THREE.Vector3(-10.658330, 77.457748, -10.861880) );
geometry.vertices.push( new THREE.Vector3(-14.445371, 82.483490, -10.752900) );
geometry.vertices.push( new THREE.Vector3(-13.638531, 87.184502, -10.694140) );
geometry.vertices.push( new THREE.Vector3(-17.631260, 87.439499, -7.846125) );
geometry.vertices.push( new THREE.Vector3(-16.735800, 92.106003, -7.362450) );
geometry.vertices.push( new THREE.Vector3(-5.703188, 82.632370, -10.221640) );
geometry.vertices.push( new THREE.Vector3(-3.766987, 77.581131, -6.796950) );
geometry.vertices.push( new THREE.Vector3(-8.972925, 87.124123, -11.137420) );
geometry.vertices.push( new THREE.Vector3(-4.557600, 72.561752, -0.759866) );
geometry.vertices.push( new THREE.Vector3(-2.975194, 77.670372, -4.974450) );
geometry.vertices.push( new THREE.Vector3(-2.543194, 77.723625, -0.474199) );
geometry.vertices.push( new THREE.Vector3(-1.657954, 82.680748, -4.971075) );
geometry.vertices.push( new THREE.Vector3(-2.983886, 82.716003, -7.995938) );
geometry.vertices.push( new THREE.Vector3(-5.144775, 87.217499, -10.194820) );
geometry.vertices.push( new THREE.Vector3(-2.197987, 92.993248, -7.750013) );
geometry.vertices.push( new THREE.Vector3(-2.246092, 90.722252, -7.825125) );
geometry.vertices.push( new THREE.Vector3(-2.552359, 87.192001, -8.232938) );
geometry.vertices.push( new THREE.Vector3(-0.987757, 87.207001, -4.884450) );
geometry.vertices.push( new THREE.Vector3(-0.892609, 90.552376, -4.457250) );
geometry.vertices.push( new THREE.Vector3(-0.838875, 92.223381, -4.486237) );
geometry.vertices.push( new THREE.Vector3(-0.866025, 93.691498, -4.151212) );
geometry.vertices.push( new THREE.Vector3(-1.804129, 94.934250, -7.722937) );
geometry.vertices.push( new THREE.Vector3(-0.502380, 94.614014, -3.834000) );
geometry.vertices.push( new THREE.Vector3(-0.696397, 93.844498, 1.570856) );
geometry.vertices.push( new THREE.Vector3(-0.833704, 92.432617, 1.333931) );
geometry.vertices.push( new THREE.Vector3(-0.879135, 90.876373, 0.940673) );
geometry.vertices.push( new THREE.Vector3(-0.795086, 87.220131, 0.634436) );
geometry.vertices.push( new THREE.Vector3(-1.441661, 82.485001, 0.127596) );
geometry.vertices.push( new THREE.Vector3(-8.198925, 110.833099, 11.090620) );
geometry.vertices.push( new THREE.Vector3(-5.333550, 113.851097, 12.522600) );
geometry.vertices.push( new THREE.Vector3(-8.071199, 113.964699, 11.644990) );
geometry.vertices.push( new THREE.Vector3(-10.453690, 114.131996, 10.562030) );
geometry.vertices.push( new THREE.Vector3(-10.738130, 111.018005, 10.100360) );
geometry.vertices.push( new THREE.Vector3(-5.197087, 110.551498, 11.893910) );
geometry.vertices.push( new THREE.Vector3(-8.327400, 107.913002, 10.855800) );
geometry.vertices.push( new THREE.Vector3(-11.290130, 108.171402, 10.083899) );
geometry.vertices.push( new THREE.Vector3(-11.816810, 105.555405, 10.098710) );
geometry.vertices.push( new THREE.Vector3(-8.551049, 105.162704, 10.693840) );
geometry.vertices.push( new THREE.Vector3(-12.089960, 102.848991, 10.107410) );
geometry.vertices.push( new THREE.Vector3(-5.351475, 107.667801, 11.576850) );
geometry.vertices.push( new THREE.Vector3(-2.311024, 107.701096, 12.197140) );
geometry.vertices.push( new THREE.Vector3(-2.325851, 110.675598, 12.348190) );
geometry.vertices.push( new THREE.Vector3(-5.429137, 104.848099, 11.289820) );
geometry.vertices.push( new THREE.Vector3(-2.429670, 104.736397, 12.182210) );
geometry.vertices.push( new THREE.Vector3(-0.000023, 107.595802, 12.526420) );
geometry.vertices.push( new THREE.Vector3(-0.000048, 110.817001, 12.429190) );
geometry.vertices.push( new THREE.Vector3(-0.000052, 113.746902, 12.716810) );
geometry.vertices.push( new THREE.Vector3(-2.417288, 113.874397, 12.583500) );
geometry.vertices.push( new THREE.Vector3(-2.506628, 101.908897, 12.202800) );
geometry.vertices.push( new THREE.Vector3(-4.605338, 99.037865, 10.784100) );
geometry.vertices.push( new THREE.Vector3(-2.263084, 98.800865, 11.645320) );
geometry.vertices.push( new THREE.Vector3(-5.493375, 102.127098, 11.145260) );
geometry.vertices.push( new THREE.Vector3(-8.733300, 102.392998, 10.498390) );
geometry.vertices.push( new THREE.Vector3(-7.241738, 100.606895, 10.115550) );
geometry.vertices.push( new THREE.Vector3(-9.141600, 101.262405, 10.234570) );
geometry.vertices.push( new THREE.Vector3(-3.719164, 97.106247, 9.536700) );
geometry.vertices.push( new THREE.Vector3(-5.343825, 97.739250, 9.014214) );
geometry.vertices.push( new THREE.Vector3(-9.812551, 99.598495, 9.937313) );
geometry.vertices.push( new THREE.Vector3(-12.423380, 100.970993, 9.724575) );
geometry.vertices.push( new THREE.Vector3(-6.110475, 97.358253, 8.480776) );
geometry.vertices.push( new THREE.Vector3(-3.988350, 95.913368, 7.653037) );
geometry.vertices.push( new THREE.Vector3(-2.176365, 95.242867, 7.173488) );
geometry.vertices.push( new THREE.Vector3(-3.045915, 96.091873, 8.596388) );
geometry.vertices.push( new THREE.Vector3(-1.906436, 96.969376, 10.387500) );
geometry.vertices.push( new THREE.Vector3(-1.582185, 95.985374, 9.308062) );
geometry.vertices.push( new THREE.Vector3(-1.265978, 95.105621, 8.038161) );
geometry.vertices.push( new THREE.Vector3(-0.575805, 94.095383, 5.178600) );
geometry.vertices.push( new THREE.Vector3(-1.376899, 94.822121, 4.738200) );
geometry.vertices.push( new THREE.Vector3(-0.404081, 93.779984, 1.536986) );
geometry.vertices.push( new THREE.Vector3(-0.696397, 93.844498, 1.570856) );
geometry.vertices.push( new THREE.Vector3(-1.837597, 94.399117, 4.975612) );
geometry.vertices.push( new THREE.Vector3(-2.801336, 95.170502, 6.574088) );
geometry.vertices.push( new THREE.Vector3(0.000005, 93.755630, 1.587184) );
geometry.vertices.push( new THREE.Vector3(0.000009, 94.028999, 5.166638) );
geometry.vertices.push( new THREE.Vector3(0.000009, 94.834885, 8.200537) );
geometry.vertices.push( new THREE.Vector3(0.000008, 96.015755, 9.367913) );
geometry.vertices.push( new THREE.Vector3(0.000007, 96.991882, 10.742330) );
geometry.vertices.push( new THREE.Vector3(0.000005, 98.854515, 12.051040) );
geometry.vertices.push( new THREE.Vector3(0.000000, 101.895401, 12.427690) );
geometry.vertices.push( new THREE.Vector3(-0.000009, 104.625702, 12.441520) );
geometry.vertices.push( new THREE.Vector3(18.643049, 3.240250, 17.878990) );
geometry.vertices.push( new THREE.Vector3(19.897200, 4.392486, 17.252960) );
geometry.vertices.push( new THREE.Vector3(18.745050, 4.062898, 17.265671) );
geometry.vertices.push( new THREE.Vector3(20.136110, 3.320406, 18.549940) );
geometry.vertices.push( new THREE.Vector3(21.389589, 4.304811, 17.151409) );
geometry.vertices.push( new THREE.Vector3(21.756260, 3.361559, 18.324110) );
geometry.vertices.push( new THREE.Vector3(22.627459, 3.947998, 16.811029) );
geometry.vertices.push( new THREE.Vector3(23.192251, 3.187108, 17.290649) );
geometry.vertices.push( new THREE.Vector3(21.210711, 4.846311, 15.844090) );
geometry.vertices.push( new THREE.Vector3(19.538099, 4.939499, 16.013851) );
geometry.vertices.push( new THREE.Vector3(20.812759, 5.345173, 13.419260) );
geometry.vertices.push( new THREE.Vector3(18.815849, 5.578199, 13.787251) );
geometry.vertices.push( new THREE.Vector3(18.117750, 4.558911, 16.039459) );
geometry.vertices.push( new THREE.Vector3(16.696609, 5.097936, 13.863750) );
geometry.vertices.push( new THREE.Vector3(16.946890, 3.278747, 16.319469) );
geometry.vertices.push( new THREE.Vector3(15.453900, 3.381122, 14.073340) );
geometry.vertices.push( new THREE.Vector3(22.551340, 7.038149, 1.093654) );
geometry.vertices.push( new THREE.Vector3(21.821169, 8.017799, 5.452425) );
geometry.vertices.push( new THREE.Vector3(23.513330, 5.548799, 4.474312) );
geometry.vertices.push( new THREE.Vector3(21.380890, 9.997724, 1.930808) );
geometry.vertices.push( new THREE.Vector3(16.917860, 11.503500, 3.404160) );
geometry.vertices.push( new THREE.Vector3(19.605370, 9.245662, 6.352912) );
geometry.vertices.push( new THREE.Vector3(18.977890, 11.530760, 3.069686) );
geometry.vertices.push( new THREE.Vector3(17.493040, 9.089737, 6.773925) );
geometry.vertices.push( new THREE.Vector3(15.216941, 9.519336, 2.520090) );
geometry.vertices.push( new THREE.Vector3(15.479030, 7.390349, 6.929513) );
geometry.vertices.push( new THREE.Vector3(18.129971, 6.908886, 10.478440) );
geometry.vertices.push( new THREE.Vector3(15.807409, 6.044286, 10.746640) );
geometry.vertices.push( new THREE.Vector3(20.297251, 6.707211, 10.058960) );
geometry.vertices.push( new THREE.Vector3(22.546240, 5.908724, 9.317474) );
geometry.vertices.push( new THREE.Vector3(24.370729, 4.475849, 8.505937) );
geometry.vertices.push( new THREE.Vector3(14.171180, 4.271474, 7.192013) );
geometry.vertices.push( new THREE.Vector3(14.327100, 3.453325, 10.849461) );
geometry.vertices.push( new THREE.Vector3(22.804161, 4.756723, 12.802240) );
geometry.vertices.push( new THREE.Vector3(24.437401, 3.121375, 14.887420) );
geometry.vertices.push( new THREE.Vector3(24.686960, 3.642493, 12.195149) );
geometry.vertices.push( new THREE.Vector3(22.894350, 4.278598, 15.446851) );
geometry.vertices.push( new THREE.Vector3(14.192321, 5.821199, 3.375592) );
geometry.vertices.push( new THREE.Vector3(21.771709, 7.796512, -6.413737) );
geometry.vertices.push( new THREE.Vector3(19.873310, 10.618239, -8.989087) );
geometry.vertices.push( new THREE.Vector3(22.326710, 10.530971, -6.162600) );
geometry.vertices.push( new THREE.Vector3(22.160511, 7.495162, -2.513006) );
geometry.vertices.push( new THREE.Vector3(21.939001, 10.616210, -2.216708) );
geometry.vertices.push( new THREE.Vector3(22.372910, 4.485599, -2.781814) );
geometry.vertices.push( new THREE.Vector3(22.914970, 3.773136, 0.793845) );
geometry.vertices.push( new THREE.Vector3(22.072760, 2.631809, -2.683474) );
geometry.vertices.push( new THREE.Vector3(22.589100, 1.921683, 0.832054) );
geometry.vertices.push( new THREE.Vector3(24.173740, 3.109431, 4.034025) );
geometry.vertices.push( new THREE.Vector3(23.322300, 2.418295, 17.331301) );
geometry.vertices.push( new THREE.Vector3(21.691839, 1.688230, 18.445801) );
geometry.vertices.push( new THREE.Vector3(23.286560, 1.395107, 17.086311) );
geometry.vertices.push( new THREE.Vector3(24.703541, 2.090091, 14.760969) );
geometry.vertices.push( new THREE.Vector3(25.520849, 2.329510, 11.822140) );
geometry.vertices.push( new THREE.Vector3(25.500410, 2.741466, 7.974412) );
geometry.vertices.push( new THREE.Vector3(23.913860, 1.059141, 4.051950) );
geometry.vertices.push( new THREE.Vector3(24.555380, 0.847146, 14.465139) );
geometry.vertices.push( new THREE.Vector3(25.323858, 0.625521, 11.527720) );
geometry.vertices.push( new THREE.Vector3(25.083818, 0.651632, 7.734412) );
geometry.vertices.push( new THREE.Vector3(21.282219, 0.913607, 17.977991) );
geometry.vertices.push( new THREE.Vector3(22.945990, 0.784243, 16.798569) );
geometry.vertices.push( new THREE.Vector3(24.087601, 0.195274, 14.357289) );
geometry.vertices.push( new THREE.Vector3(24.696260, -0.128934, 11.281310) );
geometry.vertices.push( new THREE.Vector3(24.426340, -0.049043, 7.791262) );
geometry.vertices.push( new THREE.Vector3(23.187941, 0.139269, 4.242750) );
geometry.vertices.push( new THREE.Vector3(21.705561, 0.903108, 0.934984) );
geometry.vertices.push( new THREE.Vector3(14.193151, 1.911906, 10.721250) );
geometry.vertices.push( new THREE.Vector3(15.497440, 0.704950, 13.830339) );
geometry.vertices.push( new THREE.Vector3(15.265800, 1.951135, 14.078959) );
geometry.vertices.push( new THREE.Vector3(16.775101, 1.122118, 16.132351) );
geometry.vertices.push( new THREE.Vector3(17.208750, 0.443560, 15.882000) );
geometry.vertices.push( new THREE.Vector3(18.414520, 0.758687, 17.637899) );
geometry.vertices.push( new THREE.Vector3(18.488029, 1.619923, 18.186192) );
geometry.vertices.push( new THREE.Vector3(19.776560, 0.930422, 18.230659) );
geometry.vertices.push( new THREE.Vector3(20.054510, 1.673537, 18.720711) );
geometry.vertices.push( new THREE.Vector3(21.793800, 2.560423, 18.519791) );
geometry.vertices.push( new THREE.Vector3(20.140541, 2.554577, 18.782591) );
geometry.vertices.push( new THREE.Vector3(18.467590, 2.456286, 18.212320) );
geometry.vertices.push( new THREE.Vector3(16.624950, 2.155431, 16.298590) );
geometry.vertices.push( new THREE.Vector3(17.279591, 8.016036, -12.695021) );
geometry.vertices.push( new THREE.Vector3(15.246530, 11.094490, -11.538560) );
geometry.vertices.push( new THREE.Vector3(17.537209, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(12.737550, 7.497749, -5.300737) );
geometry.vertices.push( new THREE.Vector3(12.552039, 10.840570, -2.667034) );
geometry.vertices.push( new THREE.Vector3(12.209320, 11.035420, -5.134950) );
geometry.vertices.push( new THREE.Vector3(12.945109, 7.773374, -7.972462) );
geometry.vertices.push( new THREE.Vector3(13.336881, 11.036400, -7.799850) );
geometry.vertices.push( new THREE.Vector3(13.783800, 11.073970, -10.261350) );
geometry.vertices.push( new THREE.Vector3(13.353530, 7.928586, -10.954310) );
geometry.vertices.push( new THREE.Vector3(14.903590, 7.956186, -12.544690) );
geometry.vertices.push( new THREE.Vector3(17.081400, 4.659374, -13.392671) );
geometry.vertices.push( new THREE.Vector3(14.531361, 4.628737, -13.152111) );
geometry.vertices.push( new THREE.Vector3(12.241719, 4.728337, -8.337637) );
geometry.vertices.push( new THREE.Vector3(12.453530, 4.451324, -5.032762) );
geometry.vertices.push( new THREE.Vector3(13.355060, 7.485599, -2.657336) );
geometry.vertices.push( new THREE.Vector3(12.999560, 4.615424, -11.113689) );
geometry.vertices.push( new THREE.Vector3(14.752500, 1.616643, -12.685349) );
geometry.vertices.push( new THREE.Vector3(13.219839, 1.522904, -10.946060) );
geometry.vertices.push( new THREE.Vector3(12.412539, 1.843443, -7.997175) );
geometry.vertices.push( new THREE.Vector3(12.838910, 2.005765, -4.502963) );
geometry.vertices.push( new THREE.Vector3(13.561871, 4.459649, -2.238514) );
geometry.vertices.push( new THREE.Vector3(14.091490, 7.245111, 0.045624) );
geometry.vertices.push( new THREE.Vector3(13.857940, 0.785706, -4.274025) );
geometry.vertices.push( new THREE.Vector3(14.062500, 2.185454, -1.697775) );
geometry.vertices.push( new THREE.Vector3(14.189661, 3.886574, 0.670631) );
geometry.vertices.push( new THREE.Vector3(13.813991, 10.271140, -0.234552) );
geometry.vertices.push( new THREE.Vector3(14.697340, 1.196958, -1.560491) );
geometry.vertices.push( new THREE.Vector3(14.636021, 2.104165, 0.845711) );
geometry.vertices.push( new THREE.Vector3(14.067709, 3.005354, 3.868987) );
geometry.vertices.push( new THREE.Vector3(13.943399, 2.136231, 7.298438) );
geometry.vertices.push( new THREE.Vector3(15.308321, 1.274905, 1.024740) );
geometry.vertices.push( new THREE.Vector3(14.508750, 1.274665, 4.013737) );
geometry.vertices.push( new THREE.Vector3(14.350160, 0.695736, 7.279650) );
geometry.vertices.push( new THREE.Vector3(14.669741, 0.546224, 10.670020) );
geometry.vertices.push( new THREE.Vector3(15.999190, 0.214228, 13.606090) );
geometry.vertices.push( new THREE.Vector3(15.155360, 0.006294, 10.542600) );
geometry.vertices.push( new THREE.Vector3(14.972589, -0.029174, 7.100400) );
geometry.vertices.push( new THREE.Vector3(15.185361, 0.570820, 3.918450) );
geometry.vertices.push( new THREE.Vector3(17.081400, 4.659374, -13.392671) );
geometry.vertices.push( new THREE.Vector3(19.563971, 1.566115, -10.835660) );
geometry.vertices.push( new THREE.Vector3(16.570160, 1.724478, -13.195049) );
geometry.vertices.push( new THREE.Vector3(20.181829, 4.564874, -10.312269) );
geometry.vertices.push( new THREE.Vector3(17.279591, 8.016036, -12.695021) );
geometry.vertices.push( new THREE.Vector3(19.852690, 7.855949, -9.493424) );
geometry.vertices.push( new THREE.Vector3(17.537209, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(21.758739, 4.369761, -6.760050) );
geometry.vertices.push( new THREE.Vector3(21.496990, 1.826894, -6.808013) );
geometry.vertices.push( new THREE.Vector3(21.065920, 1.544605, -2.176226) );
geometry.vertices.push( new THREE.Vector3(20.542120, 0.778315, -6.349725) );
geometry.vertices.push( new THREE.Vector3(19.267801, 0.678869, -9.787612) );
geometry.vertices.push( new THREE.Vector3(18.094311, 0.708516, -10.932751) );
geometry.vertices.push( new THREE.Vector3(16.979481, 0.668470, -11.425200) );
geometry.vertices.push( new THREE.Vector3(15.625010, 0.607431, -11.330400) );
geometry.vertices.push( new THREE.Vector3(0.404100, 93.779984, 1.536986) );
geometry.vertices.push( new THREE.Vector3(0.892605, 90.552376, -4.457250) );
geometry.vertices.push( new THREE.Vector3(0.795082, 87.220131, 0.634436) );
geometry.vertices.push( new THREE.Vector3(0.879128, 90.876373, 0.940673) );
geometry.vertices.push( new THREE.Vector3(0.838875, 92.223381, -4.486237) );
geometry.vertices.push( new THREE.Vector3(0.833704, 92.432617, 1.333931) );
geometry.vertices.push( new THREE.Vector3(0.866029, 93.691498, -4.151212) );
geometry.vertices.push( new THREE.Vector3(0.696401, 93.844498, 1.570860) );
geometry.vertices.push( new THREE.Vector3(0.502391, 94.614014, -3.834000) );
geometry.vertices.push( new THREE.Vector3(1.072174, 96.036758, -7.572375) );
geometry.vertices.push( new THREE.Vector3(1.804132, 94.934250, -7.722937) );
geometry.vertices.push( new THREE.Vector3(2.451761, 96.488998, -10.381910) );
geometry.vertices.push( new THREE.Vector3(2.872766, 95.215500, -9.585600) );
geometry.vertices.push( new THREE.Vector3(2.197987, 92.993248, -7.750013) );
geometry.vertices.push( new THREE.Vector3(2.246089, 90.722252, -7.825125) );
geometry.vertices.push( new THREE.Vector3(0.987754, 87.207001, -4.884450) );
geometry.vertices.push( new THREE.Vector3(5.365050, 97.966866, -12.758480) );
geometry.vertices.push( new THREE.Vector3(2.372486, 97.750870, -12.039081) );
geometry.vertices.push( new THREE.Vector3(4.874138, 95.721016, -11.334081) );
geometry.vertices.push( new THREE.Vector3(4.787137, 93.409500, -10.016250) );
geometry.vertices.push( new THREE.Vector3(4.863450, 90.868126, -9.781386) );
geometry.vertices.push( new THREE.Vector3(2.552355, 87.192001, -8.232900) );
geometry.vertices.push( new THREE.Vector3(1.657950, 82.680748, -4.971075) );
geometry.vertices.push( new THREE.Vector3(8.719163, 94.206749, -11.037070) );
geometry.vertices.push( new THREE.Vector3(8.730338, 91.291870, -10.843610) );
geometry.vertices.push( new THREE.Vector3(5.144775, 87.217499, -10.194820) );
geometry.vertices.push( new THREE.Vector3(2.983882, 82.716003, -7.995938) );
geometry.vertices.push( new THREE.Vector3(5.703188, 82.632370, -10.221640) );
geometry.vertices.push( new THREE.Vector3(8.972925, 87.124123, -11.137420) );
geometry.vertices.push( new THREE.Vector3(9.800776, 82.573494, -11.237289) );
geometry.vertices.push( new THREE.Vector3(13.638531, 87.184502, -10.694140) );
geometry.vertices.push( new THREE.Vector3(14.445371, 82.483490, -10.752900) );
geometry.vertices.push( new THREE.Vector3(12.818210, 91.709633, -10.222580) );
geometry.vertices.push( new THREE.Vector3(3.766987, 77.581131, -6.796950) );
geometry.vertices.push( new THREE.Vector3(6.485550, 77.511383, -9.789712) );
geometry.vertices.push( new THREE.Vector3(10.658290, 77.457748, -10.861880) );
geometry.vertices.push( new THREE.Vector3(14.973080, 77.504997, -10.265030) );
geometry.vertices.push( new THREE.Vector3(18.326700, 82.574615, -8.021175) );
geometry.vertices.push( new THREE.Vector3(18.600260, 77.477249, -7.444087) );
geometry.vertices.push( new THREE.Vector3(2.975186, 77.670372, -4.974450) );
geometry.vertices.push( new THREE.Vector3(4.630725, 72.974625, -5.080575) );
geometry.vertices.push( new THREE.Vector3(7.308337, 72.532501, -8.878987) );
geometry.vertices.push( new THREE.Vector3(11.116799, 72.628494, -10.012839) );
geometry.vertices.push( new THREE.Vector3(15.381861, 72.543755, -9.435976) );
geometry.vertices.push( new THREE.Vector3(18.841911, 72.205132, -6.791363) );
geometry.vertices.push( new THREE.Vector3(20.489771, 66.631500, -2.264854) );
geometry.vertices.push( new THREE.Vector3(21.561260, 72.153748, 1.094558) );
geometry.vertices.push( new THREE.Vector3(20.948250, 66.674629, 1.460816) );
geometry.vertices.push( new THREE.Vector3(20.785540, 72.175125, -2.822344) );
geometry.vertices.push( new THREE.Vector3(19.078159, 66.693001, -6.121800) );
geometry.vertices.push( new THREE.Vector3(15.857850, 66.865868, -8.784188) );
geometry.vertices.push( new THREE.Vector3(11.814070, 67.002747, -8.977725) );
geometry.vertices.push( new THREE.Vector3(8.272050, 66.992249, -7.676738) );
geometry.vertices.push( new THREE.Vector3(20.167839, 62.310738, -1.977686) );
geometry.vertices.push( new THREE.Vector3(20.036469, 62.222988, 1.819897) );
geometry.vertices.push( new THREE.Vector3(19.388659, 62.156998, -6.073387) );
geometry.vertices.push( new THREE.Vector3(16.221371, 62.231987, -8.077724) );
geometry.vertices.push( new THREE.Vector3(12.252669, 62.354248, -8.518237) );
geometry.vertices.push( new THREE.Vector3(8.735250, 62.267990, -6.525074) );
geometry.vertices.push( new THREE.Vector3(8.487300, 58.276867, -3.472354) );
geometry.vertices.push( new THREE.Vector3(7.786537, 62.321991, -3.534915) );
geometry.vertices.push( new THREE.Vector3(9.194138, 58.205627, -6.360113) );
geometry.vertices.push( new THREE.Vector3(12.555300, 58.588867, -8.204588) );
geometry.vertices.push( new THREE.Vector3(16.599300, 58.408119, -8.538787) );
geometry.vertices.push( new THREE.Vector3(19.704979, 58.363499, -6.172537) );
geometry.vertices.push( new THREE.Vector3(20.430340, 58.455372, -1.754002) );
geometry.vertices.push( new THREE.Vector3(20.808979, 54.924000, -1.853059) );
geometry.vertices.push( new THREE.Vector3(8.737164, 54.932247, -3.948637) );
geometry.vertices.push( new THREE.Vector3(9.480600, 54.825378, -6.946912) );
geometry.vertices.push( new THREE.Vector3(12.817579, 55.114132, -8.566125) );
geometry.vertices.push( new THREE.Vector3(16.804201, 55.079628, -8.614426) );
geometry.vertices.push( new THREE.Vector3(20.316339, 54.977631, -6.778350) );
geometry.vertices.push( new THREE.Vector3(21.333151, 51.279377, -3.188558) );
geometry.vertices.push( new THREE.Vector3(17.389950, 51.988117, -9.850463) );
geometry.vertices.push( new THREE.Vector3(20.969509, 51.772118, -7.537650) );
geometry.vertices.push( new THREE.Vector3(22.230150, 47.760750, -4.194825) );
geometry.vertices.push( new THREE.Vector3(21.237711, 47.645248, -0.388091) );
geometry.vertices.push( new THREE.Vector3(13.707680, 48.976498, -10.253401) );
geometry.vertices.push( new THREE.Vector3(17.799191, 49.339119, -10.854259) );
geometry.vertices.push( new THREE.Vector3(21.579260, 49.250252, -8.311575) );
geometry.vertices.push( new THREE.Vector3(22.237310, 45.894001, -9.139914) );
geometry.vertices.push( new THREE.Vector3(18.182329, 45.900749, -11.901299) );
geometry.vertices.push( new THREE.Vector3(13.943850, 45.666370, -11.465919) );
geometry.vertices.push( new THREE.Vector3(11.017840, 45.670502, -8.665763) );
geometry.vertices.push( new THREE.Vector3(13.995489, 42.057751, -12.681450) );
geometry.vertices.push( new THREE.Vector3(18.654980, 42.014252, -12.966490) );
geometry.vertices.push( new THREE.Vector3(22.982290, 42.277130, -9.760876) );
geometry.vertices.push( new THREE.Vector3(23.867699, 43.075871, -5.017725) );
geometry.vertices.push( new THREE.Vector3(9.205237, 51.274132, -1.221109) );
geometry.vertices.push( new THREE.Vector3(9.686550, 51.396370, -4.377000) );
geometry.vertices.push( new THREE.Vector3(10.702690, 46.939503, -2.041714) );
geometry.vertices.push( new THREE.Vector3(10.361930, 47.066250, -5.032913) );
geometry.vertices.push( new THREE.Vector3(10.066840, 42.904869, -2.702719) );
geometry.vertices.push( new THREE.Vector3(9.423712, 42.513000, -6.500400) );
geometry.vertices.push( new THREE.Vector3(10.537650, 42.164619, -9.849976) );
geometry.vertices.push( new THREE.Vector3(11.078590, 48.760872, -7.505812) );
geometry.vertices.push( new THREE.Vector3(10.349290, 51.469116, -7.130888) );
geometry.vertices.push( new THREE.Vector3(13.190959, 51.639004, -9.129225) );
geometry.vertices.push( new THREE.Vector3(6.627900, 67.131752, -4.331362) );
geometry.vertices.push( new THREE.Vector3(6.293437, 67.672119, -0.024522) );
geometry.vertices.push( new THREE.Vector3(6.675825, 62.071121, -0.395389) );
geometry.vertices.push( new THREE.Vector3(7.518975, 58.534496, -0.632689) );
geometry.vertices.push( new THREE.Vector3(8.160301, 56.765999, -0.679245) );
geometry.vertices.push( new THREE.Vector3(8.471925, 54.846752, -0.905186) );
geometry.vertices.push( new THREE.Vector3(4.557563, 72.561752, -0.759862) );
geometry.vertices.push( new THREE.Vector3(2.543186, 77.723625, -0.474195) );
geometry.vertices.push( new THREE.Vector3(1.441657, 82.485001, 0.127598) );
geometry.vertices.push( new THREE.Vector3(20.011429, 22.802059, -0.110922) );
geometry.vertices.push( new THREE.Vector3(18.347961, 18.610420, 0.699810) );
geometry.vertices.push( new THREE.Vector3(19.835590, 18.628839, -0.358368) );
geometry.vertices.push( new THREE.Vector3(18.200741, 22.793360, 0.857764) );
geometry.vertices.push( new THREE.Vector3(20.244040, 27.006859, 0.276345) );
geometry.vertices.push( new THREE.Vector3(18.301390, 27.081409, 1.375916) );
geometry.vertices.push( new THREE.Vector3(21.944290, 26.972250, -2.110643) );
geometry.vertices.push( new THREE.Vector3(16.768240, 18.623701, 0.776089) );
geometry.vertices.push( new THREE.Vector3(18.377140, 14.551650, 1.523970) );
geometry.vertices.push( new THREE.Vector3(20.242840, 14.178560, 0.213887) );
geometry.vertices.push( new THREE.Vector3(16.742811, 14.482090, 1.486110) );
geometry.vertices.push( new THREE.Vector3(21.215179, 14.272350, -2.289394) );
geometry.vertices.push( new THREE.Vector3(21.939001, 10.616210, -2.216708) );
geometry.vertices.push( new THREE.Vector3(21.380890, 9.997724, 1.930808) );
geometry.vertices.push( new THREE.Vector3(18.977890, 11.530760, 3.069686) );
geometry.vertices.push( new THREE.Vector3(16.917860, 11.503500, 3.404160) );
geometry.vertices.push( new THREE.Vector3(15.275290, 14.189360, 0.555847) );
geometry.vertices.push( new THREE.Vector3(15.257510, 18.592239, -0.266374) );
geometry.vertices.push( new THREE.Vector3(13.852760, 14.143459, -1.045481) );
geometry.vertices.push( new THREE.Vector3(15.216941, 9.519336, 2.520090) );
geometry.vertices.push( new THREE.Vector3(13.813991, 10.271140, -0.234552) );
geometry.vertices.push( new THREE.Vector3(12.552039, 10.840570, -2.667034) );
geometry.vertices.push( new THREE.Vector3(12.962060, 14.384170, -3.117518) );
geometry.vertices.push( new THREE.Vector3(12.209320, 11.035420, -5.134950) );
geometry.vertices.push( new THREE.Vector3(12.665621, 14.450620, -5.346300) );
geometry.vertices.push( new THREE.Vector3(13.336881, 11.036400, -7.799850) );
geometry.vertices.push( new THREE.Vector3(13.539000, 14.358370, -7.713713) );
geometry.vertices.push( new THREE.Vector3(14.028411, 14.339291, -9.858450) );
geometry.vertices.push( new THREE.Vector3(14.202259, 18.161661, -9.701288) );
geometry.vertices.push( new THREE.Vector3(15.685611, 18.155960, -11.002911) );
geometry.vertices.push( new THREE.Vector3(15.380810, 14.337860, -11.196489) );
geometry.vertices.push( new THREE.Vector3(13.783800, 11.073970, -10.261350) );
geometry.vertices.push( new THREE.Vector3(15.246530, 11.094490, -11.538560) );
geometry.vertices.push( new THREE.Vector3(17.537209, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(17.689949, 14.335010, -10.976060) );
geometry.vertices.push( new THREE.Vector3(17.997669, 18.142910, -10.787660) );
geometry.vertices.push( new THREE.Vector3(18.355501, 22.277481, -11.076261) );
geometry.vertices.push( new THREE.Vector3(15.973499, 22.237610, -11.423360) );
geometry.vertices.push( new THREE.Vector3(19.008041, 26.887459, -12.008591) );
geometry.vertices.push( new THREE.Vector3(14.251950, 22.213949, -10.377790) );
geometry.vertices.push( new THREE.Vector3(15.068100, 26.462061, -11.613340) );
geometry.vertices.push( new THREE.Vector3(14.626880, 30.688309, -12.938251) );
geometry.vertices.push( new THREE.Vector3(19.330799, 30.947289, -13.130180) );
geometry.vertices.push( new THREE.Vector3(14.416499, 34.600838, -13.549159) );
geometry.vertices.push( new THREE.Vector3(19.234240, 34.800449, -13.564570) );
geometry.vertices.push( new THREE.Vector3(18.927860, 38.685001, -13.505290) );
geometry.vertices.push( new THREE.Vector3(13.046400, 22.352360, -8.721750) );
geometry.vertices.push( new THREE.Vector3(13.510651, 18.186220, -8.064150) );
geometry.vertices.push( new THREE.Vector3(12.488770, 26.602089, -9.513937) );
geometry.vertices.push( new THREE.Vector3(11.353280, 30.858341, -10.376890) );
geometry.vertices.push( new THREE.Vector3(12.307731, 22.590599, -6.382425) );
geometry.vertices.push( new THREE.Vector3(12.807970, 18.329399, -5.845125) );
geometry.vertices.push( new THREE.Vector3(11.662880, 26.750031, -6.769424) );
geometry.vertices.push( new THREE.Vector3(12.526690, 22.706360, -4.049325) );
geometry.vertices.push( new THREE.Vector3(13.093580, 18.413960, -3.676395) );
geometry.vertices.push( new THREE.Vector3(13.565999, 22.715660, -1.888354) );
geometry.vertices.push( new THREE.Vector3(13.940620, 18.477409, -1.628310) );
geometry.vertices.push( new THREE.Vector3(14.979230, 22.798691, -0.373893) );
geometry.vertices.push( new THREE.Vector3(16.585501, 22.824039, 0.815513) );
geometry.vertices.push( new THREE.Vector3(14.727150, 26.985449, -0.146344) );
geometry.vertices.push( new THREE.Vector3(12.955050, 26.894701, -1.853186) );
geometry.vertices.push( new THREE.Vector3(11.959760, 26.928600, -4.202475) );
geometry.vertices.push( new THREE.Vector3(10.039420, 30.939638, -6.887588) );
geometry.vertices.push( new THREE.Vector3(10.710640, 31.167259, -3.924788) );
geometry.vertices.push( new THREE.Vector3(12.064390, 31.281599, -1.368833) );
geometry.vertices.push( new THREE.Vector3(14.394410, 31.473000, 0.271595) );
geometry.vertices.push( new THREE.Vector3(16.455641, 27.103239, 1.249039) );
geometry.vertices.push( new THREE.Vector3(20.670040, 31.674450, 0.733620) );
geometry.vertices.push( new THREE.Vector3(18.216558, 31.718592, 2.138633) );
geometry.vertices.push( new THREE.Vector3(16.068600, 31.588539, 1.650600) );
geometry.vertices.push( new THREE.Vector3(14.906179, 35.912930, 1.490437) );
geometry.vertices.push( new THREE.Vector3(11.493860, 35.674431, -0.504352) );
geometry.vertices.push( new THREE.Vector3(9.870037, 35.352711, -3.407227) );
geometry.vertices.push( new THREE.Vector3(9.136275, 35.084511, -6.847462) );
geometry.vertices.push( new THREE.Vector3(10.601550, 34.795990, -10.626110) );
geometry.vertices.push( new THREE.Vector3(14.126960, 38.585621, -13.355809) );
geometry.vertices.push( new THREE.Vector3(10.576690, 38.751751, -10.270910) );
geometry.vertices.push( new THREE.Vector3(9.017250, 39.046867, -6.642938) );
geometry.vertices.push( new THREE.Vector3(9.654037, 39.349499, -3.123142) );
geometry.vertices.push( new THREE.Vector3(11.496409, 39.721130, -0.051217) );
geometry.vertices.push( new THREE.Vector3(18.654980, 42.014252, -12.966490) );
geometry.vertices.push( new THREE.Vector3(13.995489, 42.057751, -12.681450) );
geometry.vertices.push( new THREE.Vector3(10.537650, 42.164619, -9.849976) );
geometry.vertices.push( new THREE.Vector3(9.423712, 42.513000, -6.500400) );
geometry.vertices.push( new THREE.Vector3(10.066840, 42.904869, -2.702719) );
geometry.vertices.push( new THREE.Vector3(14.536799, 40.150120, 2.166262) );
geometry.vertices.push( new THREE.Vector3(17.894251, 36.237450, 2.807963) );
geometry.vertices.push( new THREE.Vector3(17.690399, 40.168121, 2.808431) );
geometry.vertices.push( new THREE.Vector3(20.643148, 40.167747, 1.634719) );
geometry.vertices.push( new THREE.Vector3(20.943411, 35.955639, 1.205111) );
geometry.vertices.push( new THREE.Vector3(22.898890, 39.862122, -1.205910) );
geometry.vertices.push( new THREE.Vector3(23.016340, 35.707008, -1.260694) );
geometry.vertices.push( new THREE.Vector3(24.555670, 39.419998, -5.137350) );
geometry.vertices.push( new THREE.Vector3(24.532160, 35.348660, -5.138100) );
geometry.vertices.push( new THREE.Vector3(22.618540, 31.518518, -1.607021) );
geometry.vertices.push( new THREE.Vector3(23.834320, 31.341219, -5.036475) );
geometry.vertices.push( new THREE.Vector3(23.293240, 38.872501, -10.094210) );
geometry.vertices.push( new THREE.Vector3(23.314270, 34.992641, -10.019700) );
geometry.vertices.push( new THREE.Vector3(23.016340, 31.303612, -9.665138) );
geometry.vertices.push( new THREE.Vector3(22.159199, 27.028269, -8.900738) );
geometry.vertices.push( new THREE.Vector3(22.879461, 26.962610, -5.078175) );
geometry.vertices.push( new THREE.Vector3(23.867699, 43.075871, -5.017725) );
geometry.vertices.push( new THREE.Vector3(22.982290, 42.277130, -9.760876) );
geometry.vertices.push( new THREE.Vector3(18.654980, 42.014252, -12.966490) );
geometry.vertices.push( new THREE.Vector3(18.927860, 38.685001, -13.505290) );
geometry.vertices.push( new THREE.Vector3(19.234240, 34.800449, -13.564570) );
geometry.vertices.push( new THREE.Vector3(19.330799, 30.947289, -13.130180) );
geometry.vertices.push( new THREE.Vector3(19.008041, 26.887459, -12.008591) );
geometry.vertices.push( new THREE.Vector3(21.242100, 22.461040, -8.481825) );
geometry.vertices.push( new THREE.Vector3(22.185301, 22.691099, -5.006475) );
geometry.vertices.push( new THREE.Vector3(21.402670, 22.814140, -2.500091) );
geometry.vertices.push( new THREE.Vector3(20.970491, 18.535990, -2.301442) );
geometry.vertices.push( new THREE.Vector3(21.742840, 18.472309, -5.212800) );
geometry.vertices.push( new THREE.Vector3(17.689949, 14.335010, -10.976060) );
geometry.vertices.push( new THREE.Vector3(19.873310, 10.618239, -8.989087) );
geometry.vertices.push( new THREE.Vector3(17.537209, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(20.158461, 14.300209, -8.593537) );
geometry.vertices.push( new THREE.Vector3(22.326710, 10.530971, -6.162600) );
geometry.vertices.push( new THREE.Vector3(21.559160, 14.388490, -5.453062) );
geometry.vertices.push( new THREE.Vector3(20.545431, 18.128620, -8.250862) );
geometry.vertices.push( new THREE.Vector3(18.355501, 22.277481, -11.076261) );
geometry.vertices.push( new THREE.Vector3(17.997669, 18.142910, -10.787660) );
geometry.vertices.push( new THREE.Vector3(18.469351, 103.869400, 1.412456) );
geometry.vertices.push( new THREE.Vector3(17.253790, 106.587006, -3.225206) );
geometry.vertices.push( new THREE.Vector3(18.069260, 106.266403, 1.366219) );
geometry.vertices.push( new THREE.Vector3(16.462870, 109.895599, -3.453491) );
geometry.vertices.push( new THREE.Vector3(17.227989, 109.433998, 1.012553) );
geometry.vertices.push( new THREE.Vector3(16.980261, 106.170403, 5.419163) );
geometry.vertices.push( new THREE.Vector3(17.344570, 103.948502, 5.460750) );
geometry.vertices.push( new THREE.Vector3(17.444321, 102.515999, 5.505675) );
geometry.vertices.push( new THREE.Vector3(9.237489, 117.138000, -8.220075) );
geometry.vertices.push( new THREE.Vector3(12.918900, 113.920906, -7.519425) );
geometry.vertices.push( new THREE.Vector3(10.349140, 114.250900, -9.884850) );
geometry.vertices.push( new THREE.Vector3(14.292790, 110.261597, -7.852275) );
geometry.vertices.push( new THREE.Vector3(15.188210, 113.373695, -3.778388) );
geometry.vertices.push( new THREE.Vector3(16.024090, 112.752701, 0.276058) );
geometry.vertices.push( new THREE.Vector3(16.461710, 109.032402, 5.088675) );
geometry.vertices.push( new THREE.Vector3(14.638950, 105.842194, 8.535638) );
geometry.vertices.push( new THREE.Vector3(15.650620, 115.884804, 0.589984) );
geometry.vertices.push( new THREE.Vector3(14.706600, 116.427696, -3.265380) );
geometry.vertices.push( new THREE.Vector3(12.274540, 116.882301, -6.347625) );
geometry.vertices.push( new THREE.Vector3(15.474300, 112.138107, 4.423050) );
geometry.vertices.push( new THREE.Vector3(14.965540, 115.296700, 4.842713) );
geometry.vertices.push( new THREE.Vector3(14.152729, 108.599197, 8.477212) );
geometry.vertices.push( new THREE.Vector3(13.374490, 111.455597, 8.178787) );
geometry.vertices.push( new THREE.Vector3(13.247400, 114.566597, 8.642925) );
geometry.vertices.push( new THREE.Vector3(10.738050, 111.018005, 10.100440) );
geometry.vertices.push( new THREE.Vector3(11.290090, 108.171700, 10.083940) );
geometry.vertices.push( new THREE.Vector3(10.453580, 114.131996, 10.562100) );
geometry.vertices.push( new THREE.Vector3(15.175690, 102.035606, 8.710727) );
geometry.vertices.push( new THREE.Vector3(12.089960, 102.848991, 10.107410) );
geometry.vertices.push( new THREE.Vector3(12.423380, 100.970993, 9.724575) );
geometry.vertices.push( new THREE.Vector3(14.909551, 103.571609, 8.691113) );
geometry.vertices.push( new THREE.Vector3(11.816770, 105.555405, 10.098710) );
geometry.vertices.push( new THREE.Vector3(15.724720, 99.944252, 8.674125) );
geometry.vertices.push( new THREE.Vector3(12.697909, 99.383621, 9.972525) );
geometry.vertices.push( new THREE.Vector3(9.812551, 99.598495, 9.937313) );
geometry.vertices.push( new THREE.Vector3(9.866625, 98.616371, 9.991763) );
geometry.vertices.push( new THREE.Vector3(6.110475, 97.358253, 8.480776) );
geometry.vertices.push( new THREE.Vector3(9.954901, 95.234993, 10.526740) );
geometry.vertices.push( new THREE.Vector3(10.953939, 87.334129, 11.625080) );
geometry.vertices.push( new THREE.Vector3(13.869260, 92.388382, 11.092650) );
geometry.vertices.push( new THREE.Vector3(10.408050, 91.921135, 11.255780) );
geometry.vertices.push( new THREE.Vector3(13.331211, 96.036758, 10.628961) );
geometry.vertices.push( new THREE.Vector3(16.488340, 96.452248, 9.004200) );
geometry.vertices.push( new THREE.Vector3(18.065550, 100.198494, 5.445750) );
geometry.vertices.push( new THREE.Vector3(18.374100, 102.338600, 1.402140) );
geometry.vertices.push( new THREE.Vector3(17.336660, 92.539505, 8.935125) );
geometry.vertices.push( new THREE.Vector3(18.926291, 96.822754, 5.492063) );
geometry.vertices.push( new THREE.Vector3(18.962330, 100.122406, 1.285215) );
geometry.vertices.push( new THREE.Vector3(17.498890, 102.062202, -3.121177) );
geometry.vertices.push( new THREE.Vector3(17.679340, 103.708900, -3.211455) );
geometry.vertices.push( new THREE.Vector3(15.463760, 102.334908, -7.952213) );
geometry.vertices.push( new THREE.Vector3(15.387639, 103.663895, -7.904400) );
geometry.vertices.push( new THREE.Vector3(12.835119, 103.449402, -11.579021) );
geometry.vertices.push( new THREE.Vector3(12.623620, 106.812706, -11.384920) );
geometry.vertices.push( new THREE.Vector3(15.129490, 101.353096, -7.547138) );
geometry.vertices.push( new THREE.Vector3(12.641891, 101.321602, -11.310300) );
geometry.vertices.push( new THREE.Vector3(15.145050, 106.793198, -7.877888) );
geometry.vertices.push( new THREE.Vector3(11.821650, 110.500099, -10.816090) );
geometry.vertices.push( new THREE.Vector3(7.988101, 110.666298, -13.113640) );
geometry.vertices.push( new THREE.Vector3(12.489670, 99.741379, -10.582459) );
geometry.vertices.push( new THREE.Vector3(8.928187, 100.566010, -13.411691) );
geometry.vertices.push( new THREE.Vector3(9.108488, 103.214203, -14.162511) );
geometry.vertices.push( new THREE.Vector3(8.871788, 106.657501, -14.156030) );
geometry.vertices.push( new THREE.Vector3(8.766000, 98.707878, -12.501981) );
geometry.vertices.push( new THREE.Vector3(5.583712, 106.335701, -15.228860) );
geometry.vertices.push( new THREE.Vector3(5.603138, 102.782997, -15.179400) );
geometry.vertices.push( new THREE.Vector3(5.491088, 100.038399, -14.295600) );
geometry.vertices.push( new THREE.Vector3(3.394560, 114.634499, -12.173590) );
geometry.vertices.push( new THREE.Vector3(6.304050, 114.583099, -11.623840) );
geometry.vertices.push( new THREE.Vector3(4.099163, 110.683098, -14.107651) );
geometry.vertices.push( new THREE.Vector3(2.813951, 106.270897, -15.129410) );
geometry.vertices.push( new THREE.Vector3(2.319889, 102.699402, -14.780210) );
geometry.vertices.push( new THREE.Vector3(2.382142, 100.116394, -13.724589) );
geometry.vertices.push( new THREE.Vector3(2.964754, 117.397903, -11.183470) );
geometry.vertices.push( new THREE.Vector3(5.443200, 117.349503, -10.170970) );
geometry.vertices.push( new THREE.Vector3(11.943710, 43.288128, 0.205517) );
geometry.vertices.push( new THREE.Vector3(10.702690, 46.939503, -2.041714) );
geometry.vertices.push( new THREE.Vector3(10.066840, 42.904869, -2.702719) );
geometry.vertices.push( new THREE.Vector3(11.955600, 47.042252, 1.112453) );
geometry.vertices.push( new THREE.Vector3(9.205237, 51.274132, -1.221109) );
geometry.vertices.push( new THREE.Vector3(14.245910, 43.618877, 2.670645) );
geometry.vertices.push( new THREE.Vector3(13.871481, 47.224133, 2.974613) );
geometry.vertices.push( new THREE.Vector3(10.950820, 51.280880, 2.278230) );
geometry.vertices.push( new THREE.Vector3(10.736620, 54.632252, 2.564228) );
geometry.vertices.push( new THREE.Vector3(8.471925, 54.846752, -0.905186) );
geometry.vertices.push( new THREE.Vector3(8.160301, 56.765999, -0.679245) );
geometry.vertices.push( new THREE.Vector3(9.679276, 56.849998, 3.882037) );
geometry.vertices.push( new THREE.Vector3(11.804811, 54.875618, 4.494075) );
geometry.vertices.push( new THREE.Vector3(11.390480, 56.919746, 4.898437) );
geometry.vertices.push( new THREE.Vector3(13.527340, 54.993748, 6.017587) );
geometry.vertices.push( new THREE.Vector3(13.250250, 56.763371, 6.504075) );
geometry.vertices.push( new THREE.Vector3(11.099890, 58.806374, 5.511150) );
geometry.vertices.push( new THREE.Vector3(14.267739, 53.073383, 5.727863) );
geometry.vertices.push( new THREE.Vector3(13.107901, 51.204002, 3.880875) );
geometry.vertices.push( new THREE.Vector3(15.777640, 51.136883, 4.867650) );
geometry.vertices.push( new THREE.Vector3(12.105970, 72.064880, 9.409425) );
geometry.vertices.push( new THREE.Vector3(8.661037, 77.130005, 8.952037) );
geometry.vertices.push( new THREE.Vector3(9.356850, 71.961365, 7.983075) );
geometry.vertices.push( new THREE.Vector3(12.459080, 66.794998, 7.564313) );
geometry.vertices.push( new THREE.Vector3(10.071040, 66.721115, 7.165800) );
geometry.vertices.push( new THREE.Vector3(10.654310, 61.971748, 6.597188) );
geometry.vertices.push( new THREE.Vector3(7.981762, 61.828117, 5.028750) );
geometry.vertices.push( new THREE.Vector3(9.010987, 58.577633, 4.345388) );
geometry.vertices.push( new THREE.Vector3(7.406436, 58.345127, 1.125442) );
geometry.vertices.push( new THREE.Vector3(6.424650, 61.928242, 1.814160) );
geometry.vertices.push( new THREE.Vector3(7.518975, 58.534496, -0.632689) );
geometry.vertices.push( new THREE.Vector3(6.675825, 62.071121, -0.395389) );
geometry.vertices.push( new THREE.Vector3(5.911238, 67.058250, 2.715135) );
geometry.vertices.push( new THREE.Vector3(7.252087, 66.599632, 5.942813) );
geometry.vertices.push( new THREE.Vector3(6.837225, 71.911118, 6.440663) );
geometry.vertices.push( new THREE.Vector3(3.063338, 81.939384, 3.841875) );
geometry.vertices.push( new THREE.Vector3(2.543186, 77.723625, -0.474195) );
geometry.vertices.push( new THREE.Vector3(4.125000, 77.367371, 3.030506) );
geometry.vertices.push( new THREE.Vector3(4.557563, 72.561752, -0.759862) );
geometry.vertices.push( new THREE.Vector3(5.871487, 72.181114, 3.398389) );
geometry.vertices.push( new THREE.Vector3(6.293437, 67.672119, -0.024522) );
geometry.vertices.push( new THREE.Vector3(4.658363, 90.918365, 6.922350) );
geometry.vertices.push( new THREE.Vector3(2.245699, 92.759995, 4.862924) );
geometry.vertices.push( new THREE.Vector3(2.346386, 90.777000, 4.658025) );
geometry.vertices.push( new THREE.Vector3(4.904100, 86.907738, 6.811950) );
geometry.vertices.push( new THREE.Vector3(2.292180, 86.953125, 4.323787) );
geometry.vertices.push( new THREE.Vector3(5.523300, 82.310631, 6.513638) );
geometry.vertices.push( new THREE.Vector3(6.364388, 77.358002, 6.198150) );
geometry.vertices.push( new THREE.Vector3(7.878300, 82.120872, 9.589499) );
geometry.vertices.push( new THREE.Vector3(7.390837, 86.950119, 9.604688) );
geometry.vertices.push( new THREE.Vector3(7.239075, 91.329376, 9.080550) );
geometry.vertices.push( new THREE.Vector3(4.439288, 93.150749, 7.132050) );
geometry.vertices.push( new THREE.Vector3(2.801340, 95.170502, 6.574088) );
geometry.vertices.push( new THREE.Vector3(6.907275, 94.370255, 8.755800) );
geometry.vertices.push( new THREE.Vector3(3.988350, 95.913368, 7.653037) );
geometry.vertices.push( new THREE.Vector3(11.221990, 82.406631, 11.356430) );
geometry.vertices.push( new THREE.Vector3(11.533501, 77.365120, 10.645460) );
geometry.vertices.push( new THREE.Vector3(14.710240, 72.187500, 9.262575) );
geometry.vertices.push( new THREE.Vector3(18.546789, 77.479881, 8.287688) );
geometry.vertices.push( new THREE.Vector3(14.814641, 77.492615, 10.142400) );
geometry.vertices.push( new THREE.Vector3(14.832041, 82.682625, 10.955400) );
geometry.vertices.push( new THREE.Vector3(14.580260, 87.614998, 11.387959) );
geometry.vertices.push( new THREE.Vector3(21.041700, 77.463753, 4.650187) );
geometry.vertices.push( new THREE.Vector3(21.758060, 82.799988, 0.376009) );
geometry.vertices.push( new THREE.Vector3(21.279940, 82.789116, 5.030888) );
geometry.vertices.push( new THREE.Vector3(18.596510, 82.686005, 8.675100) );
geometry.vertices.push( new THREE.Vector3(20.820341, 82.679626, -3.746385) );
geometry.vertices.push( new THREE.Vector3(20.934299, 77.348633, -3.285945) );
geometry.vertices.push( new THREE.Vector3(21.805201, 77.430000, 0.596449) );
geometry.vertices.push( new THREE.Vector3(20.527910, 72.147751, 4.404300) );
geometry.vertices.push( new THREE.Vector3(17.968311, 72.157501, 7.698262) );
geometry.vertices.push( new THREE.Vector3(14.711590, 59.959881, 6.225337) );
geometry.vertices.push( new THREE.Vector3(12.572511, 62.126987, 6.573562) );
geometry.vertices.push( new THREE.Vector3(12.757160, 59.144997, 6.134700) );
geometry.vertices.push( new THREE.Vector3(14.606290, 62.239120, 6.163162) );
geometry.vertices.push( new THREE.Vector3(16.662970, 62.228619, 5.841487) );
geometry.vertices.push( new THREE.Vector3(14.666250, 66.833626, 7.598661) );
geometry.vertices.push( new THREE.Vector3(17.317650, 66.887619, 6.745163) );
geometry.vertices.push( new THREE.Vector3(19.395340, 66.810379, 4.325438) );
geometry.vertices.push( new THREE.Vector3(15.138149, 56.959869, 6.705263) );
geometry.vertices.push( new THREE.Vector3(16.725679, 59.600250, 5.623500) );
geometry.vertices.push( new THREE.Vector3(18.487720, 62.279617, 4.355512) );
geometry.vertices.push( new THREE.Vector3(15.318380, 55.094997, 6.202388) );
geometry.vertices.push( new THREE.Vector3(16.954119, 57.103878, 5.967375) );
geometry.vertices.push( new THREE.Vector3(18.026289, 59.026867, 3.907087) );
geometry.vertices.push( new THREE.Vector3(19.482750, 58.733250, 1.886752) );
geometry.vertices.push( new THREE.Vector3(19.699430, 56.989872, 1.657849) );
geometry.vertices.push( new THREE.Vector3(18.056400, 57.108002, 3.701786) );
geometry.vertices.push( new THREE.Vector3(18.322050, 55.348866, 3.459495) );
geometry.vertices.push( new THREE.Vector3(16.889099, 55.314751, 5.436300) );
geometry.vertices.push( new THREE.Vector3(16.828390, 53.211750, 5.219437) );
geometry.vertices.push( new THREE.Vector3(15.578850, 53.071129, 5.685113) );
geometry.vertices.push( new THREE.Vector3(19.802401, 55.021130, 1.317641) );
geometry.vertices.push( new THREE.Vector3(18.621531, 51.368618, 2.482275) );
geometry.vertices.push( new THREE.Vector3(20.098349, 51.285751, 0.331248) );
geometry.vertices.push( new THREE.Vector3(19.213610, 47.591621, 2.130686) );
geometry.vertices.push( new THREE.Vector3(16.273500, 47.506123, 4.000425) );
geometry.vertices.push( new THREE.Vector3(22.290380, 43.657131, -0.978529) );
geometry.vertices.push( new THREE.Vector3(20.111809, 43.911369, 2.085653) );
geometry.vertices.push( new THREE.Vector3(16.997330, 43.904999, 3.339304) );
geometry.vertices.push( new THREE.Vector3(-0.000017, 118.069504, 2.382019) );
geometry.vertices.push( new THREE.Vector3(2.964754, 117.397903, -11.183470) );
geometry.vertices.push( new THREE.Vector3(0.000029, 117.272995, -11.282590) );
geometry.vertices.push( new THREE.Vector3(5.443200, 117.349503, -10.170970) );
geometry.vertices.push( new THREE.Vector3(9.237489, 117.138000, -8.220075) );
geometry.vertices.push( new THREE.Vector3(12.274540, 116.882301, -6.347625) );
geometry.vertices.push( new THREE.Vector3(14.706600, 116.427696, -3.265380) );
geometry.vertices.push( new THREE.Vector3(15.650620, 115.884804, 0.589984) );
geometry.vertices.push( new THREE.Vector3(14.965540, 115.296700, 4.842713) );
geometry.vertices.push( new THREE.Vector3(13.247400, 114.566597, 8.642925) );
geometry.vertices.push( new THREE.Vector3(10.453580, 114.131996, 10.562100) );
geometry.vertices.push( new THREE.Vector3(8.071087, 113.964699, 11.645060) );
geometry.vertices.push( new THREE.Vector3(5.333437, 113.851097, 12.522639) );
geometry.vertices.push( new THREE.Vector3(2.417186, 113.874397, 12.583540) );
geometry.vertices.push( new THREE.Vector3(-0.000052, 113.746902, 12.716810) );
geometry.vertices.push( new THREE.Vector3(16.735800, 92.106003, -7.362450) );
geometry.vertices.push( new THREE.Vector3(20.179501, 87.659622, -3.654240) );
geometry.vertices.push( new THREE.Vector3(17.631260, 87.439499, -7.846125) );
geometry.vertices.push( new THREE.Vector3(8.833237, 96.499504, -11.819620) );
geometry.vertices.push( new THREE.Vector3(12.540820, 94.867126, -10.111010) );
geometry.vertices.push( new THREE.Vector3(17.971649, 99.660370, -3.182453) );
geometry.vertices.push( new THREE.Vector3(20.014420, 96.660385, 1.143915) );
geometry.vertices.push( new THREE.Vector3(18.700951, 96.421501, -3.270011) );
geometry.vertices.push( new THREE.Vector3(15.377630, 99.064514, -7.630050) );
geometry.vertices.push( new THREE.Vector3(15.234940, 99.987755, -7.666463) );
geometry.vertices.push( new THREE.Vector3(12.357520, 97.780136, -10.519800) );
geometry.vertices.push( new THREE.Vector3(16.001139, 95.620499, -7.401299) );
geometry.vertices.push( new THREE.Vector3(19.447241, 92.506866, -3.408341) );
geometry.vertices.push( new THREE.Vector3(20.698009, 92.685745, 0.826493) );
geometry.vertices.push( new THREE.Vector3(19.871401, 92.657631, 5.474100) );
geometry.vertices.push( new THREE.Vector3(21.322689, 87.957748, 0.552296) );
geometry.vertices.push( new THREE.Vector3(20.720661, 88.080750, 5.419275) );
geometry.vertices.push( new THREE.Vector3(18.118130, 87.908630, 8.883113) );
geometry.vertices.push( new THREE.Vector3(9.141600, 101.262405, 10.234570) );
geometry.vertices.push( new THREE.Vector3(12.423380, 100.970993, 9.724575) );
geometry.vertices.push( new THREE.Vector3(12.089960, 102.848991, 10.107410) );
geometry.vertices.push( new THREE.Vector3(9.812551, 99.598495, 9.937313) );
geometry.vertices.push( new THREE.Vector3(8.551049, 105.162704, 10.693840) );
geometry.vertices.push( new THREE.Vector3(11.816770, 105.555405, 10.098710) );
geometry.vertices.push( new THREE.Vector3(8.733300, 102.392998, 10.498390) );
geometry.vertices.push( new THREE.Vector3(7.241738, 100.606895, 10.115550) );
geometry.vertices.push( new THREE.Vector3(5.343825, 97.739250, 9.014214) );
geometry.vertices.push( new THREE.Vector3(6.110475, 97.358253, 8.480776) );
geometry.vertices.push( new THREE.Vector3(3.988350, 95.913368, 7.653037) );
geometry.vertices.push( new THREE.Vector3(5.197012, 110.551498, 11.893950) );
geometry.vertices.push( new THREE.Vector3(8.327363, 107.913002, 10.855800) );
geometry.vertices.push( new THREE.Vector3(8.198850, 110.833099, 11.090660) );
geometry.vertices.push( new THREE.Vector3(5.351437, 107.667801, 11.576850) );
geometry.vertices.push( new THREE.Vector3(5.429100, 104.848099, 11.289820) );
geometry.vertices.push( new THREE.Vector3(5.493375, 102.127098, 11.145260) );
geometry.vertices.push( new THREE.Vector3(4.605375, 99.037865, 10.784100) );
geometry.vertices.push( new THREE.Vector3(2.506631, 101.908897, 12.202800) );
geometry.vertices.push( new THREE.Vector3(2.429651, 104.736397, 12.182210) );
geometry.vertices.push( new THREE.Vector3(2.310979, 107.701096, 12.197140) );
geometry.vertices.push( new THREE.Vector3(3.045926, 96.091873, 8.596388) );
geometry.vertices.push( new THREE.Vector3(3.719175, 97.106247, 9.536700) );
geometry.vertices.push( new THREE.Vector3(2.263095, 98.800865, 11.645320) );
geometry.vertices.push( new THREE.Vector3(2.325776, 110.675598, 12.348230) );
geometry.vertices.push( new THREE.Vector3(5.333437, 113.851097, 12.522639) );
geometry.vertices.push( new THREE.Vector3(2.417186, 113.874397, 12.583540) );
geometry.vertices.push( new THREE.Vector3(8.071087, 113.964699, 11.645060) );
geometry.vertices.push( new THREE.Vector3(10.453580, 114.131996, 10.562100) );
geometry.vertices.push( new THREE.Vector3(10.738050, 111.018005, 10.100440) );
geometry.vertices.push( new THREE.Vector3(11.290090, 108.171700, 10.083940) );
geometry.vertices.push( new THREE.Vector3(1.265996, 95.105621, 8.038161) );
geometry.vertices.push( new THREE.Vector3(2.176380, 95.242867, 7.173488) );
geometry.vertices.push( new THREE.Vector3(0.575824, 94.095383, 5.178600) );
geometry.vertices.push( new THREE.Vector3(1.376914, 94.822121, 4.738200) );
geometry.vertices.push( new THREE.Vector3(0.404100, 93.779984, 1.536986) );
geometry.vertices.push( new THREE.Vector3(0.696401, 93.844498, 1.570860) );
geometry.vertices.push( new THREE.Vector3(1.837601, 94.399117, 4.975650) );
geometry.vertices.push( new THREE.Vector3(2.801340, 95.170502, 6.574088) );
geometry.vertices.push( new THREE.Vector3(1.582200, 95.985374, 9.308062) );
geometry.vertices.push( new THREE.Vector3(1.906451, 96.969376, 10.387500) );
geometry.vertices.push( new THREE.Vector3(-15.246560, 11.094490, -11.538560) );
geometry.vertices.push( new THREE.Vector3(-17.279591, 8.016075, -12.695021) );
geometry.vertices.push( new THREE.Vector3(-17.537251, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(-13.353559, 7.928625, -10.954310) );
geometry.vertices.push( new THREE.Vector3(-13.783839, 11.073979, -10.261350) );
geometry.vertices.push( new THREE.Vector3(-14.903590, 7.956187, -12.544690) );
geometry.vertices.push( new THREE.Vector3(-17.081400, 4.659412, -13.392671) );
geometry.vertices.push( new THREE.Vector3(-14.531400, 4.628738, -13.152111) );
geometry.vertices.push( new THREE.Vector3(-16.570200, 1.724494, -13.195049) );
geometry.vertices.push( new THREE.Vector3(-14.752500, 1.616663, -12.685349) );
geometry.vertices.push( new THREE.Vector3(-15.625010, 0.607448, -11.330400) );
geometry.vertices.push( new THREE.Vector3(-14.681700, 0.541748, -10.664209) );
geometry.vertices.push( new THREE.Vector3(-13.219839, 1.522920, -10.946060) );
geometry.vertices.push( new THREE.Vector3(-12.737550, 7.497750, -5.300737) );
geometry.vertices.push( new THREE.Vector3(-12.241719, 4.728375, -8.337675) );
geometry.vertices.push( new THREE.Vector3(-12.945109, 7.773375, -7.972462) );
geometry.vertices.push( new THREE.Vector3(-12.999600, 4.615425, -11.113689) );
geometry.vertices.push( new THREE.Vector3(-12.412570, 1.843463, -7.997175) );
geometry.vertices.push( new THREE.Vector3(-12.453560, 4.451325, -5.032762) );
geometry.vertices.push( new THREE.Vector3(-13.355060, 7.485637, -2.657344) );
geometry.vertices.push( new THREE.Vector3(-13.561871, 4.459650, -2.238521) );
geometry.vertices.push( new THREE.Vector3(-14.091490, 7.245113, 0.045618) );
geometry.vertices.push( new THREE.Vector3(-12.838910, 2.005781, -4.502963) );
geometry.vertices.push( new THREE.Vector3(-13.671370, 0.535526, -9.099000) );
geometry.vertices.push( new THREE.Vector3(-13.217141, 0.546994, -7.558950) );
geometry.vertices.push( new THREE.Vector3(-13.857940, 0.785722, -4.274025) );
geometry.vertices.push( new THREE.Vector3(-14.062500, 2.185474, -1.697779) );
geometry.vertices.push( new THREE.Vector3(-14.189661, 3.886575, 0.670624) );
geometry.vertices.push( new THREE.Vector3(-15.497440, 0.704951, 13.830339) );
geometry.vertices.push( new THREE.Vector3(-14.193110, 1.911915, 10.721210) );
geometry.vertices.push( new THREE.Vector3(-15.265800, 1.951132, 14.078959) );
geometry.vertices.push( new THREE.Vector3(-14.327100, 3.453334, 10.849461) );
geometry.vertices.push( new THREE.Vector3(-13.943399, 2.136244, 7.298400) );
geometry.vertices.push( new THREE.Vector3(-14.067709, 3.005370, 3.868987) );
geometry.vertices.push( new THREE.Vector3(-14.636021, 2.104181, 0.845704) );
geometry.vertices.push( new THREE.Vector3(-14.697340, 1.196974, -1.560495) );
geometry.vertices.push( new THREE.Vector3(-17.208750, 0.443557, 15.882000) );
geometry.vertices.push( new THREE.Vector3(-15.999190, 0.214227, 13.606090) );
geometry.vertices.push( new THREE.Vector3(-14.669700, 0.546232, 10.670031) );
geometry.vertices.push( new THREE.Vector3(-14.350160, 0.695753, 7.279612) );
geometry.vertices.push( new THREE.Vector3(-14.508750, 1.274681, 4.013737) );
geometry.vertices.push( new THREE.Vector3(-15.308321, 1.274921, 1.024733) );
geometry.vertices.push( new THREE.Vector3(-15.185361, 0.570840, 3.918450) );
geometry.vertices.push( new THREE.Vector3(-14.972589, -0.029157, 7.100400) );
geometry.vertices.push( new THREE.Vector3(-15.155360, 0.006303, 10.542600) );
geometry.vertices.push( new THREE.Vector3(-11.662880, 26.750031, -6.769424) );
geometry.vertices.push( new THREE.Vector3(-12.526690, 22.706360, -4.049325) );
geometry.vertices.push( new THREE.Vector3(-12.307731, 22.590599, -6.382387) );
geometry.vertices.push( new THREE.Vector3(-13.940620, 18.477409, -1.628310) );
geometry.vertices.push( new THREE.Vector3(-14.979259, 22.798691, -0.373893) );
geometry.vertices.push( new THREE.Vector3(-15.257510, 18.592239, -0.266376) );
geometry.vertices.push( new THREE.Vector3(-13.566039, 22.715660, -1.888354) );
geometry.vertices.push( new THREE.Vector3(-13.093580, 18.413960, -3.676395) );
geometry.vertices.push( new THREE.Vector3(-12.807970, 18.329399, -5.845125) );
geometry.vertices.push( new THREE.Vector3(-13.046400, 22.352360, -8.721750) );
geometry.vertices.push( new THREE.Vector3(-12.488770, 26.602051, -9.513937) );
geometry.vertices.push( new THREE.Vector3(-11.353280, 30.858299, -10.376890) );
geometry.vertices.push( new THREE.Vector3(-13.510651, 18.186192, -8.064150) );
geometry.vertices.push( new THREE.Vector3(-13.852760, 14.143459, -1.045485) );
geometry.vertices.push( new THREE.Vector3(-15.275290, 14.189360, 0.555844) );
geometry.vertices.push( new THREE.Vector3(-12.962060, 14.384170, -3.117518) );
geometry.vertices.push( new THREE.Vector3(-12.665621, 14.450620, -5.346300) );
geometry.vertices.push( new THREE.Vector3(-13.539000, 14.358370, -7.713713) );
geometry.vertices.push( new THREE.Vector3(-14.202259, 18.161661, -9.701288) );
geometry.vertices.push( new THREE.Vector3(-13.813991, 10.271140, -0.234558) );
geometry.vertices.push( new THREE.Vector3(-15.216970, 9.519337, 2.520086) );
geometry.vertices.push( new THREE.Vector3(-12.552039, 10.840570, -2.667041) );
geometry.vertices.push( new THREE.Vector3(-12.209320, 11.035460, -5.134950) );
geometry.vertices.push( new THREE.Vector3(-13.336881, 11.036400, -7.799850) );
geometry.vertices.push( new THREE.Vector3(-14.028411, 14.339291, -9.858450) );
geometry.vertices.push( new THREE.Vector3(-13.783839, 11.073979, -10.261350) );
geometry.vertices.push( new THREE.Vector3(-15.380810, 14.337860, -11.196489) );
geometry.vertices.push( new THREE.Vector3(-15.685570, 18.155960, -11.002911) );
geometry.vertices.push( new THREE.Vector3(-17.689989, 14.335010, -10.976060) );
geometry.vertices.push( new THREE.Vector3(-17.997669, 18.142910, -10.787660) );
geometry.vertices.push( new THREE.Vector3(-18.355501, 22.277441, -11.076261) );
geometry.vertices.push( new THREE.Vector3(-15.973499, 22.237610, -11.423360) );
geometry.vertices.push( new THREE.Vector3(-19.007999, 26.887421, -12.008591) );
geometry.vertices.push( new THREE.Vector3(-15.246560, 11.094490, -11.538560) );
geometry.vertices.push( new THREE.Vector3(-17.537251, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(-14.251950, 22.213949, -10.377790) );
geometry.vertices.push( new THREE.Vector3(-15.068100, 26.462061, -11.613340) );
geometry.vertices.push( new THREE.Vector3(-14.626880, 30.688309, -12.938251) );
geometry.vertices.push( new THREE.Vector3(-19.330799, 30.947289, -13.130180) );
geometry.vertices.push( new THREE.Vector3(-14.416499, 34.600800, -13.549159) );
geometry.vertices.push( new THREE.Vector3(-19.234240, 34.800449, -13.564570) );
geometry.vertices.push( new THREE.Vector3(-18.927860, 38.685001, -13.505290) );
geometry.vertices.push( new THREE.Vector3(-10.601510, 34.795990, -10.626110) );
geometry.vertices.push( new THREE.Vector3(-10.039420, 30.939638, -6.887588) );
geometry.vertices.push( new THREE.Vector3(-14.126960, 38.585621, -13.355809) );
geometry.vertices.push( new THREE.Vector3(-10.576650, 38.751751, -10.270870) );
geometry.vertices.push( new THREE.Vector3(-9.136275, 35.084511, -6.847462) );
geometry.vertices.push( new THREE.Vector3(-9.017250, 39.046867, -6.642938) );
geometry.vertices.push( new THREE.Vector3(-9.870037, 35.352711, -3.407224) );
geometry.vertices.push( new THREE.Vector3(-9.654037, 39.349499, -3.123139) );
geometry.vertices.push( new THREE.Vector3(-11.493860, 35.674431, -0.504349) );
geometry.vertices.push( new THREE.Vector3(-11.496409, 39.721130, -0.051214) );
geometry.vertices.push( new THREE.Vector3(-18.654980, 42.014252, -12.966490) );
geometry.vertices.push( new THREE.Vector3(-13.995489, 42.057751, -12.681450) );
geometry.vertices.push( new THREE.Vector3(-10.537650, 42.164619, -9.849976) );
geometry.vertices.push( new THREE.Vector3(-9.423712, 42.513000, -6.500363) );
geometry.vertices.push( new THREE.Vector3(-10.066840, 42.904869, -2.702715) );
geometry.vertices.push( new THREE.Vector3(-11.943710, 43.288128, 0.205519) );
geometry.vertices.push( new THREE.Vector3(-14.536799, 40.150120, 2.166262) );
geometry.vertices.push( new THREE.Vector3(-14.245950, 43.618877, 2.670649) );
geometry.vertices.push( new THREE.Vector3(-16.997360, 43.904999, 3.339300) );
geometry.vertices.push( new THREE.Vector3(-17.690399, 40.168121, 2.808431) );
geometry.vertices.push( new THREE.Vector3(-20.111809, 43.911369, 2.085649) );
geometry.vertices.push( new THREE.Vector3(-20.643190, 40.167747, 1.634715) );
geometry.vertices.push( new THREE.Vector3(-22.290380, 43.657131, -0.978536) );
geometry.vertices.push( new THREE.Vector3(-22.898890, 39.862122, -1.205918) );
geometry.vertices.push( new THREE.Vector3(-23.867699, 43.075871, -5.017725) );
geometry.vertices.push( new THREE.Vector3(-14.906179, 35.912930, 1.490437) );
geometry.vertices.push( new THREE.Vector3(-17.894251, 36.237450, 2.807959) );
geometry.vertices.push( new THREE.Vector3(-20.943411, 35.955639, 1.205108) );
geometry.vertices.push( new THREE.Vector3(-23.016340, 35.707008, -1.260701) );
geometry.vertices.push( new THREE.Vector3(-24.555670, 39.419998, -5.137350) );
geometry.vertices.push( new THREE.Vector3(-24.532160, 35.348660, -5.138137) );
geometry.vertices.push( new THREE.Vector3(-16.068600, 31.588539, 1.650600) );
geometry.vertices.push( new THREE.Vector3(-18.216558, 31.718550, 2.138629) );
geometry.vertices.push( new THREE.Vector3(-20.670040, 31.674450, 0.733616) );
geometry.vertices.push( new THREE.Vector3(-22.618540, 31.518518, -1.607029) );
geometry.vertices.push( new THREE.Vector3(-23.834320, 31.341188, -5.036475) );
geometry.vertices.push( new THREE.Vector3(-23.293240, 38.872501, -10.094210) );
geometry.vertices.push( new THREE.Vector3(-23.314270, 34.992641, -10.019700) );
geometry.vertices.push( new THREE.Vector3(-23.016340, 31.303612, -9.665138) );
geometry.vertices.push( new THREE.Vector3(-22.159199, 27.028238, -8.900738) );
geometry.vertices.push( new THREE.Vector3(-22.879461, 26.962610, -5.078175) );
geometry.vertices.push( new THREE.Vector3(-21.944290, 26.972210, -2.110650) );
geometry.vertices.push( new THREE.Vector3(-20.244040, 27.006828, 0.276339) );
geometry.vertices.push( new THREE.Vector3(-18.200741, 22.793331, 0.857760) );
geometry.vertices.push( new THREE.Vector3(-18.301390, 27.081409, 1.375913) );
geometry.vertices.push( new THREE.Vector3(-20.011429, 22.802059, -0.110927) );
geometry.vertices.push( new THREE.Vector3(-19.007999, 26.887421, -12.008591) );
geometry.vertices.push( new THREE.Vector3(-21.242100, 22.461040, -8.481825) );
geometry.vertices.push( new THREE.Vector3(-22.185301, 22.691099, -5.006475) );
geometry.vertices.push( new THREE.Vector3(-21.402670, 22.814140, -2.500099) );
geometry.vertices.push( new THREE.Vector3(-20.970520, 18.535990, -2.301446) );
geometry.vertices.push( new THREE.Vector3(-19.835590, 18.628799, -0.358373) );
geometry.vertices.push( new THREE.Vector3(-21.215179, 14.272390, -2.289394) );
geometry.vertices.push( new THREE.Vector3(-21.742840, 18.472309, -5.212800) );
geometry.vertices.push( new THREE.Vector3(-18.355501, 22.277441, -11.076261) );
geometry.vertices.push( new THREE.Vector3(-20.545431, 18.128620, -8.250862) );
geometry.vertices.push( new THREE.Vector3(-21.559160, 14.388490, -5.453062) );
geometry.vertices.push( new THREE.Vector3(-21.939001, 10.616210, -2.216704) );
geometry.vertices.push( new THREE.Vector3(-22.326710, 10.531010, -6.162600) );
geometry.vertices.push( new THREE.Vector3(-20.158461, 14.300209, -8.593537) );
geometry.vertices.push( new THREE.Vector3(-19.873310, 10.618279, -8.989087) );
geometry.vertices.push( new THREE.Vector3(-17.689989, 14.335010, -10.976060) );
geometry.vertices.push( new THREE.Vector3(-17.537251, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(-17.997669, 18.142910, -10.787660) );
geometry.vertices.push( new THREE.Vector3(-20.242840, 14.178560, 0.213884) );
geometry.vertices.push( new THREE.Vector3(-21.380890, 9.997725, 1.930804) );
geometry.vertices.push( new THREE.Vector3(-18.977890, 11.530760, 3.069686) );
geometry.vertices.push( new THREE.Vector3(-18.377180, 14.551650, 1.523966) );
geometry.vertices.push( new THREE.Vector3(-16.917860, 11.503540, 3.404152) );
geometry.vertices.push( new THREE.Vector3(-16.742811, 14.482090, 1.486106) );
geometry.vertices.push( new THREE.Vector3(-16.768240, 18.623701, 0.776085) );
geometry.vertices.push( new THREE.Vector3(-18.348000, 18.610390, 0.699806) );
geometry.vertices.push( new THREE.Vector3(-16.585501, 22.824039, 0.815513) );
geometry.vertices.push( new THREE.Vector3(-16.455641, 27.103239, 1.249039) );
geometry.vertices.push( new THREE.Vector3(-14.727190, 26.985411, -0.146344) );
geometry.vertices.push( new THREE.Vector3(-14.394450, 31.473000, 0.271595) );
geometry.vertices.push( new THREE.Vector3(-12.064390, 31.281599, -1.368829) );
geometry.vertices.push( new THREE.Vector3(-10.710640, 31.167259, -3.924788) );
geometry.vertices.push( new THREE.Vector3(-12.955050, 26.894701, -1.853183) );
geometry.vertices.push( new THREE.Vector3(-11.959760, 26.928600, -4.202475) );
geometry.vertices.push( new THREE.Vector3(-16.624950, 2.155428, 16.298590) );
geometry.vertices.push( new THREE.Vector3(-15.453900, 3.381120, 14.073340) );
geometry.vertices.push( new THREE.Vector3(-16.946890, 3.278745, 16.319469) );
geometry.vertices.push( new THREE.Vector3(-18.467590, 2.456283, 18.212330) );
geometry.vertices.push( new THREE.Vector3(-18.643049, 3.240247, 17.878990) );
geometry.vertices.push( new THREE.Vector3(-20.140541, 2.554575, 18.782591) );
geometry.vertices.push( new THREE.Vector3(-20.136110, 3.320403, 18.549940) );
geometry.vertices.push( new THREE.Vector3(-21.793800, 2.560421, 18.519791) );
geometry.vertices.push( new THREE.Vector3(-21.756260, 3.361560, 18.324110) );
geometry.vertices.push( new THREE.Vector3(-23.192251, 3.187106, 17.290649) );
geometry.vertices.push( new THREE.Vector3(-16.775101, 1.122116, 16.132351) );
geometry.vertices.push( new THREE.Vector3(-18.488029, 1.619925, 18.186192) );
geometry.vertices.push( new THREE.Vector3(-20.054510, 1.673535, 18.720711) );
geometry.vertices.push( new THREE.Vector3(-21.691839, 1.688227, 18.445801) );
geometry.vertices.push( new THREE.Vector3(-23.322340, 2.418296, 17.331301) );
geometry.vertices.push( new THREE.Vector3(-24.437401, 3.121376, 14.887430) );
geometry.vertices.push( new THREE.Vector3(-23.286560, 1.395105, 17.086311) );
geometry.vertices.push( new THREE.Vector3(-21.282219, 0.913605, 17.977991) );
geometry.vertices.push( new THREE.Vector3(-19.776560, 0.930420, 18.230659) );
geometry.vertices.push( new THREE.Vector3(-18.414520, 0.758685, 17.637899) );
geometry.vertices.push( new THREE.Vector3(-23.913860, 1.059161, 4.051950) );
geometry.vertices.push( new THREE.Vector3(-21.705561, 0.903128, 0.934984) );
geometry.vertices.push( new THREE.Vector3(-23.187941, 0.139287, 4.242750) );
geometry.vertices.push( new THREE.Vector3(-24.426340, -0.049034, 7.791262) );
geometry.vertices.push( new THREE.Vector3(-25.083818, 0.651641, 7.734412) );
geometry.vertices.push( new THREE.Vector3(-24.696260, -0.128936, 11.281350) );
geometry.vertices.push( new THREE.Vector3(-25.323858, 0.625518, 11.527730) );
geometry.vertices.push( new THREE.Vector3(-24.087601, 0.195272, 14.357289) );
geometry.vertices.push( new THREE.Vector3(-24.555380, 0.847143, 14.465139) );
geometry.vertices.push( new THREE.Vector3(-22.945990, 0.784241, 16.798569) );
geometry.vertices.push( new THREE.Vector3(-24.703541, 2.090088, 14.760980) );
geometry.vertices.push( new THREE.Vector3(-25.520849, 2.329507, 11.822140) );
geometry.vertices.push( new THREE.Vector3(-25.500410, 2.741479, 7.974412) );
geometry.vertices.push( new THREE.Vector3(-22.589100, 1.921703, 0.832057) );
geometry.vertices.push( new THREE.Vector3(-24.173740, 3.109447, 4.034025) );
geometry.vertices.push( new THREE.Vector3(-24.370729, 4.475850, 8.505937) );
geometry.vertices.push( new THREE.Vector3(-24.686960, 3.642491, 12.195149) );
geometry.vertices.push( new THREE.Vector3(-23.513330, 5.548837, 4.474312) );
geometry.vertices.push( new THREE.Vector3(-22.914970, 3.773175, 0.793849) );
geometry.vertices.push( new THREE.Vector3(-22.072760, 2.631825, -2.683470) );
geometry.vertices.push( new THREE.Vector3(-22.372952, 4.485638, -2.781810) );
geometry.vertices.push( new THREE.Vector3(-21.758739, 4.369800, -6.760050) );
geometry.vertices.push( new THREE.Vector3(-21.771709, 7.796550, -6.413737) );
geometry.vertices.push( new THREE.Vector3(-19.852690, 7.855989, -9.493424) );
geometry.vertices.push( new THREE.Vector3(-19.873310, 10.618279, -8.989087) );
geometry.vertices.push( new THREE.Vector3(-17.537251, 11.138590, -11.552509) );
geometry.vertices.push( new THREE.Vector3(-22.551340, 7.038150, 1.093654) );
geometry.vertices.push( new THREE.Vector3(-22.160511, 7.495200, -2.513002) );
geometry.vertices.push( new THREE.Vector3(-22.326710, 10.531010, -6.162600) );
geometry.vertices.push( new THREE.Vector3(-21.939001, 10.616210, -2.216704) );
geometry.vertices.push( new THREE.Vector3(-21.380890, 9.997725, 1.930804) );
geometry.vertices.push( new THREE.Vector3(-17.279591, 8.016075, -12.695021) );
geometry.vertices.push( new THREE.Vector3(-20.181829, 4.564913, -10.312269) );
geometry.vertices.push( new THREE.Vector3(-21.497021, 1.826910, -6.808013) );
geometry.vertices.push( new THREE.Vector3(-19.563971, 1.566131, -10.835660) );
geometry.vertices.push( new THREE.Vector3(-17.081400, 4.659412, -13.392671) );
geometry.vertices.push( new THREE.Vector3(-16.570200, 1.724494, -13.195049) );
geometry.vertices.push( new THREE.Vector3(-16.979481, 0.668490, -11.425200) );
geometry.vertices.push( new THREE.Vector3(-15.625010, 0.607448, -11.330400) );
geometry.vertices.push( new THREE.Vector3(-18.094311, 0.708536, -10.932751) );
geometry.vertices.push( new THREE.Vector3(-19.267801, 0.678889, -9.787612) );
geometry.vertices.push( new THREE.Vector3(-20.542120, 0.778335, -6.349725) );
geometry.vertices.push( new THREE.Vector3(-21.065920, 1.544621, -2.176226) );
geometry.vertices.push( new THREE.Vector3(-10.702690, 46.939503, -2.041710) );
geometry.vertices.push( new THREE.Vector3(-11.943710, 43.288128, 0.205519) );
geometry.vertices.push( new THREE.Vector3(-10.066840, 42.904869, -2.702715) );
geometry.vertices.push( new THREE.Vector3(-11.955600, 47.042252, 1.112453) );
geometry.vertices.push( new THREE.Vector3(-14.245950, 43.618877, 2.670649) );
geometry.vertices.push( new THREE.Vector3(-9.205237, 51.274132, -1.221105) );
geometry.vertices.push( new THREE.Vector3(-22.230150, 47.760750, -4.194862) );
geometry.vertices.push( new THREE.Vector3(-22.290380, 43.657131, -0.978536) );
geometry.vertices.push( new THREE.Vector3(-21.237751, 47.645248, -0.388099) );
geometry.vertices.push( new THREE.Vector3(-20.111809, 43.911369, 2.085649) );
geometry.vertices.push( new THREE.Vector3(-19.213610, 47.591621, 2.130682) );
geometry.vertices.push( new THREE.Vector3(-16.997360, 43.904999, 3.339300) );
geometry.vertices.push( new THREE.Vector3(-16.273540, 47.506123, 4.000425) );
geometry.vertices.push( new THREE.Vector3(-13.871511, 47.224133, 2.974613) );
geometry.vertices.push( new THREE.Vector3(-10.950820, 51.280880, 2.278234) );
geometry.vertices.push( new THREE.Vector3(-20.098349, 51.285751, 0.331244) );
geometry.vertices.push( new THREE.Vector3(-18.621531, 51.368618, 2.482271) );
geometry.vertices.push( new THREE.Vector3(-19.802401, 55.021130, 1.317638) );
geometry.vertices.push( new THREE.Vector3(-20.808979, 54.924000, -1.853063) );
geometry.vertices.push( new THREE.Vector3(-21.333151, 51.279377, -3.188561) );
geometry.vertices.push( new THREE.Vector3(-14.267739, 53.073383, 5.727863) );
geometry.vertices.push( new THREE.Vector3(-15.318380, 55.094997, 6.202388) );
geometry.vertices.push( new THREE.Vector3(-15.578850, 53.071129, 5.685113) );
geometry.vertices.push( new THREE.Vector3(-15.777640, 51.136883, 4.867650) );
geometry.vertices.push( new THREE.Vector3(-16.828390, 53.211750, 5.219437) );
geometry.vertices.push( new THREE.Vector3(-18.322050, 55.348866, 3.459491) );
geometry.vertices.push( new THREE.Vector3(-19.699430, 56.989872, 1.657845) );
geometry.vertices.push( new THREE.Vector3(-20.430340, 58.455372, -1.754002) );
geometry.vertices.push( new THREE.Vector3(-19.704979, 58.363499, -6.172537) );
geometry.vertices.push( new THREE.Vector3(-11.804811, 54.875618, 4.494075) );
geometry.vertices.push( new THREE.Vector3(-13.527380, 54.993748, 6.017587) );
geometry.vertices.push( new THREE.Vector3(-13.107901, 51.204002, 3.880875) );
geometry.vertices.push( new THREE.Vector3(-11.390480, 56.919746, 4.898437) );
geometry.vertices.push( new THREE.Vector3(-13.250250, 56.763371, 6.504075) );
geometry.vertices.push( new THREE.Vector3(-9.679313, 56.849998, 3.882037) );
geometry.vertices.push( new THREE.Vector3(-10.736660, 54.632252, 2.564228) );
geometry.vertices.push( new THREE.Vector3(-8.471925, 54.846752, -0.905182) );
geometry.vertices.push( new THREE.Vector3(-8.160301, 56.765999, -0.679245) );
geometry.vertices.push( new THREE.Vector3(-7.519012, 58.534496, -0.632689) );
geometry.vertices.push( new THREE.Vector3(-9.011025, 58.577633, 4.345388) );
geometry.vertices.push( new THREE.Vector3(-11.099890, 58.806374, 5.511150) );
geometry.vertices.push( new THREE.Vector3(-12.757160, 59.144997, 6.134700) );
geometry.vertices.push( new THREE.Vector3(-15.138149, 56.959869, 6.705263) );
geometry.vertices.push( new THREE.Vector3(-16.954119, 57.103878, 5.967375) );
geometry.vertices.push( new THREE.Vector3(-16.725710, 59.600250, 5.623500) );
geometry.vertices.push( new THREE.Vector3(-14.711590, 59.959881, 6.225337) );
geometry.vertices.push( new THREE.Vector3(-12.572511, 62.126987, 6.573562) );
geometry.vertices.push( new THREE.Vector3(-10.654310, 61.971748, 6.597188) );
geometry.vertices.push( new THREE.Vector3(-18.026289, 59.026867, 3.907050) );
geometry.vertices.push( new THREE.Vector3(-14.606319, 62.239120, 6.163162) );
geometry.vertices.push( new THREE.Vector3(-16.662970, 62.228619, 5.841487) );
geometry.vertices.push( new THREE.Vector3(-18.487720, 62.279617, 4.355512) );
geometry.vertices.push( new THREE.Vector3(-20.036469, 62.222988, 1.819894) );
geometry.vertices.push( new THREE.Vector3(-17.317650, 66.887619, 6.745163) );
geometry.vertices.push( new THREE.Vector3(-19.395340, 66.810379, 4.325438) );
geometry.vertices.push( new THREE.Vector3(-17.968351, 72.157501, 7.698224) );
geometry.vertices.push( new THREE.Vector3(-14.666250, 66.833626, 7.598625) );
geometry.vertices.push( new THREE.Vector3(-20.167839, 62.310738, -1.977686) );
geometry.vertices.push( new THREE.Vector3(-20.948290, 66.674629, 1.460812) );
geometry.vertices.push( new THREE.Vector3(-20.489811, 66.631500, -2.264857) );
geometry.vertices.push( new THREE.Vector3(-19.388659, 62.156998, -6.073387) );
geometry.vertices.push( new THREE.Vector3(-20.527910, 72.147751, 4.404300) );
geometry.vertices.push( new THREE.Vector3(-21.041700, 77.463753, 4.650187) );
geometry.vertices.push( new THREE.Vector3(-21.561260, 72.153748, 1.094558) );
geometry.vertices.push( new THREE.Vector3(-21.805201, 77.430000, 0.596445) );
geometry.vertices.push( new THREE.Vector3(-20.785540, 72.175125, -2.822344) );
geometry.vertices.push( new THREE.Vector3(-19.078159, 66.693001, -6.121800) );
geometry.vertices.push( new THREE.Vector3(-16.221371, 62.231987, -8.077724) );
geometry.vertices.push( new THREE.Vector3(-20.934299, 77.348633, -3.285945) );
geometry.vertices.push( new THREE.Vector3(-11.116799, 72.628494, -10.012839) );
geometry.vertices.push( new THREE.Vector3(-14.973080, 77.504997, -10.265030) );
geometry.vertices.push( new THREE.Vector3(-18.326700, 82.574615, -8.021175) );
geometry.vertices.push( new THREE.Vector3(-20.820341, 82.679626, -3.746385) );
geometry.vertices.push( new THREE.Vector3(-18.600260, 77.477249, -7.444087) );
geometry.vertices.push( new THREE.Vector3(-18.841911, 72.205132, -6.791363) );
geometry.vertices.push( new THREE.Vector3(-15.381861, 72.543755, -9.435976) );
geometry.vertices.push( new THREE.Vector3(-15.857850, 66.865868, -8.784188) );
geometry.vertices.push( new THREE.Vector3(-11.814070, 67.002747, -8.977725) );
geometry.vertices.push( new THREE.Vector3(-12.252669, 62.354248, -8.518274) );
geometry.vertices.push( new THREE.Vector3(-8.272088, 66.992249, -7.676738) );
geometry.vertices.push( new THREE.Vector3(-7.308337, 72.532501, -8.878987) );
geometry.vertices.push( new THREE.Vector3(-6.627900, 67.131752, -4.331362) );
geometry.vertices.push( new THREE.Vector3(-4.630725, 72.974625, -5.080575) );
geometry.vertices.push( new THREE.Vector3(-8.735250, 62.267990, -6.525074) );
geometry.vertices.push( new THREE.Vector3(-7.786537, 62.321991, -3.534915) );
geometry.vertices.push( new THREE.Vector3(-7.519012, 58.534496, -0.632689) );
geometry.vertices.push( new THREE.Vector3(-6.675825, 62.071121, -0.395392) );
geometry.vertices.push( new THREE.Vector3(-6.293437, 67.672119, -0.024525) );
geometry.vertices.push( new THREE.Vector3(-16.599300, 58.408119, -8.538787) );
geometry.vertices.push( new THREE.Vector3(-12.555300, 58.588867, -8.204588) );
geometry.vertices.push( new THREE.Vector3(-9.194138, 58.205627, -6.360113) );
geometry.vertices.push( new THREE.Vector3(-8.487338, 58.276867, -3.472358) );
geometry.vertices.push( new THREE.Vector3(-20.969509, 51.772118, -7.537650) );
geometry.vertices.push( new THREE.Vector3(-21.579260, 49.250252, -8.311613) );
geometry.vertices.push( new THREE.Vector3(-20.316339, 54.977631, -6.778350) );
geometry.vertices.push( new THREE.Vector3(-16.804201, 55.079628, -8.614426) );
geometry.vertices.push( new THREE.Vector3(-12.817579, 55.114132, -8.566125) );
geometry.vertices.push( new THREE.Vector3(-9.480600, 54.825378, -6.946912) );
geometry.vertices.push( new THREE.Vector3(-8.737164, 54.932247, -3.948637) );
geometry.vertices.push( new THREE.Vector3(-13.190959, 51.639004, -9.129225) );
geometry.vertices.push( new THREE.Vector3(-17.799191, 49.339119, -10.854259) );
geometry.vertices.push( new THREE.Vector3(-17.389950, 51.988117, -9.850463) );
geometry.vertices.push( new THREE.Vector3(-13.707680, 48.976498, -10.253401) );
geometry.vertices.push( new THREE.Vector3(-11.078590, 48.760872, -7.505812) );
geometry.vertices.push( new THREE.Vector3(-10.349290, 51.469116, -7.130888) );
geometry.vertices.push( new THREE.Vector3(-9.686550, 51.396370, -4.377000) );
geometry.vertices.push( new THREE.Vector3(-10.361930, 47.066250, -5.032913) );
geometry.vertices.push( new THREE.Vector3(-11.017840, 45.670502, -8.665763) );
geometry.vertices.push( new THREE.Vector3(-13.943850, 45.666370, -11.465919) );
geometry.vertices.push( new THREE.Vector3(-18.182329, 45.900749, -11.901299) );
geometry.vertices.push( new THREE.Vector3(-22.237310, 45.894001, -9.139952) );
geometry.vertices.push( new THREE.Vector3(-9.423712, 42.513000, -6.500363) );
geometry.vertices.push( new THREE.Vector3(-10.537650, 42.164619, -9.849976) );
geometry.vertices.push( new THREE.Vector3(-13.995489, 42.057751, -12.681450) );
geometry.vertices.push( new THREE.Vector3(-18.654980, 42.014252, -12.966490) );
geometry.vertices.push( new THREE.Vector3(-22.982290, 42.277130, -9.760876) );
geometry.vertices.push( new THREE.Vector3(-23.867699, 43.075871, -5.017725) );
geometry.vertices.push( new THREE.Vector3(-8.160301, 56.765999, -0.679245) );
geometry.vertices.push( new THREE.Vector3(-8.471925, 54.846752, -0.905182) );
geometry.vertices.push( new THREE.Vector3(-9.205237, 51.274132, -1.221105) );
geometry.vertices.push( new THREE.Vector3(-10.702690, 46.939503, -2.041710) );
geometry.vertices.push( new THREE.Vector3(-10.066840, 42.904869, -2.702715) );
geometry.vertices.push( new THREE.Vector3(-19.897200, 4.392487, 17.252960) );
geometry.vertices.push( new THREE.Vector3(-18.745050, 4.062900, 17.265671) );
geometry.vertices.push( new THREE.Vector3(-21.389589, 4.304812, 17.151409) );
geometry.vertices.push( new THREE.Vector3(-22.627459, 3.947999, 16.811029) );
geometry.vertices.push( new THREE.Vector3(-21.210711, 4.846312, 15.844090) );
geometry.vertices.push( new THREE.Vector3(-19.538099, 4.939500, 16.013851) );
geometry.vertices.push( new THREE.Vector3(-20.812759, 5.345174, 13.419260) );
geometry.vertices.push( new THREE.Vector3(-18.815849, 5.578200, 13.787251) );
geometry.vertices.push( new THREE.Vector3(-18.117750, 4.558912, 16.039459) );
geometry.vertices.push( new THREE.Vector3(-16.696609, 5.097937, 13.863750) );
geometry.vertices.push( new THREE.Vector3(-21.821169, 8.017838, 5.452425) );
geometry.vertices.push( new THREE.Vector3(-16.917860, 11.503540, 3.404152) );
geometry.vertices.push( new THREE.Vector3(-19.605370, 9.245700, 6.352912) );
geometry.vertices.push( new THREE.Vector3(-17.493040, 9.089737, 6.773925) );
geometry.vertices.push( new THREE.Vector3(-18.977890, 11.530760, 3.069686) );
geometry.vertices.push( new THREE.Vector3(-20.297251, 6.707250, 10.058960) );
geometry.vertices.push( new THREE.Vector3(-18.129971, 6.908888, 10.478440) );
geometry.vertices.push( new THREE.Vector3(-15.807409, 6.044325, 10.746640) );
geometry.vertices.push( new THREE.Vector3(-22.804161, 4.756724, 12.802240) );
geometry.vertices.push( new THREE.Vector3(-22.546240, 5.908725, 9.317474) );
geometry.vertices.push( new THREE.Vector3(-22.894350, 4.278599, 15.446851) );
geometry.vertices.push( new THREE.Vector3(-2.417288, 113.874397, 12.583500) );
geometry.vertices.push( new THREE.Vector3(-5.333550, 113.851097, 12.522600) );
geometry.vertices.push( new THREE.Vector3(-8.071199, 113.964699, 11.644990) );
geometry.vertices.push( new THREE.Vector3(-10.453690, 114.131996, 10.562030) );
geometry.vertices.push( new THREE.Vector3(-13.247479, 114.566597, 8.642850) );
geometry.vertices.push( new THREE.Vector3(-14.965580, 115.296700, 4.842600) );
geometry.vertices.push( new THREE.Vector3(-15.650620, 115.884804, 0.589879) );
geometry.vertices.push( new THREE.Vector3(-14.706559, 116.427696, -3.265481) );
geometry.vertices.push( new THREE.Vector3(-12.274540, 116.882301, -6.347700) );
geometry.vertices.push( new THREE.Vector3(-9.237451, 117.138000, -8.220150) );
geometry.vertices.push( new THREE.Vector3(-5.443125, 117.349503, -10.171010) );
geometry.vertices.push( new THREE.Vector3(-2.964694, 117.397903, -11.183470) );
geometry.vertices.push( new THREE.Vector3(-18.056400, 57.108002, 3.701783) );
geometry.vertices.push( new THREE.Vector3(-16.889099, 55.314751, 5.436300) );
geometry.vertices.push( new THREE.Vector3(-19.482750, 58.733250, 1.886752) );
geometry.vertices.push( new THREE.Vector3(19.776560, 0.930422, 18.230659) );
geometry.vertices.push( new THREE.Vector3(18.414520, 0.758687, 17.637899) );
geometry.vertices.push( new THREE.Vector3(20.601370, 0.518893, 17.241560) );
geometry.vertices.push( new THREE.Vector3(21.282219, 0.913607, 17.977991) );
geometry.vertices.push( new THREE.Vector3(22.945990, 0.784243, 16.798569) );
geometry.vertices.push( new THREE.Vector3(20.470119, 0.153021, 15.211010) );
geometry.vertices.push( new THREE.Vector3(24.087601, 0.195274, 14.357289) );
geometry.vertices.push( new THREE.Vector3(20.115639, -0.138163, 12.457049) );
geometry.vertices.push( new THREE.Vector3(24.696260, -0.128934, 11.281310) );
geometry.vertices.push( new THREE.Vector3(19.566940, -0.293269, 9.223574) );
geometry.vertices.push( new THREE.Vector3(24.426340, -0.049043, 7.791262) );
geometry.vertices.push( new THREE.Vector3(19.025629, -0.276149, 5.373225) );
geometry.vertices.push( new THREE.Vector3(15.185361, 0.570820, 3.918450) );
geometry.vertices.push( new THREE.Vector3(18.282370, 0.429715, 1.332960) );
geometry.vertices.push( new THREE.Vector3(14.972589, -0.029174, 7.100400) );
geometry.vertices.push( new THREE.Vector3(15.155360, 0.006294, 10.542600) );
geometry.vertices.push( new THREE.Vector3(15.999190, 0.214228, 13.606090) );
geometry.vertices.push( new THREE.Vector3(17.208750, 0.443560, 15.882000) );
geometry.vertices.push( new THREE.Vector3(14.681700, 0.541731, -10.664209) );
geometry.vertices.push( new THREE.Vector3(15.625010, 0.607431, -11.330400) );
geometry.vertices.push( new THREE.Vector3(16.398411, 0.151452, -8.630512) );
geometry.vertices.push( new THREE.Vector3(13.671340, 0.535510, -9.099000) );
geometry.vertices.push( new THREE.Vector3(13.217141, 0.546978, -7.558950) );
geometry.vertices.push( new THREE.Vector3(16.948570, 0.102015, -5.077237) );
geometry.vertices.push( new THREE.Vector3(13.857940, 0.785706, -4.274025) );
geometry.vertices.push( new THREE.Vector3(14.697340, 1.196958, -1.560491) );
geometry.vertices.push( new THREE.Vector3(17.759100, 0.607428, -1.671810) );
geometry.vertices.push( new THREE.Vector3(15.308321, 1.274905, 1.024740) );
geometry.vertices.push( new THREE.Vector3(23.187941, 0.139269, 4.242750) );
geometry.vertices.push( new THREE.Vector3(21.705561, 0.903108, 0.934984) );
geometry.vertices.push( new THREE.Vector3(21.065920, 1.544605, -2.176226) );
geometry.vertices.push( new THREE.Vector3(20.542120, 0.778315, -6.349725) );
geometry.vertices.push( new THREE.Vector3(19.267801, 0.678869, -9.787612) );
geometry.vertices.push( new THREE.Vector3(18.094311, 0.708516, -10.932751) );
geometry.vertices.push( new THREE.Vector3(16.979481, 0.668470, -11.425200) );
geometry.vertices.push( new THREE.Vector3(11.943710, 43.288128, 0.205517) );
geometry.vertices.push( new THREE.Vector3(14.245910, 43.618877, 2.670645) );
geometry.vertices.push( new THREE.Vector3(16.997330, 43.904999, 3.339304) );
geometry.vertices.push( new THREE.Vector3(20.111809, 43.911369, 2.085653) );
geometry.vertices.push( new THREE.Vector3(22.290380, 43.657131, -0.978529) );
geometry.vertices.push( new THREE.Vector3(-13.247479, 114.566597, 8.642850) );
geometry.vertices.push( new THREE.Vector3(-13.374559, 111.455597, 8.178712) );
geometry.vertices.push( new THREE.Vector3(-10.738130, 111.018005, 10.100360) );
geometry.vertices.push( new THREE.Vector3(-10.453690, 114.131996, 10.562030) );
geometry.vertices.push( new THREE.Vector3(-13.813991, 10.271140, -0.234558) );
geometry.vertices.push( new THREE.Vector3(-12.552039, 10.840570, -2.667041) );
geometry.vertices.push( new THREE.Vector3(-12.209320, 11.035460, -5.134950) );
geometry.vertices.push( new THREE.Vector3(-13.336881, 11.036400, -7.799850) );
geometry.vertices.push( new THREE.Vector3(16.570160, 1.724478, -13.195049) );
geometry.vertices.push( new THREE.Vector3(15.625010, 0.607431, -11.330400) );
geometry.vertices.push( new THREE.Vector3(14.681700, 0.541731, -10.664209) );
geometry.vertices.push( new THREE.Vector3(13.671340, 0.535510, -9.099000) );
geometry.vertices.push( new THREE.Vector3(13.217141, 0.546978, -7.558950) );
geometry.vertices.push( new THREE.Vector3(-19.025629, -0.276132, 5.373225) );
geometry.vertices.push( new THREE.Vector3(-24.426340, -0.049034, 7.791262) );
geometry.vertices.push( new THREE.Vector3(-23.187941, 0.139287, 4.242750) );
geometry.vertices.push( new THREE.Vector3(-21.705561, 0.903128, 0.934984) );
geometry.vertices.push( new THREE.Vector3(-18.282370, 0.429731, 1.332956) );
geometry.vertices.push( new THREE.Vector3(-21.065920, 1.544621, -2.176226) );
geometry.vertices.push( new THREE.Vector3(-17.759100, 0.607448, -1.671810) );
geometry.vertices.push( new THREE.Vector3(-16.948610, 0.102033, -5.077237) );
geometry.vertices.push( new THREE.Vector3(-20.542120, 0.778335, -6.349725) );
geometry.vertices.push( new THREE.Vector3(-16.398451, 0.151470, -8.630512) );
geometry.vertices.push( new THREE.Vector3(-19.267801, 0.678889, -9.787612) );
geometry.vertices.push( new THREE.Vector3(-18.094311, 0.708536, -10.932751) );
geometry.vertices.push( new THREE.Vector3(-16.979481, 0.668490, -11.425200) );
geometry.vertices.push( new THREE.Vector3(-15.625010, 0.607448, -11.330400) );
geometry.vertices.push( new THREE.Vector3(-14.681700, 0.541748, -10.664209) );
geometry.vertices.push( new THREE.Vector3(-13.671370, 0.535526, -9.099000) );
geometry.vertices.push( new THREE.Vector3(-13.217141, 0.546994, -7.558950) );
geometry.vertices.push( new THREE.Vector3(-13.857940, 0.785722, -4.274025) );
geometry.vertices.push( new THREE.Vector3(-14.697340, 1.196974, -1.560495) );
geometry.vertices.push( new THREE.Vector3(-15.308321, 1.274921, 1.024733) );
geometry.vertices.push( new THREE.Vector3(-15.185361, 0.570840, 3.918450) );
geometry.vertices.push( new THREE.Vector3(-14.972589, -0.029157, 7.100400) );
geometry.vertices.push( new THREE.Vector3(-19.566940, -0.293261, 9.223574) );
geometry.vertices.push( new THREE.Vector3(-15.155360, 0.006303, 10.542600) );
geometry.vertices.push( new THREE.Vector3(-20.115639, -0.138165, 12.457049) );
geometry.vertices.push( new THREE.Vector3(-15.999190, 0.214227, 13.606090) );
geometry.vertices.push( new THREE.Vector3(-17.208750, 0.443557, 15.882000) );
geometry.vertices.push( new THREE.Vector3(-20.470119, 0.153018, 15.211010) );
geometry.vertices.push( new THREE.Vector3(-18.414520, 0.758685, 17.637899) );
geometry.vertices.push( new THREE.Vector3(-20.601370, 0.518891, 17.241560) );
geometry.vertices.push( new THREE.Vector3(-19.776560, 0.930420, 18.230659) );
geometry.vertices.push( new THREE.Vector3(-21.282219, 0.913605, 17.977991) );
geometry.vertices.push( new THREE.Vector3(-22.945990, 0.784241, 16.798569) );
geometry.vertices.push( new THREE.Vector3(-24.087601, 0.195272, 14.357289) );
geometry.vertices.push( new THREE.Vector3(-24.696260, -0.128936, 11.281350) );
geometry.vertices.push( new THREE.Vector3(1.837601, 94.399117, 4.975650) );
geometry.vertices.push( new THREE.Vector3(0.696401, 93.844498, 1.570860) );
geometry.vertices.push( new THREE.Vector3(0.833704, 92.432617, 1.333931) );
geometry.vertices.push( new THREE.Vector3(0.879128, 90.876373, 0.940673) );
geometry.vertices.push( new THREE.Vector3(0.795082, 87.220131, 0.634436) );
geometry.vertices.push( new THREE.Vector3(1.441657, 82.485001, 0.127598) );
geometry.vertices.push( new THREE.Vector3(-22.982290, 42.277130, -9.760876) );
geometry.vertices.push( new THREE.Vector3(-18.654980, 42.014252, -12.966490) );
geometry.vertices.push( new THREE.Vector3(-18.927860, 38.685001, -13.505290) );
geometry.vertices.push( new THREE.Vector3(-19.234240, 34.800449, -13.564570) );
geometry.vertices.push( new THREE.Vector3(-19.330799, 30.947289, -13.130180) );
geometry.vertices.push( new THREE.Vector3(-20.653240, 153.042694, 8.324812) );
geometry.vertices.push( new THREE.Vector3(-19.845860, 152.013809, 7.857863) );
geometry.vertices.push( new THREE.Vector3(-19.041040, 154.578400, 8.030586) );
geometry.vertices.push( new THREE.Vector3(-20.185051, 150.121109, 6.888299) );
geometry.vertices.push( new THREE.Vector3(-18.724689, 150.380600, 7.968451) );
geometry.vertices.push( new THREE.Vector3(-19.521519, 151.541595, 7.510237) );
geometry.vertices.push( new THREE.Vector3(-19.429430, 148.663498, 7.184475) );
geometry.vertices.push( new THREE.Vector3(18.760420, 150.287598, 7.925025) );
geometry.vertices.push( new THREE.Vector3(16.615499, 151.951096, 9.144188) );
geometry.vertices.push( new THREE.Vector3(17.987700, 149.058395, 8.350687) );
geometry.vertices.push( new THREE.Vector3(18.100460, 153.559509, 7.730700) );
geometry.vertices.push( new THREE.Vector3(20.185051, 150.121109, 6.888300) );
geometry.vertices.push( new THREE.Vector3(19.533150, 151.516495, 7.499325) );
geometry.vertices.push( new THREE.Vector3(19.429430, 148.663498, 7.184475) );
geometry.vertices.push( new THREE.Vector3(-5.132325, 118.884804, -12.000040) );
geometry.vertices.push( new THREE.Vector3(-5.655375, 123.303696, -11.339550) );
geometry.vertices.push( new THREE.Vector3(-4.927125, 123.162697, -10.920260) );
geometry.vertices.push( new THREE.Vector3(-5.860613, 119.025803, -12.419331) );
geometry.vertices.push( new THREE.Vector3(-6.506363, 123.346100, -11.346710) );
geometry.vertices.push( new THREE.Vector3(-6.711563, 119.068100, -12.426491) );
geometry.vertices.push( new THREE.Vector3(-6.065812, 114.747406, -13.499101) );
geometry.vertices.push( new THREE.Vector3(-5.337525, 114.606796, -13.079810) );
geometry.vertices.push( new THREE.Vector3(-4.927088, 114.405800, -12.360750) );
geometry.vertices.push( new THREE.Vector3(-4.721887, 118.683800, -11.280980) );
geometry.vertices.push( new THREE.Vector3(-4.516650, 122.961700, -10.201200) );
geometry.vertices.push( new THREE.Vector3(-6.916763, 114.790108, -13.506220) );
geometry.vertices.push( new THREE.Vector3(-7.251975, 123.279404, -10.939800) );
geometry.vertices.push( new THREE.Vector3(-6.113250, 122.937408, -9.801488) );
geometry.vertices.push( new THREE.Vector3(-7.457174, 119.001404, -12.019580) );
geometry.vertices.push( new THREE.Vector3(-7.662375, 114.723396, -13.099350) );
geometry.vertices.push( new THREE.Vector3(-6.523649, 114.381393, -11.960999) );
geometry.vertices.push( new THREE.Vector3(-8.102888, 114.564804, -12.387450) );
geometry.vertices.push( new THREE.Vector3(-8.120250, 114.356995, -11.561290) );
geometry.vertices.push( new THREE.Vector3(-7.709775, 114.155998, -10.842219) );
geometry.vertices.push( new THREE.Vector3(-6.981525, 114.014992, -10.422940) );
geometry.vertices.push( new THREE.Vector3(-7.692488, 123.120705, -10.227900) );
geometry.vertices.push( new THREE.Vector3(-7.709812, 122.913002, -9.401737) );
geometry.vertices.push( new THREE.Vector3(-7.299375, 122.712006, -8.682675) );
geometry.vertices.push( new THREE.Vector3(-6.571087, 122.571007, -8.263389) );
geometry.vertices.push( new THREE.Vector3(-5.720138, 122.528603, -8.256226) );
geometry.vertices.push( new THREE.Vector3(-4.974525, 122.595406, -8.663137) );
geometry.vertices.push( new THREE.Vector3(-4.534012, 122.753998, -9.375038) );
geometry.vertices.push( new THREE.Vector3(-4.516650, 122.961700, -10.201200) );
geometry.vertices.push( new THREE.Vector3(-4.927125, 123.162697, -10.920260) );
geometry.vertices.push( new THREE.Vector3(-5.655375, 123.303696, -11.339550) );
geometry.vertices.push( new THREE.Vector3(14.323311, 110.991394, 6.896512) );
geometry.vertices.push( new THREE.Vector3(14.941120, 110.849594, 8.415600) );
geometry.vertices.push( new THREE.Vector3(14.097150, 110.786201, 8.513962) );
geometry.vertices.push( new THREE.Vector3(13.313770, 110.778000, 8.178937) );
geometry.vertices.push( new THREE.Vector3(12.800890, 110.826805, 7.500300) );
geometry.vertices.push( new THREE.Vector3(12.695961, 110.919701, 6.659850) );
geometry.vertices.push( new THREE.Vector3(13.027050, 111.031898, 5.882850) );
geometry.vertices.push( new THREE.Vector3(13.705500, 111.133507, 5.377425) );
geometry.vertices.push( new THREE.Vector3(14.549480, 111.196899, 5.279062) );
geometry.vertices.push( new THREE.Vector3(15.332850, 111.205101, 5.614088) );
geometry.vertices.push( new THREE.Vector3(15.845739, 111.156403, 6.292726) );
geometry.vertices.push( new THREE.Vector3(15.950661, 111.063400, 7.133175) );
geometry.vertices.push( new THREE.Vector3(15.619570, 110.950897, 7.910176) );
geometry.vertices.push( new THREE.Vector3(14.672780, 115.227699, 8.933663) );
geometry.vertices.push( new THREE.Vector3(13.828800, 115.164398, 9.032023) );
geometry.vertices.push( new THREE.Vector3(14.404389, 119.606308, 9.451725) );
geometry.vertices.push( new THREE.Vector3(13.560410, 119.542900, 9.550088) );
geometry.vertices.push( new THREE.Vector3(13.045430, 115.156105, 8.697001) );
geometry.vertices.push( new THREE.Vector3(12.777040, 119.534302, 9.215063) );
geometry.vertices.push( new THREE.Vector3(12.532539, 115.204895, 8.018363) );
geometry.vertices.push( new THREE.Vector3(12.264150, 119.583405, 8.536426) );
geometry.vertices.push( new THREE.Vector3(12.427580, 115.297905, 7.177912) );
geometry.vertices.push( new THREE.Vector3(14.097150, 110.786201, 8.513962) );
geometry.vertices.push( new THREE.Vector3(13.313770, 110.778000, 8.178937) );
geometry.vertices.push( new THREE.Vector3(12.800890, 110.826805, 7.500300) );
geometry.vertices.push( new THREE.Vector3(12.695961, 110.919701, 6.659850) );
geometry.vertices.push( new THREE.Vector3(12.758700, 115.410400, 6.400912) );
geometry.vertices.push( new THREE.Vector3(13.027050, 111.031898, 5.882850) );
geometry.vertices.push( new THREE.Vector3(13.437110, 115.511597, 5.895488) );
geometry.vertices.push( new THREE.Vector3(12.159220, 119.676399, 7.695975) );
geometry.vertices.push( new THREE.Vector3(12.490310, 119.788506, 6.918938) );
geometry.vertices.push( new THREE.Vector3(13.168759, 119.889793, 6.413550) );
geometry.vertices.push( new THREE.Vector3(14.281090, 115.575005, 5.797125) );
geometry.vertices.push( new THREE.Vector3(14.012740, 119.953094, 6.315187) );
geometry.vertices.push( new THREE.Vector3(15.064460, 115.583298, 6.132112) );
geometry.vertices.push( new THREE.Vector3(14.796109, 119.961800, 6.650175) );
geometry.vertices.push( new THREE.Vector3(13.705500, 111.133507, 5.377425) );
geometry.vertices.push( new THREE.Vector3(14.549480, 111.196899, 5.279062) );
geometry.vertices.push( new THREE.Vector3(15.332850, 111.205101, 5.614088) );
geometry.vertices.push( new THREE.Vector3(13.786580, 119.747993, 7.932638) );
geometry.vertices.push( new THREE.Vector3(15.082841, 119.707504, 8.946301) );
geometry.vertices.push( new THREE.Vector3(15.413930, 119.819603, 8.169263) );
geometry.vertices.push( new THREE.Vector3(15.309000, 119.912598, 7.328850) );
geometry.vertices.push( new THREE.Vector3(14.796109, 119.961800, 6.650175) );
geometry.vertices.push( new THREE.Vector3(14.012740, 119.953094, 6.315187) );
geometry.vertices.push( new THREE.Vector3(13.168759, 119.889793, 6.413550) );
geometry.vertices.push( new THREE.Vector3(12.490310, 119.788506, 6.918938) );
geometry.vertices.push( new THREE.Vector3(12.159220, 119.676399, 7.695975) );
geometry.vertices.push( new THREE.Vector3(12.264150, 119.583405, 8.536426) );
geometry.vertices.push( new THREE.Vector3(12.777040, 119.534302, 9.215063) );
geometry.vertices.push( new THREE.Vector3(13.560410, 119.542900, 9.550088) );
geometry.vertices.push( new THREE.Vector3(15.351190, 115.329399, 8.428238) );
geometry.vertices.push( new THREE.Vector3(15.950661, 111.063400, 7.133175) );
geometry.vertices.push( new THREE.Vector3(15.682310, 115.441498, 7.651200) );
geometry.vertices.push( new THREE.Vector3(15.845739, 111.156403, 6.292726) );
geometry.vertices.push( new THREE.Vector3(15.577351, 115.534500, 6.810787) );
geometry.vertices.push( new THREE.Vector3(15.332850, 111.205101, 5.614088) );
geometry.vertices.push( new THREE.Vector3(15.064460, 115.583298, 6.132112) );
geometry.vertices.push( new THREE.Vector3(14.796109, 119.961800, 6.650175) );
geometry.vertices.push( new THREE.Vector3(15.309000, 119.912598, 7.328850) );
geometry.vertices.push( new THREE.Vector3(15.413930, 119.819603, 8.169263) );
geometry.vertices.push( new THREE.Vector3(7.502400, 114.687798, 10.716559) );
geometry.vertices.push( new THREE.Vector3(6.710850, 119.005096, 11.701720) );
geometry.vertices.push( new THREE.Vector3(7.310475, 119.083908, 11.101541) );
geometry.vertices.push( new THREE.Vector3(8.323800, 114.742897, 10.496890) );
geometry.vertices.push( new THREE.Vector3(8.131875, 119.139008, 10.881860) );
geometry.vertices.push( new THREE.Vector3(9.146888, 114.759804, 10.716559) );
geometry.vertices.push( new THREE.Vector3(8.954926, 119.155502, 11.101541) );
geometry.vertices.push( new THREE.Vector3(9.751086, 114.733505, 11.316790) );
geometry.vertices.push( new THREE.Vector3(9.559163, 119.129303, 11.701759) );
geometry.vertices.push( new THREE.Vector3(9.943013, 110.337402, 10.931810) );
geometry.vertices.push( new THREE.Vector3(9.338813, 110.363602, 10.331630) );
geometry.vertices.push( new THREE.Vector3(8.515763, 110.346695, 10.111910) );
geometry.vertices.push( new THREE.Vector3(7.694362, 110.291603, 10.331590) );
geometry.vertices.push( new THREE.Vector3(7.094737, 110.212898, 10.931810) );
geometry.vertices.push( new THREE.Vector3(6.902775, 114.609001, 11.316751) );
geometry.vertices.push( new THREE.Vector3(6.877538, 110.131897, 11.751680) );
geometry.vertices.push( new THREE.Vector3(6.685575, 114.527596, 12.136650) );
geometry.vertices.push( new THREE.Vector3(7.100962, 110.069595, 12.571570) );
geometry.vertices.push( new THREE.Vector3(8.336325, 114.456406, 13.776409) );
geometry.vertices.push( new THREE.Vector3(8.965763, 118.907204, 13.941710) );
geometry.vertices.push( new THREE.Vector3(8.144362, 118.852104, 14.161390) );
geometry.vertices.push( new THREE.Vector3(7.513237, 114.439499, 13.556740) );
geometry.vertices.push( new THREE.Vector3(7.321312, 118.835602, 13.941710) );
geometry.vertices.push( new THREE.Vector3(6.909037, 114.465698, 12.956551) );
geometry.vertices.push( new THREE.Vector3(6.717075, 118.861900, 13.341530) );
geometry.vertices.push( new THREE.Vector3(6.493649, 118.923698, 12.521620) );
geometry.vertices.push( new THREE.Vector3(7.705200, 110.043396, 13.171761) );
geometry.vertices.push( new THREE.Vector3(8.528250, 110.060295, 13.391479) );
geometry.vertices.push( new THREE.Vector3(9.349650, 110.115395, 13.171761) );
geometry.vertices.push( new THREE.Vector3(9.157724, 114.511505, 13.556740) );
geometry.vertices.push( new THREE.Vector3(9.949276, 110.194099, 12.571570) );
geometry.vertices.push( new THREE.Vector3(9.757350, 114.590302, 12.956551) );
geometry.vertices.push( new THREE.Vector3(10.166480, 110.275497, 11.751710) );
geometry.vertices.push( new THREE.Vector3(9.974549, 114.671303, 12.136650) );
geometry.vertices.push( new THREE.Vector3(9.943013, 110.337402, 10.931810) );
geometry.vertices.push( new THREE.Vector3(9.751086, 114.733505, 11.316790) );
geometry.vertices.push( new THREE.Vector3(9.559163, 119.129303, 11.701759) );
geometry.vertices.push( new THREE.Vector3(9.782587, 119.067398, 12.521620) );
geometry.vertices.push( new THREE.Vector3(9.565388, 118.986000, 13.341530) );
geometry.vertices.push( new THREE.Vector3(8.138100, 118.995407, 12.521620) );
geometry.vertices.push( new THREE.Vector3(9.559163, 119.129303, 11.701759) );
geometry.vertices.push( new THREE.Vector3(8.954926, 119.155502, 11.101541) );
geometry.vertices.push( new THREE.Vector3(8.131875, 119.139008, 10.881860) );
geometry.vertices.push( new THREE.Vector3(7.310475, 119.083908, 11.101541) );
geometry.vertices.push( new THREE.Vector3(6.710850, 119.005096, 11.701720) );
geometry.vertices.push( new THREE.Vector3(6.493649, 118.923698, 12.521620) );
geometry.vertices.push( new THREE.Vector3(6.717075, 118.861900, 13.341530) );
geometry.vertices.push( new THREE.Vector3(7.321312, 118.835602, 13.941710) );
geometry.vertices.push( new THREE.Vector3(9.565388, 118.986000, 13.341530) );
geometry.vertices.push( new THREE.Vector3(9.782587, 119.067398, 12.521620) );
geometry.vertices.push( new THREE.Vector3(-13.547510, 118.174896, -8.205825) );
geometry.vertices.push( new THREE.Vector3(-13.952440, 122.404099, -6.727125) );
geometry.vertices.push( new THREE.Vector3(-13.296790, 122.483299, -7.265512) );
geometry.vertices.push( new THREE.Vector3(-12.708680, 118.158401, -8.354551) );
geometry.vertices.push( new THREE.Vector3(-12.457990, 122.467102, -7.414275) );
geometry.vertices.push( new THREE.Vector3(-11.911460, 118.050804, -8.073825) );
geometry.vertices.push( new THREE.Vector3(-11.660780, 122.359505, -7.133512) );
geometry.vertices.push( new THREE.Vector3(-12.162149, 113.742401, -9.014137) );
geometry.vertices.push( new THREE.Vector3(-12.959400, 113.849998, -9.294863) );
geometry.vertices.push( new THREE.Vector3(-13.798200, 113.866493, -9.146138) );
geometry.vertices.push( new THREE.Vector3(-14.203130, 118.095398, -7.667437) );
geometry.vertices.push( new THREE.Vector3(-14.453811, 113.786995, -8.607750) );
geometry.vertices.push( new THREE.Vector3(-14.499900, 117.941597, -6.883688) );
geometry.vertices.push( new THREE.Vector3(-14.750589, 113.633301, -7.824000) );
geometry.vertices.push( new THREE.Vector3(-14.358260, 117.754898, -6.064575) );
geometry.vertices.push( new THREE.Vector3(-14.608950, 113.446106, -7.004887) );
geometry.vertices.push( new THREE.Vector3(-13.018990, 117.476997, -5.148825) );
geometry.vertices.push( new THREE.Vector3(-11.929501, 121.768906, -4.357237) );
geometry.vertices.push( new THREE.Vector3(-12.768300, 121.785400, -4.208513) );
geometry.vertices.push( new THREE.Vector3(-13.816240, 117.584595, -5.429550) );
geometry.vertices.push( new THREE.Vector3(-13.565551, 121.892998, -4.489237) );
geometry.vertices.push( new THREE.Vector3(-14.107570, 122.063194, -5.124263) );
geometry.vertices.push( new THREE.Vector3(-14.249180, 122.250000, -5.943375) );
geometry.vertices.push( new THREE.Vector3(-14.066919, 113.276199, -6.369863) );
geometry.vertices.push( new THREE.Vector3(-13.269670, 113.168594, -6.089137) );
geometry.vertices.push( new THREE.Vector3(-12.180190, 117.460503, -5.297550) );
geometry.vertices.push( new THREE.Vector3(-12.430881, 113.152100, -6.237863) );
geometry.vertices.push( new THREE.Vector3(-11.524570, 117.540001, -5.835938) );
geometry.vertices.push( new THREE.Vector3(-11.775260, 113.231598, -6.776250) );
geometry.vertices.push( new THREE.Vector3(-11.227800, 117.693695, -6.619687) );
geometry.vertices.push( new THREE.Vector3(-11.478490, 113.385406, -7.560000) );
geometry.vertices.push( new THREE.Vector3(-11.369400, 117.880905, -7.438800) );
geometry.vertices.push( new THREE.Vector3(-11.620090, 113.572098, -8.379112) );
geometry.vertices.push( new THREE.Vector3(-11.911460, 118.050804, -8.073825) );
geometry.vertices.push( new THREE.Vector3(-12.162149, 113.742401, -9.014137) );
geometry.vertices.push( new THREE.Vector3(-11.118710, 122.189201, -6.498487) );
geometry.vertices.push( new THREE.Vector3(-10.977110, 122.002098, -5.679375) );
geometry.vertices.push( new THREE.Vector3(-11.273890, 121.848404, -4.895625) );
geometry.vertices.push( new THREE.Vector3(-11.660780, 122.359505, -7.133512) );
geometry.vertices.push( new THREE.Vector3(-17.624811, 116.823402, -0.273198) );
geometry.vertices.push( new THREE.Vector3(-17.535980, 121.068001, 1.214164) );
geometry.vertices.push( new THREE.Vector3(-17.313789, 121.177902, 0.398978) );
geometry.vertices.push( new THREE.Vector3(-17.022190, 116.873299, -0.873529) );
geometry.vertices.push( new THREE.Vector3(-16.711199, 121.227707, -0.201353) );
geometry.vertices.push( new THREE.Vector3(-16.200640, 116.849197, -1.098139) );
geometry.vertices.push( new THREE.Vector3(-15.889650, 121.203804, -0.425963) );
geometry.vertices.push( new THREE.Vector3(-16.511629, 112.494804, -1.770315) );
geometry.vertices.push( new THREE.Vector3(-17.333210, 112.518799, -1.545701) );
geometry.vertices.push( new THREE.Vector3(-17.935801, 112.468895, -0.945375) );
geometry.vertices.push( new THREE.Vector3(-17.847000, 116.713501, 0.541991) );
geometry.vertices.push( new THREE.Vector3(-18.157990, 112.359001, -0.130183) );
geometry.vertices.push( new THREE.Vector3(-17.629200, 116.572502, 1.353611) );
geometry.vertices.push( new THREE.Vector3(-17.940191, 112.218407, 0.681439) );
geometry.vertices.push( new THREE.Vector3(-17.029840, 116.438606, 1.944187) );
geometry.vertices.push( new THREE.Vector3(-17.340830, 112.084106, 1.272011) );
geometry.vertices.push( new THREE.Vector3(-15.387860, 116.323494, 1.930868) );
geometry.vertices.push( new THREE.Vector3(-14.474291, 120.727501, 2.002714) );
geometry.vertices.push( new THREE.Vector3(-15.076870, 120.677994, 2.603044) );
geometry.vertices.push( new THREE.Vector3(-16.209450, 116.347504, 2.155481) );
geometry.vertices.push( new THREE.Vector3(-15.898420, 120.702003, 2.827654) );
geometry.vertices.push( new THREE.Vector3(-16.718809, 120.793106, 2.616364) );
geometry.vertices.push( new THREE.Vector3(-17.318211, 120.927002, 2.025784) );
geometry.vertices.push( new THREE.Vector3(-16.520441, 111.993004, 1.483301) );
geometry.vertices.push( new THREE.Vector3(-15.698891, 111.968994, 1.258691) );
geometry.vertices.push( new THREE.Vector3(-14.785271, 116.373001, 1.330541) );
geometry.vertices.push( new THREE.Vector3(-15.096261, 112.018501, 0.658365) );
geometry.vertices.push( new THREE.Vector3(-14.563089, 116.483200, 0.515347) );
geometry.vertices.push( new THREE.Vector3(-14.874109, 112.128700, -0.156829) );
geometry.vertices.push( new THREE.Vector3(-14.780890, 116.623901, -0.296271) );
geometry.vertices.push( new THREE.Vector3(-15.091880, 112.269402, -0.968449) );
geometry.vertices.push( new THREE.Vector3(-15.380250, 116.757797, -0.886849) );
geometry.vertices.push( new THREE.Vector3(-15.691240, 112.403595, -1.559025) );
geometry.vertices.push( new THREE.Vector3(-16.200640, 116.849197, -1.098139) );
geometry.vertices.push( new THREE.Vector3(-16.511629, 112.494804, -1.770315) );
geometry.vertices.push( new THREE.Vector3(-15.069260, 121.112297, -0.214672) );
geometry.vertices.push( new THREE.Vector3(-14.469860, 120.978401, 0.375907) );
geometry.vertices.push( new THREE.Vector3(-14.252099, 120.837402, 1.187528) );
geometry.vertices.push( new THREE.Vector3(-15.889650, 121.203804, -0.425963) );
geometry.vertices.push( new THREE.Vector3(-15.682390, 115.441498, 7.651088) );
geometry.vertices.push( new THREE.Vector3(-15.082911, 119.707504, 8.946150) );
geometry.vertices.push( new THREE.Vector3(-15.414000, 119.819603, 8.169112) );
geometry.vertices.push( new THREE.Vector3(-15.577430, 115.534500, 6.810638) );
geometry.vertices.push( new THREE.Vector3(-15.309070, 119.912598, 7.328700) );
geometry.vertices.push( new THREE.Vector3(-15.064541, 115.583298, 6.132000) );
geometry.vertices.push( new THREE.Vector3(-14.796190, 119.961800, 6.650062) );
geometry.vertices.push( new THREE.Vector3(-15.332890, 111.205101, 5.613975) );
geometry.vertices.push( new THREE.Vector3(-15.845770, 111.156403, 6.292613) );
geometry.vertices.push( new THREE.Vector3(-15.950739, 111.063400, 7.133063) );
geometry.vertices.push( new THREE.Vector3(-15.351259, 115.329399, 8.428125) );
geometry.vertices.push( new THREE.Vector3(-15.619610, 110.950897, 7.910062) );
geometry.vertices.push( new THREE.Vector3(-14.672850, 115.227699, 8.933512) );
geometry.vertices.push( new THREE.Vector3(-14.941200, 110.849594, 8.415486) );
geometry.vertices.push( new THREE.Vector3(-13.828879, 115.164398, 9.031913) );
geometry.vertices.push( new THREE.Vector3(-14.097219, 110.786201, 8.513887) );
geometry.vertices.push( new THREE.Vector3(-12.532610, 115.204895, 8.018250) );
geometry.vertices.push( new THREE.Vector3(-12.159300, 119.676399, 7.695863) );
geometry.vertices.push( new THREE.Vector3(-12.264260, 119.583405, 8.536275) );
geometry.vertices.push( new THREE.Vector3(-13.045500, 115.156105, 8.696887) );
geometry.vertices.push( new THREE.Vector3(-12.777149, 119.534302, 9.214951) );
geometry.vertices.push( new THREE.Vector3(-13.560520, 119.542900, 9.549936) );
geometry.vertices.push( new THREE.Vector3(-14.404499, 119.606308, 9.451575) );
geometry.vertices.push( new THREE.Vector3(-13.313849, 110.778000, 8.178863) );
geometry.vertices.push( new THREE.Vector3(-12.800961, 110.826805, 7.500225) );
geometry.vertices.push( new THREE.Vector3(-12.427649, 115.297905, 7.177838) );
geometry.vertices.push( new THREE.Vector3(-12.695999, 110.919701, 6.659775) );
geometry.vertices.push( new THREE.Vector3(-12.758739, 115.410400, 6.400800) );
geometry.vertices.push( new THREE.Vector3(-13.027130, 111.031898, 5.882775) );
geometry.vertices.push( new THREE.Vector3(-13.437191, 115.511597, 5.895375) );
geometry.vertices.push( new THREE.Vector3(-13.705540, 111.133507, 5.377350) );
geometry.vertices.push( new THREE.Vector3(-14.281159, 115.575005, 5.797013) );
geometry.vertices.push( new THREE.Vector3(-14.549510, 111.196899, 5.278950) );
geometry.vertices.push( new THREE.Vector3(-15.064541, 115.583298, 6.132000) );
geometry.vertices.push( new THREE.Vector3(-15.332890, 111.205101, 5.613975) );
geometry.vertices.push( new THREE.Vector3(-14.012811, 119.953094, 6.315038) );
geometry.vertices.push( new THREE.Vector3(-13.168840, 119.889793, 6.413400) );
geometry.vertices.push( new THREE.Vector3(-12.490390, 119.788506, 6.918825) );
geometry.vertices.push( new THREE.Vector3(-14.796190, 119.961800, 6.650062) );
geometry.vertices.push( new THREE.Vector3(-9.757463, 114.590302, 12.956481) );
geometry.vertices.push( new THREE.Vector3(-8.965912, 118.907204, 13.941640) );
geometry.vertices.push( new THREE.Vector3(-9.565536, 118.986000, 13.341411) );
geometry.vertices.push( new THREE.Vector3(-9.974625, 114.671303, 12.136570) );
geometry.vertices.push( new THREE.Vector3(-9.782737, 119.067398, 12.521550) );
geometry.vertices.push( new THREE.Vector3(-9.751200, 114.733505, 11.316710) );
geometry.vertices.push( new THREE.Vector3(-9.559274, 119.129303, 11.701651) );
geometry.vertices.push( new THREE.Vector3(-9.943125, 110.337402, 10.931740) );
geometry.vertices.push( new THREE.Vector3(-10.166550, 110.275497, 11.751640) );
geometry.vertices.push( new THREE.Vector3(-9.949389, 110.194099, 12.571500) );
geometry.vertices.push( new THREE.Vector3(-9.157838, 114.511505, 13.556661) );
geometry.vertices.push( new THREE.Vector3(-9.349763, 110.115395, 13.171721) );
geometry.vertices.push( new THREE.Vector3(-8.336437, 114.456406, 13.776380) );
geometry.vertices.push( new THREE.Vector3(-8.528362, 110.060295, 13.391399) );
geometry.vertices.push( new THREE.Vector3(-7.513350, 114.439499, 13.556661) );
geometry.vertices.push( new THREE.Vector3(-7.705275, 110.043396, 13.171721) );
geometry.vertices.push( new THREE.Vector3(-6.685688, 114.527596, 12.136610) );
geometry.vertices.push( new THREE.Vector3(-6.710962, 119.005096, 11.701690) );
geometry.vertices.push( new THREE.Vector3(-6.493763, 118.923698, 12.521550) );
geometry.vertices.push( new THREE.Vector3(-6.909150, 114.465698, 12.956481) );
geometry.vertices.push( new THREE.Vector3(-6.717224, 118.861900, 13.341451) );
geometry.vertices.push( new THREE.Vector3(-7.321425, 118.835602, 13.941640) );
geometry.vertices.push( new THREE.Vector3(-8.144513, 118.852104, 14.161309) );
geometry.vertices.push( new THREE.Vector3(-7.101075, 110.069595, 12.571541) );
geometry.vertices.push( new THREE.Vector3(-6.877612, 110.131897, 11.751640) );
geometry.vertices.push( new THREE.Vector3(-6.902887, 114.609001, 11.316710) );
geometry.vertices.push( new THREE.Vector3(-7.094811, 110.212898, 10.931740) );
geometry.vertices.push( new THREE.Vector3(-7.502512, 114.687798, 10.716520) );
geometry.vertices.push( new THREE.Vector3(-7.694438, 110.291603, 10.331551) );
geometry.vertices.push( new THREE.Vector3(-8.323913, 114.742897, 10.496810) );
geometry.vertices.push( new THREE.Vector3(-8.515838, 110.346695, 10.111880) );
geometry.vertices.push( new THREE.Vector3(-9.146962, 114.759804, 10.716490) );
geometry.vertices.push( new THREE.Vector3(-9.338887, 110.363602, 10.331551) );
geometry.vertices.push( new THREE.Vector3(-9.751200, 114.733505, 11.316710) );
geometry.vertices.push( new THREE.Vector3(-9.943125, 110.337402, 10.931740) );
geometry.vertices.push( new THREE.Vector3(-8.955075, 119.155502, 11.101460) );
geometry.vertices.push( new THREE.Vector3(-8.131987, 119.139008, 10.881790) );
geometry.vertices.push( new THREE.Vector3(-7.310587, 119.083908, 11.101460) );
geometry.vertices.push( new THREE.Vector3(-9.559274, 119.129303, 11.701651) );
geometry.vertices.push( new THREE.Vector3(14.979259, 154.417892, 8.944050) );
geometry.vertices.push( new THREE.Vector3(16.417841, 155.519196, 7.524787) );
geometry.vertices.push( new THREE.Vector3(19.041040, 154.578400, 8.030586) );
geometry.vertices.push( new THREE.Vector3(17.519661, 156.708710, 6.565725) );
geometry.vertices.push( new THREE.Vector3(-16.615499, 151.951096, 9.144188) );
geometry.vertices.push( new THREE.Vector3(-17.927849, 149.220001, 8.426587) );
geometry.vertices.push( new THREE.Vector3(-18.100460, 153.559509, 7.730700) );
geometry.vertices.push( new THREE.Vector3(-19.041040, 154.578400, 8.030586) );
geometry.vertices.push( new THREE.Vector3(-19.845860, 152.013809, 7.857863) );
geometry.vertices.push( new THREE.Vector3(9.835313, 156.684402, -15.498790) );
geometry.vertices.push( new THREE.Vector3(4.428112, 152.672989, -16.398790) );
geometry.vertices.push( new THREE.Vector3(4.355625, 156.106903, -15.996901) );
geometry.vertices.push( new THREE.Vector3(10.318540, 153.096405, -15.909520) );
geometry.vertices.push( new THREE.Vector3(15.087530, 157.652603, -13.382700) );
geometry.vertices.push( new THREE.Vector3(9.652426, 158.757812, -14.968760) );
geometry.vertices.push( new THREE.Vector3(4.216125, 157.786102, -15.638290) );
geometry.vertices.push( new THREE.Vector3(0.000007, 157.492493, -14.049641) );
geometry.vertices.push( new THREE.Vector3(-0.000014, 155.899094, -14.873250) );
geometry.vertices.push( new THREE.Vector3(-0.000013, 152.518112, -15.343460) );
geometry.vertices.push( new THREE.Vector3(4.456387, 148.918503, -16.204651) );
geometry.vertices.push( new THREE.Vector3(10.567760, 149.100800, -16.027311) );
geometry.vertices.push( new THREE.Vector3(4.558538, 144.456696, -15.706390) );
geometry.vertices.push( new THREE.Vector3(0.000000, 144.569305, -14.560390) );
geometry.vertices.push( new THREE.Vector3(0.000015, 140.406708, -13.755110) );
geometry.vertices.push( new THREE.Vector3(-0.000009, 148.819901, -15.188590) );
geometry.vertices.push( new THREE.Vector3(3.900787, 135.891693, -13.779670) );
geometry.vertices.push( new THREE.Vector3(0.000035, 132.681793, -11.779840) );
geometry.vertices.push( new THREE.Vector3(0.000029, 136.080002, -12.566779) );
geometry.vertices.push( new THREE.Vector3(4.387275, 140.135605, -14.944839) );
geometry.vertices.push( new THREE.Vector3(9.889799, 144.487503, -15.869101) );
geometry.vertices.push( new THREE.Vector3(16.309311, 149.296494, -15.099820) );
geometry.vertices.push( new THREE.Vector3(16.617970, 153.191605, -14.633770) );
geometry.vertices.push( new THREE.Vector3(20.290869, 149.563095, -12.982241) );
geometry.vertices.push( new THREE.Vector3(20.191429, 153.217896, -12.859310) );
geometry.vertices.push( new THREE.Vector3(17.731649, 149.451691, -14.122950) );
geometry.vertices.push( new THREE.Vector3(18.452700, 145.340591, -13.492351) );
geometry.vertices.push( new THREE.Vector3(14.872010, 144.784897, -15.034990) );
geometry.vertices.push( new THREE.Vector3(9.326698, 140.000198, -14.967640) );
geometry.vertices.push( new THREE.Vector3(8.542650, 135.599991, -14.120060) );
geometry.vertices.push( new THREE.Vector3(3.566217, 132.445496, -12.469130) );
geometry.vertices.push( new THREE.Vector3(20.860239, 152.983505, -12.541500) );
geometry.vertices.push( new THREE.Vector3(21.116060, 149.431091, -12.188170) );
geometry.vertices.push( new THREE.Vector3(20.899950, 146.134491, -11.575990) );
geometry.vertices.push( new THREE.Vector3(21.523010, 146.695099, -10.807050) );
geometry.vertices.push( new THREE.Vector3(21.711449, 145.031204, -9.384788) );
geometry.vertices.push( new THREE.Vector3(22.195280, 145.939102, -8.702250) );
geometry.vertices.push( new THREE.Vector3(22.146040, 147.255798, -10.037030) );
geometry.vertices.push( new THREE.Vector3(21.941250, 149.299103, -11.394000) );
geometry.vertices.push( new THREE.Vector3(21.529051, 152.749100, -12.223730) );
geometry.vertices.push( new THREE.Vector3(21.403200, 157.202988, -11.528890) );
geometry.vertices.push( new THREE.Vector3(22.276091, 152.487396, -11.868640) );
geometry.vertices.push( new THREE.Vector3(23.272160, 149.519302, -10.784810) );
geometry.vertices.push( new THREE.Vector3(19.764299, 157.023804, -12.520390) );
geometry.vertices.push( new THREE.Vector3(19.264009, 159.223495, -11.283710) );
geometry.vertices.push( new THREE.Vector3(17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(14.112531, 159.936005, -12.745131) );
geometry.vertices.push( new THREE.Vector3(8.521987, 110.203506, 11.751680) );
geometry.vertices.push( new THREE.Vector3(9.338813, 110.363602, 10.331630) );
geometry.vertices.push( new THREE.Vector3(9.943013, 110.337402, 10.931810) );
geometry.vertices.push( new THREE.Vector3(10.166480, 110.275497, 11.751710) );
geometry.vertices.push( new THREE.Vector3(9.949276, 110.194099, 12.571570) );
geometry.vertices.push( new THREE.Vector3(7.705200, 110.043396, 13.171761) );
geometry.vertices.push( new THREE.Vector3(7.100962, 110.069595, 12.571570) );
geometry.vertices.push( new THREE.Vector3(6.877538, 110.131897, 11.751680) );
geometry.vertices.push( new THREE.Vector3(7.094737, 110.212898, 10.931810) );
geometry.vertices.push( new THREE.Vector3(7.694362, 110.291603, 10.331590) );
geometry.vertices.push( new THREE.Vector3(8.515763, 110.346695, 10.111910) );
geometry.vertices.push( new THREE.Vector3(27.586910, 159.267395, -6.228562) );
geometry.vertices.push( new THREE.Vector3(23.537960, 159.160095, -9.173363) );
geometry.vertices.push( new THREE.Vector3(24.809401, 160.995407, -6.203475) );
geometry.vertices.push( new THREE.Vector3(26.069099, 156.858795, -9.130276) );
geometry.vertices.push( new THREE.Vector3(25.045389, 154.180496, -10.605710) );
geometry.vertices.push( new THREE.Vector3(23.071461, 155.732590, -11.054811) );
geometry.vertices.push( new THREE.Vector3(20.643789, 161.167099, -8.635688) );
geometry.vertices.push( new THREE.Vector3(21.201040, 162.498001, -5.790600) );
geometry.vertices.push( new THREE.Vector3(19.264009, 159.223495, -11.283710) );
geometry.vertices.push( new THREE.Vector3(21.403200, 157.202988, -11.528890) );
geometry.vertices.push( new THREE.Vector3(22.276091, 152.487396, -11.868640) );
geometry.vertices.push( new THREE.Vector3(23.028601, 152.001801, -11.587090) );
geometry.vertices.push( new THREE.Vector3(24.353439, 151.147110, -11.075960) );
geometry.vertices.push( new THREE.Vector3(17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(19.166140, 162.664108, -7.785111) );
geometry.vertices.push( new THREE.Vector3(19.358250, 163.138504, -5.482463) );
geometry.vertices.push( new THREE.Vector3(19.036390, 163.564896, -2.789096) );
geometry.vertices.push( new THREE.Vector3(20.632090, 163.418991, -2.786490) );
geometry.vertices.push( new THREE.Vector3(18.058430, 163.145599, -0.532804) );
geometry.vertices.push( new THREE.Vector3(15.679351, 159.611206, 3.965625) );
geometry.vertices.push( new THREE.Vector3(17.519661, 156.708710, 6.565725) );
geometry.vertices.push( new THREE.Vector3(18.970079, 158.221497, 6.521700) );
geometry.vertices.push( new THREE.Vector3(17.141590, 161.359497, 2.678715) );
geometry.vertices.push( new THREE.Vector3(16.018200, 162.584610, 1.787291) );
geometry.vertices.push( new THREE.Vector3(18.224850, 162.057693, 1.306552) );
geometry.vertices.push( new THREE.Vector3(19.727329, 162.966797, -0.475939) );
geometry.vertices.push( new THREE.Vector3(22.859180, 162.772903, -2.757071) );
geometry.vertices.push( new THREE.Vector3(12.722810, 161.938904, 3.000405) );
geometry.vertices.push( new THREE.Vector3(14.253449, 160.628998, 3.521422) );
geometry.vertices.push( new THREE.Vector3(20.608690, 160.374695, 4.751325) );
geometry.vertices.push( new THREE.Vector3(21.841280, 161.797501, 2.737433) );
geometry.vertices.push( new THREE.Vector3(22.619360, 162.607895, 0.023324) );
geometry.vertices.push( new THREE.Vector3(25.352621, 161.697403, -2.835773) );
geometry.vertices.push( new THREE.Vector3(28.444349, 159.907104, -2.903805) );
geometry.vertices.push( new THREE.Vector3(31.296339, 157.354111, -2.955826) );
geometry.vertices.push( new THREE.Vector3(30.116821, 156.652496, -6.240750) );
geometry.vertices.push( new THREE.Vector3(28.121141, 154.822189, -8.585512) );
geometry.vertices.push( new THREE.Vector3(32.142452, 153.573410, -5.118263) );
geometry.vertices.push( new THREE.Vector3(28.519758, 159.955093, 0.857749) );
geometry.vertices.push( new THREE.Vector3(25.320860, 161.824493, 0.522784) );
geometry.vertices.push( new THREE.Vector3(24.532499, 160.929413, 3.884250) );
geometry.vertices.push( new THREE.Vector3(23.122009, 159.084000, 6.421125) );
geometry.vertices.push( new THREE.Vector3(27.459749, 159.116302, 4.332037) );
geometry.vertices.push( new THREE.Vector3(30.970388, 157.251709, 0.718020) );
geometry.vertices.push( new THREE.Vector3(32.712341, 154.479797, 0.606064) );
geometry.vertices.push( new THREE.Vector3(32.922901, 154.483902, -2.927310) );
geometry.vertices.push( new THREE.Vector3(25.396389, 156.783401, 7.381313) );
geometry.vertices.push( new THREE.Vector3(29.916000, 156.607498, 4.159162) );
geometry.vertices.push( new THREE.Vector3(31.766850, 154.043991, 3.814050) );
geometry.vertices.push( new THREE.Vector3(33.640800, 152.893494, 0.765139) );
geometry.vertices.push( new THREE.Vector3(33.615559, 152.882202, -2.724986) );
geometry.vertices.push( new THREE.Vector3(34.478291, 151.815002, -2.320511) );
geometry.vertices.push( new THREE.Vector3(34.786011, 151.127594, 0.901605) );
geometry.vertices.push( new THREE.Vector3(35.055943, 151.173401, -1.889231) );
geometry.vertices.push( new THREE.Vector3(36.680889, 149.782104, -1.812026) );
geometry.vertices.push( new THREE.Vector3(32.827648, 152.721405, -4.648238) );
geometry.vertices.push( new THREE.Vector3(33.487610, 152.032104, -4.593900) );
geometry.vertices.push( new THREE.Vector3(35.376148, 151.185791, -4.297500) );
geometry.vertices.push( new THREE.Vector3(37.266342, 149.683502, -4.166362) );
geometry.vertices.push( new THREE.Vector3(38.888622, 147.406097, -4.231013) );
geometry.vertices.push( new THREE.Vector3(38.560131, 147.858398, -1.965619) );
geometry.vertices.push( new THREE.Vector3(34.396652, 148.976303, -7.912462) );
geometry.vertices.push( new THREE.Vector3(36.945148, 148.721603, -6.175387) );
geometry.vertices.push( new THREE.Vector3(35.927620, 147.449188, -7.741275) );
geometry.vertices.push( new THREE.Vector3(35.327103, 150.238098, -6.419925) );
geometry.vertices.push( new THREE.Vector3(33.284142, 147.618408, -8.780362) );
geometry.vertices.push( new THREE.Vector3(35.148232, 146.350510, -8.298375) );
geometry.vertices.push( new THREE.Vector3(32.518311, 150.277496, -7.935937) );
geometry.vertices.push( new THREE.Vector3(31.212000, 149.057190, -8.878800) );
geometry.vertices.push( new THREE.Vector3(31.590939, 145.954498, -9.022762) );
geometry.vertices.push( new THREE.Vector3(34.204842, 144.997498, -8.434988) );
geometry.vertices.push( new THREE.Vector3(35.988411, 144.727905, -7.816312) );
geometry.vertices.push( new THREE.Vector3(37.084202, 145.934601, -7.309725) );
geometry.vertices.push( new THREE.Vector3(28.426842, 149.934402, -9.011400) );
geometry.vertices.push( new THREE.Vector3(30.041811, 151.250992, -7.878112) );
geometry.vertices.push( new THREE.Vector3(28.073141, 148.315506, -9.323288) );
geometry.vertices.push( new THREE.Vector3(33.379269, 151.221390, -6.430275) );
geometry.vertices.push( new THREE.Vector3(31.726540, 152.146896, -6.085575) );
geometry.vertices.push( new THREE.Vector3(30.638960, 152.769394, -7.068750) );
geometry.vertices.push( new THREE.Vector3(27.130280, 152.550400, -9.871687) );
geometry.vertices.push( new THREE.Vector3(26.217190, 150.097900, -9.646275) );
geometry.vertices.push( new THREE.Vector3(26.745302, 145.313995, -10.120610) );
geometry.vertices.push( new THREE.Vector3(25.141689, 147.893600, -9.573488) );
geometry.vertices.push( new THREE.Vector3(24.388119, 146.967010, -8.799338) );
geometry.vertices.push( new THREE.Vector3(24.471109, 142.666107, -6.693600) );
geometry.vertices.push( new THREE.Vector3(23.668499, 146.173508, -7.272487) );
geometry.vertices.push( new THREE.Vector3(22.886511, 146.703400, -6.626925) );
geometry.vertices.push( new THREE.Vector3(23.812880, 148.089691, -8.288549) );
geometry.vertices.push( new THREE.Vector3(23.275690, 147.760910, -9.321600) );
geometry.vertices.push( new THREE.Vector3(24.211800, 149.310806, -9.538313) );
geometry.vertices.push( new THREE.Vector3(23.272160, 149.519302, -10.784810) );
geometry.vertices.push( new THREE.Vector3(25.249800, 143.254105, -9.160650) );
geometry.vertices.push( new THREE.Vector3(25.884151, 139.969894, -6.368775) );
geometry.vertices.push( new THREE.Vector3(25.938940, 140.368500, -3.179869) );
geometry.vertices.push( new THREE.Vector3(27.451500, 138.148102, -3.077224) );
geometry.vertices.push( new THREE.Vector3(26.554050, 140.734894, -8.751750) );
geometry.vertices.push( new THREE.Vector3(24.551439, 143.410095, -2.949416) );
geometry.vertices.push( new THREE.Vector3(29.344839, 136.723495, -2.553904) );
geometry.vertices.push( new THREE.Vector3(32.017761, 136.309509, 2.380189) );
geometry.vertices.push( new THREE.Vector3(29.176390, 137.708603, 2.112649) );
geometry.vertices.push( new THREE.Vector3(27.213821, 139.441101, 2.007375) );
geometry.vertices.push( new THREE.Vector3(25.620821, 141.597397, 1.539514) );
geometry.vertices.push( new THREE.Vector3(23.804251, 144.088104, 1.429838) );
geometry.vertices.push( new THREE.Vector3(23.306959, 145.616989, -3.306926) );
geometry.vertices.push( new THREE.Vector3(22.328701, 145.808304, -0.104167) );
geometry.vertices.push( new THREE.Vector3(22.349140, 145.628601, -3.789150) );
geometry.vertices.push( new THREE.Vector3(21.346390, 146.072311, -0.052826) );
geometry.vertices.push( new THREE.Vector3(-12.162149, 113.742401, -9.014137) );
geometry.vertices.push( new THREE.Vector3(-11.620090, 113.572098, -8.379112) );
geometry.vertices.push( new THREE.Vector3(-13.114540, 113.509094, -7.692000) );
geometry.vertices.push( new THREE.Vector3(-12.959400, 113.849998, -9.294863) );
geometry.vertices.push( new THREE.Vector3(-13.798200, 113.866493, -9.146138) );
geometry.vertices.push( new THREE.Vector3(-14.608950, 113.446106, -7.004887) );
geometry.vertices.push( new THREE.Vector3(-14.066919, 113.276199, -6.369863) );
geometry.vertices.push( new THREE.Vector3(-13.269670, 113.168594, -6.089137) );
geometry.vertices.push( new THREE.Vector3(-12.430881, 113.152100, -6.237863) );
geometry.vertices.push( new THREE.Vector3(-11.775260, 113.231598, -6.776250) );
geometry.vertices.push( new THREE.Vector3(-11.478490, 113.385406, -7.560000) );
geometry.vertices.push( new THREE.Vector3(-11.118710, 122.189201, -6.498487) );
geometry.vertices.push( new THREE.Vector3(-11.660780, 122.359505, -7.133512) );
geometry.vertices.push( new THREE.Vector3(-12.613159, 122.126198, -5.811375) );
geometry.vertices.push( new THREE.Vector3(-10.977110, 122.002098, -5.679375) );
geometry.vertices.push( new THREE.Vector3(-11.273890, 121.848404, -4.895625) );
geometry.vertices.push( new THREE.Vector3(-11.929501, 121.768906, -4.357237) );
geometry.vertices.push( new THREE.Vector3(-12.768300, 121.785400, -4.208513) );
geometry.vertices.push( new THREE.Vector3(-13.565551, 121.892998, -4.489237) );
geometry.vertices.push( new THREE.Vector3(-14.107570, 122.063194, -5.124263) );
geometry.vertices.push( new THREE.Vector3(-13.296790, 122.483299, -7.265512) );
geometry.vertices.push( new THREE.Vector3(-12.457990, 122.467102, -7.414275) );
geometry.vertices.push( new THREE.Vector3(-16.511629, 112.494804, -1.770315) );
geometry.vertices.push( new THREE.Vector3(-15.691240, 112.403595, -1.559025) );
geometry.vertices.push( new THREE.Vector3(-16.516050, 112.243904, -0.143507) );
geometry.vertices.push( new THREE.Vector3(-17.333210, 112.518799, -1.545701) );
geometry.vertices.push( new THREE.Vector3(-17.935801, 112.468895, -0.945375) );
geometry.vertices.push( new THREE.Vector3(-17.340830, 112.084106, 1.272011) );
geometry.vertices.push( new THREE.Vector3(-16.520441, 111.993004, 1.483301) );
geometry.vertices.push( new THREE.Vector3(-15.698891, 111.968994, 1.258691) );
geometry.vertices.push( new THREE.Vector3(-15.096261, 112.018501, 0.658365) );
geometry.vertices.push( new THREE.Vector3(-14.874109, 112.128700, -0.156829) );
geometry.vertices.push( new THREE.Vector3(-15.091880, 112.269402, -0.968449) );
geometry.vertices.push( new THREE.Vector3(-15.069260, 121.112297, -0.214672) );
geometry.vertices.push( new THREE.Vector3(-15.889650, 121.203804, -0.425963) );
geometry.vertices.push( new THREE.Vector3(-15.894040, 120.952904, 1.200844) );
geometry.vertices.push( new THREE.Vector3(-14.469860, 120.978401, 0.375907) );
geometry.vertices.push( new THREE.Vector3(-14.252099, 120.837402, 1.187528) );
geometry.vertices.push( new THREE.Vector3(-14.474291, 120.727501, 2.002714) );
geometry.vertices.push( new THREE.Vector3(-15.076870, 120.677994, 2.603044) );
geometry.vertices.push( new THREE.Vector3(-15.898420, 120.702003, 2.827654) );
geometry.vertices.push( new THREE.Vector3(-16.718809, 120.793106, 2.616364) );
geometry.vertices.push( new THREE.Vector3(-17.313789, 121.177902, 0.398978) );
geometry.vertices.push( new THREE.Vector3(-16.711199, 121.227707, -0.201353) );
geometry.vertices.push( new THREE.Vector3(-15.332890, 111.205101, 5.613975) );
geometry.vertices.push( new THREE.Vector3(-14.549510, 111.196899, 5.278950) );
geometry.vertices.push( new THREE.Vector3(-14.323349, 110.991394, 6.896399) );
geometry.vertices.push( new THREE.Vector3(-15.845770, 111.156403, 6.292613) );
geometry.vertices.push( new THREE.Vector3(-15.950739, 111.063400, 7.133063) );
geometry.vertices.push( new THREE.Vector3(-14.097219, 110.786201, 8.513887) );
geometry.vertices.push( new THREE.Vector3(-13.313849, 110.778000, 8.178863) );
geometry.vertices.push( new THREE.Vector3(-12.800961, 110.826805, 7.500225) );
geometry.vertices.push( new THREE.Vector3(-12.695999, 110.919701, 6.659775) );
geometry.vertices.push( new THREE.Vector3(-13.027130, 111.031898, 5.882775) );
geometry.vertices.push( new THREE.Vector3(-13.705540, 111.133507, 5.377350) );
geometry.vertices.push( new THREE.Vector3(-14.012811, 119.953094, 6.315038) );
geometry.vertices.push( new THREE.Vector3(-14.796190, 119.961800, 6.650062) );
geometry.vertices.push( new THREE.Vector3(-13.786650, 119.747993, 7.932487) );
geometry.vertices.push( new THREE.Vector3(-13.168840, 119.889793, 6.413400) );
geometry.vertices.push( new THREE.Vector3(-12.490390, 119.788506, 6.918825) );
geometry.vertices.push( new THREE.Vector3(-12.159300, 119.676399, 7.695863) );
geometry.vertices.push( new THREE.Vector3(-12.264260, 119.583405, 8.536275) );
geometry.vertices.push( new THREE.Vector3(-12.777149, 119.534302, 9.214951) );
geometry.vertices.push( new THREE.Vector3(-13.560520, 119.542900, 9.549936) );
geometry.vertices.push( new THREE.Vector3(-15.414000, 119.819603, 8.169112) );
geometry.vertices.push( new THREE.Vector3(-15.309070, 119.912598, 7.328700) );
geometry.vertices.push( new THREE.Vector3(-9.943125, 110.337402, 10.931740) );
geometry.vertices.push( new THREE.Vector3(-9.338887, 110.363602, 10.331551) );
geometry.vertices.push( new THREE.Vector3(-8.522100, 110.203506, 11.751640) );
geometry.vertices.push( new THREE.Vector3(-10.166550, 110.275497, 11.751640) );
geometry.vertices.push( new THREE.Vector3(-9.949389, 110.194099, 12.571500) );
geometry.vertices.push( new THREE.Vector3(-7.705275, 110.043396, 13.171721) );
geometry.vertices.push( new THREE.Vector3(-7.101075, 110.069595, 12.571541) );
geometry.vertices.push( new THREE.Vector3(-6.877612, 110.131897, 11.751640) );
geometry.vertices.push( new THREE.Vector3(-7.094811, 110.212898, 10.931740) );
geometry.vertices.push( new THREE.Vector3(-7.694438, 110.291603, 10.331551) );
geometry.vertices.push( new THREE.Vector3(-8.515838, 110.346695, 10.111880) );
geometry.vertices.push( new THREE.Vector3(-8.955075, 119.155502, 11.101460) );
geometry.vertices.push( new THREE.Vector3(-9.559274, 119.129303, 11.701651) );
geometry.vertices.push( new THREE.Vector3(-8.138249, 118.995407, 12.521550) );
geometry.vertices.push( new THREE.Vector3(-8.131987, 119.139008, 10.881790) );
geometry.vertices.push( new THREE.Vector3(-7.310587, 119.083908, 11.101460) );
geometry.vertices.push( new THREE.Vector3(-6.710962, 119.005096, 11.701690) );
geometry.vertices.push( new THREE.Vector3(-6.493763, 118.923698, 12.521550) );
geometry.vertices.push( new THREE.Vector3(-6.717224, 118.861900, 13.341451) );
geometry.vertices.push( new THREE.Vector3(-7.321425, 118.835602, 13.941640) );
geometry.vertices.push( new THREE.Vector3(-9.565536, 118.986000, 13.341411) );
geometry.vertices.push( new THREE.Vector3(-9.782737, 119.067398, 12.521550) );
geometry.vertices.push( new THREE.Vector3(-10.318540, 153.096405, -15.909531) );
geometry.vertices.push( new THREE.Vector3(-15.087560, 157.652603, -13.382700) );
geometry.vertices.push( new THREE.Vector3(-9.835313, 156.684402, -15.498790) );
geometry.vertices.push( new THREE.Vector3(-4.428113, 152.672989, -16.398750) );
geometry.vertices.push( new THREE.Vector3(-4.355662, 156.106903, -15.996860) );
geometry.vertices.push( new THREE.Vector3(-9.652388, 158.757812, -14.968760) );
geometry.vertices.push( new THREE.Vector3(-4.216125, 157.786102, -15.638290) );
geometry.vertices.push( new THREE.Vector3(-4.456387, 148.918503, -16.204651) );
geometry.vertices.push( new THREE.Vector3(-10.567800, 149.100800, -16.027281) );
geometry.vertices.push( new THREE.Vector3(-4.558538, 144.456696, -15.706390) );
geometry.vertices.push( new THREE.Vector3(-3.900713, 135.891693, -13.779710) );
geometry.vertices.push( new THREE.Vector3(-3.566142, 132.445496, -12.469171) );
geometry.vertices.push( new THREE.Vector3(-4.387275, 140.135605, -14.944839) );
geometry.vertices.push( new THREE.Vector3(-9.889799, 144.487503, -15.869101) );
geometry.vertices.push( new THREE.Vector3(-16.309311, 149.296494, -15.099791) );
geometry.vertices.push( new THREE.Vector3(-16.617970, 153.191605, -14.633740) );
geometry.vertices.push( new THREE.Vector3(-14.872010, 144.784897, -15.034990) );
geometry.vertices.push( new THREE.Vector3(-19.861799, 136.533401, -3.708743) );
geometry.vertices.push( new THREE.Vector3(-18.960711, 136.133606, -7.110937) );
geometry.vertices.push( new THREE.Vector3(-16.857859, 132.589905, -3.457174) );
geometry.vertices.push( new THREE.Vector3(-14.722989, 131.952408, -8.370790) );
geometry.vertices.push( new THREE.Vector3(-16.865030, 135.844894, -10.020110) );
geometry.vertices.push( new THREE.Vector3(-13.213650, 135.527298, -12.732530) );
geometry.vertices.push( new THREE.Vector3(-18.809549, 140.707901, -11.375960) );
geometry.vertices.push( new THREE.Vector3(-14.208039, 140.178391, -13.712400) );
geometry.vertices.push( new THREE.Vector3(-9.326698, 140.000198, -14.967640) );
geometry.vertices.push( new THREE.Vector3(-8.542613, 135.599991, -14.120100) );
geometry.vertices.push( new THREE.Vector3(-7.770301, 132.192398, -12.555040) );
geometry.vertices.push( new THREE.Vector3(-11.954550, 132.179993, -11.124599) );
geometry.vertices.push( new THREE.Vector3(-7.361699, 130.049210, -11.538220) );
geometry.vertices.push( new THREE.Vector3(-11.178300, 130.126907, -10.147090) );
geometry.vertices.push( new THREE.Vector3(-12.462260, 129.980606, -8.922524) );
geometry.vertices.push( new THREE.Vector3(-10.390310, 127.942101, -8.933137) );
geometry.vertices.push( new THREE.Vector3(-3.350133, 130.305695, -11.394900) );
geometry.vertices.push( new THREE.Vector3(-3.137666, 128.166702, -10.423690) );
geometry.vertices.push( new THREE.Vector3(-6.936187, 127.964996, -10.418810) );
geometry.vertices.push( new THREE.Vector3(-6.531525, 125.167099, -9.125587) );
geometry.vertices.push( new THREE.Vector3(-9.859163, 125.110901, -7.576200) );
geometry.vertices.push( new THREE.Vector3(-6.369375, 122.573997, -8.847262) );
geometry.vertices.push( new THREE.Vector3(-9.491325, 122.429596, -7.369088) );
geometry.vertices.push( new THREE.Vector3(-12.542141, 127.702904, -6.224962) );
geometry.vertices.push( new THREE.Vector3(-13.722449, 129.909698, -7.296824) );
geometry.vertices.push( new THREE.Vector3(-12.289310, 125.097404, -5.666063) );
geometry.vertices.push( new THREE.Vector3(-12.385500, 122.191498, -5.442113) );
geometry.vertices.push( new THREE.Vector3(-12.957790, 119.563103, -5.808638) );
geometry.vertices.push( new THREE.Vector3(-9.272625, 119.968498, -7.535288) );
geometry.vertices.push( new THREE.Vector3(-6.426375, 120.326996, -9.057338) );
geometry.vertices.push( new THREE.Vector3(-15.330860, 130.150909, -2.994292) );
geometry.vertices.push( new THREE.Vector3(-14.645929, 121.786903, -2.341811) );
geometry.vertices.push( new THREE.Vector3(-15.307610, 119.181396, -2.538604) );
geometry.vertices.push( new THREE.Vector3(-15.635809, 121.515404, 1.648432) );
geometry.vertices.push( new THREE.Vector3(-16.012350, 118.553307, 1.634077) );
geometry.vertices.push( new THREE.Vector3(-14.732890, 121.121597, 5.324963) );
geometry.vertices.push( new THREE.Vector3(-15.181540, 117.923203, 5.524012) );
geometry.vertices.push( new THREE.Vector3(-13.967360, 124.121201, 4.888163) );
geometry.vertices.push( new THREE.Vector3(-14.489630, 127.267899, 0.635077) );
geometry.vertices.push( new THREE.Vector3(-15.151580, 124.448303, 1.190899) );
geometry.vertices.push( new THREE.Vector3(-14.629200, 124.624893, -2.355964) );
geometry.vertices.push( new THREE.Vector3(-14.322640, 127.580597, -2.381104) );
geometry.vertices.push( new THREE.Vector3(-15.230550, 130.077011, 0.557827) );
geometry.vertices.push( new THREE.Vector3(-13.934660, 126.767601, 4.867425) );
geometry.vertices.push( new THREE.Vector3(-14.293049, 129.888702, 4.607812) );
geometry.vertices.push( new THREE.Vector3(-17.062611, 133.684891, 0.510787) );
geometry.vertices.push( new THREE.Vector3(-16.264500, 133.303101, 4.417837) );
geometry.vertices.push( new THREE.Vector3(-17.741329, 137.101105, 4.931588) );
geometry.vertices.push( new THREE.Vector3(-18.568499, 145.642899, 4.790137) );
geometry.vertices.push( new THREE.Vector3(-17.614231, 141.027405, 5.426624) );
geometry.vertices.push( new THREE.Vector3(-17.566608, 144.175095, 6.250762) );
geometry.vertices.push( new THREE.Vector3(-19.647449, 142.548798, 0.552608) );
geometry.vertices.push( new THREE.Vector3(-19.082251, 137.457001, 0.634241) );
geometry.vertices.push( new THREE.Vector3(-19.821680, 147.676895, 3.037392) );
geometry.vertices.push( new THREE.Vector3(-20.501631, 145.816895, -0.197504) );
geometry.vertices.push( new THREE.Vector3(-19.795351, 145.603500, -0.318454) );
geometry.vertices.push( new THREE.Vector3(-22.061180, 144.725296, -3.821438) );
geometry.vertices.push( new THREE.Vector3(-21.727619, 143.679001, -3.858450) );
geometry.vertices.push( new THREE.Vector3(-19.737600, 144.410599, 0.021679) );
geometry.vertices.push( new THREE.Vector3(-21.571880, 142.339905, -4.002450) );
geometry.vertices.push( new THREE.Vector3(-21.416100, 141.000702, -4.146450) );
geometry.vertices.push( new THREE.Vector3(-20.927481, 140.705292, -7.604025) );
geometry.vertices.push( new THREE.Vector3(-21.579041, 142.488403, -7.171611) );
geometry.vertices.push( new THREE.Vector3(-21.870489, 143.689896, -7.158900) );
geometry.vertices.push( new THREE.Vector3(-22.161900, 144.891403, -7.146076) );
geometry.vertices.push( new THREE.Vector3(-22.886511, 146.703400, -6.626925) );
geometry.vertices.push( new THREE.Vector3(-22.349140, 145.628601, -3.789150) );
geometry.vertices.push( new THREE.Vector3(-22.195280, 145.939102, -8.702214) );
geometry.vertices.push( new THREE.Vector3(-23.275690, 147.760910, -9.321600) );
geometry.vertices.push( new THREE.Vector3(-22.146040, 147.255798, -10.037030) );
geometry.vertices.push( new THREE.Vector3(-23.272120, 149.519302, -10.784810) );
geometry.vertices.push( new THREE.Vector3(-21.941210, 149.299103, -11.394000) );
geometry.vertices.push( new THREE.Vector3(-22.276091, 152.487396, -11.868640) );
geometry.vertices.push( new THREE.Vector3(-21.507820, 152.756302, -12.233810) );
geometry.vertices.push( new THREE.Vector3(-21.403200, 157.202988, -11.528851) );
geometry.vertices.push( new THREE.Vector3(-20.849619, 152.987198, -12.546531) );
geometry.vertices.push( new THREE.Vector3(-20.191429, 153.217896, -12.859270) );
geometry.vertices.push( new THREE.Vector3(-20.290869, 149.563095, -12.982241) );
geometry.vertices.push( new THREE.Vector3(-17.731649, 149.451691, -14.122950) );
geometry.vertices.push( new THREE.Vector3(-21.116030, 149.431091, -12.188170) );
geometry.vertices.push( new THREE.Vector3(-20.899950, 146.134491, -11.575990) );
geometry.vertices.push( new THREE.Vector3(-18.452700, 145.340591, -13.492391) );
geometry.vertices.push( new THREE.Vector3(-21.227629, 144.123398, -10.066570) );
geometry.vertices.push( new THREE.Vector3(-21.711449, 145.031204, -9.384788) );
geometry.vertices.push( new THREE.Vector3(-21.523010, 146.695099, -10.807010) );
geometry.vertices.push( new THREE.Vector3(42.676868, 138.936691, 7.060762) );
geometry.vertices.push( new THREE.Vector3(46.363499, 138.398605, 7.815075) );
geometry.vertices.push( new THREE.Vector3(44.658367, 140.593094, 5.289900) );
geometry.vertices.push( new THREE.Vector3(45.348000, 137.301804, 8.529112) );
geometry.vertices.push( new THREE.Vector3(48.363380, 135.018799, -0.370106) );
geometry.vertices.push( new THREE.Vector3(45.804752, 134.955795, -3.534563) );
geometry.vertices.push( new THREE.Vector3(46.356380, 137.497101, -1.908859) );
geometry.vertices.push( new THREE.Vector3(47.848499, 133.231491, -1.891672) );
geometry.vertices.push( new THREE.Vector3(46.892632, 139.641708, -0.588562) );
geometry.vertices.push( new THREE.Vector3(48.986252, 136.459503, 0.592155) );
geometry.vertices.push( new THREE.Vector3(49.298630, 137.626511, 1.694655) );
geometry.vertices.push( new THREE.Vector3(48.929630, 138.524597, 3.472939) );
geometry.vertices.push( new THREE.Vector3(46.166248, 140.796402, 2.048261) );
geometry.vertices.push( new THREE.Vector3(47.447250, 138.937500, 6.446438) );
geometry.vertices.push( new THREE.Vector3(48.267002, 138.977203, 5.133675) );
geometry.vertices.push( new THREE.Vector3(44.425499, 142.303894, 1.065536) );
geometry.vertices.push( new THREE.Vector3(45.186749, 140.938492, -1.366609) );
geometry.vertices.push( new THREE.Vector3(43.210117, 141.945404, 4.148550) );
geometry.vertices.push( new THREE.Vector3(44.424370, 139.331299, -3.048439) );
geometry.vertices.push( new THREE.Vector3(41.764500, 143.952408, 1.412764) );
geometry.vertices.push( new THREE.Vector3(43.808632, 141.843002, -1.558702) );
geometry.vertices.push( new THREE.Vector3(41.692871, 143.485901, -1.178426) );
geometry.vertices.push( new THREE.Vector3(40.373249, 132.488602, -5.250900) );
geometry.vertices.push( new THREE.Vector3(36.508759, 134.421005, -3.480183) );
geometry.vertices.push( new THREE.Vector3(38.041870, 134.329498, -5.838862) );
geometry.vertices.push( new THREE.Vector3(38.541748, 131.349808, -3.584284) );
geometry.vertices.push( new THREE.Vector3(43.265621, 130.699509, -3.759375) );
geometry.vertices.push( new THREE.Vector3(31.980789, 135.625900, -4.704825) );
geometry.vertices.push( new THREE.Vector3(31.765430, 135.335999, -2.094457) );
geometry.vertices.push( new THREE.Vector3(34.471050, 135.031097, -4.082550) );
geometry.vertices.push( new THREE.Vector3(34.854298, 134.026093, -1.639342) );
geometry.vertices.push( new THREE.Vector3(37.223442, 131.225601, -0.571924) );
geometry.vertices.push( new THREE.Vector3(41.031368, 128.681305, -2.392110) );
geometry.vertices.push( new THREE.Vector3(43.233002, 126.889099, -0.870086) );
geometry.vertices.push( new THREE.Vector3(45.232498, 128.414200, -2.233890) );
geometry.vertices.push( new THREE.Vector3(39.531750, 128.389496, 0.649601) );
geometry.vertices.push( new THREE.Vector3(41.371880, 126.829102, 1.798144) );
geometry.vertices.push( new THREE.Vector3(39.344631, 130.248398, 4.466213) );
geometry.vertices.push( new THREE.Vector3(37.416492, 132.799500, 3.165409) );
geometry.vertices.push( new THREE.Vector3(35.086651, 135.052094, 2.958079) );
geometry.vertices.push( new THREE.Vector3(40.810120, 128.695496, 5.488913) );
geometry.vertices.push( new THREE.Vector3(29.507029, 143.965897, -10.021880) );
geometry.vertices.push( new THREE.Vector3(27.882450, 142.388992, -10.081130) );
geometry.vertices.push( new THREE.Vector3(28.322809, 138.521301, -7.950375) );
geometry.vertices.push( new THREE.Vector3(27.682348, 137.941895, -5.852925) );
geometry.vertices.push( new THREE.Vector3(29.653688, 136.624100, -5.240588) );
geometry.vertices.push( new THREE.Vector3(30.165152, 136.996902, -7.084312) );
geometry.vertices.push( new THREE.Vector3(29.518131, 139.749008, -9.333188) );
geometry.vertices.push( new THREE.Vector3(30.916611, 137.914093, -8.341875) );
geometry.vertices.push( new THREE.Vector3(32.290569, 136.156494, -6.038025) );
geometry.vertices.push( new THREE.Vector3(34.430702, 136.158401, -5.989050) );
geometry.vertices.push( new THREE.Vector3(36.242210, 135.455597, -5.796900) );
geometry.vertices.push( new THREE.Vector3(30.787649, 141.209991, -9.707325) );
geometry.vertices.push( new THREE.Vector3(33.208130, 139.929703, -8.657249) );
geometry.vertices.push( new THREE.Vector3(32.173161, 142.383392, -9.244313) );
geometry.vertices.push( new THREE.Vector3(31.804838, 138.940094, -8.820976) );
geometry.vertices.push( new THREE.Vector3(32.928261, 136.854797, -6.975488) );
geometry.vertices.push( new THREE.Vector3(33.889309, 137.644501, -7.501200) );
geometry.vertices.push( new THREE.Vector3(36.926357, 136.633896, -7.199737) );
geometry.vertices.push( new THREE.Vector3(39.144371, 134.980499, -7.275037) );
geometry.vertices.push( new THREE.Vector3(40.585117, 136.900497, -7.447837) );
geometry.vertices.push( new THREE.Vector3(41.531620, 133.695404, -6.573975) );
geometry.vertices.push( new THREE.Vector3(38.453999, 138.500198, -7.556250) );
geometry.vertices.push( new THREE.Vector3(39.922123, 140.567596, -6.542063) );
geometry.vertices.push( new THREE.Vector3(45.197632, 132.836609, -4.362413) );
geometry.vertices.push( new THREE.Vector3(42.803631, 135.214905, -6.568424) );
geometry.vertices.push( new THREE.Vector3(41.623501, 138.840698, -6.482662) );
geometry.vertices.push( new THREE.Vector3(40.849869, 142.342102, -3.752100) );
geometry.vertices.push( new THREE.Vector3(46.828869, 130.752396, -2.628604) );
geometry.vertices.push( new THREE.Vector3(43.819870, 137.191101, -5.552663) );
geometry.vertices.push( new THREE.Vector3(42.589500, 140.547394, -3.312836) );
geometry.vertices.push( new THREE.Vector3(41.656879, 139.661591, 6.162075) );
geometry.vertices.push( new THREE.Vector3(40.743370, 143.098495, 4.158863) );
geometry.vertices.push( new THREE.Vector3(-45.348000, 137.301804, 8.529112) );
geometry.vertices.push( new THREE.Vector3(-46.061249, 134.517807, 10.133740) );
geometry.vertices.push( new THREE.Vector3(-44.358002, 135.947296, 8.830575) );
geometry.vertices.push( new THREE.Vector3(-47.233501, 135.732697, 9.772312) );
geometry.vertices.push( new THREE.Vector3(-50.912251, 134.867996, 1.980439) );
geometry.vertices.push( new THREE.Vector3(-49.298630, 137.626511, 1.694647) );
geometry.vertices.push( new THREE.Vector3(-48.986252, 136.459503, 0.592151) );
geometry.vertices.push( new THREE.Vector3(-51.071251, 135.853500, 3.121459) );
geometry.vertices.push( new THREE.Vector3(-46.363499, 138.398605, 7.815075) );
geometry.vertices.push( new THREE.Vector3(-49.367249, 136.987106, 7.867723) );
geometry.vertices.push( new THREE.Vector3(-48.185249, 136.506409, 9.218212) );
geometry.vertices.push( new THREE.Vector3(-47.447250, 138.937500, 6.446438) );
geometry.vertices.push( new THREE.Vector3(-48.929630, 138.524597, 3.472935) );
geometry.vertices.push( new THREE.Vector3(-50.200878, 137.102203, 6.544350) );
geometry.vertices.push( new THREE.Vector3(-48.267002, 138.977203, 5.133675) );
geometry.vertices.push( new THREE.Vector3(-50.811367, 136.716400, 4.870462) );
geometry.vertices.push( new THREE.Vector3(-53.076370, 126.259102, 2.111741) );
geometry.vertices.push( new THREE.Vector3(-54.684383, 124.132500, 4.698675) );
geometry.vertices.push( new THREE.Vector3(-53.963989, 125.393608, 3.261742) );
geometry.vertices.push( new THREE.Vector3(-55.394630, 125.012192, 4.572187) );
geometry.vertices.push( new THREE.Vector3(-55.926750, 122.763397, 6.702188) );
geometry.vertices.push( new THREE.Vector3(-56.584503, 123.643898, 6.722737) );
geometry.vertices.push( new THREE.Vector3(-50.079380, 131.816605, -1.074173) );
geometry.vertices.push( new THREE.Vector3(-50.607754, 129.669006, -0.764269) );
geometry.vertices.push( new THREE.Vector3(-52.086376, 129.663010, 0.467962) );
geometry.vertices.push( new THREE.Vector3(-51.311249, 127.976295, 0.078321) );
geometry.vertices.push( new THREE.Vector3(-52.518379, 127.097595, 1.235400) );
geometry.vertices.push( new THREE.Vector3(-52.619617, 125.654602, 2.143196) );
geometry.vertices.push( new THREE.Vector3(-52.688251, 126.637901, 1.608694) );
geometry.vertices.push( new THREE.Vector3(-52.985252, 122.582603, 5.208712) );
geometry.vertices.push( new THREE.Vector3(-54.962616, 121.397995, 7.439963) );
geometry.vertices.push( new THREE.Vector3(-49.609119, 128.347504, -1.178197) );
geometry.vertices.push( new THREE.Vector3(-50.497871, 127.391197, -0.226992) );
geometry.vertices.push( new THREE.Vector3(-48.754879, 125.502800, 0.326065) );
geometry.vertices.push( new THREE.Vector3(-46.657120, 126.990700, -1.363511) );
geometry.vertices.push( new THREE.Vector3(-50.900631, 123.939392, 2.792156) );
geometry.vertices.push( new THREE.Vector3(-46.828869, 130.752396, -2.628611) );
geometry.vertices.push( new THREE.Vector3(-45.232498, 128.414200, -2.233898) );
geometry.vertices.push( new THREE.Vector3(-48.549000, 129.266296, -1.867800) );
geometry.vertices.push( new THREE.Vector3(-47.877750, 129.847504, -2.304487) );
geometry.vertices.push( new THREE.Vector3(-47.656120, 130.478592, -2.485301) );
geometry.vertices.push( new THREE.Vector3(-48.401253, 131.344101, -2.027768) );
geometry.vertices.push( new THREE.Vector3(-47.848499, 133.231491, -1.891680) );
geometry.vertices.push( new THREE.Vector3(-48.865501, 131.045609, -1.803544) );
geometry.vertices.push( new THREE.Vector3(-50.586380, 133.751602, 0.936202) );
geometry.vertices.push( new THREE.Vector3(-53.058750, 127.741096, 1.374810) );
geometry.vertices.push( new THREE.Vector3(-53.515499, 127.575806, 1.826891) );
geometry.vertices.push( new THREE.Vector3(-52.660133, 131.728500, 2.166236) );
geometry.vertices.push( new THREE.Vector3(-52.704002, 133.349304, 4.600387) );
geometry.vertices.push( new THREE.Vector3(-54.805870, 126.264801, 3.494092) );
geometry.vertices.push( new THREE.Vector3(-54.628128, 129.256897, 4.152525) );
geometry.vertices.push( new THREE.Vector3(-53.813618, 127.272705, 2.212043) );
geometry.vertices.push( new THREE.Vector3(-54.436867, 130.767410, 6.404025) );
geometry.vertices.push( new THREE.Vector3(-52.319252, 134.380905, 7.142475) );
geometry.vertices.push( new THREE.Vector3(-56.196369, 127.081505, 6.189563) );
geometry.vertices.push( new THREE.Vector3(-55.488373, 125.294304, 4.781287) );
geometry.vertices.push( new THREE.Vector3(-56.874371, 123.670898, 7.014263) );
geometry.vertices.push( new THREE.Vector3(-56.791504, 123.450806, 6.976688) );
geometry.vertices.push( new THREE.Vector3(-57.272999, 123.444000, 7.427625) );
geometry.vertices.push( new THREE.Vector3(-52.507877, 131.933609, 11.099620) );
geometry.vertices.push( new THREE.Vector3(-48.741749, 132.785202, 11.146091) );
geometry.vertices.push( new THREE.Vector3(-50.704128, 134.312195, 9.896625) );
geometry.vertices.push( new THREE.Vector3(-53.943001, 131.824097, 8.710050) );
geometry.vertices.push( new THREE.Vector3(-56.010376, 128.609299, 8.304638) );
geometry.vertices.push( new THREE.Vector3(-57.558380, 125.203499, 8.331788) );
geometry.vertices.push( new THREE.Vector3(-58.948868, 123.796906, 9.913800) );
geometry.vertices.push( new THREE.Vector3(-57.292122, 126.379501, 9.984450) );
geometry.vertices.push( new THREE.Vector3(-55.159122, 129.095993, 10.173110) );
geometry.vertices.push( new THREE.Vector3(-44.674129, 132.721100, 10.121770) );
geometry.vertices.push( new THREE.Vector3(-47.034000, 130.996887, 11.434240) );
geometry.vertices.push( new THREE.Vector3(-50.633251, 130.845001, 12.393860) );
geometry.vertices.push( new THREE.Vector3(-54.026997, 129.444000, 12.245360) );
geometry.vertices.push( new THREE.Vector3(-56.468998, 126.958893, 11.661530) );
geometry.vertices.push( new THREE.Vector3(-58.419003, 124.667297, 11.513021) );
geometry.vertices.push( new THREE.Vector3(-59.993618, 122.426605, 11.112750) );
geometry.vertices.push( new THREE.Vector3(-57.522369, 125.110901, 13.029830) );
geometry.vertices.push( new THREE.Vector3(-55.256630, 127.216103, 13.449671) );
geometry.vertices.push( new THREE.Vector3(-52.285500, 128.709000, 13.489909) );
geometry.vertices.push( new THREE.Vector3(-63.589500, 118.023804, 16.816690) );
geometry.vertices.push( new THREE.Vector3(-61.585499, 119.989502, 17.231100) );
geometry.vertices.push( new THREE.Vector3(-62.388748, 119.417595, 15.636259) );
geometry.vertices.push( new THREE.Vector3(-60.481869, 121.165504, 16.255989) );
geometry.vertices.push( new THREE.Vector3(-61.319248, 120.721901, 14.674351) );
geometry.vertices.push( new THREE.Vector3(-59.387619, 122.305504, 15.311059) );
geometry.vertices.push( new THREE.Vector3(-60.162003, 121.796593, 13.623039) );
geometry.vertices.push( new THREE.Vector3(-58.538254, 123.414398, 14.396770) );
geometry.vertices.push( new THREE.Vector3(-59.477623, 123.096001, 12.830630) );
geometry.vertices.push( new THREE.Vector3(-60.620998, 121.310997, 12.127570) );
geometry.vertices.push( new THREE.Vector3(-61.833752, 120.064102, 13.001400) );
geometry.vertices.push( new THREE.Vector3(-63.021748, 118.732903, 13.924610) );
geometry.vertices.push( new THREE.Vector3(-64.279503, 117.384003, 15.064199) );
geometry.vertices.push( new THREE.Vector3(-65.097000, 116.248093, 16.494520) );
geometry.vertices.push( new THREE.Vector3(-63.156002, 117.872597, 12.002400) );
geometry.vertices.push( new THREE.Vector3(-64.409248, 116.437103, 13.031059) );
geometry.vertices.push( new THREE.Vector3(-65.331001, 115.539398, 14.789470) );
geometry.vertices.push( new THREE.Vector3(-65.989883, 114.829895, 15.527740) );
geometry.vertices.push( new THREE.Vector3(-65.709381, 115.190193, 16.939840) );
geometry.vertices.push( new THREE.Vector3(-66.402748, 114.201797, 16.025810) );
geometry.vertices.push( new THREE.Vector3(-66.110245, 114.493095, 17.047911) );
geometry.vertices.push( new THREE.Vector3(-66.378746, 113.530502, 17.276890) );
geometry.vertices.push( new THREE.Vector3(-66.209251, 112.709198, 15.619349) );
geometry.vertices.push( new THREE.Vector3(-64.929375, 112.480499, 14.870100) );
geometry.vertices.push( new THREE.Vector3(-65.608887, 112.202301, 15.368740) );
geometry.vertices.push( new THREE.Vector3(-65.872879, 113.402199, 15.143471) );
geometry.vertices.push( new THREE.Vector3(-65.844749, 114.122200, 14.505490) );
geometry.vertices.push( new THREE.Vector3(-65.677498, 114.694092, 12.998361) );
geometry.vertices.push( new THREE.Vector3(-65.792999, 113.290497, 14.681810) );
geometry.vertices.push( new THREE.Vector3(-67.113754, 109.974396, 16.365191) );
geometry.vertices.push( new THREE.Vector3(-66.086250, 113.516296, 13.096841) );
geometry.vertices.push( new THREE.Vector3(-66.040123, 113.252296, 14.335690) );
geometry.vertices.push( new THREE.Vector3(-65.260498, 112.559998, 14.724191) );
geometry.vertices.push( new THREE.Vector3(-66.254631, 112.376198, 14.350881) );
geometry.vertices.push( new THREE.Vector3(-65.356499, 111.969803, 14.688789) );
geometry.vertices.push( new THREE.Vector3(-66.486755, 112.434700, 13.380560) );
geometry.vertices.push( new THREE.Vector3(-65.733368, 112.294098, 12.465750) );
geometry.vertices.push( new THREE.Vector3(-65.110115, 113.306602, 12.061500) );
geometry.vertices.push( new THREE.Vector3(-64.401001, 114.341202, 11.694040) );
geometry.vertices.push( new THREE.Vector3(-63.499878, 115.440002, 11.310520) );
geometry.vertices.push( new THREE.Vector3(-61.039883, 118.098000, 9.993188) );
geometry.vertices.push( new THREE.Vector3(-60.997498, 115.617004, 10.384160) );
geometry.vertices.push( new THREE.Vector3(-62.347500, 116.760399, 10.590300) );
geometry.vertices.push( new THREE.Vector3(-62.195248, 114.473198, 10.787101) );
geometry.vertices.push( new THREE.Vector3(-63.153751, 113.681602, 11.318180) );
geometry.vertices.push( new THREE.Vector3(-64.055626, 113.077103, 11.727859) );
geometry.vertices.push( new THREE.Vector3(-64.909119, 112.184998, 12.196420) );
geometry.vertices.push( new THREE.Vector3(-66.019501, 110.527893, 12.867559) );
geometry.vertices.push( new THREE.Vector3(-61.929749, 119.226395, 11.272280) );
geometry.vertices.push( new THREE.Vector3(-60.595882, 120.468399, 10.594131) );
geometry.vertices.push( new THREE.Vector3(-59.602867, 119.473099, 9.640612) );
geometry.vertices.push( new THREE.Vector3(-59.968502, 121.480095, 9.744262) );
geometry.vertices.push( new THREE.Vector3(-59.346748, 120.913101, 9.383326) );
geometry.vertices.push( new THREE.Vector3(-58.465870, 122.765991, 8.664450) );
geometry.vertices.push( new THREE.Vector3(-58.459877, 122.474602, 8.583675) );
geometry.vertices.push( new THREE.Vector3(-57.176632, 123.323593, 7.329638) );
geometry.vertices.push( new THREE.Vector3(-58.552868, 120.478104, 9.261787) );
geometry.vertices.push( new THREE.Vector3(-57.445133, 121.278404, 8.249363) );
geometry.vertices.push( new THREE.Vector3(-56.459248, 122.229698, 7.297987) );
geometry.vertices.push( new THREE.Vector3(-56.302116, 120.405403, 8.694000) );
geometry.vertices.push( new THREE.Vector3(-57.380630, 119.625000, 9.562426) );
geometry.vertices.push( new THREE.Vector3(-58.257751, 118.234894, 9.595387) );
geometry.vertices.push( new THREE.Vector3(-59.699619, 116.852203, 9.829763) );
geometry.vertices.push( new THREE.Vector3(-19.429430, 148.663498, 7.184475) );
geometry.vertices.push( new THREE.Vector3(-19.693840, 148.084900, 6.169875) );
geometry.vertices.push( new THREE.Vector3(-18.673759, 147.206192, 7.480612) );
geometry.vertices.push( new THREE.Vector3(-48.363380, 135.018799, -0.370114) );
geometry.vertices.push( new THREE.Vector3(-67.954117, 107.804596, 19.172440) );
geometry.vertices.push( new THREE.Vector3(-68.446869, 105.111397, 19.008749) );
geometry.vertices.push( new THREE.Vector3(-68.053131, 105.064499, 19.371151) );
geometry.vertices.push( new THREE.Vector3(-67.919998, 104.579605, 18.531530) );
geometry.vertices.push( new THREE.Vector3(-67.562996, 104.908501, 19.348761) );
geometry.vertices.push( new THREE.Vector3(-67.271248, 107.979797, 19.216801) );
geometry.vertices.push( new THREE.Vector3(-68.425499, 104.901001, 17.899200) );
geometry.vertices.push( new THREE.Vector3(-67.952255, 104.764107, 17.709860) );
geometry.vertices.push( new THREE.Vector3(-68.601379, 105.044197, 18.435711) );
geometry.vertices.push( new THREE.Vector3(-68.394753, 107.858299, 18.592129) );
geometry.vertices.push( new THREE.Vector3(-67.900505, 108.310493, 19.134369) );
geometry.vertices.push( new THREE.Vector3(-66.548248, 109.947800, 18.773890) );
geometry.vertices.push( new THREE.Vector3(-67.153877, 110.509895, 18.724459) );
geometry.vertices.push( new THREE.Vector3(-66.342003, 110.428497, 18.648941) );
geometry.vertices.push( new THREE.Vector3(-68.343002, 108.484497, 18.503700) );
geometry.vertices.push( new THREE.Vector3(-67.924133, 110.424698, 18.234039) );
geometry.vertices.push( new THREE.Vector3(-67.692749, 111.005997, 18.099489) );
geometry.vertices.push( new THREE.Vector3(-68.156616, 110.274696, 17.344200) );
geometry.vertices.push( new THREE.Vector3(-68.489250, 108.378395, 17.720779) );
geometry.vertices.push( new THREE.Vector3(-68.530502, 107.736000, 17.859039) );
geometry.vertices.push( new THREE.Vector3(-68.197868, 107.535004, 17.242390) );
geometry.vertices.push( new THREE.Vector3(-67.722000, 107.714996, 16.960611) );
geometry.vertices.push( new THREE.Vector3(-68.128876, 108.130898, 17.136900) );
geometry.vertices.push( new THREE.Vector3(-67.797752, 109.962700, 16.689711) );
geometry.vertices.push( new THREE.Vector3(-67.909874, 110.862801, 17.167311) );
geometry.vertices.push( new THREE.Vector3(-65.539124, 113.217697, 17.972250) );
geometry.vertices.push( new THREE.Vector3(-66.624001, 113.292397, 16.358290) );
geometry.vertices.push( new THREE.Vector3(-67.583252, 110.519302, 16.572300) );
geometry.vertices.push( new THREE.Vector3(-65.815880, 113.713097, 18.598049) );
geometry.vertices.push( new THREE.Vector3(-65.562370, 114.449295, 17.516890) );
geometry.vertices.push( new THREE.Vector3(-65.644119, 115.182808, 17.856150) );
geometry.vertices.push( new THREE.Vector3(-66.057747, 114.175903, 19.549721) );
geometry.vertices.push( new THREE.Vector3(-67.110748, 111.414398, 20.486509) );
geometry.vertices.push( new THREE.Vector3(-66.795746, 111.608597, 21.444340) );
geometry.vertices.push( new THREE.Vector3(-67.125748, 110.802399, 21.706051) );
geometry.vertices.push( new THREE.Vector3(-66.091118, 110.993599, 22.048161) );
geometry.vertices.push( new THREE.Vector3(-66.722252, 108.522705, 22.582951) );
geometry.vertices.push( new THREE.Vector3(-66.114746, 108.034096, 22.631811) );
geometry.vertices.push( new THREE.Vector3(-65.630630, 110.177299, 22.111460) );
geometry.vertices.push( new THREE.Vector3(-65.264618, 110.737503, 21.896400) );
geometry.vertices.push( new THREE.Vector3(-64.627121, 113.468300, 20.843740) );
geometry.vertices.push( new THREE.Vector3(-65.524498, 114.019096, 20.447701) );
geometry.vertices.push( new THREE.Vector3(-64.880249, 115.486893, 19.946661) );
geometry.vertices.push( new THREE.Vector3(-64.207878, 113.864304, 20.667339) );
geometry.vertices.push( new THREE.Vector3(-64.444122, 115.393898, 20.315630) );
geometry.vertices.push( new THREE.Vector3(-63.700878, 113.046799, 20.683880) );
geometry.vertices.push( new THREE.Vector3(-64.136620, 113.783600, 20.977310) );
geometry.vertices.push( new THREE.Vector3(-64.446747, 114.445496, 21.722589) );
geometry.vertices.push( new THREE.Vector3(-64.264122, 115.589996, 21.001881) );
geometry.vertices.push( new THREE.Vector3(-63.969368, 116.910400, 19.418850) );
geometry.vertices.push( new THREE.Vector3(-65.637001, 115.497398, 18.998100) );
geometry.vertices.push( new THREE.Vector3(-65.365501, 112.162102, 22.873159) );
geometry.vertices.push( new THREE.Vector3(-65.114250, 111.427902, 22.346479) );
geometry.vertices.push( new THREE.Vector3(-63.079880, 112.982597, 20.600210) );
geometry.vertices.push( new THREE.Vector3(-64.418251, 111.424896, 21.903490) );
geometry.vertices.push( new THREE.Vector3(-64.671364, 110.793701, 22.143110) );
geometry.vertices.push( new THREE.Vector3(-65.480247, 109.901596, 23.037901) );
geometry.vertices.push( new THREE.Vector3(-65.098122, 109.303108, 22.829550) );
geometry.vertices.push( new THREE.Vector3(-65.117622, 112.522491, 23.857351) );
geometry.vertices.push( new THREE.Vector3(-65.556374, 111.451492, 23.215160) );
geometry.vertices.push( new THREE.Vector3(-65.773499, 110.278496, 23.706261) );
geometry.vertices.push( new THREE.Vector3(-65.571365, 109.385300, 23.264700) );
geometry.vertices.push( new THREE.Vector3(-65.491501, 106.475601, 24.326250) );
geometry.vertices.push( new THREE.Vector3(-65.241745, 106.306503, 24.119061) );
geometry.vertices.push( new THREE.Vector3(-64.978867, 106.141899, 24.798300) );
geometry.vertices.push( new THREE.Vector3(-65.787369, 109.585098, 23.924360) );
geometry.vertices.push( new THREE.Vector3(-65.459999, 106.655594, 24.670650) );
geometry.vertices.push( new THREE.Vector3(-65.252251, 106.738495, 25.032108) );
geometry.vertices.push( new THREE.Vector3(-65.468254, 109.786102, 24.648680) );
geometry.vertices.push( new THREE.Vector3(-65.460747, 110.498199, 24.469690) );
geometry.vertices.push( new THREE.Vector3(-65.266876, 111.746201, 24.134850) );
geometry.vertices.push( new THREE.Vector3(-64.332375, 111.706902, 24.661129) );
geometry.vertices.push( new THREE.Vector3(-64.911751, 106.681099, 25.297049) );
geometry.vertices.push( new THREE.Vector3(-63.770252, 109.965004, 24.857029) );
geometry.vertices.push( new THREE.Vector3(-64.732498, 109.768906, 25.103811) );
geometry.vertices.push( new THREE.Vector3(-64.516129, 106.485405, 25.250212) );
geometry.vertices.push( new THREE.Vector3(-64.684883, 110.476509, 24.938961) );
geometry.vertices.push( new THREE.Vector3(-63.241119, 111.774803, 24.338099) );
geometry.vertices.push( new THREE.Vector3(-64.119751, 112.438499, 24.399300) );
geometry.vertices.push( new THREE.Vector3(-62.984253, 114.814499, 23.131310) );
geometry.vertices.push( new THREE.Vector3(-61.830746, 114.382507, 22.850470) );
geometry.vertices.push( new THREE.Vector3(-61.060501, 115.457199, 22.152750) );
geometry.vertices.push( new THREE.Vector3(-62.345619, 116.068100, 22.491411) );
geometry.vertices.push( new THREE.Vector3(-60.019119, 116.575096, 21.417751) );
geometry.vertices.push( new THREE.Vector3(-61.516117, 117.382095, 21.513639) );
geometry.vertices.push( new THREE.Vector3(-58.962368, 118.249092, 21.003229) );
geometry.vertices.push( new THREE.Vector3(-60.465748, 118.756104, 20.486399) );
geometry.vertices.push( new THREE.Vector3(-62.899502, 117.543701, 20.838671) );
geometry.vertices.push( new THREE.Vector3(-63.729752, 116.304398, 21.996340) );
geometry.vertices.push( new THREE.Vector3(-63.995617, 114.897003, 22.621460) );
geometry.vertices.push( new THREE.Vector3(-58.228500, 119.734100, 20.225660) );
geometry.vertices.push( new THREE.Vector3(-59.065880, 120.132004, 19.451550) );
geometry.vertices.push( new THREE.Vector3(-61.730999, 118.880203, 19.670401) );
geometry.vertices.push( new THREE.Vector3(-60.403503, 120.341301, 18.585711) );
geometry.vertices.push( new THREE.Vector3(-62.818497, 118.497002, 18.346010) );
geometry.vertices.push( new THREE.Vector3(-57.127880, 121.087097, 18.833179) );
geometry.vertices.push( new THREE.Vector3(-56.943001, 120.006798, 20.281879) );
geometry.vertices.push( new THREE.Vector3(-57.002251, 118.497002, 21.514690) );
geometry.vertices.push( new THREE.Vector3(-55.019630, 119.854500, 20.428579) );
geometry.vertices.push( new THREE.Vector3(-55.231880, 118.747498, 21.648560) );
geometry.vertices.push( new THREE.Vector3(-53.892368, 118.570496, 19.778740) );
geometry.vertices.push( new THREE.Vector3(-54.012001, 117.690002, 21.020811) );
geometry.vertices.push( new THREE.Vector3(-54.907131, 120.789001, 19.005751) );
geometry.vertices.push( new THREE.Vector3(-54.771000, 121.554802, 17.808640) );
geometry.vertices.push( new THREE.Vector3(-53.781746, 119.457695, 18.412159) );
geometry.vertices.push( new THREE.Vector3(-53.707497, 120.237007, 17.067110) );
geometry.vertices.push( new THREE.Vector3(-53.696251, 120.904503, 15.746699) );
geometry.vertices.push( new THREE.Vector3(-54.388870, 122.269905, 16.487061) );
geometry.vertices.push( new THREE.Vector3(-52.754997, 122.113098, 14.423921) );
geometry.vertices.push( new THREE.Vector3(-53.592747, 123.581604, 15.085199) );
geometry.vertices.push( new THREE.Vector3(-51.615749, 123.239601, 13.438460) );
geometry.vertices.push( new THREE.Vector3(-52.460247, 124.881401, 14.253449) );
geometry.vertices.push( new THREE.Vector3(-55.698753, 123.280502, 16.547810) );
geometry.vertices.push( new THREE.Vector3(-54.807003, 124.855492, 15.648299) );
geometry.vertices.push( new THREE.Vector3(-53.649376, 126.596603, 14.718230) );
geometry.vertices.push( new THREE.Vector3(-50.734131, 126.931503, 13.461900) );
geometry.vertices.push( new THREE.Vector3(-48.874500, 128.997803, 12.438220) );
geometry.vertices.push( new THREE.Vector3(-56.388378, 125.376404, 14.690029) );
geometry.vertices.push( new THREE.Vector3(-57.270004, 123.599991, 15.808090) );
geometry.vertices.push( new THREE.Vector3(-58.291500, 122.594200, 16.774500) );
geometry.vertices.push( new THREE.Vector3(-56.334751, 122.234596, 17.647011) );
geometry.vertices.push( new THREE.Vector3(-59.270622, 121.528099, 17.635950) );
geometry.vertices.push( new THREE.Vector3(-64.734749, 116.749893, 18.070129) );
geometry.vertices.push( new THREE.Vector3(-65.093262, 112.488403, 17.973749) );
geometry.vertices.push( new THREE.Vector3(-66.323631, 110.342598, 19.502890) );
geometry.vertices.push( new THREE.Vector3(-66.767250, 110.995499, 19.726349) );
geometry.vertices.push( new THREE.Vector3(-67.486870, 110.595795, 20.833429) );
geometry.vertices.push( new THREE.Vector3(-67.357124, 108.655907, 22.096651) );
geometry.vertices.push( new THREE.Vector3(-67.661629, 108.494995, 21.394051) );
geometry.vertices.push( new THREE.Vector3(-67.521751, 107.708298, 20.805601) );
geometry.vertices.push( new THREE.Vector3(-67.703629, 107.895699, 21.552069) );
geometry.vertices.push( new THREE.Vector3(-67.398384, 108.190094, 20.699661) );
geometry.vertices.push( new THREE.Vector3(-67.141495, 107.755898, 20.500690) );
geometry.vertices.push( new THREE.Vector3(-67.061249, 110.296501, 20.006891) );
geometry.vertices.push( new THREE.Vector3(-67.542747, 105.058502, 21.775160) );
geometry.vertices.push( new THREE.Vector3(-67.258881, 104.833900, 21.550951) );
geometry.vertices.push( new THREE.Vector3(-67.004250, 104.635895, 22.289101) );
geometry.vertices.push( new THREE.Vector3(-67.608749, 105.214500, 22.183651) );
geometry.vertices.push( new THREE.Vector3(-66.818253, 108.107994, 22.662790) );
geometry.vertices.push( new THREE.Vector3(-67.197372, 105.266998, 22.999460) );
geometry.vertices.push( new THREE.Vector3(-66.714386, 105.102798, 23.042660) );
geometry.vertices.push( new THREE.Vector3(-67.481628, 105.285393, 22.614599) );
geometry.vertices.push( new THREE.Vector3(-67.443382, 108.042801, 22.260340) );
geometry.vertices.push( new THREE.Vector3(-56.732620, 117.551300, 22.431190) );
geometry.vertices.push( new THREE.Vector3(-55.378502, 117.786392, 22.561499) );
geometry.vertices.push( new THREE.Vector3(-56.734501, 116.636299, 23.248240) );
geometry.vertices.push( new THREE.Vector3(-55.544632, 116.706001, 23.301109) );
geometry.vertices.push( new THREE.Vector3(-56.837620, 115.882507, 23.940710) );
geometry.vertices.push( new THREE.Vector3(-55.519127, 115.908394, 24.072491) );
geometry.vertices.push( new THREE.Vector3(-57.464249, 114.928497, 23.399330) );
geometry.vertices.push( new THREE.Vector3(-57.310879, 115.844200, 22.577660) );
geometry.vertices.push( new THREE.Vector3(-57.432003, 116.525307, 21.964870) );
geometry.vertices.push( new THREE.Vector3(-57.904881, 116.836098, 21.430540) );
geometry.vertices.push( new THREE.Vector3(-58.754246, 116.697395, 21.179359) );
geometry.vertices.push( new THREE.Vector3(-54.237373, 116.949699, 21.996410) );
geometry.vertices.push( new THREE.Vector3(-54.508503, 116.105606, 22.766510) );
geometry.vertices.push( new THREE.Vector3(-54.561382, 115.021095, 23.660660) );
geometry.vertices.push( new THREE.Vector3(-55.521000, 115.425804, 24.442989) );
geometry.vertices.push( new THREE.Vector3(-56.855618, 115.333900, 24.355690) );
geometry.vertices.push( new THREE.Vector3(-55.612869, 114.281998, 24.823200) );
geometry.vertices.push( new THREE.Vector3(-55.056381, 112.696503, 24.718571) );
geometry.vertices.push( new THREE.Vector3(-54.808498, 113.793396, 24.182850) );
geometry.vertices.push( new THREE.Vector3(-56.012619, 111.949898, 25.862360) );
geometry.vertices.push( new THREE.Vector3(-55.309879, 111.760498, 25.228909) );
geometry.vertices.push( new THREE.Vector3(-55.817253, 113.104103, 25.354540) );
geometry.vertices.push( new THREE.Vector3(-56.821869, 113.233902, 25.497978) );
geometry.vertices.push( new THREE.Vector3(-56.790752, 114.364098, 24.892050) );
geometry.vertices.push( new THREE.Vector3(-56.933247, 112.183105, 25.942690) );
geometry.vertices.push( new THREE.Vector3(-57.524628, 113.942596, 24.256090) );
geometry.vertices.push( new THREE.Vector3(-57.552368, 112.945107, 25.059381) );
geometry.vertices.push( new THREE.Vector3(-57.498001, 112.207100, 25.590149) );
geometry.vertices.push( new THREE.Vector3(-56.947117, 111.466095, 25.790361) );
geometry.vertices.push( new THREE.Vector3(-56.019749, 111.260605, 25.531908) );
geometry.vertices.push( new THREE.Vector3(-67.039871, 109.412300, 13.357690) );
geometry.vertices.push( new THREE.Vector3(-67.192497, 110.891197, 13.760360) );
geometry.vertices.push( new THREE.Vector3(-66.659630, 110.669601, 13.084430) );
geometry.vertices.push( new THREE.Vector3(-67.425751, 109.487602, 13.940289) );
geometry.vertices.push( new THREE.Vector3(-66.476250, 111.143600, 12.955991) );
geometry.vertices.push( new THREE.Vector3(-66.962616, 111.427902, 13.678010) );
geometry.vertices.push( new THREE.Vector3(-66.891373, 110.891197, 14.477770) );
geometry.vertices.push( new THREE.Vector3(-67.263000, 109.501099, 14.569571) );
geometry.vertices.push( new THREE.Vector3(-67.517250, 108.817505, 13.985330) );
geometry.vertices.push( new THREE.Vector3(-67.224373, 108.760094, 13.457920) );
geometry.vertices.push( new THREE.Vector3(-66.615372, 108.839203, 13.192760) );
geometry.vertices.push( new THREE.Vector3(-66.688133, 111.407600, 14.453959) );
geometry.vertices.push( new THREE.Vector3(-66.001877, 110.605499, 14.870660) );
geometry.vertices.push( new THREE.Vector3(-66.528748, 108.800995, 15.036000) );
geometry.vertices.push( new THREE.Vector3(-67.364250, 108.811501, 14.645960) );
geometry.vertices.push( new THREE.Vector3(-67.272003, 106.466202, 14.147510) );
geometry.vertices.push( new THREE.Vector3(-67.205635, 106.433594, 14.638691) );
geometry.vertices.push( new THREE.Vector3(-66.697868, 106.383003, 14.991900) );
geometry.vertices.push( new THREE.Vector3(-66.596626, 106.012108, 14.295040) );
geometry.vertices.push( new THREE.Vector3(-67.086754, 106.443405, 13.773450) );
geometry.vertices.push( new THREE.Vector3(-66.696754, 106.393501, 13.619889) );
geometry.vertices.push( new THREE.Vector3(19.693840, 148.084900, 6.169877) );
geometry.vertices.push( new THREE.Vector3(19.429430, 148.663498, 7.184475) );
geometry.vertices.push( new THREE.Vector3(18.673759, 147.206192, 7.480649) );
geometry.vertices.push( new THREE.Vector3(-64.274620, 111.845604, 14.168739) );
geometry.vertices.push( new THREE.Vector3(-65.260498, 112.559998, 14.724191) );
geometry.vertices.push( new THREE.Vector3(-65.356499, 111.969803, 14.688789) );
geometry.vertices.push( new THREE.Vector3(-64.156136, 112.133598, 14.543851) );
geometry.vertices.push( new THREE.Vector3(-63.190132, 112.255898, 14.608270) );
geometry.vertices.push( new THREE.Vector3(-64.020370, 112.007202, 15.160009) );
geometry.vertices.push( new THREE.Vector3(-64.929375, 112.480499, 14.870100) );
geometry.vertices.push( new THREE.Vector3(-62.261246, 113.212097, 12.189640) );
geometry.vertices.push( new THREE.Vector3(-63.277882, 112.441505, 12.411370) );
geometry.vertices.push( new THREE.Vector3(-65.076378, 110.464897, 14.407200) );
geometry.vertices.push( new THREE.Vector3(-66.001877, 110.605499, 14.870660) );
geometry.vertices.push( new THREE.Vector3(-63.941998, 111.807404, 13.367550) );
geometry.vertices.push( new THREE.Vector3(-64.126495, 111.894402, 12.569401) );
geometry.vertices.push( new THREE.Vector3(-64.055626, 113.077103, 11.727859) );
geometry.vertices.push( new THREE.Vector3(-63.153751, 113.681602, 11.318180) );
geometry.vertices.push( new THREE.Vector3(-62.195248, 114.473198, 10.787101) );
geometry.vertices.push( new THREE.Vector3(-61.245750, 113.900604, 11.703671) );
geometry.vertices.push( new THREE.Vector3(-61.889999, 113.152901, 14.098351) );
geometry.vertices.push( new THREE.Vector3(-62.334751, 112.652603, 17.599989) );
geometry.vertices.push( new THREE.Vector3(-62.851871, 112.579895, 20.049070) );
geometry.vertices.push( new THREE.Vector3(-61.436249, 113.290497, 19.975161) );
geometry.vertices.push( new THREE.Vector3(-59.959133, 114.873695, 11.252470) );
geometry.vertices.push( new THREE.Vector3(-60.572998, 114.041992, 13.546240) );
geometry.vertices.push( new THREE.Vector3(-61.338383, 113.605904, 16.872530) );
geometry.vertices.push( new THREE.Vector3(-60.325497, 114.101196, 19.020670) );
geometry.vertices.push( new THREE.Vector3(-60.387375, 114.476303, 21.336069) );
geometry.vertices.push( new THREE.Vector3(-61.461754, 112.974800, 21.004200) );
geometry.vertices.push( new THREE.Vector3(-61.222881, 113.565804, 22.006651) );
geometry.vertices.push( new THREE.Vector3(-62.828617, 111.224998, 22.304029) );
geometry.vertices.push( new THREE.Vector3(-59.187000, 114.772499, 18.286730) );
geometry.vertices.push( new THREE.Vector3(-59.577751, 115.019203, 20.669630) );
geometry.vertices.push( new THREE.Vector3(-60.019119, 116.575096, 21.417751) );
geometry.vertices.push( new THREE.Vector3(-61.060501, 115.457199, 22.152750) );
geometry.vertices.push( new THREE.Vector3(-61.830746, 114.382507, 22.850470) );
geometry.vertices.push( new THREE.Vector3(-62.550377, 111.600807, 23.371910) );
geometry.vertices.push( new THREE.Vector3(-63.241119, 111.774803, 24.338099) );
geometry.vertices.push( new THREE.Vector3(-62.841751, 111.060799, 23.630550) );
geometry.vertices.push( new THREE.Vector3(-58.484631, 115.567101, 19.967211) );
geometry.vertices.push( new THREE.Vector3(-58.754246, 116.697395, 21.179359) );
geometry.vertices.push( new THREE.Vector3(-63.110630, 110.693207, 22.582201) );
geometry.vertices.push( new THREE.Vector3(-63.663380, 111.156403, 21.798859) );
geometry.vertices.push( new THREE.Vector3(-63.882751, 110.580803, 22.061180) );
geometry.vertices.push( new THREE.Vector3(-64.418251, 111.424896, 21.903490) );
geometry.vertices.push( new THREE.Vector3(-64.671364, 110.793701, 22.143110) );
geometry.vertices.push( new THREE.Vector3(-65.098122, 109.303108, 22.829550) );
geometry.vertices.push( new THREE.Vector3(-64.261131, 109.388306, 22.583620) );
geometry.vertices.push( new THREE.Vector3(-63.235497, 109.772598, 24.068781) );
geometry.vertices.push( new THREE.Vector3(-63.654381, 109.570900, 23.158390) );
geometry.vertices.push( new THREE.Vector3(-64.438866, 108.904503, 22.834610) );
geometry.vertices.push( new THREE.Vector3(-65.241745, 106.306503, 24.119061) );
geometry.vertices.push( new THREE.Vector3(-64.849503, 106.112198, 24.097052) );
geometry.vertices.push( new THREE.Vector3(-64.978867, 106.141899, 24.798300) );
geometry.vertices.push( new THREE.Vector3(-64.448997, 106.085602, 24.385420) );
geometry.vertices.push( new THREE.Vector3(-63.371246, 109.240898, 24.258640) );
geometry.vertices.push( new THREE.Vector3(-63.718121, 109.048904, 23.437580) );
geometry.vertices.push( new THREE.Vector3(-64.301254, 106.238602, 24.878620) );
geometry.vertices.push( new THREE.Vector3(-64.516129, 106.485405, 25.250212) );
geometry.vertices.push( new THREE.Vector3(-63.770252, 109.965004, 24.857029) );
geometry.vertices.push( new THREE.Vector3(-57.128250, 114.022896, 22.698450) );
geometry.vertices.push( new THREE.Vector3(-56.177628, 112.908005, 22.925251) );
geometry.vertices.push( new THREE.Vector3(-57.331871, 113.249298, 23.391970) );
geometry.vertices.push( new THREE.Vector3(-56.448002, 111.945000, 23.791391) );
geometry.vertices.push( new THREE.Vector3(-55.301250, 112.147903, 23.911091) );
geometry.vertices.push( new THREE.Vector3(-55.478622, 111.400902, 24.718950) );
geometry.vertices.push( new THREE.Vector3(-56.416500, 111.147705, 24.718090) );
geometry.vertices.push( new THREE.Vector3(-57.507748, 112.291100, 24.324820) );
geometry.vertices.push( new THREE.Vector3(-56.019749, 111.260605, 25.531908) );
geometry.vertices.push( new THREE.Vector3(-57.398247, 111.563599, 25.249949) );
geometry.vertices.push( new THREE.Vector3(-55.309879, 111.760498, 25.228909) );
geometry.vertices.push( new THREE.Vector3(-55.056381, 112.696503, 24.718571) );
geometry.vertices.push( new THREE.Vector3(-55.061634, 113.194893, 23.264030) );
geometry.vertices.push( new THREE.Vector3(-55.950367, 113.690201, 22.383980) );
geometry.vertices.push( new THREE.Vector3(-55.854370, 114.176598, 22.006161) );
geometry.vertices.push( new THREE.Vector3(-54.858749, 114.006699, 22.785080) );
geometry.vertices.push( new THREE.Vector3(-54.782249, 114.518997, 22.447460) );
geometry.vertices.push( new THREE.Vector3(-54.561382, 115.021095, 23.660660) );
geometry.vertices.push( new THREE.Vector3(-54.808498, 113.793396, 24.182850) );
geometry.vertices.push( new THREE.Vector3(-54.508503, 116.105606, 22.766510) );
geometry.vertices.push( new THREE.Vector3(-55.780880, 114.676094, 21.595200) );
geometry.vertices.push( new THREE.Vector3(-57.046501, 114.404205, 22.356640) );
geometry.vertices.push( new THREE.Vector3(-57.464249, 114.928497, 23.399330) );
geometry.vertices.push( new THREE.Vector3(-57.524628, 113.942596, 24.256090) );
geometry.vertices.push( new THREE.Vector3(-57.552368, 112.945107, 25.059381) );
geometry.vertices.push( new THREE.Vector3(-56.947117, 111.466095, 25.790361) );
geometry.vertices.push( new THREE.Vector3(-57.498001, 112.207100, 25.590149) );
geometry.vertices.push( new THREE.Vector3(-65.921997, 106.275703, 14.143009) );
geometry.vertices.push( new THREE.Vector3(-65.803497, 108.522705, 14.706861) );
geometry.vertices.push( new THREE.Vector3(-66.116249, 106.323692, 14.796080) );
geometry.vertices.push( new THREE.Vector3(-66.528748, 108.800995, 15.036000) );
geometry.vertices.push( new THREE.Vector3(-66.697868, 106.383003, 14.991900) );
geometry.vertices.push( new THREE.Vector3(-66.596626, 106.012108, 14.295040) );
geometry.vertices.push( new THREE.Vector3(-66.249756, 106.297897, 13.716820) );
geometry.vertices.push( new THREE.Vector3(-66.696754, 106.393501, 13.619889) );
geometry.vertices.push( new THREE.Vector3(-66.037117, 108.489395, 13.326900) );
geometry.vertices.push( new THREE.Vector3(-65.647133, 108.412102, 13.898810) );
geometry.vertices.push( new THREE.Vector3(-65.654999, 109.048904, 14.607149) );
geometry.vertices.push( new THREE.Vector3(-65.290131, 109.969498, 14.481860) );
geometry.vertices.push( new THREE.Vector3(-66.615372, 108.839203, 13.192760) );
geometry.vertices.push( new THREE.Vector3(-64.909119, 112.184998, 12.196420) );
geometry.vertices.push( new THREE.Vector3(-65.351616, 110.350098, 12.982990) );
geometry.vertices.push( new THREE.Vector3(-66.019501, 110.527893, 12.867559) );
geometry.vertices.push( new THREE.Vector3(-65.650116, 109.927498, 13.107260) );
geometry.vertices.push( new THREE.Vector3(-66.001129, 109.077408, 13.296599) );
geometry.vertices.push( new THREE.Vector3(-65.586380, 108.958900, 13.864011) );
geometry.vertices.push( new THREE.Vector3(-65.165253, 109.786903, 13.726130) );
geometry.vertices.push( new THREE.Vector3(-64.939865, 110.296501, 13.638709) );
geometry.vertices.push( new THREE.Vector3(-7.897687, 118.842804, -11.307671) );
geometry.vertices.push( new THREE.Vector3(-7.709812, 122.913002, -9.401737) );
geometry.vertices.push( new THREE.Vector3(-7.692488, 123.120705, -10.227900) );
geometry.vertices.push( new THREE.Vector3(-7.915013, 118.635002, -10.481510) );
geometry.vertices.push( new THREE.Vector3(-7.299375, 122.712006, -8.682675) );
geometry.vertices.push( new THREE.Vector3(-7.504575, 118.433998, -9.762450) );
geometry.vertices.push( new THREE.Vector3(-6.571087, 122.571007, -8.263389) );
geometry.vertices.push( new THREE.Vector3(-6.776287, 118.292999, -9.343163) );
geometry.vertices.push( new THREE.Vector3(-5.720138, 122.528603, -8.256226) );
geometry.vertices.push( new THREE.Vector3(-5.925337, 118.250595, -9.335999) );
geometry.vertices.push( new THREE.Vector3(-4.974525, 122.595406, -8.663137) );
geometry.vertices.push( new THREE.Vector3(-5.179725, 118.317398, -9.742912) );
geometry.vertices.push( new THREE.Vector3(-4.534012, 122.753998, -9.375038) );
geometry.vertices.push( new THREE.Vector3(-4.739212, 118.475998, -10.454809) );
geometry.vertices.push( new THREE.Vector3(-6.981525, 114.014992, -10.422940) );
geometry.vertices.push( new THREE.Vector3(-6.130575, 113.972603, -10.415780) );
geometry.vertices.push( new THREE.Vector3(-5.384925, 114.039398, -10.822690) );
geometry.vertices.push( new THREE.Vector3(-4.944450, 114.198006, -11.534591) );
geometry.vertices.push( new THREE.Vector3(-4.721887, 118.683800, -11.280980) );
geometry.vertices.push( new THREE.Vector3(-4.516650, 122.961700, -10.201200) );
geometry.vertices.push( new THREE.Vector3(-4.927088, 114.405800, -12.360750) );
geometry.vertices.push( new THREE.Vector3(-8.102888, 114.564804, -12.387450) );
geometry.vertices.push( new THREE.Vector3(-8.120250, 114.356995, -11.561290) );
geometry.vertices.push( new THREE.Vector3(-7.709775, 114.155998, -10.842219) );
geometry.vertices.push( new THREE.Vector3(-0.000062, 114.445496, 12.896811) );
geometry.vertices.push( new THREE.Vector3(-3.932288, 117.857208, 12.682840) );
geometry.vertices.push( new THREE.Vector3(-0.000068, 117.801704, 13.239450) );
geometry.vertices.push( new THREE.Vector3(-3.953475, 114.560608, 12.358160) );
geometry.vertices.push( new THREE.Vector3(-5.821125, 114.600800, 11.856640) );
geometry.vertices.push( new THREE.Vector3(-6.481725, 117.944298, 12.043420) );
geometry.vertices.push( new THREE.Vector3(-7.204800, 114.650200, 11.473160) );
geometry.vertices.push( new THREE.Vector3(-9.488812, 118.210098, 10.450720) );
geometry.vertices.push( new THREE.Vector3(-9.826612, 114.947601, 10.022470) );
geometry.vertices.push( new THREE.Vector3(-12.129110, 118.667999, 8.439150) );
geometry.vertices.push( new THREE.Vector3(-12.328760, 115.340599, 8.175000) );
geometry.vertices.push( new THREE.Vector3(-14.535490, 116.048599, 4.795575) );
geometry.vertices.push( new THREE.Vector3(-14.800390, 112.736198, 4.351988) );
geometry.vertices.push( new THREE.Vector3(-5.160562, 111.257599, 11.669889) );
geometry.vertices.push( new THREE.Vector3(-3.974662, 111.264397, 12.033490) );
geometry.vertices.push( new THREE.Vector3(-7.927838, 111.355904, 10.902901) );
geometry.vertices.push( new THREE.Vector3(-10.164450, 111.685501, 9.594263) );
geometry.vertices.push( new THREE.Vector3(-12.528370, 112.013199, 7.910888) );
geometry.vertices.push( new THREE.Vector3(-7.974225, 111.233994, 10.999801) );
geometry.vertices.push( new THREE.Vector3(-10.245151, 111.561798, 9.673575) );
geometry.vertices.push( new THREE.Vector3(-5.201137, 111.137604, 11.768740) );
geometry.vertices.push( new THREE.Vector3(-4.009500, 111.146294, 12.134320) );
geometry.vertices.push( new THREE.Vector3(-0.000044, 111.007095, 12.693560) );
geometry.vertices.push( new THREE.Vector3(-0.000046, 111.089302, 12.554140) );
geometry.vertices.push( new THREE.Vector3(-5.241750, 111.017593, 11.867590) );
geometry.vertices.push( new THREE.Vector3(-4.044300, 111.028099, 12.235160) );
geometry.vertices.push( new THREE.Vector3(-0.000047, 110.924995, 12.832991) );
geometry.vertices.push( new THREE.Vector3(-4.242713, 111.018394, 12.890440) );
geometry.vertices.push( new THREE.Vector3(-5.489400, 110.996605, 12.555189) );
geometry.vertices.push( new THREE.Vector3(-4.268250, 111.117401, 12.985089) );
geometry.vertices.push( new THREE.Vector3(-4.269225, 117.692604, 13.811320) );
geometry.vertices.push( new THREE.Vector3(-6.242438, 114.493095, 12.906070) );
geometry.vertices.push( new THREE.Vector3(-4.281488, 114.454498, 13.445550) );
geometry.vertices.push( new THREE.Vector3(-5.530313, 111.213699, 12.714230) );
geometry.vertices.push( new THREE.Vector3(-4.293787, 111.216400, 13.079781) );
geometry.vertices.push( new THREE.Vector3(-5.509837, 111.105003, 12.634690) );
geometry.vertices.push( new THREE.Vector3(-8.317500, 111.079895, 11.816550) );
geometry.vertices.push( new THREE.Vector3(-8.020576, 111.112106, 11.096740) );
geometry.vertices.push( new THREE.Vector3(-10.877291, 111.482597, 10.456800) );
geometry.vertices.push( new THREE.Vector3(-13.486690, 111.752998, 8.492063) );
geometry.vertices.push( new THREE.Vector3(-10.849650, 111.385498, 10.414391) );
geometry.vertices.push( new THREE.Vector3(-8.332838, 111.197304, 11.880900) );
geometry.vertices.push( new THREE.Vector3(-8.348175, 111.315002, 11.945210) );
geometry.vertices.push( new THREE.Vector3(-7.651387, 114.544106, 12.521550) );
geometry.vertices.push( new THREE.Vector3(-6.954563, 117.772903, 13.097890) );
geometry.vertices.push( new THREE.Vector3(-10.387350, 118.157303, 11.291360) );
geometry.vertices.push( new THREE.Vector3(-13.195721, 118.635406, 9.111075) );
geometry.vertices.push( new THREE.Vector3(-15.802650, 116.032501, 5.093887) );
geometry.vertices.push( new THREE.Vector3(-13.377491, 115.286598, 8.835225) );
geometry.vertices.push( new THREE.Vector3(-10.646140, 114.868500, 10.895290) );
geometry.vertices.push( new THREE.Vector3(-10.904930, 111.579391, 10.499169) );
geometry.vertices.push( new THREE.Vector3(-13.522990, 111.845604, 8.525699) );
geometry.vertices.push( new THREE.Vector3(-15.896930, 112.517204, 4.574475) );
geometry.vertices.push( new THREE.Vector3(-16.034811, 112.748596, 4.655550) );
geometry.vertices.push( new THREE.Vector3(-13.559251, 111.937904, 8.559375) );
geometry.vertices.push( new THREE.Vector3(-15.965889, 112.633095, 4.615013) );
geometry.vertices.push( new THREE.Vector3(-16.591120, 113.228592, 0.468829) );
geometry.vertices.push( new THREE.Vector3(-16.690689, 113.386093, 0.457496) );
geometry.vertices.push( new THREE.Vector3(-15.038170, 112.505997, 4.377225) );
geometry.vertices.push( new THREE.Vector3(-15.744411, 113.213600, 0.538234) );
geometry.vertices.push( new THREE.Vector3(-15.562131, 114.041306, -3.829087) );
geometry.vertices.push( new THREE.Vector3(-15.673500, 114.200607, -3.850950) );
geometry.vertices.push( new THREE.Vector3(-16.790291, 113.543198, 0.446160) );
geometry.vertices.push( new THREE.Vector3(-14.804660, 114.023300, -3.577346) );
geometry.vertices.push( new THREE.Vector3(-13.449940, 114.573799, -7.195050) );
geometry.vertices.push( new THREE.Vector3(-12.831301, 114.542198, -6.713437) );
geometry.vertices.push( new THREE.Vector3(-10.335710, 114.972702, -9.777150) );
geometry.vertices.push( new THREE.Vector3(-13.531540, 114.748093, -7.248412) );
geometry.vertices.push( new THREE.Vector3(-15.784841, 114.359604, -3.872813) );
geometry.vertices.push( new THREE.Vector3(-16.620560, 116.790703, 1.001689) );
geometry.vertices.push( new THREE.Vector3(-15.570490, 119.316399, 5.532262) );
geometry.vertices.push( new THREE.Vector3(-16.450840, 120.038200, 1.557221) );
geometry.vertices.push( new THREE.Vector3(-16.145630, 120.280899, 1.591710) );
geometry.vertices.push( new THREE.Vector3(-15.483150, 120.727501, -2.728856) );
geometry.vertices.push( new THREE.Vector3(-15.634010, 117.543701, -3.300836) );
geometry.vertices.push( new THREE.Vector3(-13.613140, 114.922905, -7.301775) );
geometry.vertices.push( new THREE.Vector3(-10.390579, 115.159500, -9.805050) );
geometry.vertices.push( new THREE.Vector3(-7.001963, 115.402496, -11.482241) );
geometry.vertices.push( new THREE.Vector3(-13.373470, 118.072495, -6.676950) );
geometry.vertices.push( new THREE.Vector3(-10.445400, 115.345894, -9.832950) );
geometry.vertices.push( new THREE.Vector3(-7.036012, 115.585899, -11.487829) );
geometry.vertices.push( new THREE.Vector3(-3.264469, 115.612495, -12.288980) );
geometry.vertices.push( new THREE.Vector3(-3.270255, 115.441895, -12.279980) );
geometry.vertices.push( new THREE.Vector3(-6.967875, 115.218697, -11.476650) );
geometry.vertices.push( new THREE.Vector3(-9.751086, 114.930000, -9.156487) );
geometry.vertices.push( new THREE.Vector3(0.000040, 118.726097, -11.596990) );
geometry.vertices.push( new THREE.Vector3(0.000036, 115.523300, -12.370910) );
geometry.vertices.push( new THREE.Vector3(0.000033, 115.385201, -12.351260) );
geometry.vertices.push( new THREE.Vector3(-3.276037, 115.271202, -12.270940) );
geometry.vertices.push( new THREE.Vector3(-6.462825, 115.187302, -10.771160) );
geometry.vertices.push( new THREE.Vector3(-9.672862, 115.038803, -9.047025) );
geometry.vertices.push( new THREE.Vector3(-12.744490, 114.652893, -6.620811) );
geometry.vertices.push( new THREE.Vector3(-12.657709, 114.763901, -6.528226) );
geometry.vertices.push( new THREE.Vector3(-9.594600, 115.147903, -8.937600) );
geometry.vertices.push( new THREE.Vector3(-3.059167, 115.255104, -11.497090) );
geometry.vertices.push( new THREE.Vector3(-6.396937, 115.296700, -10.646210) );
geometry.vertices.push( new THREE.Vector3(-3.030154, 115.365395, -11.352750) );
geometry.vertices.push( new THREE.Vector3(-6.331049, 115.406296, -10.521230) );
geometry.vertices.push( new THREE.Vector3(-3.001136, 115.475594, -11.208410) );
geometry.vertices.push( new THREE.Vector3(-2.979034, 118.669106, -10.394510) );
geometry.vertices.push( new THREE.Vector3(-6.321563, 118.602005, -9.631499) );
geometry.vertices.push( new THREE.Vector3(-2.956942, 121.862602, -9.580612) );
geometry.vertices.push( new THREE.Vector3(-6.312113, 121.797394, -8.741776) );
geometry.vertices.push( new THREE.Vector3(0.000043, 121.853996, -9.685650) );
geometry.vertices.push( new THREE.Vector3(0.000042, 118.660904, -10.469319) );
geometry.vertices.push( new THREE.Vector3(0.000032, 115.467796, -11.252960) );
geometry.vertices.push( new THREE.Vector3(0.000032, 115.356400, -11.405769) );
geometry.vertices.push( new THREE.Vector3(0.000033, 115.244995, -11.558550) );
geometry.vertices.push( new THREE.Vector3(0.000036, 115.247597, -12.331610) );
geometry.vertices.push( new THREE.Vector3(7.036088, 115.585899, -11.487790) );
geometry.vertices.push( new THREE.Vector3(10.390611, 115.159500, -9.804974) );
geometry.vertices.push( new THREE.Vector3(7.002000, 115.402496, -11.482200) );
geometry.vertices.push( new THREE.Vector3(6.792262, 121.867500, -9.820275) );
geometry.vertices.push( new THREE.Vector3(10.285880, 118.499603, -9.114637) );
geometry.vertices.push( new THREE.Vector3(6.914176, 118.726501, -10.654050) );
geometry.vertices.push( new THREE.Vector3(3.141195, 121.930504, -10.719000) );
geometry.vertices.push( new THREE.Vector3(3.202864, 118.771507, -11.503990) );
geometry.vertices.push( new THREE.Vector3(10.445440, 115.345894, -9.832874) );
geometry.vertices.push( new THREE.Vector3(13.613171, 114.922905, -7.301663) );
geometry.vertices.push( new THREE.Vector3(13.531570, 114.748093, -7.248338) );
geometry.vertices.push( new THREE.Vector3(15.784841, 114.359604, -3.872700) );
geometry.vertices.push( new THREE.Vector3(15.673500, 114.200607, -3.850875) );
geometry.vertices.push( new THREE.Vector3(9.995288, 121.878693, -8.180025) );
geometry.vertices.push( new THREE.Vector3(10.126270, 121.653000, -8.396399) );
geometry.vertices.push( new THREE.Vector3(6.715500, 122.097000, -9.605324) );
geometry.vertices.push( new THREE.Vector3(12.978000, 121.441902, -5.893313) );
geometry.vertices.push( new THREE.Vector3(3.130781, 122.165596, -10.539260) );
geometry.vertices.push( new THREE.Vector3(6.324225, 122.007797, -8.849664) );
geometry.vertices.push( new THREE.Vector3(9.494925, 121.796593, -7.539300) );
geometry.vertices.push( new THREE.Vector3(12.375970, 121.389404, -5.394150) );
geometry.vertices.push( new THREE.Vector3(14.509871, 120.918800, -2.321280) );
geometry.vertices.push( new THREE.Vector3(2.957029, 121.862602, -9.580575) );
geometry.vertices.push( new THREE.Vector3(6.312188, 121.797394, -8.741701) );
geometry.vertices.push( new THREE.Vector3(9.410213, 121.596703, -7.428675) );
geometry.vertices.push( new THREE.Vector3(12.230250, 121.179703, -5.266988) );
geometry.vertices.push( new THREE.Vector3(14.337070, 120.712105, -2.252160) );
geometry.vertices.push( new THREE.Vector3(15.339820, 120.217896, 1.654035) );
geometry.vertices.push( new THREE.Vector3(15.140550, 120.055496, 1.665881) );
geometry.vertices.push( new THREE.Vector3(14.465099, 119.525597, 5.298150) );
geometry.vertices.push( new THREE.Vector3(12.986509, 118.926003, 8.968163) );
geometry.vertices.push( new THREE.Vector3(15.261900, 119.584892, 5.483850) );
geometry.vertices.push( new THREE.Vector3(16.145630, 120.280899, 1.591867) );
geometry.vertices.push( new THREE.Vector3(15.290210, 120.945801, -2.611766) );
geometry.vertices.push( new THREE.Vector3(13.133851, 121.222099, -6.052050) );
geometry.vertices.push( new THREE.Vector3(13.195650, 118.635406, 9.111188) );
geometry.vertices.push( new THREE.Vector3(15.483191, 120.727501, -2.728706) );
geometry.vertices.push( new THREE.Vector3(15.634010, 117.543701, -3.300712) );
geometry.vertices.push( new THREE.Vector3(13.373510, 118.072495, -6.676875) );
geometry.vertices.push( new THREE.Vector3(15.570450, 119.316399, 5.532413) );
geometry.vertices.push( new THREE.Vector3(16.450800, 120.038200, 1.557379) );
geometry.vertices.push( new THREE.Vector3(16.620531, 116.790703, 1.001820) );
geometry.vertices.push( new THREE.Vector3(16.790251, 113.543198, 0.446269) );
geometry.vertices.push( new THREE.Vector3(15.802610, 116.032501, 5.094037) );
geometry.vertices.push( new THREE.Vector3(16.034781, 112.749008, 4.655663) );
geometry.vertices.push( new THREE.Vector3(16.690689, 113.386093, 0.457601) );
geometry.vertices.push( new THREE.Vector3(15.965811, 112.633095, 4.615125) );
geometry.vertices.push( new THREE.Vector3(13.559210, 111.937904, 8.559450) );
geometry.vertices.push( new THREE.Vector3(13.377410, 115.286598, 8.835338) );
geometry.vertices.push( new THREE.Vector3(6.242325, 114.493095, 12.906111) );
geometry.vertices.push( new THREE.Vector3(4.269075, 117.692604, 13.811360) );
geometry.vertices.push( new THREE.Vector3(4.281375, 114.454498, 13.445590) );
geometry.vertices.push( new THREE.Vector3(6.954412, 117.772903, 13.097960) );
geometry.vertices.push( new THREE.Vector3(7.651275, 114.544106, 12.521620) );
geometry.vertices.push( new THREE.Vector3(10.387240, 118.157303, 11.291480) );
geometry.vertices.push( new THREE.Vector3(10.646030, 114.868500, 10.895360) );
geometry.vertices.push( new THREE.Vector3(10.904810, 111.579391, 10.499250) );
geometry.vertices.push( new THREE.Vector3(13.522909, 111.845604, 8.525813) );
geometry.vertices.push( new THREE.Vector3(10.212450, 118.426895, 11.207890) );
geometry.vertices.push( new THREE.Vector3(6.897262, 118.109596, 12.958651) );
geometry.vertices.push( new THREE.Vector3(4.218412, 118.034996, 13.645090) );
geometry.vertices.push( new THREE.Vector3(3.971738, 118.100998, 12.929291) );
geometry.vertices.push( new THREE.Vector3(-0.000068, 117.801704, 13.239450) );
geometry.vertices.push( new THREE.Vector3(-0.000069, 118.042503, 13.493811) );
geometry.vertices.push( new THREE.Vector3(-0.000071, 118.097305, 13.744800) );
geometry.vertices.push( new THREE.Vector3(6.528263, 118.191002, 12.270380) );
geometry.vertices.push( new THREE.Vector3(9.569100, 118.465103, 10.592030) );
geometry.vertices.push( new THREE.Vector3(12.229240, 118.925201, 8.566725) );
geometry.vertices.push( new THREE.Vector3(14.270510, 119.361404, 5.239350) );
geometry.vertices.push( new THREE.Vector3(12.129040, 118.667999, 8.439263) );
geometry.vertices.push( new THREE.Vector3(9.488700, 118.210098, 10.450800) );
geometry.vertices.push( new THREE.Vector3(6.481612, 117.944298, 12.043500) );
geometry.vertices.push( new THREE.Vector3(3.932137, 117.857208, 12.682870) );
geometry.vertices.push( new THREE.Vector3(-65.264618, 110.737503, 21.896400) );
geometry.vertices.push( new THREE.Vector3(-63.700878, 113.046799, 20.683880) );
geometry.vertices.push( new THREE.Vector3(-63.079880, 112.982597, 20.600210) );
geometry.vertices.push( new THREE.Vector3(-62.174999, 112.784599, 20.504290) );
geometry.vertices.push( new THREE.Vector3(-66.714386, 105.102798, 23.042660) );
geometry.vertices.push( new THREE.Vector3(-65.689125, 107.703400, 22.185080) );
geometry.vertices.push( new THREE.Vector3(-66.114746, 108.034096, 22.631811) );
geometry.vertices.push( new THREE.Vector3(-65.661003, 108.244499, 22.094740) );
geometry.vertices.push( new THREE.Vector3(-65.630630, 110.177299, 22.111460) );
geometry.vertices.push( new THREE.Vector3(-65.158501, 109.894897, 21.488211) );
geometry.vertices.push( new THREE.Vector3(-64.835251, 110.542503, 21.176590) );
geometry.vertices.push( new THREE.Vector3(-63.272251, 111.952904, 18.559608) );
geometry.vertices.push( new THREE.Vector3(-63.300751, 112.240509, 17.312851) );
geometry.vertices.push( new THREE.Vector3(-67.004250, 104.635895, 22.289101) );
geometry.vertices.push( new THREE.Vector3(-66.310883, 104.859802, 22.639730) );
geometry.vertices.push( new THREE.Vector3(-66.452255, 107.908104, 20.299570) );
geometry.vertices.push( new THREE.Vector3(-65.184746, 109.432098, 20.321590) );
geometry.vertices.push( new THREE.Vector3(-65.768250, 107.974098, 20.946751) );
geometry.vertices.push( new THREE.Vector3(-66.534004, 107.355408, 20.455351) );
geometry.vertices.push( new THREE.Vector3(-67.141495, 107.755898, 20.500690) );
geometry.vertices.push( new THREE.Vector3(-66.801003, 104.668495, 21.502159) );
geometry.vertices.push( new THREE.Vector3(-67.258881, 104.833900, 21.550951) );
geometry.vertices.push( new THREE.Vector3(-66.311623, 104.645599, 21.920099) );
geometry.vertices.push( new THREE.Vector3(-65.778748, 107.362900, 21.080030) );
geometry.vertices.push( new THREE.Vector3(-64.922249, 110.233498, 20.016449) );
geometry.vertices.push( new THREE.Vector3(-66.342003, 110.428497, 18.648941) );
geometry.vertices.push( new THREE.Vector3(-64.192871, 112.174500, 17.712070) );
geometry.vertices.push( new THREE.Vector3(-65.093262, 112.488403, 17.973749) );
geometry.vertices.push( new THREE.Vector3(-66.323631, 110.342598, 19.502890) );
geometry.vertices.push( new THREE.Vector3(-65.879631, 110.207603, 19.376589) );
geometry.vertices.push( new THREE.Vector3(-66.090752, 109.504906, 19.685930) );
geometry.vertices.push( new THREE.Vector3(-64.299751, 111.492798, 16.452980) );
geometry.vertices.push( new THREE.Vector3(-63.588367, 111.843803, 16.135689) );
geometry.vertices.push( new THREE.Vector3(-64.902000, 111.587593, 15.594859) );
geometry.vertices.push( new THREE.Vector3(-65.814751, 109.927498, 17.214451) );
geometry.vertices.push( new THREE.Vector3(-66.389633, 110.096596, 16.351881) );
geometry.vertices.push( new THREE.Vector3(-66.039749, 109.488701, 17.343559) );
geometry.vertices.push( new THREE.Vector3(-66.653252, 109.541199, 16.504499) );
geometry.vertices.push( new THREE.Vector3(-67.183884, 107.913803, 16.979321) );
geometry.vertices.push( new THREE.Vector3(-65.608887, 112.202301, 15.368740) );
geometry.vertices.push( new THREE.Vector3(-67.113754, 109.974396, 16.365191) );
geometry.vertices.push( new THREE.Vector3(-67.722000, 107.714996, 16.960611) );
geometry.vertices.push( new THREE.Vector3(-67.919998, 104.579605, 18.531530) );
geometry.vertices.push( new THREE.Vector3(-67.499634, 104.669594, 17.902050) );
geometry.vertices.push( new THREE.Vector3(-67.254753, 104.647507, 18.363230) );
geometry.vertices.push( new THREE.Vector3(-67.285133, 107.414604, 17.051441) );
geometry.vertices.push( new THREE.Vector3(-67.952255, 104.764107, 17.709860) );
geometry.vertices.push( new THREE.Vector3(-66.729752, 107.298004, 17.770950) );
geometry.vertices.push( new THREE.Vector3(-66.715500, 107.428101, 18.641359) );
geometry.vertices.push( new THREE.Vector3(-67.260750, 104.725899, 18.936260) );
geometry.vertices.push( new THREE.Vector3(-67.271248, 107.979797, 19.216801) );
geometry.vertices.push( new THREE.Vector3(-67.562996, 104.908501, 19.348761) );
geometry.vertices.push( new THREE.Vector3(-66.717751, 107.933998, 17.705851) );
geometry.vertices.push( new THREE.Vector3(-66.747749, 108.062996, 18.602251) );
geometry.vertices.push( new THREE.Vector3(-66.548248, 109.947800, 18.773890) );
geometry.vertices.push( new THREE.Vector3(-66.152252, 109.697998, 18.234221) );
geometry.vertices.push( new THREE.Vector3(-65.850380, 110.131096, 18.128099) );
geometry.vertices.push( new THREE.Vector3(-57.829498, 115.646599, 17.770281) );
geometry.vertices.push( new THREE.Vector3(-56.275116, 115.675102, 19.769360) );
geometry.vertices.push( new THREE.Vector3(-57.469498, 115.454193, 19.161411) );
geometry.vertices.push( new THREE.Vector3(-57.417751, 115.507904, 20.658831) );
geometry.vertices.push( new THREE.Vector3(-57.023251, 115.396904, 21.251921) );
geometry.vertices.push( new THREE.Vector3(-55.781631, 115.138901, 20.791540) );
geometry.vertices.push( new THREE.Vector3(-56.945251, 114.937103, 21.878210) );
geometry.vertices.push( new THREE.Vector3(-54.653252, 115.182808, 21.946991) );
geometry.vertices.push( new THREE.Vector3(-54.540001, 115.749702, 21.102301) );
geometry.vertices.push( new THREE.Vector3(-54.540371, 116.438202, 20.196980) );
geometry.vertices.push( new THREE.Vector3(-54.448120, 117.240402, 18.850269) );
geometry.vertices.push( new THREE.Vector3(-56.040001, 116.263107, 18.127008) );
geometry.vertices.push( new THREE.Vector3(-58.495499, 115.833794, 15.390640) );
geometry.vertices.push( new THREE.Vector3(-54.117382, 117.802498, 17.374130) );
geometry.vertices.push( new THREE.Vector3(-53.892368, 118.570496, 19.778740) );
geometry.vertices.push( new THREE.Vector3(-54.012001, 117.690002, 21.020811) );
geometry.vertices.push( new THREE.Vector3(-54.237373, 116.949699, 21.996410) );
geometry.vertices.push( new THREE.Vector3(-55.733253, 116.765198, 16.334591) );
geometry.vertices.push( new THREE.Vector3(-57.419628, 116.657303, 14.289411) );
geometry.vertices.push( new THREE.Vector3(-55.861126, 117.430901, 14.309960) );
geometry.vertices.push( new THREE.Vector3(-54.162373, 118.634605, 15.783220) );
geometry.vertices.push( new THREE.Vector3(-53.707497, 120.237007, 17.067110) );
geometry.vertices.push( new THREE.Vector3(-53.781746, 119.457695, 18.412159) );
geometry.vertices.push( new THREE.Vector3(-55.149757, 118.360100, 13.499101) );
geometry.vertices.push( new THREE.Vector3(-55.187618, 119.103004, 11.706450) );
geometry.vertices.push( new THREE.Vector3(-54.171001, 119.605896, 13.964960) );
geometry.vertices.push( new THREE.Vector3(-55.926750, 118.220604, 12.050700) );
geometry.vertices.push( new THREE.Vector3(-53.696251, 120.904503, 15.746699) );
geometry.vertices.push( new THREE.Vector3(-51.639748, 122.113892, 6.600262) );
geometry.vertices.push( new THREE.Vector3(-52.770000, 120.937096, 9.973387) );
geometry.vertices.push( new THREE.Vector3(-53.811378, 120.812592, 8.439188) );
geometry.vertices.push( new THREE.Vector3(-54.014248, 120.130898, 10.894840) );
geometry.vertices.push( new THREE.Vector3(-55.071377, 119.860497, 9.545213) );
geometry.vertices.push( new THREE.Vector3(-56.117249, 119.065903, 10.383790) );
geometry.vertices.push( new THREE.Vector3(-56.554501, 118.182396, 10.722260) );
geometry.vertices.push( new THREE.Vector3(-56.779499, 117.320595, 12.397500) );
geometry.vertices.push( new THREE.Vector3(-58.257751, 118.234894, 9.595387) );
geometry.vertices.push( new THREE.Vector3(-57.380630, 119.625000, 9.562426) );
geometry.vertices.push( new THREE.Vector3(-57.508121, 117.353203, 10.546910) );
geometry.vertices.push( new THREE.Vector3(-57.920246, 116.099594, 12.370610) );
geometry.vertices.push( new THREE.Vector3(-59.699619, 116.852203, 9.829763) );
geometry.vertices.push( new THREE.Vector3(-58.629002, 116.072998, 10.714990) );
geometry.vertices.push( new THREE.Vector3(-59.241001, 115.064301, 12.892610) );
geometry.vertices.push( new THREE.Vector3(-60.025501, 114.633003, 16.012239) );
geometry.vertices.push( new THREE.Vector3(-60.997498, 115.617004, 10.384160) );
geometry.vertices.push( new THREE.Vector3(21.870489, 143.689896, -7.158900) );
geometry.vertices.push( new THREE.Vector3(21.227629, 144.123398, -10.066540) );
geometry.vertices.push( new THREE.Vector3(22.161940, 144.891403, -7.146113) );
geometry.vertices.push( new THREE.Vector3(22.061209, 144.725296, -3.821438) );
geometry.vertices.push( new THREE.Vector3(19.795351, 145.603500, -0.318466) );
geometry.vertices.push( new THREE.Vector3(21.727610, 143.679001, -3.858450) );
geometry.vertices.push( new THREE.Vector3(19.737600, 144.410599, 0.021670) );
geometry.vertices.push( new THREE.Vector3(21.571880, 142.339905, -4.002452) );
geometry.vertices.push( new THREE.Vector3(21.579041, 142.488403, -7.171611) );
geometry.vertices.push( new THREE.Vector3(18.809549, 140.707901, -11.375919) );
geometry.vertices.push( new THREE.Vector3(22.886511, 146.703400, -6.626925) );
geometry.vertices.push( new THREE.Vector3(22.349140, 145.628601, -3.789150) );
geometry.vertices.push( new THREE.Vector3(20.501631, 145.816895, -0.197506) );
geometry.vertices.push( new THREE.Vector3(19.821671, 147.676895, 3.037380) );
geometry.vertices.push( new THREE.Vector3(19.217739, 146.738602, 3.682503) );
geometry.vertices.push( new THREE.Vector3(18.568499, 145.642899, 4.790137) );
geometry.vertices.push( new THREE.Vector3(21.346390, 146.072311, -0.052826) );
geometry.vertices.push( new THREE.Vector3(20.522741, 148.249496, 2.740849) );
geometry.vertices.push( new THREE.Vector3(20.402580, 148.841202, 5.325000) );
geometry.vertices.push( new THREE.Vector3(17.566580, 144.175095, 6.250800) );
geometry.vertices.push( new THREE.Vector3(17.614201, 141.027405, 5.426699) );
geometry.vertices.push( new THREE.Vector3(19.647449, 142.548798, 0.552638) );
geometry.vertices.push( new THREE.Vector3(21.416100, 141.000702, -4.146412) );
geometry.vertices.push( new THREE.Vector3(20.927481, 140.705292, -7.603988) );
geometry.vertices.push( new THREE.Vector3(16.865059, 135.844894, -10.020040) );
geometry.vertices.push( new THREE.Vector3(13.213690, 135.527298, -12.732450) );
geometry.vertices.push( new THREE.Vector3(14.723030, 131.952408, -8.370714) );
geometry.vertices.push( new THREE.Vector3(11.954630, 132.179993, -11.124530) );
geometry.vertices.push( new THREE.Vector3(14.208039, 140.178391, -13.712400) );
geometry.vertices.push( new THREE.Vector3(7.361775, 130.049210, -11.538190) );
geometry.vertices.push( new THREE.Vector3(7.770377, 132.192398, -12.555000) );
geometry.vertices.push( new THREE.Vector3(3.146550, 122.683098, -9.195825) );
geometry.vertices.push( new THREE.Vector3(6.531638, 125.167099, -9.125513) );
geometry.vertices.push( new THREE.Vector3(6.369450, 122.573997, -8.847187) );
geometry.vertices.push( new THREE.Vector3(2.966220, 125.199699, -9.326550) );
geometry.vertices.push( new THREE.Vector3(3.137760, 128.166702, -10.423650) );
geometry.vertices.push( new THREE.Vector3(0.000043, 125.270203, -8.764425) );
geometry.vertices.push( new THREE.Vector3(0.000045, 128.337006, -9.998851) );
geometry.vertices.push( new THREE.Vector3(3.350220, 130.305695, -11.394860) );
geometry.vertices.push( new THREE.Vector3(0.000040, 130.445190, -10.799850) );
geometry.vertices.push( new THREE.Vector3(6.426450, 120.326996, -9.057263) );
geometry.vertices.push( new THREE.Vector3(3.086888, 120.480797, -9.735413) );
geometry.vertices.push( new THREE.Vector3(0.000040, 122.628403, -9.101025) );
geometry.vertices.push( new THREE.Vector3(0.000046, 120.910095, -10.086491) );
geometry.vertices.push( new THREE.Vector3(12.462340, 129.980606, -8.922412) );
geometry.vertices.push( new THREE.Vector3(12.542171, 127.702904, -6.224850) );
geometry.vertices.push( new THREE.Vector3(10.390389, 127.942101, -8.933024) );
geometry.vertices.push( new THREE.Vector3(12.289350, 125.097404, -5.665950) );
geometry.vertices.push( new THREE.Vector3(9.859237, 125.110901, -7.576125) );
geometry.vertices.push( new THREE.Vector3(12.385540, 122.191498, -5.442000) );
geometry.vertices.push( new THREE.Vector3(9.491400, 122.429596, -7.369013) );
geometry.vertices.push( new THREE.Vector3(12.957830, 119.563103, -5.808525) );
geometry.vertices.push( new THREE.Vector3(9.272699, 119.968498, -7.535212) );
geometry.vertices.push( new THREE.Vector3(11.178370, 130.126907, -10.147010) );
geometry.vertices.push( new THREE.Vector3(6.936300, 127.964996, -10.418770) );
geometry.vertices.push( new THREE.Vector3(17.741289, 137.101105, 4.931700) );
geometry.vertices.push( new THREE.Vector3(19.082251, 137.457001, 0.634324) );
geometry.vertices.push( new THREE.Vector3(17.062611, 133.684891, 0.510896) );
geometry.vertices.push( new THREE.Vector3(16.857901, 132.589905, -3.457072) );
geometry.vertices.push( new THREE.Vector3(15.330860, 130.150909, -2.994180) );
geometry.vertices.push( new THREE.Vector3(13.722489, 129.909698, -7.296712) );
geometry.vertices.push( new THREE.Vector3(14.645960, 121.786903, -2.341669) );
geometry.vertices.push( new THREE.Vector3(14.629240, 124.624893, -2.355814) );
geometry.vertices.push( new THREE.Vector3(14.322680, 127.580597, -2.380969) );
geometry.vertices.push( new THREE.Vector3(15.230550, 130.077011, 0.557944) );
geometry.vertices.push( new THREE.Vector3(14.293011, 129.888702, 4.607925) );
geometry.vertices.push( new THREE.Vector3(16.264460, 133.303101, 4.417950) );
geometry.vertices.push( new THREE.Vector3(14.489590, 127.267899, 0.635213) );
geometry.vertices.push( new THREE.Vector3(13.934620, 126.767601, 4.867538) );
geometry.vertices.push( new THREE.Vector3(15.151580, 124.448303, 1.191053) );
geometry.vertices.push( new THREE.Vector3(15.635779, 121.515404, 1.648583) );
geometry.vertices.push( new THREE.Vector3(13.967320, 124.121201, 4.888313) );
geometry.vertices.push( new THREE.Vector3(14.732809, 121.121597, 5.325075) );
geometry.vertices.push( new THREE.Vector3(16.012310, 118.553307, 1.634235) );
geometry.vertices.push( new THREE.Vector3(15.307610, 119.181396, -2.538454) );
geometry.vertices.push( new THREE.Vector3(15.181459, 117.923203, 5.524163) );
geometry.vertices.push( new THREE.Vector3(44.357632, 135.947296, 8.830576) );
geometry.vertices.push( new THREE.Vector3(-57.904881, 116.836098, 21.430540) );
geometry.vertices.push( new THREE.Vector3(-57.432003, 116.525307, 21.964870) );
geometry.vertices.push( new THREE.Vector3(-57.310879, 115.844200, 22.577660) );
geometry.vertices.push( new THREE.Vector3(-47.118752, 124.378502, 9.098100) );
geometry.vertices.push( new THREE.Vector3(-45.442871, 124.112595, 4.667138) );
geometry.vertices.push( new THREE.Vector3(-44.725880, 125.476097, 7.810687) );
geometry.vertices.push( new THREE.Vector3(-47.950119, 123.113297, 6.444187) );
geometry.vertices.push( new THREE.Vector3(-49.598251, 123.100899, 10.420011) );
geometry.vertices.push( new THREE.Vector3(-50.556763, 122.198196, 8.239536) );
geometry.vertices.push( new THREE.Vector3(-51.792370, 121.886597, 11.965270) );
geometry.vertices.push( new THREE.Vector3(-52.910252, 120.852005, 12.852640) );
geometry.vertices.push( new THREE.Vector3(-52.754997, 122.113098, 14.423921) );
geometry.vertices.push( new THREE.Vector3(-51.615749, 123.239601, 13.438460) );
geometry.vertices.push( new THREE.Vector3(-49.853249, 124.901199, 12.198040) );
geometry.vertices.push( new THREE.Vector3(-47.879620, 126.638603, 10.823140) );
geometry.vertices.push( new THREE.Vector3(-45.802132, 128.046402, 9.711374) );
geometry.vertices.push( new THREE.Vector3(-42.184128, 126.911201, 6.644887) );
geometry.vertices.push( new THREE.Vector3(-43.373631, 129.872589, 8.749537) );
geometry.vertices.push( new THREE.Vector3(-43.123878, 125.422501, 2.952604) );
geometry.vertices.push( new THREE.Vector3(-44.744621, 125.471306, 0.210749) );
geometry.vertices.push( new THREE.Vector3(-47.021248, 124.395393, 2.248376) );
geometry.vertices.push( new THREE.Vector3(-49.292999, 123.422302, 4.409625) );
geometry.vertices.push( new THREE.Vector3(-40.810120, 128.695496, 5.488913) );
geometry.vertices.push( new THREE.Vector3(-41.660999, 131.408295, 7.599188) );
geometry.vertices.push( new THREE.Vector3(-41.371880, 126.829102, 1.798132) );
geometry.vertices.push( new THREE.Vector3(-43.233002, 126.889099, -0.870094) );
geometry.vertices.push( new THREE.Vector3(-45.232498, 128.414200, -2.233898) );
geometry.vertices.push( new THREE.Vector3(-46.657120, 126.990700, -1.363511) );
geometry.vertices.push( new THREE.Vector3(-48.754879, 125.502800, 0.326065) );
geometry.vertices.push( new THREE.Vector3(-50.900631, 123.939392, 2.792156) );
geometry.vertices.push( new THREE.Vector3(-52.985252, 122.582603, 5.208712) );
geometry.vertices.push( new THREE.Vector3(-54.962616, 121.397995, 7.439963) );
geometry.vertices.push( new THREE.Vector3(-56.302116, 120.405403, 8.694000) );
geometry.vertices.push( new THREE.Vector3(-54.120750, 128.656097, -7.191075) );
geometry.vertices.push( new THREE.Vector3(-54.892868, 128.068100, -6.452587) );
geometry.vertices.push( new THREE.Vector3(-54.232132, 128.711197, -7.262925) );
geometry.vertices.push( new THREE.Vector3(-54.513752, 128.029099, -6.166500) );
geometry.vertices.push( new THREE.Vector3(-54.245632, 128.169800, -6.126900) );
geometry.vertices.push( new THREE.Vector3(-54.921753, 127.371002, -4.757100) );
geometry.vertices.push( new THREE.Vector3(-55.627884, 127.250603, -4.897087) );
geometry.vertices.push( new THREE.Vector3(-56.271370, 126.238098, -2.506999) );
geometry.vertices.push( new THREE.Vector3(-54.199497, 128.248901, -6.124987) );
geometry.vertices.push( new THREE.Vector3(-54.307877, 127.722000, -4.734525) );
geometry.vertices.push( new THREE.Vector3(-55.203377, 126.562096, -2.682075) );
geometry.vertices.push( new THREE.Vector3(-56.318249, 125.417603, 0.178344) );
geometry.vertices.push( new THREE.Vector3(-55.032749, 125.782097, -0.090917) );
geometry.vertices.push( new THREE.Vector3(-55.859631, 125.124001, 2.454248) );
geometry.vertices.push( new THREE.Vector3(-54.463501, 125.538002, 2.071298) );
geometry.vertices.push( new THREE.Vector3(-55.456501, 125.090599, 3.905250) );
geometry.vertices.push( new THREE.Vector3(-54.392250, 128.405594, -6.074213) );
geometry.vertices.push( new THREE.Vector3(-54.295124, 128.405594, -6.090675) );
geometry.vertices.push( new THREE.Vector3(-54.175877, 128.717606, -7.171800) );
geometry.vertices.push( new THREE.Vector3(-54.209251, 127.845398, -4.701338) );
geometry.vertices.push( new THREE.Vector3(-54.176998, 127.248802, -2.901806) );
geometry.vertices.push( new THREE.Vector3(-53.802753, 126.753403, -0.691972) );
geometry.vertices.push( new THREE.Vector3(-53.325748, 126.619507, 0.709121) );
geometry.vertices.push( new THREE.Vector3(-54.357368, 128.045197, -4.635262) );
geometry.vertices.push( new THREE.Vector3(-54.535877, 128.025406, -4.633088) );
geometry.vertices.push( new THREE.Vector3(-54.205502, 127.744904, -2.807336) );
geometry.vertices.push( new THREE.Vector3(-54.001122, 127.462097, -2.902189) );
geometry.vertices.push( new THREE.Vector3(-53.584869, 127.069901, -0.800021) );
geometry.vertices.push( new THREE.Vector3(-53.841000, 127.452400, -0.680310) );
geometry.vertices.push( new THREE.Vector3(-53.138248, 126.987694, 0.404288) );
geometry.vertices.push( new THREE.Vector3(-53.446503, 127.431404, 0.504210) );
geometry.vertices.push( new THREE.Vector3(-53.792633, 127.304199, 0.861727) );
geometry.vertices.push( new THREE.Vector3(-54.193504, 127.342499, -0.508864) );
geometry.vertices.push( new THREE.Vector3(-54.490131, 127.680000, -2.756467) );
geometry.vertices.push( new THREE.Vector3(-54.731251, 126.301102, 3.117934) );
geometry.vertices.push( new THREE.Vector3(-54.950619, 126.300392, 2.246663) );
geometry.vertices.push( new THREE.Vector3(-55.438129, 126.442894, 0.089227) );
geometry.vertices.push( new THREE.Vector3(-55.518753, 127.042099, -2.542568) );
geometry.vertices.push( new THREE.Vector3(-55.156868, 127.697304, -4.652587) );
geometry.vertices.push( new THREE.Vector3(-54.665249, 128.270996, -6.108937) );
geometry.vertices.push( new THREE.Vector3(-56.318249, 125.417603, 0.178344) );
geometry.vertices.push( new THREE.Vector3(-56.271370, 126.238098, -2.506999) );
geometry.vertices.push( new THREE.Vector3(-55.627884, 127.250603, -4.897087) );
geometry.vertices.push( new THREE.Vector3(-54.892868, 128.068100, -6.452587) );
geometry.vertices.push( new THREE.Vector3(-54.232132, 128.711197, -7.262925) );
geometry.vertices.push( new THREE.Vector3(-53.515499, 127.575806, 1.826891) );
geometry.vertices.push( new THREE.Vector3(-53.183250, 127.502296, 1.196869) );
geometry.vertices.push( new THREE.Vector3(-53.563118, 127.364601, 1.595693) );
geometry.vertices.push( new THREE.Vector3(-53.813618, 127.272705, 2.212043) );
geometry.vertices.push( new THREE.Vector3(-54.805870, 126.264801, 3.494092) );
geometry.vertices.push( new THREE.Vector3(-55.394630, 125.012192, 4.572187) );
geometry.vertices.push( new THREE.Vector3(-55.456501, 125.090599, 3.905250) );
geometry.vertices.push( new THREE.Vector3(-55.859631, 125.124001, 2.454248) );
geometry.vertices.push( new THREE.Vector3(-54.140629, 125.505806, 2.998222) );
geometry.vertices.push( new THREE.Vector3(-52.988617, 126.610100, 1.472344) );
geometry.vertices.push( new THREE.Vector3(-52.805634, 127.003899, 1.113011) );
geometry.vertices.push( new THREE.Vector3(-55.394630, 125.012192, 4.572187) );
geometry.vertices.push( new THREE.Vector3(-53.963989, 125.393608, 3.261742) );
geometry.vertices.push( new THREE.Vector3(-53.076370, 126.259102, 2.111741) );
geometry.vertices.push( new THREE.Vector3(-52.688251, 126.637901, 1.608694) );
geometry.vertices.push( new THREE.Vector3(-52.518379, 127.097595, 1.235400) );
geometry.vertices.push( new THREE.Vector3(-53.058750, 127.741096, 1.374810) );
geometry.vertices.push( new THREE.Vector3(-48.987370, 131.914108, -10.973890) );
geometry.vertices.push( new THREE.Vector3(-49.434368, 131.229401, -9.772650) );
geometry.vertices.push( new THREE.Vector3(-49.816872, 130.965393, -9.725213) );
geometry.vertices.push( new THREE.Vector3(-50.563503, 130.021912, -8.013188) );
geometry.vertices.push( new THREE.Vector3(-49.738121, 130.614395, -8.035951) );
geometry.vertices.push( new THREE.Vector3(-50.853371, 129.287201, -6.018863) );
geometry.vertices.push( new THREE.Vector3(-49.599369, 130.252106, -6.250275) );
geometry.vertices.push( new THREE.Vector3(-50.627621, 128.890503, -3.988125) );
geometry.vertices.push( new THREE.Vector3(-49.174129, 130.041809, -4.451700) );
geometry.vertices.push( new THREE.Vector3(-50.155128, 128.675201, -2.192606) );
geometry.vertices.push( new THREE.Vector3(-48.714001, 129.997894, -3.209989) );
geometry.vertices.push( new THREE.Vector3(-49.885132, 128.577805, -1.427951) );
geometry.vertices.push( new THREE.Vector3(-48.332630, 129.896606, -2.423719) );
geometry.vertices.push( new THREE.Vector3(-48.028500, 130.414902, -2.617249) );
geometry.vertices.push( new THREE.Vector3(-47.877750, 129.847504, -2.304487) );
geometry.vertices.push( new THREE.Vector3(-48.549000, 129.266296, -1.867800) );
geometry.vertices.push( new THREE.Vector3(-49.609119, 128.347504, -1.178197) );
geometry.vertices.push( new THREE.Vector3(-51.311249, 127.976295, 0.078321) );
geometry.vertices.push( new THREE.Vector3(-51.342369, 128.156311, -0.713490) );
geometry.vertices.push( new THREE.Vector3(-51.742119, 128.184692, -1.934917) );
geometry.vertices.push( new THREE.Vector3(-47.656120, 130.478592, -2.485301) );
geometry.vertices.push( new THREE.Vector3(-48.401253, 131.344101, -2.027768) );
geometry.vertices.push( new THREE.Vector3(-48.389999, 130.947403, -2.404211) );
geometry.vertices.push( new THREE.Vector3(-48.865501, 131.045609, -1.803544) );
geometry.vertices.push( new THREE.Vector3(-48.895870, 130.768509, -2.146331) );
geometry.vertices.push( new THREE.Vector3(-50.515877, 129.487091, -1.090609) );
geometry.vertices.push( new THREE.Vector3(-50.607754, 129.669006, -0.764269) );
geometry.vertices.push( new THREE.Vector3(-51.311249, 127.976295, 0.078321) );
geometry.vertices.push( new THREE.Vector3(-51.342369, 128.156311, -0.713490) );
geometry.vertices.push( new THREE.Vector3(-48.415501, 130.440399, -3.354083) );
geometry.vertices.push( new THREE.Vector3(-48.683250, 130.915909, -3.177285) );
geometry.vertices.push( new THREE.Vector3(-49.126881, 130.708099, -2.900662) );
geometry.vertices.push( new THREE.Vector3(-50.710117, 129.424103, -1.900496) );
geometry.vertices.push( new THREE.Vector3(-51.742119, 128.184692, -1.934917) );
geometry.vertices.push( new THREE.Vector3(-51.116253, 129.457504, -3.714375) );
geometry.vertices.push( new THREE.Vector3(-52.093498, 128.364807, -3.760650) );
geometry.vertices.push( new THREE.Vector3(-48.860630, 130.439606, -4.513538) );
geometry.vertices.push( new THREE.Vector3(-49.116001, 130.813507, -4.354725) );
geometry.vertices.push( new THREE.Vector3(-49.578369, 130.600098, -4.194375) );
geometry.vertices.push( new THREE.Vector3(-49.947750, 130.654892, -6.071287) );
geometry.vertices.push( new THREE.Vector3(-51.225750, 129.707199, -5.816925) );
geometry.vertices.push( new THREE.Vector3(-50.021618, 130.865997, -7.885350) );
geometry.vertices.push( new THREE.Vector3(-50.857132, 130.289200, -7.867950) );
geometry.vertices.push( new THREE.Vector3(-49.545380, 130.853607, -6.187538) );
geometry.vertices.push( new THREE.Vector3(-49.725750, 131.007401, -7.969574) );
geometry.vertices.push( new THREE.Vector3(-49.463631, 131.485504, -9.754013) );
geometry.vertices.push( new THREE.Vector3(-49.634998, 131.408295, -9.663825) );
geometry.vertices.push( new THREE.Vector3(-50.021618, 131.149109, -9.616013) );
geometry.vertices.push( new THREE.Vector3(-49.066120, 132.000809, -10.935600) );
geometry.vertices.push( new THREE.Vector3(-49.335381, 131.365097, -9.821700) );
geometry.vertices.push( new THREE.Vector3(-49.544628, 130.836411, -8.068162) );
geometry.vertices.push( new THREE.Vector3(-49.322250, 130.584793, -6.300262) );
geometry.vertices.push( new THREE.Vector3(-52.093498, 128.364807, -3.760650) );
geometry.vertices.push( new THREE.Vector3(-51.965630, 128.880005, -5.898188) );
geometry.vertices.push( new THREE.Vector3(-51.239998, 129.880096, -8.266950) );
geometry.vertices.push( new THREE.Vector3(-50.175369, 130.990097, -10.050410) );
geometry.vertices.push( new THREE.Vector3(-49.084499, 131.962097, -11.073860) );
geometry.vertices.push( new THREE.Vector3(-51.965630, 128.880005, -5.898188) );
geometry.vertices.push( new THREE.Vector3(-51.239998, 129.880096, -8.266950) );
geometry.vertices.push( new THREE.Vector3(-50.175369, 130.990097, -10.050410) );
geometry.vertices.push( new THREE.Vector3(-49.084499, 131.962097, -11.073860) );
geometry.vertices.push( new THREE.Vector3(49.578369, 130.600098, -4.194375) );
geometry.vertices.push( new THREE.Vector3(50.710117, 129.424103, -1.900489) );
geometry.vertices.push( new THREE.Vector3(51.116253, 129.457504, -3.714367) );
geometry.vertices.push( new THREE.Vector3(49.947750, 130.654892, -6.071250) );
geometry.vertices.push( new THREE.Vector3(51.225750, 129.707199, -5.816925) );
geometry.vertices.push( new THREE.Vector3(50.021618, 130.865997, -7.885350) );
geometry.vertices.push( new THREE.Vector3(50.857132, 130.289200, -7.867912) );
geometry.vertices.push( new THREE.Vector3(49.634998, 131.408295, -9.663825) );
geometry.vertices.push( new THREE.Vector3(50.021618, 131.149109, -9.616013) );
geometry.vertices.push( new THREE.Vector3(49.463631, 131.485504, -9.754013) );
geometry.vertices.push( new THREE.Vector3(49.066120, 132.000809, -10.935600) );
geometry.vertices.push( new THREE.Vector3(50.175369, 130.990097, -10.050410) );
geometry.vertices.push( new THREE.Vector3(51.239998, 129.880096, -8.266950) );
geometry.vertices.push( new THREE.Vector3(51.965630, 128.880005, -5.898188) );
geometry.vertices.push( new THREE.Vector3(52.093498, 128.364807, -3.760650) );
geometry.vertices.push( new THREE.Vector3(51.742119, 128.184692, -1.934910) );
geometry.vertices.push( new THREE.Vector3(51.342369, 128.156311, -0.713482) );
geometry.vertices.push( new THREE.Vector3(49.084499, 131.962097, -11.073860) );
geometry.vertices.push( new THREE.Vector3(49.335381, 131.365097, -9.821700) );
geometry.vertices.push( new THREE.Vector3(49.725750, 131.007401, -7.969574) );
geometry.vertices.push( new THREE.Vector3(48.987370, 131.914108, -10.973890) );
geometry.vertices.push( new THREE.Vector3(50.175369, 130.990097, -10.050410) );
geometry.vertices.push( new THREE.Vector3(49.084499, 131.962097, -11.073860) );
geometry.vertices.push( new THREE.Vector3(49.544628, 130.836411, -8.068162) );
geometry.vertices.push( new THREE.Vector3(49.434368, 131.229401, -9.772649) );
geometry.vertices.push( new THREE.Vector3(49.816872, 130.965393, -9.725212) );
geometry.vertices.push( new THREE.Vector3(51.239998, 129.880096, -8.266950) );
geometry.vertices.push( new THREE.Vector3(50.563503, 130.021912, -8.013187) );
geometry.vertices.push( new THREE.Vector3(51.965630, 128.880005, -5.898188) );
geometry.vertices.push( new THREE.Vector3(50.853371, 129.287201, -6.018863) );
geometry.vertices.push( new THREE.Vector3(52.093498, 128.364807, -3.760650) );
geometry.vertices.push( new THREE.Vector3(48.860630, 130.439606, -4.513538) );
geometry.vertices.push( new THREE.Vector3(49.599369, 130.252106, -6.250275) );
geometry.vertices.push( new THREE.Vector3(49.174129, 130.041809, -4.451663) );
geometry.vertices.push( new THREE.Vector3(50.627621, 128.890503, -3.988125) );
geometry.vertices.push( new THREE.Vector3(49.738121, 130.614395, -8.035951) );
geometry.vertices.push( new THREE.Vector3(49.322250, 130.584793, -6.300262) );
geometry.vertices.push( new THREE.Vector3(48.415501, 130.440399, -3.354075) );
geometry.vertices.push( new THREE.Vector3(48.714001, 129.997894, -3.209981) );
geometry.vertices.push( new THREE.Vector3(48.389999, 130.947403, -2.404204) );
geometry.vertices.push( new THREE.Vector3(48.028500, 130.414902, -2.617241) );
geometry.vertices.push( new THREE.Vector3(48.332630, 129.896606, -2.423711) );
geometry.vertices.push( new THREE.Vector3(49.885132, 128.577805, -1.427940) );
geometry.vertices.push( new THREE.Vector3(50.155128, 128.675201, -2.192599) );
geometry.vertices.push( new THREE.Vector3(47.877750, 129.847504, -2.304480) );
geometry.vertices.push( new THREE.Vector3(47.656120, 130.478592, -2.485294) );
geometry.vertices.push( new THREE.Vector3(48.401253, 131.344101, -2.027760) );
geometry.vertices.push( new THREE.Vector3(48.865501, 131.045609, -1.803536) );
geometry.vertices.push( new THREE.Vector3(48.895870, 130.768509, -2.146324) );
geometry.vertices.push( new THREE.Vector3(48.683250, 130.915909, -3.177277) );
geometry.vertices.push( new THREE.Vector3(50.515877, 129.487091, -1.090601) );
geometry.vertices.push( new THREE.Vector3(50.607754, 129.669006, -0.764261) );
geometry.vertices.push( new THREE.Vector3(49.126881, 130.708099, -2.900655) );
geometry.vertices.push( new THREE.Vector3(49.116001, 130.813507, -4.354725) );
geometry.vertices.push( new THREE.Vector3(49.545750, 130.853607, -6.187538) );
geometry.vertices.push( new THREE.Vector3(51.311249, 127.976295, 0.078329) );
geometry.vertices.push( new THREE.Vector3(56.271370, 126.238098, -2.506995) );
geometry.vertices.push( new THREE.Vector3(54.921753, 127.371002, -4.757100) );
geometry.vertices.push( new THREE.Vector3(55.627884, 127.250603, -4.897050) );
geometry.vertices.push( new THREE.Vector3(54.513752, 128.029099, -6.166500) );
geometry.vertices.push( new THREE.Vector3(54.245632, 128.169800, -6.126900) );
geometry.vertices.push( new THREE.Vector3(54.120750, 128.656097, -7.191075) );
geometry.vertices.push( new THREE.Vector3(54.892868, 128.068100, -6.452587) );
geometry.vertices.push( new THREE.Vector3(54.232132, 128.711197, -7.262925) );
geometry.vertices.push( new THREE.Vector3(54.307877, 127.722000, -4.734525) );
geometry.vertices.push( new THREE.Vector3(54.199497, 128.248901, -6.124987) );
geometry.vertices.push( new THREE.Vector3(55.203377, 126.562096, -2.682071) );
geometry.vertices.push( new THREE.Vector3(56.318249, 125.417603, 0.178349) );
geometry.vertices.push( new THREE.Vector3(55.032749, 125.782097, -0.090912) );
geometry.vertices.push( new THREE.Vector3(55.859631, 125.124001, 2.454255) );
geometry.vertices.push( new THREE.Vector3(54.463882, 125.538002, 2.071305) );
geometry.vertices.push( new THREE.Vector3(55.456501, 125.090599, 3.905250) );
geometry.vertices.push( new THREE.Vector3(54.140629, 125.505806, 2.998226) );
geometry.vertices.push( new THREE.Vector3(55.394630, 125.012192, 4.572187) );
geometry.vertices.push( new THREE.Vector3(53.325748, 126.619507, 0.709125) );
geometry.vertices.push( new THREE.Vector3(52.988617, 126.610100, 1.472351) );
geometry.vertices.push( new THREE.Vector3(53.802753, 126.753403, -0.691969) );
geometry.vertices.push( new THREE.Vector3(54.176998, 127.248802, -2.901803) );
geometry.vertices.push( new THREE.Vector3(54.209251, 127.845398, -4.701337) );
geometry.vertices.push( new THREE.Vector3(54.295498, 128.405594, -6.090675) );
geometry.vertices.push( new THREE.Vector3(53.584869, 127.069901, -0.800017) );
geometry.vertices.push( new THREE.Vector3(54.001122, 127.462097, -2.902185) );
geometry.vertices.push( new THREE.Vector3(54.205502, 127.744904, -2.807332) );
geometry.vertices.push( new THREE.Vector3(54.357750, 128.045197, -4.635262) );
geometry.vertices.push( new THREE.Vector3(54.490131, 127.680000, -2.756464) );
geometry.vertices.push( new THREE.Vector3(54.535877, 128.024994, -4.633050) );
geometry.vertices.push( new THREE.Vector3(54.392250, 128.405594, -6.074212) );
geometry.vertices.push( new THREE.Vector3(53.841000, 127.452400, -0.680303) );
geometry.vertices.push( new THREE.Vector3(53.138248, 126.987694, 0.404295) );
geometry.vertices.push( new THREE.Vector3(53.446503, 127.431404, 0.504214) );
geometry.vertices.push( new THREE.Vector3(53.792633, 127.304199, 0.861731) );
geometry.vertices.push( new THREE.Vector3(54.193504, 127.342499, -0.508860) );
geometry.vertices.push( new THREE.Vector3(54.950619, 126.300392, 2.246666) );
geometry.vertices.push( new THREE.Vector3(54.731251, 126.301102, 3.117941) );
geometry.vertices.push( new THREE.Vector3(53.563118, 127.364601, 1.595696) );
geometry.vertices.push( new THREE.Vector3(53.183250, 127.502296, 1.196873) );
geometry.vertices.push( new THREE.Vector3(52.805634, 127.003899, 1.113019) );
geometry.vertices.push( new THREE.Vector3(53.964382, 125.393608, 3.261746) );
geometry.vertices.push( new THREE.Vector3(53.076370, 126.259102, 2.111745) );
geometry.vertices.push( new THREE.Vector3(52.688251, 126.637901, 1.608698) );
geometry.vertices.push( new THREE.Vector3(52.518379, 127.097595, 1.235404) );
geometry.vertices.push( new THREE.Vector3(53.058750, 127.741096, 1.374818) );
geometry.vertices.push( new THREE.Vector3(53.515499, 127.575806, 1.826899) );
geometry.vertices.push( new THREE.Vector3(53.813618, 127.272705, 2.212050) );
geometry.vertices.push( new THREE.Vector3(54.805870, 126.264801, 3.494100) );
geometry.vertices.push( new THREE.Vector3(55.394630, 125.012192, 4.572187) );
geometry.vertices.push( new THREE.Vector3(55.456501, 125.090599, 3.905250) );
geometry.vertices.push( new THREE.Vector3(55.859631, 125.124001, 2.454255) );
geometry.vertices.push( new THREE.Vector3(55.438129, 126.442894, 0.089232) );
geometry.vertices.push( new THREE.Vector3(56.318249, 125.417603, 0.178349) );
geometry.vertices.push( new THREE.Vector3(55.518753, 127.042099, -2.542564) );
geometry.vertices.push( new THREE.Vector3(54.175877, 128.717606, -7.171800) );
geometry.vertices.push( new THREE.Vector3(54.665249, 128.270996, -6.108937) );
geometry.vertices.push( new THREE.Vector3(55.156868, 127.697304, -4.652587) );
geometry.vertices.push( new THREE.Vector3(56.271370, 126.238098, -2.506995) );
geometry.vertices.push( new THREE.Vector3(55.627884, 127.250603, -4.897050) );
geometry.vertices.push( new THREE.Vector3(54.892868, 128.068100, -6.452587) );
geometry.vertices.push( new THREE.Vector3(54.232132, 128.711197, -7.262925) );
geometry.vertices.push( new THREE.Vector3(56.459248, 122.229698, 7.297987) );
geometry.vertices.push( new THREE.Vector3(57.724880, 121.420898, 7.981575) );
geometry.vertices.push( new THREE.Vector3(57.445133, 121.278404, 8.249400) );
geometry.vertices.push( new THREE.Vector3(59.260868, 121.075500, 8.847861) );
geometry.vertices.push( new THREE.Vector3(58.173752, 121.502304, 6.917062) );
geometry.vertices.push( new THREE.Vector3(59.599133, 121.177101, 7.241663) );
geometry.vertices.push( new THREE.Vector3(58.702499, 121.783104, 4.636950) );
geometry.vertices.push( new THREE.Vector3(59.947502, 121.478996, 4.767263) );
geometry.vertices.push( new THREE.Vector3(58.894497, 122.306297, 2.178968) );
geometry.vertices.push( new THREE.Vector3(59.898750, 122.048294, 2.224579) );
geometry.vertices.push( new THREE.Vector3(58.635746, 123.010101, 0.002984) );
geometry.vertices.push( new THREE.Vector3(59.342999, 122.866501, -0.087853) );
geometry.vertices.push( new THREE.Vector3(58.174873, 123.690704, -1.565156) );
geometry.vertices.push( new THREE.Vector3(58.592617, 123.672699, -1.790434) );
geometry.vertices.push( new THREE.Vector3(57.870750, 123.871506, -1.592216) );
geometry.vertices.push( new THREE.Vector3(57.778503, 124.232605, -2.615164) );
geometry.vertices.push( new THREE.Vector3(57.901501, 124.282097, -2.691289) );
geometry.vertices.push( new THREE.Vector3(56.563126, 122.477303, 7.080937) );
geometry.vertices.push( new THREE.Vector3(56.867249, 122.503105, 6.421837) );
geometry.vertices.push( new THREE.Vector3(57.496117, 122.635101, 4.309425) );
geometry.vertices.push( new THREE.Vector3(57.929619, 122.924995, 1.957710) );
geometry.vertices.push( new THREE.Vector3(57.981747, 123.415504, -0.120937) );
geometry.vertices.push( new THREE.Vector3(57.817501, 123.959602, -1.602637) );
geometry.vertices.push( new THREE.Vector3(57.866253, 123.558701, -0.131934) );
geometry.vertices.push( new THREE.Vector3(57.751881, 123.139908, 1.924526) );
geometry.vertices.push( new THREE.Vector3(57.273750, 122.937408, 4.254638) );
geometry.vertices.push( new THREE.Vector3(56.630619, 122.864601, 6.328125) );
geometry.vertices.push( new THREE.Vector3(56.380497, 122.859703, 6.885300) );
geometry.vertices.push( new THREE.Vector3(57.942379, 123.442101, 1.998825) );
geometry.vertices.push( new THREE.Vector3(57.514881, 123.330399, 4.337550) );
geometry.vertices.push( new THREE.Vector3(56.916000, 123.328491, 6.411525) );
geometry.vertices.push( new THREE.Vector3(56.738251, 123.352097, 6.951375) );
geometry.vertices.push( new THREE.Vector3(55.926750, 122.763397, 6.702188) );
geometry.vertices.push( new THREE.Vector3(57.309002, 123.221298, 6.559163) );
geometry.vertices.push( new THREE.Vector3(57.128632, 123.248993, 7.209825) );
geometry.vertices.push( new THREE.Vector3(56.791504, 123.450806, 6.976725) );
geometry.vertices.push( new THREE.Vector3(56.584503, 123.643898, 6.722737) );
geometry.vertices.push( new THREE.Vector3(57.176632, 123.323593, 7.329638) );
geometry.vertices.push( new THREE.Vector3(58.390129, 122.323502, 8.244225) );
geometry.vertices.push( new THREE.Vector3(58.672119, 122.315598, 7.101113) );
geometry.vertices.push( new THREE.Vector3(57.866634, 123.242203, 4.438725) );
geometry.vertices.push( new THREE.Vector3(59.108631, 122.456299, 4.782450) );
geometry.vertices.push( new THREE.Vector3(58.220249, 123.386597, 2.072258) );
geometry.vertices.push( new THREE.Vector3(59.200882, 122.806503, 2.294955) );
geometry.vertices.push( new THREE.Vector3(58.192123, 123.740601, -0.034307) );
geometry.vertices.push( new THREE.Vector3(58.854752, 123.356995, 0.090283) );
geometry.vertices.push( new THREE.Vector3(58.024502, 124.099098, -1.524517) );
geometry.vertices.push( new THREE.Vector3(58.331253, 123.926994, -1.498320) );
geometry.vertices.push( new THREE.Vector3(57.860249, 124.353004, -2.579460) );
geometry.vertices.push( new THREE.Vector3(57.918381, 124.109604, -1.559325) );
geometry.vertices.push( new THREE.Vector3(58.004250, 123.772095, -0.075997) );
geometry.vertices.push( new THREE.Vector3(59.342999, 122.866501, -0.087853) );
geometry.vertices.push( new THREE.Vector3(58.592617, 123.672699, -1.790434) );
geometry.vertices.push( new THREE.Vector3(57.901501, 124.282097, -2.691289) );
geometry.vertices.push( new THREE.Vector3(45.348000, 137.301804, 8.529112) );
geometry.vertices.push( new THREE.Vector3(46.061249, 134.517807, 10.133740) );
geometry.vertices.push( new THREE.Vector3(47.233501, 135.732697, 9.772312) );
geometry.vertices.push( new THREE.Vector3(44.357632, 135.947296, 8.830576) );
geometry.vertices.push( new THREE.Vector3(50.912251, 134.867996, 1.980446) );
geometry.vertices.push( new THREE.Vector3(49.298630, 137.626511, 1.694655) );
geometry.vertices.push( new THREE.Vector3(51.071251, 135.853500, 3.121466) );
geometry.vertices.push( new THREE.Vector3(48.986252, 136.459503, 0.592155) );
geometry.vertices.push( new THREE.Vector3(46.363499, 138.398605, 7.815075) );
geometry.vertices.push( new THREE.Vector3(49.367249, 136.987106, 7.867725) );
geometry.vertices.push( new THREE.Vector3(47.447250, 138.937500, 6.446438) );
geometry.vertices.push( new THREE.Vector3(48.185249, 136.506409, 9.218250) );
geometry.vertices.push( new THREE.Vector3(48.929630, 138.524597, 3.472939) );
geometry.vertices.push( new THREE.Vector3(50.200878, 137.102203, 6.544350) );
geometry.vertices.push( new THREE.Vector3(50.811367, 136.716400, 4.870462) );
geometry.vertices.push( new THREE.Vector3(48.267002, 138.977203, 5.133675) );
geometry.vertices.push( new THREE.Vector3(55.926750, 122.763397, 6.702188) );
geometry.vertices.push( new THREE.Vector3(55.394630, 125.012192, 4.572187) );
geometry.vertices.push( new THREE.Vector3(56.584503, 123.643898, 6.722737) );
geometry.vertices.push( new THREE.Vector3(54.684383, 124.132500, 4.698713) );
geometry.vertices.push( new THREE.Vector3(53.964382, 125.393608, 3.261746) );
geometry.vertices.push( new THREE.Vector3(53.076370, 126.259102, 2.111745) );
geometry.vertices.push( new THREE.Vector3(56.302116, 120.405403, 8.694000) );
geometry.vertices.push( new THREE.Vector3(56.459248, 122.229698, 7.297987) );
geometry.vertices.push( new THREE.Vector3(57.445133, 121.278404, 8.249400) );
geometry.vertices.push( new THREE.Vector3(54.962616, 121.397995, 7.439963) );
geometry.vertices.push( new THREE.Vector3(52.985252, 122.582603, 5.208712) );
geometry.vertices.push( new THREE.Vector3(52.619617, 125.654602, 2.143200) );
geometry.vertices.push( new THREE.Vector3(52.688251, 126.637901, 1.608698) );
geometry.vertices.push( new THREE.Vector3(52.518379, 127.097595, 1.235404) );
geometry.vertices.push( new THREE.Vector3(51.311249, 127.976295, 0.078329) );
geometry.vertices.push( new THREE.Vector3(48.549000, 129.266296, -1.867789) );
geometry.vertices.push( new THREE.Vector3(46.657120, 126.990700, -1.363500) );
geometry.vertices.push( new THREE.Vector3(47.877750, 129.847504, -2.304480) );
geometry.vertices.push( new THREE.Vector3(49.609119, 128.347504, -1.178190) );
geometry.vertices.push( new THREE.Vector3(50.497871, 127.391197, -0.226984) );
geometry.vertices.push( new THREE.Vector3(50.900631, 123.939392, 2.792164) );
geometry.vertices.push( new THREE.Vector3(48.754879, 125.502800, 0.326073) );
geometry.vertices.push( new THREE.Vector3(46.828869, 130.752396, -2.628604) );
geometry.vertices.push( new THREE.Vector3(45.232498, 128.414200, -2.233890) );
geometry.vertices.push( new THREE.Vector3(52.086376, 129.663010, 0.467970) );
geometry.vertices.push( new THREE.Vector3(50.607754, 129.669006, -0.764261) );
geometry.vertices.push( new THREE.Vector3(50.079380, 131.816605, -1.074165) );
geometry.vertices.push( new THREE.Vector3(48.865501, 131.045609, -1.803536) );
geometry.vertices.push( new THREE.Vector3(47.848499, 133.231491, -1.891672) );
geometry.vertices.push( new THREE.Vector3(48.401253, 131.344101, -2.027760) );
geometry.vertices.push( new THREE.Vector3(47.656120, 130.478592, -2.485294) );
geometry.vertices.push( new THREE.Vector3(52.704002, 133.349304, 4.600387) );
geometry.vertices.push( new THREE.Vector3(52.660133, 131.728500, 2.166244) );
geometry.vertices.push( new THREE.Vector3(50.586380, 133.751602, 0.936210) );
geometry.vertices.push( new THREE.Vector3(53.058750, 127.741096, 1.374818) );
geometry.vertices.push( new THREE.Vector3(53.515499, 127.575806, 1.826899) );
geometry.vertices.push( new THREE.Vector3(54.628128, 129.256897, 4.152525) );
geometry.vertices.push( new THREE.Vector3(54.436867, 130.767410, 6.404062) );
geometry.vertices.push( new THREE.Vector3(52.319252, 134.380905, 7.142475) );
geometry.vertices.push( new THREE.Vector3(53.943001, 131.824097, 8.710088) );
geometry.vertices.push( new THREE.Vector3(56.010376, 128.609299, 8.304638) );
geometry.vertices.push( new THREE.Vector3(55.159496, 129.095993, 10.173110) );
geometry.vertices.push( new THREE.Vector3(54.805870, 126.264801, 3.494100) );
geometry.vertices.push( new THREE.Vector3(53.813618, 127.272705, 2.212050) );
geometry.vertices.push( new THREE.Vector3(54.026997, 129.444000, 12.245360) );
geometry.vertices.push( new THREE.Vector3(56.469368, 126.958893, 11.661530) );
geometry.vertices.push( new THREE.Vector3(52.507877, 131.933609, 11.099620) );
geometry.vertices.push( new THREE.Vector3(50.704128, 134.312195, 9.896625) );
geometry.vertices.push( new THREE.Vector3(48.741749, 132.785202, 11.146091) );
geometry.vertices.push( new THREE.Vector3(50.633251, 130.845001, 12.393860) );
geometry.vertices.push( new THREE.Vector3(52.285500, 128.709000, 13.489950) );
geometry.vertices.push( new THREE.Vector3(55.256630, 127.216103, 13.449671) );
geometry.vertices.push( new THREE.Vector3(53.649376, 126.596603, 14.718260) );
geometry.vertices.push( new THREE.Vector3(56.388378, 125.376404, 14.690029) );
geometry.vertices.push( new THREE.Vector3(50.734131, 126.931091, 13.461940) );
geometry.vertices.push( new THREE.Vector3(52.460247, 124.881401, 14.253449) );
geometry.vertices.push( new THREE.Vector3(48.874500, 128.997803, 12.438231) );
geometry.vertices.push( new THREE.Vector3(47.034000, 130.996887, 11.434240) );
geometry.vertices.push( new THREE.Vector3(44.674129, 132.721100, 10.121779) );
geometry.vertices.push( new THREE.Vector3(43.286247, 134.103806, 8.633588) );
geometry.vertices.push( new THREE.Vector3(45.802132, 128.046402, 9.711375) );
geometry.vertices.push( new THREE.Vector3(47.879620, 126.638603, 10.823140) );
geometry.vertices.push( new THREE.Vector3(43.373631, 129.872589, 8.749576) );
geometry.vertices.push( new THREE.Vector3(41.660999, 131.408295, 7.599188) );
geometry.vertices.push( new THREE.Vector3(54.771000, 121.554802, 17.808640) );
geometry.vertices.push( new THREE.Vector3(53.696251, 120.904503, 15.746699) );
geometry.vertices.push( new THREE.Vector3(53.707497, 120.237007, 17.067110) );
geometry.vertices.push( new THREE.Vector3(54.388870, 122.269905, 16.487101) );
geometry.vertices.push( new THREE.Vector3(52.754997, 122.113098, 14.423921) );
geometry.vertices.push( new THREE.Vector3(53.592747, 123.581604, 15.085239) );
geometry.vertices.push( new THREE.Vector3(51.615749, 123.239601, 13.438500) );
geometry.vertices.push( new THREE.Vector3(49.853249, 124.901199, 12.198040) );
geometry.vertices.push( new THREE.Vector3(54.907131, 120.788597, 19.005791) );
geometry.vertices.push( new THREE.Vector3(53.781746, 119.457695, 18.412199) );
geometry.vertices.push( new THREE.Vector3(57.127880, 121.087097, 18.833179) );
geometry.vertices.push( new THREE.Vector3(56.334751, 122.234596, 17.647051) );
geometry.vertices.push( new THREE.Vector3(55.698753, 123.280502, 16.547810) );
geometry.vertices.push( new THREE.Vector3(54.807003, 124.855492, 15.648339) );
geometry.vertices.push( new THREE.Vector3(57.270004, 123.599991, 15.808090) );
geometry.vertices.push( new THREE.Vector3(58.291500, 122.594200, 16.774540) );
geometry.vertices.push( new THREE.Vector3(59.270622, 121.527802, 17.635950) );
geometry.vertices.push( new THREE.Vector3(60.403503, 120.341301, 18.585711) );
geometry.vertices.push( new THREE.Vector3(59.065880, 120.132004, 19.451550) );
geometry.vertices.push( new THREE.Vector3(61.730999, 118.880203, 19.670401) );
geometry.vertices.push( new THREE.Vector3(61.585499, 119.989502, 17.231100) );
geometry.vertices.push( new THREE.Vector3(60.481869, 121.165504, 16.255989) );
geometry.vertices.push( new THREE.Vector3(59.387619, 122.305092, 15.311059) );
geometry.vertices.push( new THREE.Vector3(58.538254, 123.414398, 14.396770) );
geometry.vertices.push( new THREE.Vector3(57.522369, 125.110901, 13.029830) );
geometry.vertices.push( new THREE.Vector3(57.292122, 126.379501, 9.984488) );
geometry.vertices.push( new THREE.Vector3(58.419003, 124.666908, 11.513021) );
geometry.vertices.push( new THREE.Vector3(59.477623, 123.096001, 12.830660) );
geometry.vertices.push( new THREE.Vector3(60.162003, 121.796593, 13.623039) );
geometry.vertices.push( new THREE.Vector3(61.319248, 120.721901, 14.674351) );
geometry.vertices.push( new THREE.Vector3(55.488373, 125.294304, 4.781325) );
geometry.vertices.push( new THREE.Vector3(56.196369, 127.081505, 6.189563) );
geometry.vertices.push( new THREE.Vector3(57.558750, 125.203499, 8.331788) );
geometry.vertices.push( new THREE.Vector3(58.948868, 123.796906, 9.913800) );
geometry.vertices.push( new THREE.Vector3(59.993618, 122.426605, 11.112790) );
geometry.vertices.push( new THREE.Vector3(58.465870, 122.765991, 8.664450) );
geometry.vertices.push( new THREE.Vector3(57.272999, 123.444000, 7.427625) );
geometry.vertices.push( new THREE.Vector3(56.874371, 123.670898, 7.014263) );
geometry.vertices.push( new THREE.Vector3(59.346748, 120.913101, 9.383326) );
geometry.vertices.push( new THREE.Vector3(59.968502, 121.480095, 9.744262) );
geometry.vertices.push( new THREE.Vector3(58.459877, 122.474602, 8.583675) );
geometry.vertices.push( new THREE.Vector3(57.176632, 123.323593, 7.329638) );
geometry.vertices.push( new THREE.Vector3(56.791504, 123.450806, 6.976725) );
geometry.vertices.push( new THREE.Vector3(58.552868, 120.478104, 9.261787) );
geometry.vertices.push( new THREE.Vector3(59.602501, 119.473099, 9.640650) );
geometry.vertices.push( new THREE.Vector3(62.195248, 114.473198, 10.787101) );
geometry.vertices.push( new THREE.Vector3(62.347500, 116.760399, 10.590300) );
geometry.vertices.push( new THREE.Vector3(63.499878, 115.440002, 11.310520) );
geometry.vertices.push( new THREE.Vector3(60.997498, 115.616592, 10.384160) );
geometry.vertices.push( new THREE.Vector3(61.039883, 118.098000, 9.993188) );
geometry.vertices.push( new THREE.Vector3(59.699619, 116.852203, 9.829763) );
geometry.vertices.push( new THREE.Vector3(58.257751, 118.234894, 9.595425) );
geometry.vertices.push( new THREE.Vector3(57.380630, 119.625000, 9.562426) );
geometry.vertices.push( new THREE.Vector3(64.401001, 114.341202, 11.694040) );
geometry.vertices.push( new THREE.Vector3(64.409248, 116.437103, 13.031059) );
geometry.vertices.push( new THREE.Vector3(65.677498, 114.694092, 12.998361) );
geometry.vertices.push( new THREE.Vector3(63.156002, 117.872597, 12.002400) );
geometry.vertices.push( new THREE.Vector3(61.929749, 119.226395, 11.272280) );
geometry.vertices.push( new THREE.Vector3(60.595882, 120.468399, 10.594131) );
geometry.vertices.push( new THREE.Vector3(63.021748, 118.732903, 13.924610) );
geometry.vertices.push( new THREE.Vector3(61.833752, 120.064102, 13.001440) );
geometry.vertices.push( new THREE.Vector3(60.620998, 121.310997, 12.127570) );
geometry.vertices.push( new THREE.Vector3(62.388748, 119.417595, 15.636259) );
geometry.vertices.push( new THREE.Vector3(64.279503, 117.384003, 15.064199) );
geometry.vertices.push( new THREE.Vector3(63.589500, 118.023392, 16.816690) );
geometry.vertices.push( new THREE.Vector3(65.097000, 116.247704, 16.494560) );
geometry.vertices.push( new THREE.Vector3(64.734749, 116.749893, 18.070129) );
geometry.vertices.push( new THREE.Vector3(65.637001, 115.497398, 18.998140) );
geometry.vertices.push( new THREE.Vector3(65.644119, 115.182808, 17.856150) );
geometry.vertices.push( new THREE.Vector3(66.057747, 114.175903, 19.549761) );
geometry.vertices.push( new THREE.Vector3(65.709381, 115.190193, 16.939840) );
geometry.vertices.push( new THREE.Vector3(62.818497, 118.497002, 18.346010) );
geometry.vertices.push( new THREE.Vector3(63.968998, 116.910400, 19.418850) );
geometry.vertices.push( new THREE.Vector3(64.880249, 115.486893, 19.946661) );
geometry.vertices.push( new THREE.Vector3(65.524498, 114.019096, 20.447701) );
geometry.vertices.push( new THREE.Vector3(64.627121, 113.468300, 20.843769) );
geometry.vertices.push( new THREE.Vector3(65.264618, 110.737503, 21.896441) );
geometry.vertices.push( new THREE.Vector3(63.700878, 113.046799, 20.683880) );
geometry.vertices.push( new THREE.Vector3(64.207878, 113.864304, 20.667339) );
geometry.vertices.push( new THREE.Vector3(64.444122, 115.393898, 20.315630) );
geometry.vertices.push( new THREE.Vector3(64.264122, 115.589996, 21.001909) );
geometry.vertices.push( new THREE.Vector3(63.729752, 116.304398, 21.996340) );
geometry.vertices.push( new THREE.Vector3(63.995617, 114.897003, 22.621460) );
geometry.vertices.push( new THREE.Vector3(64.446747, 114.445496, 21.722589) );
geometry.vertices.push( new THREE.Vector3(65.117622, 112.522491, 23.857351) );
geometry.vertices.push( new THREE.Vector3(62.345619, 116.068100, 22.491451) );
geometry.vertices.push( new THREE.Vector3(62.984253, 114.814499, 23.131310) );
geometry.vertices.push( new THREE.Vector3(64.119751, 112.438499, 24.399340) );
geometry.vertices.push( new THREE.Vector3(65.556374, 111.451492, 23.215160) );
geometry.vertices.push( new THREE.Vector3(65.460747, 110.498199, 24.469690) );
geometry.vertices.push( new THREE.Vector3(65.773499, 110.278496, 23.706261) );
geometry.vertices.push( new THREE.Vector3(65.266876, 111.746201, 24.134809) );
geometry.vertices.push( new THREE.Vector3(64.332375, 111.706902, 24.661129) );
geometry.vertices.push( new THREE.Vector3(63.241119, 111.774803, 24.338099) );
geometry.vertices.push( new THREE.Vector3(61.830746, 114.382507, 22.850510) );
geometry.vertices.push( new THREE.Vector3(61.060501, 115.457199, 22.152750) );
geometry.vertices.push( new THREE.Vector3(65.365501, 112.162102, 22.873159) );
geometry.vertices.push( new THREE.Vector3(65.114250, 111.427902, 22.346479) );
geometry.vertices.push( new THREE.Vector3(65.480247, 109.901596, 23.037901) );
geometry.vertices.push( new THREE.Vector3(65.571365, 109.385300, 23.264700) );
geometry.vertices.push( new THREE.Vector3(65.787369, 109.585098, 23.924360) );
geometry.vertices.push( new THREE.Vector3(65.491501, 106.475601, 24.326250) );
geometry.vertices.push( new THREE.Vector3(65.459999, 106.655594, 24.670691) );
geometry.vertices.push( new THREE.Vector3(65.098122, 109.303108, 22.829550) );
geometry.vertices.push( new THREE.Vector3(65.241745, 106.306503, 24.119061) );
geometry.vertices.push( new THREE.Vector3(64.978867, 106.141899, 24.798340) );
geometry.vertices.push( new THREE.Vector3(65.252251, 106.738495, 25.032108) );
geometry.vertices.push( new THREE.Vector3(65.468254, 109.786102, 24.648680) );
geometry.vertices.push( new THREE.Vector3(64.911751, 106.681503, 25.297091) );
geometry.vertices.push( new THREE.Vector3(64.516129, 106.485405, 25.250212) );
geometry.vertices.push( new THREE.Vector3(64.732498, 109.768906, 25.103849) );
geometry.vertices.push( new THREE.Vector3(64.684883, 110.476509, 24.938961) );
geometry.vertices.push( new THREE.Vector3(63.770252, 109.965004, 24.857029) );
geometry.vertices.push( new THREE.Vector3(48.363380, 135.018799, -0.370106) );
geometry.vertices.push( new THREE.Vector3(67.039871, 109.412300, 13.357730) );
geometry.vertices.push( new THREE.Vector3(67.192497, 110.891197, 13.760360) );
geometry.vertices.push( new THREE.Vector3(67.425751, 109.487602, 13.940330) );
geometry.vertices.push( new THREE.Vector3(67.224373, 108.760094, 13.457920) );
geometry.vertices.push( new THREE.Vector3(67.517250, 108.817505, 13.985359) );
geometry.vertices.push( new THREE.Vector3(67.272003, 106.466202, 14.147510) );
geometry.vertices.push( new THREE.Vector3(67.086754, 106.443405, 13.773450) );
geometry.vertices.push( new THREE.Vector3(66.596626, 106.012108, 14.295040) );
geometry.vertices.push( new THREE.Vector3(66.696754, 106.393501, 13.619889) );
geometry.vertices.push( new THREE.Vector3(66.615372, 108.839203, 13.192760) );
geometry.vertices.push( new THREE.Vector3(66.659630, 110.669601, 13.084430) );
geometry.vertices.push( new THREE.Vector3(66.019501, 110.527893, 12.867559) );
geometry.vertices.push( new THREE.Vector3(66.086250, 113.516296, 13.096841) );
geometry.vertices.push( new THREE.Vector3(65.733368, 112.294098, 12.465790) );
geometry.vertices.push( new THREE.Vector3(65.110115, 113.306602, 12.061500) );
geometry.vertices.push( new THREE.Vector3(64.909119, 112.184998, 12.196420) );
geometry.vertices.push( new THREE.Vector3(66.476250, 111.143600, 12.956020) );
geometry.vertices.push( new THREE.Vector3(66.962616, 111.427902, 13.678010) );
geometry.vertices.push( new THREE.Vector3(66.891373, 110.891197, 14.477770) );
geometry.vertices.push( new THREE.Vector3(67.263000, 109.501099, 14.569571) );
geometry.vertices.push( new THREE.Vector3(64.055626, 113.077103, 11.727901) );
geometry.vertices.push( new THREE.Vector3(66.486755, 112.434700, 13.380560) );
geometry.vertices.push( new THREE.Vector3(66.254631, 112.376198, 14.350881) );
geometry.vertices.push( new THREE.Vector3(66.688133, 111.407600, 14.453959) );
geometry.vertices.push( new THREE.Vector3(66.528748, 108.800995, 15.036000) );
geometry.vertices.push( new THREE.Vector3(66.001877, 110.605499, 14.870660) );
geometry.vertices.push( new THREE.Vector3(65.356499, 111.969803, 14.688830) );
geometry.vertices.push( new THREE.Vector3(65.260498, 112.559998, 14.724191) );
geometry.vertices.push( new THREE.Vector3(66.040123, 113.252296, 14.335690) );
geometry.vertices.push( new THREE.Vector3(65.792999, 113.290497, 14.681810) );
geometry.vertices.push( new THREE.Vector3(65.844749, 114.122200, 14.505490) );
geometry.vertices.push( new THREE.Vector3(63.153370, 113.681602, 11.318180) );
geometry.vertices.push( new THREE.Vector3(65.331001, 115.539398, 14.789470) );
geometry.vertices.push( new THREE.Vector3(65.989883, 114.829895, 15.527740) );
geometry.vertices.push( new THREE.Vector3(66.402748, 114.201797, 16.025850) );
geometry.vertices.push( new THREE.Vector3(66.795746, 111.608597, 21.444340) );
geometry.vertices.push( new THREE.Vector3(67.110748, 111.414398, 20.486509) );
geometry.vertices.push( new THREE.Vector3(65.815880, 113.713097, 18.598049) );
geometry.vertices.push( new THREE.Vector3(65.562370, 114.449295, 17.516920) );
geometry.vertices.push( new THREE.Vector3(66.110245, 114.493095, 17.047911) );
geometry.vertices.push( new THREE.Vector3(66.378746, 113.530502, 17.276920) );
geometry.vertices.push( new THREE.Vector3(66.624001, 113.292397, 16.358290) );
geometry.vertices.push( new THREE.Vector3(66.209251, 112.708900, 15.619349) );
geometry.vertices.push( new THREE.Vector3(65.872879, 113.402199, 15.143471) );
geometry.vertices.push( new THREE.Vector3(67.909874, 110.862801, 17.167311) );
geometry.vertices.push( new THREE.Vector3(67.692749, 111.005997, 18.099529) );
geometry.vertices.push( new THREE.Vector3(67.583252, 110.519302, 16.572300) );
geometry.vertices.push( new THREE.Vector3(67.113754, 109.974396, 16.365191) );
geometry.vertices.push( new THREE.Vector3(65.608887, 112.202301, 15.368740) );
geometry.vertices.push( new THREE.Vector3(64.929375, 112.480499, 14.870100) );
geometry.vertices.push( new THREE.Vector3(67.797752, 109.962700, 16.689711) );
geometry.vertices.push( new THREE.Vector3(67.722000, 107.714996, 16.960611) );
geometry.vertices.push( new THREE.Vector3(68.156616, 110.274696, 17.344240) );
geometry.vertices.push( new THREE.Vector3(67.924133, 110.424698, 18.234039) );
geometry.vertices.push( new THREE.Vector3(68.343002, 108.484497, 18.503700) );
geometry.vertices.push( new THREE.Vector3(68.489250, 108.378395, 17.720779) );
geometry.vertices.push( new THREE.Vector3(68.128876, 108.130898, 17.136940) );
geometry.vertices.push( new THREE.Vector3(68.197868, 107.535004, 17.242390) );
geometry.vertices.push( new THREE.Vector3(68.425499, 104.901001, 17.899200) );
geometry.vertices.push( new THREE.Vector3(68.601379, 105.044197, 18.435711) );
geometry.vertices.push( new THREE.Vector3(67.919998, 104.579605, 18.531530) );
geometry.vertices.push( new THREE.Vector3(68.446869, 105.111397, 19.008749) );
geometry.vertices.push( new THREE.Vector3(67.952255, 104.764107, 17.709860) );
geometry.vertices.push( new THREE.Vector3(68.530502, 107.736000, 17.859039) );
geometry.vertices.push( new THREE.Vector3(68.394753, 107.858299, 18.592129) );
geometry.vertices.push( new THREE.Vector3(67.900505, 108.310493, 19.134369) );
geometry.vertices.push( new THREE.Vector3(67.153877, 110.509895, 18.724459) );
geometry.vertices.push( new THREE.Vector3(67.954117, 107.804596, 19.172440) );
geometry.vertices.push( new THREE.Vector3(68.053131, 105.064499, 19.371151) );
geometry.vertices.push( new THREE.Vector3(67.562996, 104.908501, 19.348761) );
geometry.vertices.push( new THREE.Vector3(67.271248, 107.979797, 19.216801) );
geometry.vertices.push( new THREE.Vector3(66.548248, 109.947800, 18.773930) );
geometry.vertices.push( new THREE.Vector3(66.342003, 110.428497, 18.648941) );
geometry.vertices.push( new THREE.Vector3(65.093262, 112.487999, 17.973789) );
geometry.vertices.push( new THREE.Vector3(65.539124, 113.217697, 17.972250) );
geometry.vertices.push( new THREE.Vector3(66.323631, 110.342598, 19.502890) );
geometry.vertices.push( new THREE.Vector3(66.767250, 110.995499, 19.726349) );
geometry.vertices.push( new THREE.Vector3(67.486870, 110.595795, 20.833429) );
geometry.vertices.push( new THREE.Vector3(67.126129, 110.802399, 21.706051) );
geometry.vertices.push( new THREE.Vector3(67.357124, 108.655907, 22.096651) );
geometry.vertices.push( new THREE.Vector3(66.722252, 108.522705, 22.582951) );
geometry.vertices.push( new THREE.Vector3(66.818253, 108.107994, 22.662790) );
geometry.vertices.push( new THREE.Vector3(66.114746, 108.034096, 22.631811) );
geometry.vertices.push( new THREE.Vector3(67.521751, 107.708298, 20.805601) );
geometry.vertices.push( new THREE.Vector3(67.141495, 107.755898, 20.500690) );
geometry.vertices.push( new THREE.Vector3(67.398384, 108.190094, 20.699661) );
geometry.vertices.push( new THREE.Vector3(67.061249, 110.296501, 20.006891) );
geometry.vertices.push( new THREE.Vector3(67.661629, 108.494995, 21.394051) );
geometry.vertices.push( new THREE.Vector3(67.443382, 108.042801, 22.260340) );
geometry.vertices.push( new THREE.Vector3(67.481628, 105.285393, 22.614599) );
geometry.vertices.push( new THREE.Vector3(67.197372, 105.266998, 22.999460) );
geometry.vertices.push( new THREE.Vector3(66.714386, 105.102798, 23.042700) );
geometry.vertices.push( new THREE.Vector3(67.004250, 104.635895, 22.289141) );
geometry.vertices.push( new THREE.Vector3(67.608749, 105.214500, 22.183651) );
geometry.vertices.push( new THREE.Vector3(67.703629, 107.895699, 21.552109) );
geometry.vertices.push( new THREE.Vector3(67.542747, 105.058502, 21.775160) );
geometry.vertices.push( new THREE.Vector3(67.258881, 104.833900, 21.550951) );
geometry.vertices.push( new THREE.Vector3(65.158501, 109.894897, 21.488211) );
geometry.vertices.push( new THREE.Vector3(65.768250, 107.974098, 20.946751) );
geometry.vertices.push( new THREE.Vector3(65.661003, 108.244499, 22.094740) );
geometry.vertices.push( new THREE.Vector3(65.778748, 107.362900, 21.080030) );
geometry.vertices.push( new THREE.Vector3(65.689125, 107.703400, 22.185080) );
geometry.vertices.push( new THREE.Vector3(66.311623, 104.645599, 21.920139) );
geometry.vertices.push( new THREE.Vector3(66.311249, 104.859802, 22.639761) );
geometry.vertices.push( new THREE.Vector3(66.534004, 107.355408, 20.455351) );
geometry.vertices.push( new THREE.Vector3(66.452255, 107.908104, 20.299570) );
geometry.vertices.push( new THREE.Vector3(65.184746, 109.432098, 20.321590) );
geometry.vertices.push( new THREE.Vector3(64.835251, 110.542503, 21.176590) );
geometry.vertices.push( new THREE.Vector3(63.272251, 111.952904, 18.559608) );
geometry.vertices.push( new THREE.Vector3(62.851871, 112.579895, 20.049070) );
geometry.vertices.push( new THREE.Vector3(64.922249, 110.233498, 20.016489) );
geometry.vertices.push( new THREE.Vector3(66.090752, 109.504906, 19.685930) );
geometry.vertices.push( new THREE.Vector3(66.323631, 110.342598, 19.502890) );
geometry.vertices.push( new THREE.Vector3(67.141495, 107.755898, 20.500690) );
geometry.vertices.push( new THREE.Vector3(66.801003, 104.668495, 21.502199) );
geometry.vertices.push( new THREE.Vector3(67.258881, 104.833900, 21.550951) );
geometry.vertices.push( new THREE.Vector3(67.004250, 104.635895, 22.289141) );
geometry.vertices.push( new THREE.Vector3(64.192871, 112.174500, 17.712070) );
geometry.vertices.push( new THREE.Vector3(65.879631, 110.207603, 19.376589) );
geometry.vertices.push( new THREE.Vector3(65.093262, 112.487999, 17.973789) );
geometry.vertices.push( new THREE.Vector3(66.342003, 110.428497, 18.648941) );
geometry.vertices.push( new THREE.Vector3(65.850380, 110.131096, 18.128099) );
geometry.vertices.push( new THREE.Vector3(66.152252, 109.697998, 18.234261) );
geometry.vertices.push( new THREE.Vector3(66.039749, 109.488701, 17.343559) );
geometry.vertices.push( new THREE.Vector3(63.300751, 112.240509, 17.312851) );
geometry.vertices.push( new THREE.Vector3(64.299751, 111.492798, 16.452980) );
geometry.vertices.push( new THREE.Vector3(65.814751, 109.927498, 17.214491) );
geometry.vertices.push( new THREE.Vector3(66.389633, 110.096596, 16.351910) );
geometry.vertices.push( new THREE.Vector3(66.653252, 109.541199, 16.504499) );
geometry.vertices.push( new THREE.Vector3(67.113754, 109.974396, 16.365191) );
geometry.vertices.push( new THREE.Vector3(67.722000, 107.714996, 16.960611) );
geometry.vertices.push( new THREE.Vector3(67.183884, 107.913803, 16.979361) );
geometry.vertices.push( new THREE.Vector3(65.608887, 112.202301, 15.368740) );
geometry.vertices.push( new THREE.Vector3(64.902000, 111.587593, 15.594900) );
geometry.vertices.push( new THREE.Vector3(63.588367, 111.843803, 16.135689) );
geometry.vertices.push( new THREE.Vector3(63.190132, 112.255898, 14.608310) );
geometry.vertices.push( new THREE.Vector3(62.334751, 112.652603, 17.599989) );
geometry.vertices.push( new THREE.Vector3(61.889999, 113.152901, 14.098351) );
geometry.vertices.push( new THREE.Vector3(61.338383, 113.605904, 16.872530) );
geometry.vertices.push( new THREE.Vector3(64.929375, 112.480499, 14.870100) );
geometry.vertices.push( new THREE.Vector3(64.274620, 111.845604, 14.168739) );
geometry.vertices.push( new THREE.Vector3(65.260498, 112.559998, 14.724191) );
geometry.vertices.push( new THREE.Vector3(64.156136, 112.133301, 14.543851) );
geometry.vertices.push( new THREE.Vector3(64.020370, 112.007202, 15.160009) );
geometry.vertices.push( new THREE.Vector3(63.941998, 111.807404, 13.367550) );
geometry.vertices.push( new THREE.Vector3(65.076378, 110.464897, 14.407200) );
geometry.vertices.push( new THREE.Vector3(64.939865, 110.296501, 13.638709) );
geometry.vertices.push( new THREE.Vector3(64.126495, 111.894402, 12.569439) );
geometry.vertices.push( new THREE.Vector3(65.351616, 110.350098, 12.982990) );
geometry.vertices.push( new THREE.Vector3(66.019501, 110.527893, 12.867559) );
geometry.vertices.push( new THREE.Vector3(65.650116, 109.927498, 13.107300) );
geometry.vertices.push( new THREE.Vector3(64.909119, 112.184998, 12.196420) );
geometry.vertices.push( new THREE.Vector3(64.055626, 113.077103, 11.727901) );
geometry.vertices.push( new THREE.Vector3(63.277882, 112.441505, 12.411370) );
geometry.vertices.push( new THREE.Vector3(62.261246, 113.212097, 12.189640) );
geometry.vertices.push( new THREE.Vector3(61.245750, 113.900604, 11.703711) );
geometry.vertices.push( new THREE.Vector3(60.572998, 114.041992, 13.546281) );
geometry.vertices.push( new THREE.Vector3(62.195248, 114.473198, 10.787101) );
geometry.vertices.push( new THREE.Vector3(63.153370, 113.681602, 11.318180) );
geometry.vertices.push( new THREE.Vector3(60.025501, 114.633003, 16.012280) );
geometry.vertices.push( new THREE.Vector3(59.241001, 115.064301, 12.892610) );
geometry.vertices.push( new THREE.Vector3(58.495499, 115.833794, 15.390640) );
geometry.vertices.push( new THREE.Vector3(57.920246, 116.099594, 12.370649) );
geometry.vertices.push( new THREE.Vector3(57.419628, 116.657303, 14.289411) );
geometry.vertices.push( new THREE.Vector3(56.779499, 117.320595, 12.397500) );
geometry.vertices.push( new THREE.Vector3(55.861126, 117.430496, 14.309960) );
geometry.vertices.push( new THREE.Vector3(55.926750, 118.220604, 12.050700) );
geometry.vertices.push( new THREE.Vector3(55.149757, 118.360100, 13.499141) );
geometry.vertices.push( new THREE.Vector3(54.162373, 118.634605, 15.783259) );
geometry.vertices.push( new THREE.Vector3(54.171001, 119.605896, 13.964960) );
geometry.vertices.push( new THREE.Vector3(55.733253, 116.765198, 16.334591) );
geometry.vertices.push( new THREE.Vector3(55.187618, 119.103004, 11.706450) );
geometry.vertices.push( new THREE.Vector3(54.014248, 120.130898, 10.894840) );
geometry.vertices.push( new THREE.Vector3(55.071377, 119.860100, 9.545213) );
geometry.vertices.push( new THREE.Vector3(53.811378, 120.812592, 8.439188) );
geometry.vertices.push( new THREE.Vector3(54.962616, 121.397995, 7.439963) );
geometry.vertices.push( new THREE.Vector3(52.985252, 122.582603, 5.208712) );
geometry.vertices.push( new THREE.Vector3(54.117382, 117.802498, 17.374159) );
geometry.vertices.push( new THREE.Vector3(53.707497, 120.237007, 17.067110) );
geometry.vertices.push( new THREE.Vector3(53.696251, 120.904503, 15.746699) );
geometry.vertices.push( new THREE.Vector3(52.910252, 120.852005, 12.852640) );
geometry.vertices.push( new THREE.Vector3(52.770000, 120.937096, 9.973387) );
geometry.vertices.push( new THREE.Vector3(51.639748, 122.113892, 6.600263) );
geometry.vertices.push( new THREE.Vector3(50.900631, 123.939392, 2.792164) );
geometry.vertices.push( new THREE.Vector3(50.556763, 122.198196, 8.239536) );
geometry.vertices.push( new THREE.Vector3(51.792370, 121.886597, 11.965310) );
geometry.vertices.push( new THREE.Vector3(52.754997, 122.113098, 14.423921) );
geometry.vertices.push( new THREE.Vector3(47.118752, 124.378098, 9.098100) );
geometry.vertices.push( new THREE.Vector3(49.853249, 124.901199, 12.198040) );
geometry.vertices.push( new THREE.Vector3(47.879620, 126.638603, 10.823140) );
geometry.vertices.push( new THREE.Vector3(44.725880, 125.476097, 7.810688) );
geometry.vertices.push( new THREE.Vector3(45.442871, 124.112595, 4.667138) );
geometry.vertices.push( new THREE.Vector3(47.950119, 123.113297, 6.444187) );
geometry.vertices.push( new THREE.Vector3(49.598633, 123.100899, 10.420011) );
geometry.vertices.push( new THREE.Vector3(51.615749, 123.239601, 13.438500) );
geometry.vertices.push( new THREE.Vector3(42.184128, 126.911201, 6.644925) );
geometry.vertices.push( new THREE.Vector3(45.802132, 128.046402, 9.711375) );
geometry.vertices.push( new THREE.Vector3(43.373631, 129.872589, 8.749576) );
geometry.vertices.push( new THREE.Vector3(43.123878, 125.422501, 2.952611) );
geometry.vertices.push( new THREE.Vector3(44.744621, 125.471306, 0.210759) );
geometry.vertices.push( new THREE.Vector3(47.021248, 124.395393, 2.248384) );
geometry.vertices.push( new THREE.Vector3(49.292999, 123.422302, 4.409625) );
geometry.vertices.push( new THREE.Vector3(48.754879, 125.502800, 0.326073) );
geometry.vertices.push( new THREE.Vector3(46.657120, 126.990700, -1.363500) );
geometry.vertices.push( new THREE.Vector3(45.232498, 128.414200, -2.233890) );
geometry.vertices.push( new THREE.Vector3(43.233002, 126.889099, -0.870086) );
geometry.vertices.push( new THREE.Vector3(41.371880, 126.829102, 1.798144) );
geometry.vertices.push( new THREE.Vector3(40.810120, 128.695496, 5.488913) );
geometry.vertices.push( new THREE.Vector3(41.660999, 131.408295, 7.599188) );
geometry.vertices.push( new THREE.Vector3(63.110630, 110.693207, 22.582201) );
geometry.vertices.push( new THREE.Vector3(64.261131, 109.388306, 22.583620) );
geometry.vertices.push( new THREE.Vector3(63.654381, 109.570900, 23.158390) );
geometry.vertices.push( new THREE.Vector3(64.438866, 108.904503, 22.834610) );
geometry.vertices.push( new THREE.Vector3(64.448997, 106.085602, 24.385460) );
geometry.vertices.push( new THREE.Vector3(64.849503, 106.112198, 24.097090) );
geometry.vertices.push( new THREE.Vector3(63.718121, 109.048904, 23.437580) );
geometry.vertices.push( new THREE.Vector3(63.235497, 109.772598, 24.068781) );
geometry.vertices.push( new THREE.Vector3(62.841751, 111.060799, 23.630550) );
geometry.vertices.push( new THREE.Vector3(62.828617, 111.224998, 22.304029) );
geometry.vertices.push( new THREE.Vector3(63.371246, 109.240898, 24.258671) );
geometry.vertices.push( new THREE.Vector3(64.301254, 106.238602, 24.878660) );
geometry.vertices.push( new THREE.Vector3(64.516129, 106.485405, 25.250212) );
geometry.vertices.push( new THREE.Vector3(63.770252, 109.965004, 24.857029) );
geometry.vertices.push( new THREE.Vector3(63.241119, 111.774803, 24.338099) );
geometry.vertices.push( new THREE.Vector3(62.550377, 111.600807, 23.371910) );
geometry.vertices.push( new THREE.Vector3(61.222881, 113.565804, 22.006651) );
geometry.vertices.push( new THREE.Vector3(61.461754, 112.974800, 21.004200) );
geometry.vertices.push( new THREE.Vector3(64.978867, 106.141899, 24.798340) );
geometry.vertices.push( new THREE.Vector3(61.830746, 114.382507, 22.850510) );
geometry.vertices.push( new THREE.Vector3(61.060501, 115.457199, 22.152750) );
geometry.vertices.push( new THREE.Vector3(60.387375, 114.476303, 21.336109) );
geometry.vertices.push( new THREE.Vector3(60.019119, 116.574707, 21.417751) );
geometry.vertices.push( new THREE.Vector3(59.577751, 115.019203, 20.669621) );
geometry.vertices.push( new THREE.Vector3(58.754246, 116.697395, 21.179359) );
geometry.vertices.push( new THREE.Vector3(58.484631, 115.567101, 19.967211) );
geometry.vertices.push( new THREE.Vector3(57.417751, 115.507904, 20.658831) );
geometry.vertices.push( new THREE.Vector3(57.904881, 116.835701, 21.430580) );
geometry.vertices.push( new THREE.Vector3(57.432003, 116.525307, 21.964870) );
geometry.vertices.push( new THREE.Vector3(57.023251, 115.396904, 21.251921) );
geometry.vertices.push( new THREE.Vector3(57.469498, 115.454193, 19.161449) );
geometry.vertices.push( new THREE.Vector3(59.187000, 114.772499, 18.286730) );
geometry.vertices.push( new THREE.Vector3(60.325508, 114.101303, 19.020720) );
geometry.vertices.push( new THREE.Vector3(61.436249, 113.290497, 19.975161) );
geometry.vertices.push( new THREE.Vector3(62.174999, 112.784599, 20.504330) );
geometry.vertices.push( new THREE.Vector3(63.663380, 111.156403, 21.798901) );
geometry.vertices.push( new THREE.Vector3(65.098122, 109.303108, 22.829550) );
geometry.vertices.push( new THREE.Vector3(63.882370, 110.580803, 22.061180) );
geometry.vertices.push( new THREE.Vector3(64.671364, 110.793701, 22.143110) );
geometry.vertices.push( new THREE.Vector3(64.418251, 111.424896, 21.903490) );
geometry.vertices.push( new THREE.Vector3(63.079880, 112.982597, 20.600210) );
geometry.vertices.push( new THREE.Vector3(65.241745, 106.306503, 24.119061) );
geometry.vertices.push( new THREE.Vector3(54.561382, 115.021095, 23.660660) );
geometry.vertices.push( new THREE.Vector3(54.782249, 114.518997, 22.447460) );
geometry.vertices.push( new THREE.Vector3(54.858749, 114.006699, 22.785109) );
geometry.vertices.push( new THREE.Vector3(54.508503, 116.105202, 22.766510) );
geometry.vertices.push( new THREE.Vector3(55.061634, 113.194893, 23.264059) );
geometry.vertices.push( new THREE.Vector3(55.056381, 112.696503, 24.718571) );
geometry.vertices.push( new THREE.Vector3(54.808498, 113.793396, 24.182850) );
geometry.vertices.push( new THREE.Vector3(55.950367, 113.690201, 22.383980) );
geometry.vertices.push( new THREE.Vector3(55.854370, 114.176598, 22.006201) );
geometry.vertices.push( new THREE.Vector3(55.780880, 114.675797, 21.595200) );
geometry.vertices.push( new THREE.Vector3(54.653252, 115.182808, 21.946991) );
geometry.vertices.push( new THREE.Vector3(54.540001, 115.749702, 21.102301) );
geometry.vertices.push( new THREE.Vector3(57.128250, 114.022896, 22.698450) );
geometry.vertices.push( new THREE.Vector3(56.177628, 112.908005, 22.925291) );
geometry.vertices.push( new THREE.Vector3(57.046501, 114.404205, 22.356640) );
geometry.vertices.push( new THREE.Vector3(56.945251, 114.937103, 21.878250) );
geometry.vertices.push( new THREE.Vector3(55.781631, 115.138901, 20.791540) );
geometry.vertices.push( new THREE.Vector3(56.275116, 115.675102, 19.769400) );
geometry.vertices.push( new THREE.Vector3(56.040001, 116.263107, 18.127050) );
geometry.vertices.push( new THREE.Vector3(54.448120, 117.240402, 18.850309) );
geometry.vertices.push( new THREE.Vector3(54.540371, 116.438202, 20.196980) );
geometry.vertices.push( new THREE.Vector3(54.237373, 116.949699, 21.996410) );
geometry.vertices.push( new THREE.Vector3(54.012001, 117.690002, 21.020851) );
geometry.vertices.push( new THREE.Vector3(53.892368, 118.570496, 19.778770) );
geometry.vertices.push( new THREE.Vector3(53.781746, 119.457695, 18.412199) );
geometry.vertices.push( new THREE.Vector3(57.829498, 115.646599, 17.770309) );
geometry.vertices.push( new THREE.Vector3(43.286247, 134.103806, 8.633588) );
geometry.vertices.push( new THREE.Vector3(40.441502, 132.887192, 6.701175) );
geometry.vertices.push( new THREE.Vector3(41.660999, 131.408295, 7.599188) );
geometry.vertices.push( new THREE.Vector3(35.373791, 136.303894, 6.058612) );
geometry.vertices.push( new THREE.Vector3(32.017761, 136.309509, 2.380189) );
geometry.vertices.push( new THREE.Vector3(35.086651, 135.052094, 2.958079) );
geometry.vertices.push( new THREE.Vector3(38.809120, 135.152603, 5.773687) );
geometry.vertices.push( new THREE.Vector3(37.416492, 132.799500, 3.165409) );
geometry.vertices.push( new THREE.Vector3(39.344631, 130.248398, 4.466213) );
geometry.vertices.push( new THREE.Vector3(40.810120, 128.695496, 5.488913) );
geometry.vertices.push( new THREE.Vector3(29.462851, 138.778503, 5.955562) );
geometry.vertices.push( new THREE.Vector3(27.213821, 139.441101, 2.007375) );
geometry.vertices.push( new THREE.Vector3(29.176390, 137.708603, 2.112649) );
geometry.vertices.push( new THREE.Vector3(32.230541, 137.139404, 6.105188) );
geometry.vertices.push( new THREE.Vector3(36.352909, 137.803101, 7.444012) );
geometry.vertices.push( new THREE.Vector3(40.833000, 137.337402, 6.971963) );
geometry.vertices.push( new THREE.Vector3(42.159752, 135.300003, 7.328438) );
geometry.vertices.push( new THREE.Vector3(37.833752, 139.886612, 7.756688) );
geometry.vertices.push( new THREE.Vector3(39.805130, 142.181595, 7.032938) );
geometry.vertices.push( new THREE.Vector3(35.535259, 142.045502, 8.550036) );
geometry.vertices.push( new THREE.Vector3(33.478909, 139.492905, 8.133825) );
geometry.vertices.push( new THREE.Vector3(31.009760, 141.493103, 8.256901) );
geometry.vertices.push( new THREE.Vector3(27.396042, 140.713898, 5.632725) );
geometry.vertices.push( new THREE.Vector3(28.749821, 143.470505, 7.866113) );
geometry.vertices.push( new THREE.Vector3(26.701090, 145.552094, 6.870413) );
geometry.vertices.push( new THREE.Vector3(25.431002, 143.048599, 5.041425) );
geometry.vertices.push( new THREE.Vector3(23.840401, 145.236389, 4.219013) );
geometry.vertices.push( new THREE.Vector3(37.525120, 144.303406, 7.360463) );
geometry.vertices.push( new THREE.Vector3(33.183941, 144.255402, 8.554539) );
geometry.vertices.push( new THREE.Vector3(31.006130, 146.303589, 7.908075) );
geometry.vertices.push( new THREE.Vector3(29.116690, 148.097305, 7.300688) );
geometry.vertices.push( new THREE.Vector3(24.770960, 147.659302, 6.003450) );
geometry.vertices.push( new THREE.Vector3(22.705610, 146.998901, 3.602955) );
geometry.vertices.push( new THREE.Vector3(22.020229, 148.747498, 4.390388) );
geometry.vertices.push( new THREE.Vector3(21.631430, 148.059006, 3.220098) );
geometry.vertices.push( new THREE.Vector3(23.136000, 148.637604, 6.054600) );
geometry.vertices.push( new THREE.Vector3(26.912510, 149.671097, 7.812825) );
geometry.vertices.push( new THREE.Vector3(31.799921, 150.119598, 6.280875) );
geometry.vertices.push( new THREE.Vector3(33.387001, 148.169998, 6.412650) );
geometry.vertices.push( new THREE.Vector3(35.442600, 146.286407, 7.171350) );
geometry.vertices.push( new THREE.Vector3(21.087450, 149.071899, 4.823625) );
geometry.vertices.push( new THREE.Vector3(20.522741, 148.249496, 2.740849) );
geometry.vertices.push( new THREE.Vector3(22.376101, 149.086899, 6.355727) );
geometry.vertices.push( new THREE.Vector3(25.824371, 150.923996, 8.211638) );
geometry.vertices.push( new THREE.Vector3(29.674540, 151.825500, 6.891075) );
geometry.vertices.push( new THREE.Vector3(33.561520, 150.606400, 3.804450) );
geometry.vertices.push( new THREE.Vector3(22.129610, 149.962906, 7.469475) );
geometry.vertices.push( new THREE.Vector3(21.055910, 149.540298, 6.114750) );
geometry.vertices.push( new THREE.Vector3(21.471939, 151.201111, 7.967363) );
geometry.vertices.push( new THREE.Vector3(24.138939, 152.284500, 8.512161) );
geometry.vertices.push( new THREE.Vector3(28.734898, 152.860107, 7.225389) );
geometry.vertices.push( new THREE.Vector3(32.535519, 152.334412, 3.552900) );
geometry.vertices.push( new THREE.Vector3(27.271090, 154.828094, 7.594538) );
geometry.vertices.push( new THREE.Vector3(22.589140, 154.412994, 8.539762) );
geometry.vertices.push( new THREE.Vector3(20.653271, 153.042694, 8.324850) );
geometry.vertices.push( new THREE.Vector3(19.845860, 152.013809, 7.857863) );
geometry.vertices.push( new THREE.Vector3(20.518429, 150.524200, 7.137300) );
geometry.vertices.push( new THREE.Vector3(20.185051, 150.121109, 6.888300) );
geometry.vertices.push( new THREE.Vector3(20.402580, 148.841202, 5.325000) );
geometry.vertices.push( new THREE.Vector3(19.041040, 154.578400, 8.030586) );
geometry.vertices.push( new THREE.Vector3(20.948509, 156.533600, 8.050763) );
geometry.vertices.push( new THREE.Vector3(40.050751, 145.764404, -1.900725) );
geometry.vertices.push( new THREE.Vector3(39.331497, 144.189407, -4.826213) );
geometry.vertices.push( new THREE.Vector3(38.076748, 147.865112, 1.140851) );
geometry.vertices.push( new THREE.Vector3(36.013458, 149.512512, 1.014041) );
geometry.vertices.push( new THREE.Vector3(34.859810, 148.959000, 3.961013) );
geometry.vertices.push( new THREE.Vector3(36.964760, 147.160095, 4.147913) );
geometry.vertices.push( new THREE.Vector3(39.993752, 145.924103, 1.221562) );
geometry.vertices.push( new THREE.Vector3(38.116882, 142.296402, -7.175925) );
geometry.vertices.push( new THREE.Vector3(38.995502, 145.257401, 4.316438) );
geometry.vertices.push( new THREE.Vector3(66.714386, 105.102798, 23.042700) );
geometry.vertices.push( new THREE.Vector3(66.114746, 108.034096, 22.631811) );
geometry.vertices.push( new THREE.Vector3(65.630630, 110.177299, 22.111460) );
geometry.vertices.push( new THREE.Vector3(65.264618, 110.737503, 21.896441) );
geometry.vertices.push( new THREE.Vector3(63.700878, 113.046799, 20.683880) );
geometry.vertices.push( new THREE.Vector3(-42.676868, 138.936401, 7.060762) );
geometry.vertices.push( new THREE.Vector3(-46.363499, 138.398605, 7.815075) );
geometry.vertices.push( new THREE.Vector3(-45.348000, 137.301804, 8.529112) );
geometry.vertices.push( new THREE.Vector3(-44.658367, 140.593094, 5.289863) );
geometry.vertices.push( new THREE.Vector3(-48.363380, 135.018799, -0.370114) );
geometry.vertices.push( new THREE.Vector3(-45.804752, 134.955795, -3.534570) );
geometry.vertices.push( new THREE.Vector3(-47.848499, 133.231491, -1.891680) );
geometry.vertices.push( new THREE.Vector3(-46.356380, 137.497101, -1.908866) );
geometry.vertices.push( new THREE.Vector3(-46.892632, 139.641708, -0.588570) );
geometry.vertices.push( new THREE.Vector3(-48.986252, 136.459503, 0.592151) );
geometry.vertices.push( new THREE.Vector3(-49.298630, 137.626511, 1.694647) );
geometry.vertices.push( new THREE.Vector3(-48.929630, 138.524597, 3.472935) );
geometry.vertices.push( new THREE.Vector3(-46.166248, 140.796402, 2.048254) );
geometry.vertices.push( new THREE.Vector3(-47.447250, 138.937500, 6.446438) );
geometry.vertices.push( new THREE.Vector3(-48.267002, 138.977203, 5.133675) );
geometry.vertices.push( new THREE.Vector3(-44.425499, 142.303894, 1.065529) );
geometry.vertices.push( new THREE.Vector3(-45.186749, 140.938492, -1.366616) );
geometry.vertices.push( new THREE.Vector3(-43.210117, 141.945404, 4.148550) );
geometry.vertices.push( new THREE.Vector3(-44.424370, 139.331299, -3.048446) );
geometry.vertices.push( new THREE.Vector3(-41.764500, 143.952408, 1.412756) );
geometry.vertices.push( new THREE.Vector3(-43.808632, 141.843002, -1.558710) );
geometry.vertices.push( new THREE.Vector3(-41.692871, 143.485901, -1.178430) );
geometry.vertices.push( new THREE.Vector3(-41.656879, 139.661591, 6.162038) );
geometry.vertices.push( new THREE.Vector3(-43.819870, 137.191101, -5.552700) );
geometry.vertices.push( new THREE.Vector3(-39.922123, 140.567596, -6.542063) );
geometry.vertices.push( new THREE.Vector3(-41.623501, 138.840698, -6.482662) );
geometry.vertices.push( new THREE.Vector3(-40.849869, 142.342102, -3.752100) );
geometry.vertices.push( new THREE.Vector3(-40.585117, 136.900497, -7.447837) );
geometry.vertices.push( new THREE.Vector3(-38.453999, 138.500198, -7.556250) );
geometry.vertices.push( new THREE.Vector3(-36.926319, 136.633896, -7.199737) );
geometry.vertices.push( new THREE.Vector3(-39.144371, 134.980499, -7.275075) );
geometry.vertices.push( new THREE.Vector3(-41.531620, 133.695404, -6.573975) );
geometry.vertices.push( new THREE.Vector3(-40.373249, 132.488602, -5.250900) );
geometry.vertices.push( new THREE.Vector3(-43.265621, 130.699509, -3.759375) );
geometry.vertices.push( new THREE.Vector3(-38.541748, 131.349808, -3.584288) );
geometry.vertices.push( new THREE.Vector3(-41.031368, 128.681305, -2.392121) );
geometry.vertices.push( new THREE.Vector3(-37.223442, 131.225601, -0.571931) );
geometry.vertices.push( new THREE.Vector3(-39.531750, 128.389496, 0.649594) );
geometry.vertices.push( new THREE.Vector3(-36.242180, 135.455597, -5.796938) );
geometry.vertices.push( new THREE.Vector3(-38.041870, 134.329102, -5.838862) );
geometry.vertices.push( new THREE.Vector3(-36.508759, 134.421005, -3.480187) );
geometry.vertices.push( new THREE.Vector3(-34.854298, 134.026093, -1.639342) );
geometry.vertices.push( new THREE.Vector3(-46.828869, 130.752396, -2.628611) );
geometry.vertices.push( new THREE.Vector3(-45.232498, 128.414200, -2.233898) );
geometry.vertices.push( new THREE.Vector3(-43.233002, 126.889099, -0.870094) );
geometry.vertices.push( new THREE.Vector3(-41.371880, 126.829102, 1.798132) );
geometry.vertices.push( new THREE.Vector3(-39.344631, 130.248398, 4.466213) );
geometry.vertices.push( new THREE.Vector3(-37.416492, 132.799500, 3.165405) );
geometry.vertices.push( new THREE.Vector3(-35.086651, 135.052094, 2.958075) );
geometry.vertices.push( new THREE.Vector3(-40.810120, 128.695496, 5.488913) );
geometry.vertices.push( new THREE.Vector3(-32.017761, 136.309509, 2.380185) );
geometry.vertices.push( new THREE.Vector3(-31.765430, 135.335999, -2.094461) );
geometry.vertices.push( new THREE.Vector3(-34.471050, 135.031097, -4.082550) );
geometry.vertices.push( new THREE.Vector3(-34.430702, 136.158401, -5.989050) );
geometry.vertices.push( new THREE.Vector3(-32.928219, 136.854401, -6.975488) );
geometry.vertices.push( new THREE.Vector3(-32.290569, 136.156494, -6.038025) );
geometry.vertices.push( new THREE.Vector3(-31.980749, 135.625900, -4.704825) );
geometry.vertices.push( new THREE.Vector3(-29.344839, 136.723495, -2.553908) );
geometry.vertices.push( new THREE.Vector3(-29.176390, 137.708603, 2.112645) );
geometry.vertices.push( new THREE.Vector3(-27.451500, 138.148102, -3.077224) );
geometry.vertices.push( new THREE.Vector3(-27.213791, 139.441101, 2.007371) );
geometry.vertices.push( new THREE.Vector3(-29.653688, 136.624100, -5.240588) );
geometry.vertices.push( new THREE.Vector3(-27.682310, 137.941895, -5.852925) );
geometry.vertices.push( new THREE.Vector3(-31.804800, 138.940094, -8.820976) );
geometry.vertices.push( new THREE.Vector3(-30.916611, 137.914093, -8.341875) );
geometry.vertices.push( new THREE.Vector3(-30.165152, 136.996902, -7.084312) );
geometry.vertices.push( new THREE.Vector3(-28.322771, 138.521301, -7.950375) );
geometry.vertices.push( new THREE.Vector3(-25.884151, 139.969894, -6.368775) );
geometry.vertices.push( new THREE.Vector3(-25.938940, 140.368500, -3.179872) );
geometry.vertices.push( new THREE.Vector3(-30.787611, 141.209991, -9.707325) );
geometry.vertices.push( new THREE.Vector3(-33.889309, 137.644501, -7.501200) );
geometry.vertices.push( new THREE.Vector3(-33.208130, 139.929703, -8.657249) );
geometry.vertices.push( new THREE.Vector3(-35.988411, 144.727905, -7.816312) );
geometry.vertices.push( new THREE.Vector3(-37.084202, 145.934601, -7.309725) );
geometry.vertices.push( new THREE.Vector3(-35.148193, 146.350510, -8.298375) );
geometry.vertices.push( new THREE.Vector3(-34.204842, 144.997498, -8.434988) );
geometry.vertices.push( new THREE.Vector3(-31.590900, 145.954498, -9.022762) );
geometry.vertices.push( new THREE.Vector3(-33.167587, 143.632904, -8.831738) );
geometry.vertices.push( new THREE.Vector3(-30.777601, 145.268997, -9.247686) );
geometry.vertices.push( new THREE.Vector3(-32.173122, 142.383392, -9.244313) );
geometry.vertices.push( new THREE.Vector3(-29.507029, 143.965897, -10.021880) );
geometry.vertices.push( new THREE.Vector3(-28.073141, 148.315506, -9.323288) );
geometry.vertices.push( new THREE.Vector3(-34.689827, 141.862900, -8.774438) );
geometry.vertices.push( new THREE.Vector3(-35.002758, 138.271500, -7.889513) );
geometry.vertices.push( new THREE.Vector3(-36.537342, 140.117996, -8.170462) );
geometry.vertices.push( new THREE.Vector3(-38.116882, 142.296402, -7.175925) );
geometry.vertices.push( new THREE.Vector3(-37.895630, 144.673096, -6.504675) );
geometry.vertices.push( new THREE.Vector3(-39.331497, 144.189407, -4.826213) );
geometry.vertices.push( new THREE.Vector3(-38.372620, 146.854492, -5.868938) );
geometry.vertices.push( new THREE.Vector3(-38.453999, 138.500198, -7.556250) );
geometry.vertices.push( new THREE.Vector3(-38.995502, 145.257401, 4.316400) );
geometry.vertices.push( new THREE.Vector3(-35.442600, 146.286407, 7.171313) );
geometry.vertices.push( new THREE.Vector3(-36.964760, 147.160095, 4.147913) );
geometry.vertices.push( new THREE.Vector3(-37.525120, 144.303406, 7.360463) );
geometry.vertices.push( new THREE.Vector3(-39.805130, 142.181595, 7.032938) );
geometry.vertices.push( new THREE.Vector3(-40.743370, 143.098495, 4.158863) );
geometry.vertices.push( new THREE.Vector3(-39.993752, 145.924103, 1.221555) );
geometry.vertices.push( new THREE.Vector3(-40.050751, 145.764404, -1.900729) );
geometry.vertices.push( new THREE.Vector3(-38.888622, 147.406097, -4.231013) );
geometry.vertices.push( new THREE.Vector3(-38.076748, 147.865112, 1.140844) );
geometry.vertices.push( new THREE.Vector3(-36.680889, 149.782104, -1.812030) );
geometry.vertices.push( new THREE.Vector3(-38.560131, 147.858398, -1.965623) );
geometry.vertices.push( new THREE.Vector3(-37.266342, 149.683502, -4.166362) );
geometry.vertices.push( new THREE.Vector3(-35.376148, 151.185791, -4.297500) );
geometry.vertices.push( new THREE.Vector3(-35.327103, 150.238098, -6.419925) );
geometry.vertices.push( new THREE.Vector3(-33.487610, 152.032104, -4.593900) );
geometry.vertices.push( new THREE.Vector3(-33.379269, 151.221390, -6.430275) );
geometry.vertices.push( new THREE.Vector3(-31.726500, 152.146896, -6.085575) );
geometry.vertices.push( new THREE.Vector3(-35.055943, 151.173401, -1.889239) );
geometry.vertices.push( new THREE.Vector3(-32.518311, 150.277496, -7.935937) );
geometry.vertices.push( new THREE.Vector3(-30.041811, 151.250992, -7.878112) );
geometry.vertices.push( new THREE.Vector3(-36.945148, 148.721603, -6.175425) );
geometry.vertices.push( new THREE.Vector3(-34.396652, 148.976303, -7.912462) );
geometry.vertices.push( new THREE.Vector3(-31.211960, 149.057190, -8.878800) );
geometry.vertices.push( new THREE.Vector3(-28.426800, 149.934402, -9.011400) );
geometry.vertices.push( new THREE.Vector3(-27.130239, 152.550400, -9.871687) );
geometry.vertices.push( new THREE.Vector3(-35.927589, 147.449188, -7.741275) );
geometry.vertices.push( new THREE.Vector3(-33.284142, 147.618408, -8.780362) );
geometry.vertices.push( new THREE.Vector3(-26.217190, 150.097504, -9.646275) );
geometry.vertices.push( new THREE.Vector3(-25.045389, 154.180496, -10.605710) );
geometry.vertices.push( new THREE.Vector3(-26.069059, 156.858795, -9.130276) );
geometry.vertices.push( new THREE.Vector3(-24.353399, 151.146698, -11.075960) );
geometry.vertices.push( new THREE.Vector3(-24.211760, 149.310806, -9.538313) );
geometry.vertices.push( new THREE.Vector3(-24.388090, 146.967010, -8.799338) );
geometry.vertices.push( new THREE.Vector3(-25.141651, 147.893600, -9.573488) );
geometry.vertices.push( new THREE.Vector3(-23.812840, 148.089691, -8.288588) );
geometry.vertices.push( new THREE.Vector3(-22.886511, 146.703400, -6.626925) );
geometry.vertices.push( new THREE.Vector3(-23.275690, 147.760910, -9.321600) );
geometry.vertices.push( new THREE.Vector3(-23.272120, 149.519302, -10.784810) );
geometry.vertices.push( new THREE.Vector3(-23.009291, 152.014099, -11.594399) );
geometry.vertices.push( new THREE.Vector3(-22.276091, 152.487396, -11.868640) );
geometry.vertices.push( new THREE.Vector3(-26.745260, 145.313995, -10.120610) );
geometry.vertices.push( new THREE.Vector3(-26.554050, 140.734894, -8.751750) );
geometry.vertices.push( new THREE.Vector3(-27.882450, 142.388992, -10.081130) );
geometry.vertices.push( new THREE.Vector3(-25.249800, 143.254105, -9.160650) );
geometry.vertices.push( new THREE.Vector3(-29.518131, 139.749008, -9.333188) );
geometry.vertices.push( new THREE.Vector3(-23.668461, 146.173508, -7.272487) );
geometry.vertices.push( new THREE.Vector3(-22.349140, 145.628601, -3.789150) );
geometry.vertices.push( new THREE.Vector3(-23.306931, 145.616989, -3.306930) );
geometry.vertices.push( new THREE.Vector3(-24.471081, 142.666107, -6.693600) );
geometry.vertices.push( new THREE.Vector3(-24.551401, 143.410095, -2.949416) );
geometry.vertices.push( new THREE.Vector3(-25.620790, 141.597397, 1.539510) );
geometry.vertices.push( new THREE.Vector3(-23.804251, 144.088104, 1.429834) );
geometry.vertices.push( new THREE.Vector3(-22.328659, 145.808304, -0.104168) );
geometry.vertices.push( new THREE.Vector3(-21.346390, 146.072311, -0.052828) );
geometry.vertices.push( new THREE.Vector3(-43.286247, 134.103806, 8.633588) );
geometry.vertices.push( new THREE.Vector3(-49.853249, 124.901199, 12.198040) );
geometry.vertices.push( new THREE.Vector3(-47.879620, 126.638603, 10.823140) );
geometry.vertices.push( new THREE.Vector3(-45.802132, 128.046402, 9.711374) );
geometry.vertices.push( new THREE.Vector3(-43.373631, 129.872589, 8.749537) );
geometry.vertices.push( new THREE.Vector3(-41.660999, 131.408295, 7.599188) );
geometry.vertices.push( new THREE.Vector3(-42.589500, 140.547394, -3.312844) );
geometry.vertices.push( new THREE.Vector3(20.185051, 150.121109, 6.888300) );
geometry.vertices.push( new THREE.Vector3(18.960711, 136.133606, -7.110862) );
geometry.vertices.push( new THREE.Vector3(19.861839, 136.533401, -3.708652) );
geometry.vertices.push( new THREE.Vector3(-57.870750, 123.871506, -1.592216) );
geometry.vertices.push( new THREE.Vector3(-57.778503, 124.232605, -2.615164) );
geometry.vertices.push( new THREE.Vector3(-57.817501, 123.959602, -1.602641) );
geometry.vertices.push( new THREE.Vector3(-57.866253, 123.558701, -0.131936) );
geometry.vertices.push( new THREE.Vector3(-57.981747, 123.415504, -0.120940) );
geometry.vertices.push( new THREE.Vector3(-57.751881, 123.139908, 1.924526) );
geometry.vertices.push( new THREE.Vector3(-57.929619, 122.924995, 1.957706) );
geometry.vertices.push( new THREE.Vector3(-57.273750, 122.937408, 4.254638) );
geometry.vertices.push( new THREE.Vector3(-57.496117, 122.635101, 4.309425) );
geometry.vertices.push( new THREE.Vector3(-56.867249, 122.503105, 6.421837) );
geometry.vertices.push( new THREE.Vector3(-56.630619, 122.864601, 6.328125) );
geometry.vertices.push( new THREE.Vector3(-56.380497, 122.859703, 6.885300) );
geometry.vertices.push( new THREE.Vector3(-56.563126, 122.477303, 7.080937) );
geometry.vertices.push( new THREE.Vector3(-56.459248, 122.229698, 7.297987) );
geometry.vertices.push( new THREE.Vector3(-57.724880, 121.420898, 7.981537) );
geometry.vertices.push( new THREE.Vector3(-58.173752, 121.502304, 6.917025) );
geometry.vertices.push( new THREE.Vector3(-58.702499, 121.783104, 4.636912) );
geometry.vertices.push( new THREE.Vector3(-58.894497, 122.306297, 2.178964) );
geometry.vertices.push( new THREE.Vector3(-58.635746, 123.010101, 0.002982) );
geometry.vertices.push( new THREE.Vector3(-57.445133, 121.278404, 8.249363) );
geometry.vertices.push( new THREE.Vector3(-59.260868, 121.075500, 8.847861) );
geometry.vertices.push( new THREE.Vector3(-59.346748, 120.913101, 9.383326) );
geometry.vertices.push( new THREE.Vector3(-59.599133, 121.177101, 7.241663) );
geometry.vertices.push( new THREE.Vector3(-59.947502, 121.478996, 4.767263) );
geometry.vertices.push( new THREE.Vector3(-59.898750, 122.048294, 2.224575) );
geometry.vertices.push( new THREE.Vector3(-59.342999, 122.866501, -0.087856) );
geometry.vertices.push( new THREE.Vector3(-58.174873, 123.690704, -1.565156) );
geometry.vertices.push( new THREE.Vector3(-58.592617, 123.672699, -1.790434) );
geometry.vertices.push( new THREE.Vector3(-57.901501, 124.282097, -2.691289) );
geometry.vertices.push( new THREE.Vector3(-58.024502, 124.099098, -1.524521) );
geometry.vertices.push( new THREE.Vector3(-58.854752, 123.356995, 0.090281) );
geometry.vertices.push( new THREE.Vector3(-58.192123, 123.740601, -0.034310) );
geometry.vertices.push( new THREE.Vector3(-58.331253, 123.926994, -1.498320) );
geometry.vertices.push( new THREE.Vector3(-57.860249, 124.353004, -2.579464) );
geometry.vertices.push( new THREE.Vector3(-58.592617, 123.672699, -1.790434) );
geometry.vertices.push( new THREE.Vector3(-57.901501, 124.282097, -2.691289) );
geometry.vertices.push( new THREE.Vector3(-57.917999, 124.109604, -1.559325) );
geometry.vertices.push( new THREE.Vector3(-58.004250, 123.772095, -0.075999) );
geometry.vertices.push( new THREE.Vector3(-58.220249, 123.386597, 2.072254) );
geometry.vertices.push( new THREE.Vector3(-57.941998, 123.442101, 1.998821) );
geometry.vertices.push( new THREE.Vector3(-57.866634, 123.242203, 4.438725) );
geometry.vertices.push( new THREE.Vector3(-57.514881, 123.330399, 4.337550) );
geometry.vertices.push( new THREE.Vector3(-57.309002, 123.221298, 6.559125) );
geometry.vertices.push( new THREE.Vector3(-56.916000, 123.328491, 6.411489) );
geometry.vertices.push( new THREE.Vector3(-57.128632, 123.248993, 7.209825) );
geometry.vertices.push( new THREE.Vector3(-56.738251, 123.352501, 6.951375) );
geometry.vertices.push( new THREE.Vector3(-55.926750, 122.763397, 6.702188) );
geometry.vertices.push( new THREE.Vector3(-56.584503, 123.643898, 6.722737) );
geometry.vertices.push( new THREE.Vector3(-56.791504, 123.450806, 6.976688) );
geometry.vertices.push( new THREE.Vector3(19.845860, 152.013809, 7.857863) );
geometry.vertices.push( new THREE.Vector3(20.518429, 150.524200, 7.137300) );
geometry.vertices.push( new THREE.Vector3(9.038475, 153.843399, 11.671500) );
geometry.vertices.push( new THREE.Vector3(12.573040, 153.089600, 10.836340) );
geometry.vertices.push( new THREE.Vector3(11.634530, 154.700989, 10.157630) );
geometry.vertices.push( new THREE.Vector3(9.645374, 152.648300, 12.325160) );
geometry.vertices.push( new THREE.Vector3(6.616275, 152.009995, 13.626340) );
geometry.vertices.push( new THREE.Vector3(6.044250, 153.410599, 12.745389) );
geometry.vertices.push( new THREE.Vector3(-10.216990, 151.654510, 12.884590) );
geometry.vertices.push( new THREE.Vector3(-6.637013, 152.009598, 13.625510) );
geometry.vertices.push( new THREE.Vector3(-9.749326, 152.659500, 12.471749) );
geometry.vertices.push( new THREE.Vector3(-6.947850, 150.835098, 14.183660) );
geometry.vertices.push( new THREE.Vector3(3.927188, 147.166504, 15.497740) );
geometry.vertices.push( new THREE.Vector3(5.846100, 146.359100, 15.438821) );
geometry.vertices.push( new THREE.Vector3(5.971239, 147.507797, 15.287479) );
geometry.vertices.push( new THREE.Vector3(3.812175, 146.342300, 15.626290) );
geometry.vertices.push( new THREE.Vector3(8.047576, 146.395508, 15.087830) );
geometry.vertices.push( new THREE.Vector3(7.948237, 148.586197, 14.693700) );
geometry.vertices.push( new THREE.Vector3(-1.945523, 148.558105, 15.250310) );
geometry.vertices.push( new THREE.Vector3(-3.919312, 147.110199, 15.506551) );
geometry.vertices.push( new THREE.Vector3(-1.841374, 146.785492, 15.272629) );
geometry.vertices.push( new THREE.Vector3(-4.129275, 148.615097, 15.271910) );
geometry.vertices.push( new THREE.Vector3(-5.982375, 147.568100, 15.321040) );
geometry.vertices.push( new THREE.Vector3(-6.073012, 148.646301, 15.121050) );
geometry.vertices.push( new THREE.Vector3(0.000007, 148.554810, 15.003520) );
geometry.vertices.push( new THREE.Vector3(0.000000, 146.759613, 14.964681) );
geometry.vertices.push( new THREE.Vector3(-3.812175, 146.342300, 15.626290) );
geometry.vertices.push( new THREE.Vector3(-1.921001, 145.310196, 15.238690) );
geometry.vertices.push( new THREE.Vector3(-3.962100, 144.738693, 15.478609) );
geometry.vertices.push( new THREE.Vector3(-5.857200, 146.365494, 15.532310) );
geometry.vertices.push( new THREE.Vector3(3.962100, 144.738693, 15.478609) );
geometry.vertices.push( new THREE.Vector3(5.945287, 144.430496, 15.470210) );
geometry.vertices.push( new THREE.Vector3(-5.945288, 144.430496, 15.470169) );
geometry.vertices.push( new THREE.Vector3(-4.226550, 150.350601, 14.693769) );
geometry.vertices.push( new THREE.Vector3(8.233125, 144.263992, 14.977990) );
geometry.vertices.push( new THREE.Vector3(10.329790, 146.470901, 14.481820) );
geometry.vertices.push( new THREE.Vector3(12.056660, 144.279800, 13.649400) );
geometry.vertices.push( new THREE.Vector3(-10.329821, 146.470901, 14.481820) );
geometry.vertices.push( new THREE.Vector3(-8.105625, 148.391602, 14.792439) );
geometry.vertices.push( new THREE.Vector3(-9.479962, 149.430008, 14.147030) );
geometry.vertices.push( new THREE.Vector3(-8.047575, 146.395508, 15.087790) );
geometry.vertices.push( new THREE.Vector3(11.565260, 149.688004, 13.095040) );
geometry.vertices.push( new THREE.Vector3(9.139500, 149.253708, 14.215840) );
geometry.vertices.push( new THREE.Vector3(12.358459, 146.694000, 13.472700) );
geometry.vertices.push( new THREE.Vector3(4.939014, 155.998093, 10.583060) );
geometry.vertices.push( new THREE.Vector3(1.924230, 157.597488, 8.673787) );
geometry.vertices.push( new THREE.Vector3(2.207783, 155.913788, 10.431750) );
geometry.vertices.push( new THREE.Vector3(4.008488, 158.031708, 8.459849) );
geometry.vertices.push( new THREE.Vector3(-1.983431, 150.174408, 14.774060) );
geometry.vertices.push( new THREE.Vector3(-4.254787, 151.642899, 13.999990) );
geometry.vertices.push( new THREE.Vector3(-1.790505, 151.440796, 14.123509) );
geometry.vertices.push( new THREE.Vector3(1.790520, 151.440796, 14.123509) );
geometry.vertices.push( new THREE.Vector3(3.963787, 153.126801, 12.983060) );
geometry.vertices.push( new THREE.Vector3(1.567256, 152.884903, 13.129089) );
geometry.vertices.push( new THREE.Vector3(4.254675, 151.643600, 13.999420) );
geometry.vertices.push( new THREE.Vector3(-1.567237, 152.884903, 13.129089) );
geometry.vertices.push( new THREE.Vector3(-3.565837, 154.633102, 11.783629) );
geometry.vertices.push( new THREE.Vector3(-3.964087, 153.124496, 12.984369) );
geometry.vertices.push( new THREE.Vector3(-1.316554, 154.473404, 11.850451) );
geometry.vertices.push( new THREE.Vector3(3.565826, 154.633499, 11.783740) );
geometry.vertices.push( new THREE.Vector3(1.316576, 154.473404, 11.850451) );
geometry.vertices.push( new THREE.Vector3(1.945538, 148.558105, 15.250310) );
geometry.vertices.push( new THREE.Vector3(1.841370, 146.785492, 15.272629) );
geometry.vertices.push( new THREE.Vector3(4.129275, 148.615097, 15.271910) );
geometry.vertices.push( new THREE.Vector3(1.983446, 150.174408, 14.774020) );
geometry.vertices.push( new THREE.Vector3(4.226588, 150.350601, 14.693740) );
geometry.vertices.push( new THREE.Vector3(0.000010, 151.328598, 14.127080) );
geometry.vertices.push( new THREE.Vector3(0.000008, 150.044296, 14.697260) );
geometry.vertices.push( new THREE.Vector3(0.000011, 152.781403, 13.181999) );
geometry.vertices.push( new THREE.Vector3(0.000012, 155.740097, 10.446080) );
geometry.vertices.push( new THREE.Vector3(0.000012, 154.380005, 11.918140) );
geometry.vertices.push( new THREE.Vector3(5.391525, 154.811600, 11.670150) );
geometry.vertices.push( new THREE.Vector3(-5.423813, 154.813904, 11.668280) );
geometry.vertices.push( new THREE.Vector3(-6.084750, 153.411407, 12.744040) );
geometry.vertices.push( new THREE.Vector3(-11.634490, 154.700989, 10.157630) );
geometry.vertices.push( new THREE.Vector3(-12.605921, 157.176392, 7.664588) );
geometry.vertices.push( new THREE.Vector3(-14.979259, 154.417892, 8.944050) );
geometry.vertices.push( new THREE.Vector3(-10.532810, 156.094894, 9.283800) );
geometry.vertices.push( new THREE.Vector3(8.287350, 155.491501, 10.612949) );
geometry.vertices.push( new THREE.Vector3(-9.071362, 153.922897, 11.778790) );
geometry.vertices.push( new THREE.Vector3(-8.287313, 155.491501, 10.612990) );
geometry.vertices.push( new THREE.Vector3(15.226801, 147.407196, 11.461690) );
geometry.vertices.push( new THREE.Vector3(13.937209, 150.520905, 11.335270) );
geometry.vertices.push( new THREE.Vector3(-18.673759, 147.206192, 7.480612) );
geometry.vertices.push( new THREE.Vector3(-15.755850, 144.913101, 10.904550) );
geometry.vertices.push( new THREE.Vector3(-15.227060, 147.407990, 11.461350) );
geometry.vertices.push( new THREE.Vector3(1.920986, 145.310196, 15.238690) );
geometry.vertices.push( new THREE.Vector3(15.755850, 144.913101, 10.904590) );
geometry.vertices.push( new THREE.Vector3(-11.565260, 149.688004, 13.095040) );
geometry.vertices.push( new THREE.Vector3(-12.358459, 146.694397, 13.472660) );
geometry.vertices.push( new THREE.Vector3(-13.937209, 150.520905, 11.335270) );
geometry.vertices.push( new THREE.Vector3(-0.000007, 145.384094, 14.638570) );
geometry.vertices.push( new THREE.Vector3(-58.459877, 122.474602, 8.583675) );
geometry.vertices.push( new THREE.Vector3(-59.260868, 121.075500, 8.847861) );
geometry.vertices.push( new THREE.Vector3(-59.346748, 120.913101, 9.383326) );
geometry.vertices.push( new THREE.Vector3(-59.342999, 122.866501, -0.087856) );
geometry.vertices.push( new THREE.Vector3(-59.898750, 122.048294, 2.224575) );
geometry.vertices.push( new THREE.Vector3(-59.200882, 122.806503, 2.294951) );
geometry.vertices.push( new THREE.Vector3(-59.947502, 121.478996, 4.767263) );
geometry.vertices.push( new THREE.Vector3(-59.108631, 122.456299, 4.782450) );
geometry.vertices.push( new THREE.Vector3(-59.599133, 121.177101, 7.241663) );
geometry.vertices.push( new THREE.Vector3(-58.672119, 122.315598, 7.101113) );
geometry.vertices.push( new THREE.Vector3(-58.390129, 122.323502, 8.244225) );
geometry.vertices.push( new THREE.Vector3(-57.176632, 123.323593, 7.329638) );
geometry.vertices.push( new THREE.Vector3(59.260868, 121.075500, 8.847861) );
geometry.vertices.push( new THREE.Vector3(58.459877, 122.474602, 8.583675) );
geometry.vertices.push( new THREE.Vector3(59.346748, 120.913101, 9.383326) );
geometry.vertices.push( new THREE.Vector3(59.599133, 121.177101, 7.241663) );
geometry.vertices.push( new THREE.Vector3(59.947502, 121.478996, 4.767263) );
geometry.vertices.push( new THREE.Vector3(59.898750, 122.048294, 2.224579) );
geometry.vertices.push( new THREE.Vector3(18.673759, 147.206192, 7.480649) );
geometry.vertices.push( new THREE.Vector3(0.000012, 157.441101, 8.442375) );
geometry.vertices.push( new THREE.Vector3(6.990712, 158.707504, 7.632188) );
geometry.vertices.push( new THREE.Vector3(12.605921, 157.176392, 7.664588) );
geometry.vertices.push( new THREE.Vector3(10.532810, 156.094894, 9.283762) );
geometry.vertices.push( new THREE.Vector3(10.247320, 159.269592, 5.920425) );
geometry.vertices.push( new THREE.Vector3(12.833360, 159.805496, 4.124588) );
geometry.vertices.push( new THREE.Vector3(14.183250, 158.374496, 5.244675) );
geometry.vertices.push( new THREE.Vector3(1.618579, 159.766098, 7.064663) );
geometry.vertices.push( new THREE.Vector3(-0.000005, 159.362198, 7.265550) );
geometry.vertices.push( new THREE.Vector3(3.254947, 160.058609, 6.574501) );
geometry.vertices.push( new THREE.Vector3(6.262425, 148.678894, 15.093189) );
geometry.vertices.push( new THREE.Vector3(5.701875, 160.608398, 5.648925) );
geometry.vertices.push( new THREE.Vector3(6.949238, 150.835495, 14.183100) );
geometry.vertices.push( new THREE.Vector3(10.111990, 151.585495, 12.760870) );
geometry.vertices.push( new THREE.Vector3(12.285070, 120.827995, 8.550375) );
geometry.vertices.push( new THREE.Vector3(9.763801, 117.094101, 10.777989) );
geometry.vertices.push( new THREE.Vector3(12.556351, 117.406906, 8.789025) );
geometry.vertices.push( new THREE.Vector3(14.732809, 121.121597, 5.325075) );
geometry.vertices.push( new THREE.Vector3(15.181459, 117.923203, 5.524163) );
geometry.vertices.push( new THREE.Vector3(9.427538, 120.462799, 10.443110) );
geometry.vertices.push( new THREE.Vector3(11.852890, 123.824600, 7.758750) );
geometry.vertices.push( new THREE.Vector3(6.763013, 120.194992, 12.589540) );
geometry.vertices.push( new THREE.Vector3(6.443175, 116.792999, 12.277241) );
geometry.vertices.push( new THREE.Vector3(3.310717, 116.649399, 12.678451) );
geometry.vertices.push( new THREE.Vector3(3.528435, 119.735298, 13.277030) );
geometry.vertices.push( new THREE.Vector3(-0.000067, 116.492607, 13.148700) );
geometry.vertices.push( new THREE.Vector3(-0.000069, 119.777298, 13.356709) );
geometry.vertices.push( new THREE.Vector3(-3.528574, 119.735298, 13.276990) );
geometry.vertices.push( new THREE.Vector3(-3.858862, 123.342804, 13.824860) );
geometry.vertices.push( new THREE.Vector3(-0.000072, 123.282394, 13.560900) );
geometry.vertices.push( new THREE.Vector3(9.425512, 123.572304, 10.035040) );
geometry.vertices.push( new THREE.Vector3(9.674212, 126.929199, 9.903151) );
geometry.vertices.push( new THREE.Vector3(11.971650, 126.801392, 7.443975) );
geometry.vertices.push( new THREE.Vector3(7.046326, 123.590195, 12.400050) );
geometry.vertices.push( new THREE.Vector3(3.858712, 123.342804, 13.824940) );
geometry.vertices.push( new THREE.Vector3(3.946387, 126.839600, 13.581000) );
geometry.vertices.push( new THREE.Vector3(-0.000063, 126.671196, 13.152111) );
geometry.vertices.push( new THREE.Vector3(7.282799, 126.924805, 12.018790) );
geometry.vertices.push( new THREE.Vector3(4.018762, 130.191696, 15.246069) );
geometry.vertices.push( new THREE.Vector3(-0.000057, 130.191696, 14.444210) );
geometry.vertices.push( new THREE.Vector3(4.139363, 133.472595, 15.838620) );
geometry.vertices.push( new THREE.Vector3(7.974039, 133.095795, 14.290690) );
geometry.vertices.push( new THREE.Vector3(7.773224, 130.097198, 13.363460) );
geometry.vertices.push( new THREE.Vector3(11.269160, 133.080399, 11.702020) );
geometry.vertices.push( new THREE.Vector3(10.378839, 130.263702, 10.796510) );
geometry.vertices.push( new THREE.Vector3(13.194341, 129.843704, 8.242163) );
geometry.vertices.push( new THREE.Vector3(13.934620, 126.767601, 4.867538) );
geometry.vertices.push( new THREE.Vector3(13.967320, 124.121201, 4.888313) );
geometry.vertices.push( new THREE.Vector3(14.692090, 133.235199, 8.664038) );
geometry.vertices.push( new THREE.Vector3(14.293011, 129.888702, 4.607925) );
geometry.vertices.push( new THREE.Vector3(16.264460, 133.303101, 4.417950) );
geometry.vertices.push( new THREE.Vector3(17.741289, 137.101105, 4.931700) );
geometry.vertices.push( new THREE.Vector3(15.096299, 136.869003, 8.563237) );
geometry.vertices.push( new THREE.Vector3(17.614201, 141.027405, 5.426699) );
geometry.vertices.push( new THREE.Vector3(15.178431, 139.771896, 8.590500) );
geometry.vertices.push( new THREE.Vector3(12.168640, 136.556198, 12.228190) );
geometry.vertices.push( new THREE.Vector3(4.115288, 136.202591, 15.437401) );
geometry.vertices.push( new THREE.Vector3(8.244074, 135.034897, 14.186250) );
geometry.vertices.push( new THREE.Vector3(8.409600, 137.084991, 14.819810) );
geometry.vertices.push( new THREE.Vector3(12.229540, 139.254700, 12.252669) );
geometry.vertices.push( new THREE.Vector3(15.453710, 142.328598, 9.332775) );
geometry.vertices.push( new THREE.Vector3(17.566580, 144.175095, 6.250800) );
geometry.vertices.push( new THREE.Vector3(8.368313, 139.664993, 14.644720) );
geometry.vertices.push( new THREE.Vector3(12.336491, 141.540390, 12.676800) );
geometry.vertices.push( new THREE.Vector3(8.137012, 142.007599, 14.786440) );
geometry.vertices.push( new THREE.Vector3(3.994612, 142.542007, 15.241949) );
geometry.vertices.push( new THREE.Vector3(4.091100, 139.768097, 15.843980) );
geometry.vertices.push( new THREE.Vector3(4.115288, 137.404495, 15.717490) );
geometry.vertices.push( new THREE.Vector3(-0.000036, 136.347000, 15.117081) );
geometry.vertices.push( new THREE.Vector3(-0.000047, 133.569000, 15.267380) );
geometry.vertices.push( new THREE.Vector3(-8.409638, 137.084991, 14.819770) );
geometry.vertices.push( new THREE.Vector3(-4.115362, 136.202591, 15.437360) );
geometry.vertices.push( new THREE.Vector3(-4.115362, 137.404495, 15.717450) );
geometry.vertices.push( new THREE.Vector3(-0.000030, 137.572510, 15.091540) );
geometry.vertices.push( new THREE.Vector3(-8.244148, 135.034897, 14.186210) );
geometry.vertices.push( new THREE.Vector3(-4.139476, 133.472595, 15.838620) );
geometry.vertices.push( new THREE.Vector3(-7.974114, 133.095795, 14.290621) );
geometry.vertices.push( new THREE.Vector3(-11.269240, 133.080399, 11.701950) );
geometry.vertices.push( new THREE.Vector3(-10.378910, 130.263702, 10.796440) );
geometry.vertices.push( new THREE.Vector3(-14.692161, 133.235199, 8.663962) );
geometry.vertices.push( new THREE.Vector3(-13.194410, 129.843704, 8.242087) );
geometry.vertices.push( new THREE.Vector3(-7.773337, 130.097198, 13.363420) );
geometry.vertices.push( new THREE.Vector3(-4.018912, 130.191696, 15.246039) );
geometry.vertices.push( new THREE.Vector3(-3.946500, 126.839600, 13.580960) );
geometry.vertices.push( new THREE.Vector3(-7.282913, 126.924805, 12.018709) );
geometry.vertices.push( new THREE.Vector3(-9.674324, 126.929199, 9.903076) );
geometry.vertices.push( new THREE.Vector3(-11.971721, 126.801392, 7.443861) );
geometry.vertices.push( new THREE.Vector3(-7.046475, 123.590195, 12.399980) );
geometry.vertices.push( new THREE.Vector3(-6.763162, 120.194992, 12.589460) );
geometry.vertices.push( new THREE.Vector3(-9.425624, 123.572304, 10.034921) );
geometry.vertices.push( new THREE.Vector3(-11.852961, 123.824600, 7.758638) );
geometry.vertices.push( new THREE.Vector3(-13.934660, 126.767601, 4.867425) );
geometry.vertices.push( new THREE.Vector3(-14.293049, 129.888702, 4.607812) );
geometry.vertices.push( new THREE.Vector3(-17.741329, 137.101105, 4.931588) );
geometry.vertices.push( new THREE.Vector3(-16.264500, 133.303101, 4.417837) );
geometry.vertices.push( new THREE.Vector3(-13.967360, 124.121201, 4.888163) );
geometry.vertices.push( new THREE.Vector3(-14.732890, 121.121597, 5.324963) );
geometry.vertices.push( new THREE.Vector3(-12.285190, 120.827995, 8.550261) );
geometry.vertices.push( new THREE.Vector3(-9.763913, 117.094101, 10.777870) );
geometry.vertices.push( new THREE.Vector3(-9.427650, 120.462799, 10.443040) );
geometry.vertices.push( new THREE.Vector3(-12.556420, 117.406906, 8.788913) );
geometry.vertices.push( new THREE.Vector3(-15.181540, 117.923203, 5.524012) );
geometry.vertices.push( new THREE.Vector3(-6.443287, 116.792999, 12.277200) );
geometry.vertices.push( new THREE.Vector3(-3.310845, 116.649399, 12.678411) );
geometry.vertices.push( new THREE.Vector3(59.346748, 120.913101, 9.383326) );
geometry.vertices.push( new THREE.Vector3(15.679351, 159.611206, 3.965625) );
geometry.vertices.push( new THREE.Vector3(-16.417841, 155.519196, 7.524787) );
geometry.vertices.push( new THREE.Vector3(-17.519661, 156.708710, 6.565725) );
geometry.vertices.push( new THREE.Vector3(-1.924211, 157.597488, 8.673787) );
geometry.vertices.push( new THREE.Vector3(-2.207764, 155.913696, 10.431750) );
geometry.vertices.push( new THREE.Vector3(-4.939012, 155.998093, 10.583099) );
geometry.vertices.push( new THREE.Vector3(-4.009238, 158.029495, 8.462138) );
geometry.vertices.push( new THREE.Vector3(-6.991876, 158.702301, 7.637064) );
geometry.vertices.push( new THREE.Vector3(-10.254490, 159.257996, 5.931450) );
geometry.vertices.push( new THREE.Vector3(-12.858790, 159.777405, 4.146488) );
geometry.vertices.push( new THREE.Vector3(-14.183250, 158.374496, 5.244675) );
geometry.vertices.push( new THREE.Vector3(-1.618583, 159.766098, 7.064663) );
geometry.vertices.push( new THREE.Vector3(-3.254955, 160.058609, 6.574501) );
geometry.vertices.push( new THREE.Vector3(-15.178460, 139.771896, 8.590425) );
geometry.vertices.push( new THREE.Vector3(-12.168670, 136.556198, 12.228150) );
geometry.vertices.push( new THREE.Vector3(-12.229610, 139.254700, 12.252640) );
geometry.vertices.push( new THREE.Vector3(-15.096339, 136.869003, 8.563162) );
geometry.vertices.push( new THREE.Vector3(-17.614231, 141.027405, 5.426624) );
geometry.vertices.push( new THREE.Vector3(-15.453750, 142.328598, 9.332737) );
geometry.vertices.push( new THREE.Vector3(-12.336491, 141.540390, 12.676800) );
geometry.vertices.push( new THREE.Vector3(-8.137012, 142.007599, 14.786400) );
geometry.vertices.push( new THREE.Vector3(-12.056700, 144.279800, 13.649400) );
geometry.vertices.push( new THREE.Vector3(-17.566608, 144.175095, 6.250762) );
geometry.vertices.push( new THREE.Vector3(-8.233163, 144.263992, 14.977950) );
geometry.vertices.push( new THREE.Vector3(-0.000012, 142.693909, 14.903140) );
geometry.vertices.push( new THREE.Vector3(-3.994650, 142.542007, 15.241949) );
geometry.vertices.push( new THREE.Vector3(-8.368351, 139.664993, 14.644720) );
geometry.vertices.push( new THREE.Vector3(-4.091137, 139.768097, 15.843940) );
geometry.vertices.push( new THREE.Vector3(-0.000024, 139.768097, 15.484910) );
geometry.vertices.push( new THREE.Vector3(-12.573040, 153.089600, 10.836340) );
geometry.vertices.push( new THREE.Vector3(-5.701875, 160.608398, 5.648925) );
geometry.vertices.push( new THREE.Vector3(-15.679351, 159.611206, 3.965625) );
geometry.vertices.push( new THREE.Vector3(-14.253449, 160.628998, 3.521419) );
geometry.vertices.push( new THREE.Vector3(-12.722810, 161.938904, 3.000405) );
geometry.vertices.push( new THREE.Vector3(-10.608860, 161.586700, 3.741491) );
geometry.vertices.push( new THREE.Vector3(-7.582201, 161.000305, 4.871438) );
geometry.vertices.push( new THREE.Vector3(-3.086801, 120.480797, -9.735450) );
geometry.vertices.push( new THREE.Vector3(0.000046, 120.910095, -10.086491) );
geometry.vertices.push( new THREE.Vector3(0.000007, 112.750099, -1.171478) );
geometry.vertices.push( new THREE.Vector3(-6.426375, 120.326996, -9.057338) );
geometry.vertices.push( new THREE.Vector3(-9.272625, 119.968498, -7.535288) );
geometry.vertices.push( new THREE.Vector3(-12.957790, 119.563103, -5.808638) );
geometry.vertices.push( new THREE.Vector3(-15.307610, 119.181396, -2.538604) );
geometry.vertices.push( new THREE.Vector3(-16.012350, 118.553307, 1.634077) );
geometry.vertices.push( new THREE.Vector3(-15.181540, 117.923203, 5.524012) );
geometry.vertices.push( new THREE.Vector3(-12.556420, 117.406906, 8.788913) );
geometry.vertices.push( new THREE.Vector3(-9.763913, 117.094101, 10.777870) );
geometry.vertices.push( new THREE.Vector3(-6.443287, 116.792999, 12.277200) );
geometry.vertices.push( new THREE.Vector3(-3.310845, 116.649399, 12.678411) );
geometry.vertices.push( new THREE.Vector3(-0.000067, 116.492607, 13.148700) );
geometry.vertices.push( new THREE.Vector3(51.742119, 128.184692, -1.934910) );
geometry.vertices.push( new THREE.Vector3(51.342369, 128.156311, -0.713482) );
geometry.vertices.push( new THREE.Vector3(51.311249, 127.976295, 0.078329) );
geometry.vertices.push( new THREE.Vector3(49.609119, 128.347504, -1.178190) );
geometry.vertices.push( new THREE.Vector3(48.549000, 129.266296, -1.867789) );
geometry.vertices.push( new THREE.Vector3(64.136620, 113.784004, 20.977350) );
geometry.vertices.push( new THREE.Vector3(63.079880, 112.982597, 20.600210) );
geometry.vertices.push( new THREE.Vector3(64.418251, 111.424896, 21.903490) );
geometry.vertices.push( new THREE.Vector3(64.671364, 110.793701, 22.143110) );
geometry.vertices.push( new THREE.Vector3(56.821869, 113.233902, 25.497978) );
geometry.vertices.push( new THREE.Vector3(56.012619, 111.949898, 25.862360) );
geometry.vertices.push( new THREE.Vector3(56.933247, 112.183105, 25.942690) );
geometry.vertices.push( new THREE.Vector3(55.817253, 113.104103, 25.354540) );
geometry.vertices.push( new THREE.Vector3(55.056381, 112.696503, 24.718571) );
geometry.vertices.push( new THREE.Vector3(55.309879, 111.760498, 25.228909) );
geometry.vertices.push( new THREE.Vector3(56.019749, 111.260605, 25.531908) );
geometry.vertices.push( new THREE.Vector3(56.947117, 111.466095, 25.790361) );
geometry.vertices.push( new THREE.Vector3(57.498001, 112.207100, 25.590149) );
geometry.vertices.push( new THREE.Vector3(57.552368, 112.945107, 25.059381) );
geometry.vertices.push( new THREE.Vector3(57.524628, 113.942596, 24.256090) );
geometry.vertices.push( new THREE.Vector3(56.790752, 114.364098, 24.892050) );
geometry.vertices.push( new THREE.Vector3(57.464249, 114.928497, 23.399330) );
geometry.vertices.push( new THREE.Vector3(56.855618, 115.333900, 24.355690) );
geometry.vertices.push( new THREE.Vector3(56.732620, 117.551300, 22.431190) );
geometry.vertices.push( new THREE.Vector3(57.310879, 115.844200, 22.577660) );
geometry.vertices.push( new THREE.Vector3(57.432003, 116.525307, 21.964870) );
geometry.vertices.push( new THREE.Vector3(56.734501, 116.636299, 23.248240) );
geometry.vertices.push( new THREE.Vector3(56.837620, 115.882507, 23.940710) );
geometry.vertices.push( new THREE.Vector3(55.521000, 115.425804, 24.442989) );
geometry.vertices.push( new THREE.Vector3(55.612869, 114.281998, 24.823200) );
geometry.vertices.push( new THREE.Vector3(54.561382, 115.021095, 23.660660) );
geometry.vertices.push( new THREE.Vector3(54.808498, 113.793396, 24.182850) );
geometry.vertices.push( new THREE.Vector3(54.012001, 117.690002, 21.020851) );
geometry.vertices.push( new THREE.Vector3(55.378502, 117.786392, 22.561541) );
geometry.vertices.push( new THREE.Vector3(55.231880, 118.747498, 21.648560) );
geometry.vertices.push( new THREE.Vector3(54.237373, 116.949699, 21.996410) );
geometry.vertices.push( new THREE.Vector3(55.544632, 116.706001, 23.301109) );
geometry.vertices.push( new THREE.Vector3(54.508503, 116.105202, 22.766510) );
geometry.vertices.push( new THREE.Vector3(55.519127, 115.908394, 24.072491) );
geometry.vertices.push( new THREE.Vector3(57.002251, 118.497002, 21.514690) );
geometry.vertices.push( new THREE.Vector3(55.019630, 119.854500, 20.428579) );
geometry.vertices.push( new THREE.Vector3(56.943001, 120.006798, 20.281910) );
geometry.vertices.push( new THREE.Vector3(58.228500, 119.734100, 20.225660) );
geometry.vertices.push( new THREE.Vector3(58.962368, 118.249092, 21.003229) );
geometry.vertices.push( new THREE.Vector3(60.465748, 118.756104, 20.486441) );
geometry.vertices.push( new THREE.Vector3(53.892368, 118.570496, 19.778770) );
geometry.vertices.push( new THREE.Vector3(62.899502, 117.543396, 20.838671) );
geometry.vertices.push( new THREE.Vector3(61.516117, 117.381706, 21.513630) );
geometry.vertices.push( new THREE.Vector3(60.019119, 116.574707, 21.417751) );
geometry.vertices.push( new THREE.Vector3(58.754246, 116.697395, 21.179359) );
geometry.vertices.push( new THREE.Vector3(57.904881, 116.835701, 21.430580) );
geometry.vertices.push( new THREE.Vector3(-20.185051, 150.121109, 6.888299) );
geometry.vertices.push( new THREE.Vector3(-20.402550, 148.841202, 5.325038) );
geometry.vertices.push( new THREE.Vector3(-19.217739, 146.738602, 3.682515) );
geometry.vertices.push( new THREE.Vector3(-21.346390, 146.072311, -0.052828) );
geometry.vertices.push( new THREE.Vector3(-20.522741, 148.249496, 2.740853) );
geometry.vertices.push( new THREE.Vector3(67.364250, 108.811501, 14.645960) );
geometry.vertices.push( new THREE.Vector3(67.205635, 106.433594, 14.638691) );
geometry.vertices.push( new THREE.Vector3(66.697868, 106.383003, 14.991940) );
geometry.vertices.push( new THREE.Vector3(66.596626, 106.012108, 14.295040) );
geometry.vertices.push( new THREE.Vector3(66.249756, 106.297897, 13.716860) );
geometry.vertices.push( new THREE.Vector3(66.696754, 106.393501, 13.619889) );
geometry.vertices.push( new THREE.Vector3(66.037498, 108.489395, 13.326940) );
geometry.vertices.push( new THREE.Vector3(66.615372, 108.839203, 13.192760) );
geometry.vertices.push( new THREE.Vector3(65.921997, 106.275703, 14.143009) );
geometry.vertices.push( new THREE.Vector3(66.116249, 106.323692, 14.796080) );
geometry.vertices.push( new THREE.Vector3(66.697868, 106.383003, 14.991940) );
geometry.vertices.push( new THREE.Vector3(66.528748, 108.800995, 15.036000) );
geometry.vertices.push( new THREE.Vector3(65.803497, 108.522705, 14.706901) );
geometry.vertices.push( new THREE.Vector3(65.647133, 108.412102, 13.898810) );
geometry.vertices.push( new THREE.Vector3(66.001129, 109.077408, 13.296599) );
geometry.vertices.push( new THREE.Vector3(65.165253, 109.786903, 13.726130) );
geometry.vertices.push( new THREE.Vector3(65.586380, 108.958900, 13.864011) );
geometry.vertices.push( new THREE.Vector3(65.654999, 109.048904, 14.607149) );
geometry.vertices.push( new THREE.Vector3(65.290131, 109.969498, 14.481900) );
geometry.vertices.push( new THREE.Vector3(66.001877, 110.605499, 14.870660) );
geometry.vertices.push( new THREE.Vector3(65.356499, 111.969803, 14.688830) );
geometry.vertices.push( new THREE.Vector3(67.499634, 104.669594, 17.902050) );
geometry.vertices.push( new THREE.Vector3(67.952255, 104.764107, 17.709860) );
geometry.vertices.push( new THREE.Vector3(67.919998, 104.579605, 18.531530) );
geometry.vertices.push( new THREE.Vector3(67.285133, 107.414604, 17.051441) );
geometry.vertices.push( new THREE.Vector3(66.729752, 107.298004, 17.770950) );
geometry.vertices.push( new THREE.Vector3(67.254753, 104.647507, 18.363230) );
geometry.vertices.push( new THREE.Vector3(66.715500, 107.428101, 18.641399) );
geometry.vertices.push( new THREE.Vector3(67.260750, 104.725899, 18.936260) );
geometry.vertices.push( new THREE.Vector3(67.271248, 107.979797, 19.216801) );
geometry.vertices.push( new THREE.Vector3(67.562996, 104.908501, 19.348761) );
geometry.vertices.push( new THREE.Vector3(66.747749, 108.062996, 18.602289) );
geometry.vertices.push( new THREE.Vector3(66.548248, 109.947800, 18.773930) );
geometry.vertices.push( new THREE.Vector3(66.717751, 107.933998, 17.705851) );
geometry.vertices.push( new THREE.Vector3(-24.138901, 152.284500, 8.512125) );
geometry.vertices.push( new THREE.Vector3(-21.471939, 151.201111, 7.967363) );
geometry.vertices.push( new THREE.Vector3(-22.589140, 154.412994, 8.539762) );
geometry.vertices.push( new THREE.Vector3(-22.129570, 149.962906, 7.469475) );
geometry.vertices.push( new THREE.Vector3(-25.824371, 150.923996, 8.211638) );
geometry.vertices.push( new THREE.Vector3(-20.518429, 150.524200, 7.137300) );
geometry.vertices.push( new THREE.Vector3(-21.055870, 149.540298, 6.114750) );
geometry.vertices.push( new THREE.Vector3(-22.376101, 149.086899, 6.355689) );
geometry.vertices.push( new THREE.Vector3(-23.135960, 148.637604, 6.054600) );
geometry.vertices.push( new THREE.Vector3(-26.912510, 149.671097, 7.812825) );
geometry.vertices.push( new THREE.Vector3(-24.770960, 147.659302, 6.003450) );
geometry.vertices.push( new THREE.Vector3(-22.705610, 146.998901, 3.602951) );
geometry.vertices.push( new THREE.Vector3(-22.020189, 148.747498, 4.390350) );
geometry.vertices.push( new THREE.Vector3(-21.087450, 149.071899, 4.823625) );
geometry.vertices.push( new THREE.Vector3(-20.402550, 148.841202, 5.325038) );
geometry.vertices.push( new THREE.Vector3(-20.522741, 148.249496, 2.740853) );
geometry.vertices.push( new THREE.Vector3(-21.631430, 148.059006, 3.220095) );
geometry.vertices.push( new THREE.Vector3(-21.346390, 146.072311, -0.052828) );
geometry.vertices.push( new THREE.Vector3(-22.328659, 145.808304, -0.104168) );
geometry.vertices.push( new THREE.Vector3(-23.804251, 144.088104, 1.429834) );
geometry.vertices.push( new THREE.Vector3(-23.840401, 145.236389, 4.219013) );
geometry.vertices.push( new THREE.Vector3(-25.620790, 141.597397, 1.539510) );
geometry.vertices.push( new THREE.Vector3(-25.431002, 143.048599, 5.041425) );
geometry.vertices.push( new THREE.Vector3(-27.213791, 139.441101, 2.007371) );
geometry.vertices.push( new THREE.Vector3(-31.009760, 141.493103, 8.256863) );
geometry.vertices.push( new THREE.Vector3(-32.230541, 137.139404, 6.105188) );
geometry.vertices.push( new THREE.Vector3(-29.462851, 138.778503, 5.955525) );
geometry.vertices.push( new THREE.Vector3(-32.017761, 136.309509, 2.380185) );
geometry.vertices.push( new THREE.Vector3(-29.176390, 137.708603, 2.112645) );
geometry.vertices.push( new THREE.Vector3(-27.396042, 140.713898, 5.632725) );
geometry.vertices.push( new THREE.Vector3(-26.701090, 145.552094, 6.870413) );
geometry.vertices.push( new THREE.Vector3(-29.116690, 148.097305, 7.300688) );
geometry.vertices.push( new THREE.Vector3(-28.749821, 143.470505, 7.866075) );
geometry.vertices.push( new THREE.Vector3(-31.006130, 146.303589, 7.908075) );
geometry.vertices.push( new THREE.Vector3(-33.183941, 144.255402, 8.554539) );
geometry.vertices.push( new THREE.Vector3(-33.387001, 148.169998, 6.412650) );
geometry.vertices.push( new THREE.Vector3(-31.799921, 150.119598, 6.280875) );
geometry.vertices.push( new THREE.Vector3(-29.674540, 151.825500, 6.891038) );
geometry.vertices.push( new THREE.Vector3(-28.734898, 152.860107, 7.225389) );
geometry.vertices.push( new THREE.Vector3(-27.271090, 154.827698, 7.594538) );
geometry.vertices.push( new THREE.Vector3(-25.396389, 156.783401, 7.381313) );
geometry.vertices.push( new THREE.Vector3(-29.915958, 156.607498, 4.159162) );
geometry.vertices.push( new THREE.Vector3(-33.561520, 150.606400, 3.804450) );
geometry.vertices.push( new THREE.Vector3(-32.535519, 152.334000, 3.552893) );
geometry.vertices.push( new THREE.Vector3(-31.766850, 154.043991, 3.814050) );
geometry.vertices.push( new THREE.Vector3(-32.712341, 154.479797, 0.606060) );
geometry.vertices.push( new THREE.Vector3(-33.640759, 152.893494, 0.765135) );
geometry.vertices.push( new THREE.Vector3(-32.922859, 154.483902, -2.927314) );
geometry.vertices.push( new THREE.Vector3(-33.615520, 152.882202, -2.724990) );
geometry.vertices.push( new THREE.Vector3(-32.142452, 153.573410, -5.118263) );
geometry.vertices.push( new THREE.Vector3(-32.827648, 152.721405, -4.648238) );
geometry.vertices.push( new THREE.Vector3(-34.478291, 151.815002, -2.320515) );
geometry.vertices.push( new THREE.Vector3(-34.786011, 151.127594, 0.901598) );
geometry.vertices.push( new THREE.Vector3(-36.013458, 149.512512, 1.014034) );
geometry.vertices.push( new THREE.Vector3(-34.859810, 148.959000, 3.960975) );
geometry.vertices.push( new THREE.Vector3(-35.535259, 142.045502, 8.550036) );
geometry.vertices.push( new THREE.Vector3(-37.833752, 139.886612, 7.756688) );
geometry.vertices.push( new THREE.Vector3(-40.833000, 137.337402, 6.971963) );
geometry.vertices.push( new THREE.Vector3(-42.159752, 135.300003, 7.328437) );
geometry.vertices.push( new THREE.Vector3(-44.358002, 135.947296, 8.830575) );
geometry.vertices.push( new THREE.Vector3(-40.441502, 132.887192, 6.701175) );
geometry.vertices.push( new THREE.Vector3(-43.286247, 134.103806, 8.633588) );
geometry.vertices.push( new THREE.Vector3(-41.660999, 131.408295, 7.599188) );
geometry.vertices.push( new THREE.Vector3(-39.344631, 130.248398, 4.466213) );
geometry.vertices.push( new THREE.Vector3(-40.810120, 128.695496, 5.488913) );
geometry.vertices.push( new THREE.Vector3(-37.416492, 132.799500, 3.165405) );
geometry.vertices.push( new THREE.Vector3(-38.809120, 135.152603, 5.773687) );
geometry.vertices.push( new THREE.Vector3(-36.352909, 137.803101, 7.444012) );
geometry.vertices.push( new THREE.Vector3(-33.478909, 139.492493, 8.133825) );
geometry.vertices.push( new THREE.Vector3(-35.373791, 136.303894, 6.058575) );
geometry.vertices.push( new THREE.Vector3(-35.086651, 135.052094, 2.958075) );
geometry.vertices.push( new THREE.Vector3(-27.459749, 159.116302, 4.332037) );
geometry.vertices.push( new THREE.Vector3(-23.122009, 159.084000, 6.421125) );
geometry.vertices.push( new THREE.Vector3(-24.532459, 160.929413, 3.884250) );
geometry.vertices.push( new THREE.Vector3(-20.608690, 160.374695, 4.751325) );
geometry.vertices.push( new THREE.Vector3(-18.970079, 158.221497, 6.521700) );
geometry.vertices.push( new THREE.Vector3(-20.948509, 156.533600, 8.050725) );
geometry.vertices.push( new THREE.Vector3(-17.141590, 161.359497, 2.678715) );
geometry.vertices.push( new THREE.Vector3(-18.224850, 162.057693, 1.306556) );
geometry.vertices.push( new THREE.Vector3(-21.841280, 161.797501, 2.737429) );
geometry.vertices.push( new THREE.Vector3(-25.320860, 161.824493, 0.522780) );
geometry.vertices.push( new THREE.Vector3(-28.519758, 159.955093, 0.857745) );
geometry.vertices.push( new THREE.Vector3(-30.970350, 157.251709, 0.718016) );
geometry.vertices.push( new THREE.Vector3(-31.296339, 157.354111, -2.955829) );
geometry.vertices.push( new THREE.Vector3(-25.352591, 161.697403, -2.835776) );
geometry.vertices.push( new THREE.Vector3(-28.444311, 159.907104, -2.903809) );
geometry.vertices.push( new THREE.Vector3(-22.619360, 162.607895, 0.023322) );
geometry.vertices.push( new THREE.Vector3(-19.727329, 162.966797, -0.475939) );
geometry.vertices.push( new THREE.Vector3(-18.058430, 163.145599, -0.532804) );
geometry.vertices.push( new THREE.Vector3(-16.018200, 162.584610, 1.787291) );
geometry.vertices.push( new THREE.Vector3(-15.679351, 159.611206, 3.965625) );
geometry.vertices.push( new THREE.Vector3(-14.253449, 160.628998, 3.521419) );
geometry.vertices.push( new THREE.Vector3(-12.722810, 161.938904, 3.000405) );
geometry.vertices.push( new THREE.Vector3(-24.809401, 160.995407, -6.203475) );
geometry.vertices.push( new THREE.Vector3(-27.586910, 159.267395, -6.228562) );
geometry.vertices.push( new THREE.Vector3(-22.859180, 162.772903, -2.757075) );
geometry.vertices.push( new THREE.Vector3(-20.632090, 163.418991, -2.786486) );
geometry.vertices.push( new THREE.Vector3(-19.036390, 163.564896, -2.789096) );
geometry.vertices.push( new THREE.Vector3(-21.201040, 162.498001, -5.790600) );
geometry.vertices.push( new THREE.Vector3(-19.597349, 163.352997, -5.313412) );
geometry.vertices.push( new THREE.Vector3(-20.643789, 161.167099, -8.635688) );
geometry.vertices.push( new THREE.Vector3(-23.537960, 159.160095, -9.173363) );
geometry.vertices.push( new THREE.Vector3(-23.071430, 155.732590, -11.054811) );
geometry.vertices.push( new THREE.Vector3(-19.166140, 162.664108, -7.785111) );
geometry.vertices.push( new THREE.Vector3(-17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(-19.264009, 159.223495, -11.283710) );
geometry.vertices.push( new THREE.Vector3(-21.403200, 157.202988, -11.528851) );
geometry.vertices.push( new THREE.Vector3(-20.518429, 150.524200, 7.137300) );
geometry.vertices.push( new THREE.Vector3(-20.185051, 150.121109, 6.888299) );
geometry.vertices.push( new THREE.Vector3(4.221375, 118.120895, 14.305730) );
geometry.vertices.push( new THREE.Vector3(-0.000075, 117.995598, 14.602990) );
geometry.vertices.push( new THREE.Vector3(4.120125, 117.973900, 14.588851) );
geometry.vertices.push( new THREE.Vector3(-0.000073, 118.133606, 14.322640) );
geometry.vertices.push( new THREE.Vector3(-4.221525, 118.120895, 14.305690) );
geometry.vertices.push( new THREE.Vector3(-4.120275, 117.973900, 14.588811) );
geometry.vertices.push( new THREE.Vector3(-0.000072, 118.165100, 13.989189) );
geometry.vertices.push( new THREE.Vector3(4.212300, 118.142998, 13.948500) );
geometry.vertices.push( new THREE.Vector3(-0.000071, 118.097305, 13.744800) );
geometry.vertices.push( new THREE.Vector3(4.218412, 118.034996, 13.645090) );
geometry.vertices.push( new THREE.Vector3(-4.212450, 118.142998, 13.948460) );
geometry.vertices.push( new THREE.Vector3(-4.218562, 118.034996, 13.645050) );
geometry.vertices.push( new THREE.Vector3(-4.252200, 110.832001, 13.099350) );
geometry.vertices.push( new THREE.Vector3(-4.268250, 111.117401, 12.985089) );
geometry.vertices.push( new THREE.Vector3(-4.242713, 111.018394, 12.890440) );
geometry.vertices.push( new THREE.Vector3(-4.293787, 111.216400, 13.079781) );
geometry.vertices.push( new THREE.Vector3(-4.256775, 110.800507, 13.448850) );
geometry.vertices.push( new THREE.Vector3(-4.239150, 114.460899, 13.877251) );
geometry.vertices.push( new THREE.Vector3(-4.103213, 110.880806, 13.763550) );
geometry.vertices.push( new THREE.Vector3(-4.111725, 114.427498, 14.176160) );
geometry.vertices.push( new THREE.Vector3(-4.221525, 118.120895, 14.305690) );
geometry.vertices.push( new THREE.Vector3(-4.269225, 117.692604, 13.811320) );
geometry.vertices.push( new THREE.Vector3(-4.212450, 118.142998, 13.948460) );
geometry.vertices.push( new THREE.Vector3(-4.218562, 118.034996, 13.645050) );
geometry.vertices.push( new THREE.Vector3(-4.281488, 114.454498, 13.445550) );
geometry.vertices.push( new THREE.Vector3(-4.242713, 111.018394, 12.890440) );
geometry.vertices.push( new THREE.Vector3(-0.000048, 110.822594, 13.088099) );
geometry.vertices.push( new THREE.Vector3(-4.252200, 110.832001, 13.099350) );
geometry.vertices.push( new THREE.Vector3(-0.000047, 110.924995, 12.832991) );
geometry.vertices.push( new THREE.Vector3(4.242637, 111.018394, 12.890480) );
geometry.vertices.push( new THREE.Vector3(4.252087, 110.832001, 13.099390) );
geometry.vertices.push( new THREE.Vector3(4.256700, 110.800507, 13.448890) );
geometry.vertices.push( new THREE.Vector3(-0.000049, 110.796700, 13.439210) );
geometry.vertices.push( new THREE.Vector3(-0.000050, 110.894302, 13.777309) );
geometry.vertices.push( new THREE.Vector3(-4.256775, 110.800507, 13.448850) );
geometry.vertices.push( new THREE.Vector3(4.103138, 110.880806, 13.763550) );
geometry.vertices.push( new THREE.Vector3(4.268175, 111.117401, 12.985129) );
geometry.vertices.push( new THREE.Vector3(4.252087, 110.832001, 13.099390) );
geometry.vertices.push( new THREE.Vector3(4.242637, 111.018394, 12.890480) );
geometry.vertices.push( new THREE.Vector3(4.293675, 111.216400, 13.079781) );
geometry.vertices.push( new THREE.Vector3(4.256700, 110.800507, 13.448890) );
geometry.vertices.push( new THREE.Vector3(4.239038, 114.460899, 13.877291) );
geometry.vertices.push( new THREE.Vector3(4.111613, 114.427498, 14.176200) );
geometry.vertices.push( new THREE.Vector3(4.221375, 118.120895, 14.305730) );
geometry.vertices.push( new THREE.Vector3(4.269075, 117.692604, 13.811360) );
geometry.vertices.push( new THREE.Vector3(4.212300, 118.142998, 13.948500) );
geometry.vertices.push( new THREE.Vector3(4.218412, 118.034996, 13.645090) );
geometry.vertices.push( new THREE.Vector3(4.281375, 114.454498, 13.445590) );
geometry.vertices.push( new THREE.Vector3(-4.111725, 114.427498, 14.176160) );
geometry.vertices.push( new THREE.Vector3(-0.000075, 117.995598, 14.602990) );
geometry.vertices.push( new THREE.Vector3(-4.120275, 117.973900, 14.588811) );
geometry.vertices.push( new THREE.Vector3(-0.000061, 114.445099, 14.190149) );
geometry.vertices.push( new THREE.Vector3(-4.103213, 110.880806, 13.763550) );
geometry.vertices.push( new THREE.Vector3(-0.000050, 110.894302, 13.777309) );
geometry.vertices.push( new THREE.Vector3(4.103138, 110.880806, 13.763550) );
geometry.vertices.push( new THREE.Vector3(4.111613, 114.427498, 14.176200) );
geometry.vertices.push( new THREE.Vector3(4.120125, 117.973900, 14.588851) );
geometry.vertices.push( new THREE.Vector3(-9.995214, 121.878693, -8.180099) );
geometry.vertices.push( new THREE.Vector3(-6.792188, 121.867500, -9.820351) );
geometry.vertices.push( new THREE.Vector3(-10.126201, 121.653000, -8.396512) );
geometry.vertices.push( new THREE.Vector3(-6.715425, 122.097000, -9.605400) );
geometry.vertices.push( new THREE.Vector3(-9.494850, 121.796593, -7.539375) );
geometry.vertices.push( new THREE.Vector3(-12.375939, 121.389404, -5.394300) );
geometry.vertices.push( new THREE.Vector3(-12.977961, 121.441902, -5.893425) );
geometry.vertices.push( new THREE.Vector3(-14.509871, 120.918800, -2.321422) );
geometry.vertices.push( new THREE.Vector3(-6.914100, 118.726501, -10.654090) );
geometry.vertices.push( new THREE.Vector3(-3.141098, 121.930504, -10.719040) );
geometry.vertices.push( new THREE.Vector3(-3.202785, 118.771507, -11.504020) );
geometry.vertices.push( new THREE.Vector3(-3.130684, 122.165596, -10.539260) );
geometry.vertices.push( new THREE.Vector3(-6.324150, 122.007797, -8.849737) );
geometry.vertices.push( new THREE.Vector3(-6.312113, 121.797394, -8.741776) );
geometry.vertices.push( new THREE.Vector3(-9.410138, 121.596703, -7.428750) );
geometry.vertices.push( new THREE.Vector3(-12.230210, 121.179703, -5.267138) );
geometry.vertices.push( new THREE.Vector3(-2.992988, 122.077896, -9.744975) );
geometry.vertices.push( new THREE.Vector3(0.000049, 121.929398, -10.823060) );
geometry.vertices.push( new THREE.Vector3(0.000048, 122.139000, -10.691020) );
geometry.vertices.push( new THREE.Vector3(0.000045, 122.105598, -9.947775) );
geometry.vertices.push( new THREE.Vector3(-2.956942, 121.862602, -9.580612) );
geometry.vertices.push( new THREE.Vector3(0.000043, 121.853996, -9.685650) );
geometry.vertices.push( new THREE.Vector3(-15.290210, 120.945801, -2.611912) );
geometry.vertices.push( new THREE.Vector3(-13.133810, 121.222099, -6.052162) );
geometry.vertices.push( new THREE.Vector3(-10.285800, 118.499603, -9.114750) );
geometry.vertices.push( new THREE.Vector3(-9.569212, 118.465103, 10.591910) );
geometry.vertices.push( new THREE.Vector3(-6.897375, 118.109596, 12.958611) );
geometry.vertices.push( new THREE.Vector3(-6.528375, 118.191002, 12.270340) );
geometry.vertices.push( new THREE.Vector3(-10.212560, 118.426895, 11.207810) );
geometry.vertices.push( new THREE.Vector3(-12.229310, 118.925201, 8.566612) );
geometry.vertices.push( new THREE.Vector3(-12.986620, 118.926003, 8.968050) );
geometry.vertices.push( new THREE.Vector3(-14.465170, 119.525597, 5.298000) );
geometry.vertices.push( new THREE.Vector3(-15.261941, 119.584892, 5.483700) );
geometry.vertices.push( new THREE.Vector3(-15.339860, 120.217896, 1.653885) );
geometry.vertices.push( new THREE.Vector3(-14.337070, 120.712105, -2.252299) );
geometry.vertices.push( new THREE.Vector3(-15.140590, 120.055496, 1.665735) );
geometry.vertices.push( new THREE.Vector3(-14.270590, 119.361404, 5.239200) );
geometry.vertices.push( new THREE.Vector3(-12.129110, 118.667999, 8.439150) );
geometry.vertices.push( new THREE.Vector3(-9.488812, 118.210098, 10.450720) );
geometry.vertices.push( new THREE.Vector3(-6.481725, 117.944298, 12.043420) );
geometry.vertices.push( new THREE.Vector3(-3.932288, 117.857208, 12.682840) );
geometry.vertices.push( new THREE.Vector3(-3.971850, 118.100998, 12.929251) );
geometry.vertices.push( new THREE.Vector3(-4.218562, 118.034996, 13.645050) );
geometry.vertices.push( new THREE.Vector3(-14.694110, 114.136902, -3.524415) );
geometry.vertices.push( new THREE.Vector3(-15.626619, 113.328400, 0.562140) );
geometry.vertices.push( new THREE.Vector3(-14.919260, 112.621101, 4.364587) );
geometry.vertices.push( new THREE.Vector3(-12.750260, 111.775101, 8.011950) );
geometry.vertices.push( new THREE.Vector3(-14.583599, 114.250900, -3.471488) );
geometry.vertices.push( new THREE.Vector3(-15.508801, 113.443100, 0.586043) );
geometry.vertices.push( new THREE.Vector3(-12.639339, 111.893997, 7.961437) );
geometry.vertices.push( new THREE.Vector3(-10.325850, 111.438004, 9.752887) );
geometry.vertices.push( new THREE.Vector3(-15.324710, 116.749100, 1.125881) );
geometry.vertices.push( new THREE.Vector3(-14.460340, 117.481506, -2.861899) );
geometry.vertices.push( new THREE.Vector3(-12.443960, 117.972008, -5.897662) );
geometry.vertices.push( new THREE.Vector3(-9.502350, 118.372498, -8.183175) );
geometry.vertices.push( new THREE.Vector3(-14.270590, 119.361404, 5.239200) );
geometry.vertices.push( new THREE.Vector3(-15.140590, 120.055496, 1.665735) );
geometry.vertices.push( new THREE.Vector3(-14.337070, 120.712105, -2.252299) );
geometry.vertices.push( new THREE.Vector3(-12.230210, 121.179703, -5.267138) );
geometry.vertices.push( new THREE.Vector3(-9.410138, 121.596703, -7.428750) );
geometry.vertices.push( new THREE.Vector3(8.020500, 111.112106, 11.096770) );
geometry.vertices.push( new THREE.Vector3(10.245080, 111.561798, 9.673614) );
geometry.vertices.push( new THREE.Vector3(10.325770, 111.438004, 9.752962) );
geometry.vertices.push( new THREE.Vector3(12.639260, 111.894402, 7.961513) );
geometry.vertices.push( new THREE.Vector3(12.528340, 112.013199, 7.910962) );
geometry.vertices.push( new THREE.Vector3(10.164380, 111.685501, 9.594299) );
geometry.vertices.push( new THREE.Vector3(12.750191, 111.775101, 8.012025) );
geometry.vertices.push( new THREE.Vector3(14.800350, 112.736198, 4.352062) );
geometry.vertices.push( new THREE.Vector3(14.919230, 112.621101, 4.364700) );
geometry.vertices.push( new THREE.Vector3(15.038140, 112.505997, 4.377338) );
geometry.vertices.push( new THREE.Vector3(5.489288, 110.996605, 12.555229) );
geometry.vertices.push( new THREE.Vector3(5.241638, 111.017593, 11.867620) );
geometry.vertices.push( new THREE.Vector3(8.317388, 111.079895, 11.816590) );
geometry.vertices.push( new THREE.Vector3(10.849569, 111.385498, 10.414460) );
geometry.vertices.push( new THREE.Vector3(13.486610, 111.752998, 8.492137) );
geometry.vertices.push( new THREE.Vector3(15.896890, 112.517204, 4.574587) );
geometry.vertices.push( new THREE.Vector3(15.744411, 113.213600, 0.538339) );
geometry.vertices.push( new THREE.Vector3(8.332725, 111.197304, 11.880940) );
geometry.vertices.push( new THREE.Vector3(5.509762, 111.105003, 12.634730) );
geometry.vertices.push( new THREE.Vector3(10.877210, 111.482597, 10.456840) );
geometry.vertices.push( new THREE.Vector3(8.348100, 111.315002, 11.945291) );
geometry.vertices.push( new THREE.Vector3(5.530200, 111.213699, 12.714259) );
geometry.vertices.push( new THREE.Vector3(4.293675, 111.216400, 13.079781) );
geometry.vertices.push( new THREE.Vector3(4.268175, 111.117401, 12.985129) );
geometry.vertices.push( new THREE.Vector3(4.242637, 111.018394, 12.890480) );
geometry.vertices.push( new THREE.Vector3(9.826538, 114.947601, 10.022550) );
geometry.vertices.push( new THREE.Vector3(7.927763, 111.355904, 10.902940) );
geometry.vertices.push( new THREE.Vector3(7.204689, 114.650200, 11.473240) );
geometry.vertices.push( new THREE.Vector3(5.160450, 111.257599, 11.669889) );
geometry.vertices.push( new THREE.Vector3(5.201063, 111.137604, 11.768780) );
geometry.vertices.push( new THREE.Vector3(4.009388, 111.146294, 12.134359) );
geometry.vertices.push( new THREE.Vector3(4.044225, 111.028099, 12.235200) );
geometry.vertices.push( new THREE.Vector3(3.974587, 111.264397, 12.033530) );
geometry.vertices.push( new THREE.Vector3(3.953363, 114.560608, 12.358200) );
geometry.vertices.push( new THREE.Vector3(5.821013, 114.600800, 11.856710) );
geometry.vertices.push( new THREE.Vector3(9.488700, 118.210098, 10.450800) );
geometry.vertices.push( new THREE.Vector3(6.481612, 117.944298, 12.043500) );
geometry.vertices.push( new THREE.Vector3(3.932137, 117.857208, 12.682870) );
geometry.vertices.push( new THREE.Vector3(14.337070, 120.712105, -2.252160) );
geometry.vertices.push( new THREE.Vector3(12.444000, 117.972008, -5.897550) );
geometry.vertices.push( new THREE.Vector3(14.460340, 117.481506, -2.861768) );
geometry.vertices.push( new THREE.Vector3(15.140550, 120.055496, 1.665881) );
geometry.vertices.push( new THREE.Vector3(15.324670, 116.749100, 1.126020) );
geometry.vertices.push( new THREE.Vector3(14.270510, 119.361404, 5.239350) );
geometry.vertices.push( new THREE.Vector3(14.535411, 116.048599, 4.795725) );
geometry.vertices.push( new THREE.Vector3(12.129040, 118.667999, 8.439263) );
geometry.vertices.push( new THREE.Vector3(12.328691, 115.340599, 8.175113) );
geometry.vertices.push( new THREE.Vector3(15.626590, 113.328400, 0.562238) );
geometry.vertices.push( new THREE.Vector3(15.508801, 113.443100, 0.586147) );
geometry.vertices.push( new THREE.Vector3(14.583599, 114.250900, -3.471390) );
geometry.vertices.push( new THREE.Vector3(12.657749, 114.763901, -6.528150) );
geometry.vertices.push( new THREE.Vector3(9.594637, 115.147903, -8.937525) );
geometry.vertices.push( new THREE.Vector3(14.694150, 114.136902, -3.524321) );
geometry.vertices.push( new THREE.Vector3(12.744530, 114.653305, -6.620737) );
geometry.vertices.push( new THREE.Vector3(9.672900, 115.038803, -9.046987) );
geometry.vertices.push( new THREE.Vector3(6.396976, 115.296700, -10.646140) );
geometry.vertices.push( new THREE.Vector3(6.331088, 115.406296, -10.521190) );
geometry.vertices.push( new THREE.Vector3(6.462862, 115.187302, -10.771130) );
geometry.vertices.push( new THREE.Vector3(9.751163, 114.930000, -9.156412) );
geometry.vertices.push( new THREE.Vector3(12.831301, 114.542198, -6.713325) );
geometry.vertices.push( new THREE.Vector3(14.804660, 114.023300, -3.577249) );
geometry.vertices.push( new THREE.Vector3(16.591089, 113.229004, 0.468941) );
geometry.vertices.push( new THREE.Vector3(15.562160, 114.041306, -3.829013) );
geometry.vertices.push( new THREE.Vector3(13.449981, 114.573799, -7.194975) );
geometry.vertices.push( new THREE.Vector3(10.335791, 114.972702, -9.777075) );
geometry.vertices.push( new THREE.Vector3(6.967913, 115.218697, -11.476610) );
geometry.vertices.push( new THREE.Vector3(3.276109, 115.271202, -12.270900) );
geometry.vertices.push( new THREE.Vector3(3.270319, 115.441895, -12.279940) );
geometry.vertices.push( new THREE.Vector3(3.264536, 115.612495, -12.288980) );
geometry.vertices.push( new THREE.Vector3(2.993078, 122.077896, -9.744937) );
geometry.vertices.push( new THREE.Vector3(-17.519661, 156.708710, 6.565725) );
geometry.vertices.push( new THREE.Vector3(-30.116779, 156.652496, -6.240750) );
geometry.vertices.push( new THREE.Vector3(-28.121141, 154.822189, -8.585512) );
geometry.vertices.push( new THREE.Vector3(-30.638922, 152.769394, -7.068750) );
geometry.vertices.push( new THREE.Vector3(13.798240, 113.866493, -9.146025) );
geometry.vertices.push( new THREE.Vector3(14.203159, 118.095398, -7.667325) );
geometry.vertices.push( new THREE.Vector3(14.453851, 113.786995, -8.607637) );
geometry.vertices.push( new THREE.Vector3(13.547550, 118.174896, -8.205713) );
geometry.vertices.push( new THREE.Vector3(12.959440, 113.849998, -9.294787) );
geometry.vertices.push( new THREE.Vector3(12.708751, 118.158401, -8.354475) );
geometry.vertices.push( new THREE.Vector3(12.162189, 113.742401, -9.014063) );
geometry.vertices.push( new THREE.Vector3(11.911500, 118.050804, -8.073712) );
geometry.vertices.push( new THREE.Vector3(11.660810, 122.359505, -7.133399) );
geometry.vertices.push( new THREE.Vector3(12.458060, 122.467102, -7.414125) );
geometry.vertices.push( new THREE.Vector3(13.296861, 122.483299, -7.265363) );
geometry.vertices.push( new THREE.Vector3(13.952470, 122.404099, -6.727013) );
geometry.vertices.push( new THREE.Vector3(14.499940, 117.941597, -6.883575) );
geometry.vertices.push( new THREE.Vector3(14.249250, 122.250000, -5.943225) );
geometry.vertices.push( new THREE.Vector3(14.358300, 117.754898, -6.064462) );
geometry.vertices.push( new THREE.Vector3(14.107611, 122.063194, -5.124113) );
geometry.vertices.push( new THREE.Vector3(13.816280, 117.584595, -5.429438) );
geometry.vertices.push( new THREE.Vector3(13.565590, 121.892998, -4.489125) );
geometry.vertices.push( new THREE.Vector3(13.019030, 117.476997, -5.148713) );
geometry.vertices.push( new THREE.Vector3(12.768340, 121.785400, -4.208362) );
geometry.vertices.push( new THREE.Vector3(13.269711, 113.168594, -6.089025) );
geometry.vertices.push( new THREE.Vector3(12.180230, 117.460503, -5.297475) );
geometry.vertices.push( new THREE.Vector3(12.430910, 113.152100, -6.237788) );
geometry.vertices.push( new THREE.Vector3(14.066960, 113.276199, -6.369787) );
geometry.vertices.push( new THREE.Vector3(14.608990, 113.446106, -7.004775) );
geometry.vertices.push( new THREE.Vector3(14.750629, 113.633301, -7.823887) );
geometry.vertices.push( new THREE.Vector3(11.929541, 121.768906, -4.357125) );
geometry.vertices.push( new THREE.Vector3(11.524611, 117.540001, -5.835862) );
geometry.vertices.push( new THREE.Vector3(11.273931, 121.848404, -4.895513) );
geometry.vertices.push( new THREE.Vector3(11.227840, 117.693695, -6.619613) );
geometry.vertices.push( new THREE.Vector3(10.977150, 122.002098, -5.679262) );
geometry.vertices.push( new THREE.Vector3(11.369470, 117.880905, -7.438725) );
geometry.vertices.push( new THREE.Vector3(11.118790, 122.189201, -6.498413) );
geometry.vertices.push( new THREE.Vector3(11.911500, 118.050804, -8.073712) );
geometry.vertices.push( new THREE.Vector3(11.660810, 122.359505, -7.133399) );
geometry.vertices.push( new THREE.Vector3(12.162189, 113.742401, -9.014063) );
geometry.vertices.push( new THREE.Vector3(11.620160, 113.572098, -8.379038) );
geometry.vertices.push( new THREE.Vector3(11.478520, 113.385406, -7.559925) );
geometry.vertices.push( new THREE.Vector3(11.775300, 113.231598, -6.776175) );
geometry.vertices.push( new THREE.Vector3(6.065888, 114.747406, -13.499061) );
geometry.vertices.push( new THREE.Vector3(6.711637, 119.068100, -12.426410) );
geometry.vertices.push( new THREE.Vector3(6.916837, 114.790108, -13.506190) );
geometry.vertices.push( new THREE.Vector3(5.860688, 119.025803, -12.419291) );
geometry.vertices.push( new THREE.Vector3(5.337637, 114.606796, -13.079781) );
geometry.vertices.push( new THREE.Vector3(5.132400, 118.884804, -12.000000) );
geometry.vertices.push( new THREE.Vector3(4.927163, 114.405800, -12.360710) );
geometry.vertices.push( new THREE.Vector3(4.721963, 118.683800, -11.280940) );
geometry.vertices.push( new THREE.Vector3(4.516762, 122.961700, -10.201159) );
geometry.vertices.push( new THREE.Vector3(4.927200, 123.162697, -10.920230) );
geometry.vertices.push( new THREE.Vector3(5.655488, 123.303696, -11.339470) );
geometry.vertices.push( new THREE.Vector3(6.506437, 123.346100, -11.346640) );
geometry.vertices.push( new THREE.Vector3(7.457251, 119.001404, -12.019541) );
geometry.vertices.push( new THREE.Vector3(7.252050, 123.279404, -10.939720) );
geometry.vertices.push( new THREE.Vector3(7.897763, 118.842804, -11.307600) );
geometry.vertices.push( new THREE.Vector3(7.692563, 123.120705, -10.227820) );
geometry.vertices.push( new THREE.Vector3(7.915088, 118.635002, -10.481441) );
geometry.vertices.push( new THREE.Vector3(7.709888, 122.913002, -9.401663) );
geometry.vertices.push( new THREE.Vector3(7.504649, 118.433998, -9.762375) );
geometry.vertices.push( new THREE.Vector3(7.299450, 122.712006, -8.682600) );
geometry.vertices.push( new THREE.Vector3(7.709850, 114.155998, -10.842150) );
geometry.vertices.push( new THREE.Vector3(6.776362, 118.292999, -9.343125) );
geometry.vertices.push( new THREE.Vector3(6.981563, 114.014992, -10.422900) );
geometry.vertices.push( new THREE.Vector3(8.120325, 114.356995, -11.561210) );
geometry.vertices.push( new THREE.Vector3(8.102962, 114.564804, -12.387380) );
geometry.vertices.push( new THREE.Vector3(7.662450, 114.723396, -13.099310) );
geometry.vertices.push( new THREE.Vector3(6.571162, 122.571007, -8.263350) );
geometry.vertices.push( new THREE.Vector3(5.925412, 118.250595, -9.335962) );
geometry.vertices.push( new THREE.Vector3(5.720212, 122.528603, -8.256187) );
geometry.vertices.push( new THREE.Vector3(5.179800, 118.317398, -9.742875) );
geometry.vertices.push( new THREE.Vector3(4.974600, 122.595406, -8.663100) );
geometry.vertices.push( new THREE.Vector3(4.739287, 118.475998, -10.454770) );
geometry.vertices.push( new THREE.Vector3(4.534087, 122.753998, -9.375000) );
geometry.vertices.push( new THREE.Vector3(4.721963, 118.683800, -11.280940) );
geometry.vertices.push( new THREE.Vector3(4.516762, 122.961700, -10.201159) );
geometry.vertices.push( new THREE.Vector3(4.927163, 114.405800, -12.360710) );
geometry.vertices.push( new THREE.Vector3(4.944488, 114.198006, -11.534550) );
geometry.vertices.push( new THREE.Vector3(5.385000, 114.039398, -10.822650) );
geometry.vertices.push( new THREE.Vector3(6.130612, 113.972603, -10.415740) );
geometry.vertices.push( new THREE.Vector3(17.935801, 112.469307, -0.945255) );
geometry.vertices.push( new THREE.Vector3(17.846960, 116.713501, 0.542130) );
geometry.vertices.push( new THREE.Vector3(18.157990, 112.359001, -0.130062) );
geometry.vertices.push( new THREE.Vector3(17.624811, 116.823402, -0.273059) );
geometry.vertices.push( new THREE.Vector3(17.333210, 112.518799, -1.545589) );
geometry.vertices.push( new THREE.Vector3(17.022190, 116.873299, -0.873394) );
geometry.vertices.push( new THREE.Vector3(16.511629, 112.494804, -1.770202) );
geometry.vertices.push( new THREE.Vector3(16.200640, 116.849197, -1.098011) );
geometry.vertices.push( new THREE.Vector3(15.889650, 121.203804, -0.425809) );
geometry.vertices.push( new THREE.Vector3(16.711199, 121.227707, -0.201190) );
geometry.vertices.push( new THREE.Vector3(17.313789, 121.177902, 0.399146) );
geometry.vertices.push( new THREE.Vector3(17.535980, 121.068001, 1.214336) );
geometry.vertices.push( new THREE.Vector3(17.629200, 116.572906, 1.353750) );
geometry.vertices.push( new THREE.Vector3(17.318180, 120.927002, 2.025953) );
geometry.vertices.push( new THREE.Vector3(17.029800, 116.438606, 1.944319) );
geometry.vertices.push( new THREE.Vector3(16.718779, 120.793106, 2.616525) );
geometry.vertices.push( new THREE.Vector3(16.209410, 116.347504, 2.155605) );
geometry.vertices.push( new THREE.Vector3(15.898420, 120.702003, 2.827811) );
geometry.vertices.push( new THREE.Vector3(15.387860, 116.323494, 1.930987) );
geometry.vertices.push( new THREE.Vector3(15.076839, 120.677994, 2.603190) );
geometry.vertices.push( new THREE.Vector3(15.698851, 111.968994, 1.258796) );
geometry.vertices.push( new THREE.Vector3(14.785240, 116.373001, 1.330657) );
geometry.vertices.push( new THREE.Vector3(15.096261, 112.018898, 0.658463) );
geometry.vertices.push( new THREE.Vector3(16.520441, 111.993004, 1.483414) );
geometry.vertices.push( new THREE.Vector3(17.340790, 112.084106, 1.272124) );
geometry.vertices.push( new THREE.Vector3(17.940191, 112.218407, 0.681555) );
geometry.vertices.push( new THREE.Vector3(14.474251, 120.727501, 2.002856) );
geometry.vertices.push( new THREE.Vector3(14.563089, 116.483200, 0.515464) );
geometry.vertices.push( new THREE.Vector3(14.252061, 120.837402, 1.187662) );
geometry.vertices.push( new THREE.Vector3(14.780850, 116.623901, -0.296155) );
geometry.vertices.push( new THREE.Vector3(14.469860, 120.978401, 0.376046) );
geometry.vertices.push( new THREE.Vector3(15.380250, 116.757797, -0.886729) );
geometry.vertices.push( new THREE.Vector3(15.069260, 121.112297, -0.214525) );
geometry.vertices.push( new THREE.Vector3(16.200640, 116.849197, -1.098011) );
geometry.vertices.push( new THREE.Vector3(15.889650, 121.203804, -0.425809) );
geometry.vertices.push( new THREE.Vector3(16.511629, 112.494804, -1.770202) );
geometry.vertices.push( new THREE.Vector3(15.691240, 112.403595, -1.558920) );
geometry.vertices.push( new THREE.Vector3(15.091880, 112.269402, -0.968347) );
geometry.vertices.push( new THREE.Vector3(14.874080, 112.128700, -0.156731) );
geometry.vertices.push( new THREE.Vector3(-42.803631, 135.214905, -6.568425) );
geometry.vertices.push( new THREE.Vector3(-45.197632, 132.836609, -4.362413) );
geometry.vertices.push( new THREE.Vector3(38.372620, 146.854492, -5.868938) );
geometry.vertices.push( new THREE.Vector3(37.895630, 144.673096, -6.504638) );
geometry.vertices.push( new THREE.Vector3(38.453999, 138.500198, -7.556250) );
geometry.vertices.push( new THREE.Vector3(36.537380, 140.117996, -8.170462) );
geometry.vertices.push( new THREE.Vector3(34.689827, 141.863297, -8.774438) );
geometry.vertices.push( new THREE.Vector3(33.167587, 143.632904, -8.831700) );
geometry.vertices.push( new THREE.Vector3(30.777601, 145.268997, -9.247686) );
geometry.vertices.push( new THREE.Vector3(35.002800, 138.271500, -7.889513) );
geometry.vertices.push( new THREE.Vector3(57.507748, 112.291100, 24.324820) );
geometry.vertices.push( new THREE.Vector3(56.416500, 111.147705, 24.718130) );
geometry.vertices.push( new THREE.Vector3(56.448002, 111.945000, 23.791391) );
geometry.vertices.push( new THREE.Vector3(55.478622, 111.400902, 24.718990) );
geometry.vertices.push( new THREE.Vector3(55.301250, 112.147903, 23.911091) );
geometry.vertices.push( new THREE.Vector3(57.331871, 113.249298, 23.391970) );
geometry.vertices.push( new THREE.Vector3(57.552368, 112.945107, 25.059381) );
geometry.vertices.push( new THREE.Vector3(57.398247, 111.563599, 25.249949) );
geometry.vertices.push( new THREE.Vector3(56.019749, 111.260605, 25.531908) );
geometry.vertices.push( new THREE.Vector3(55.309879, 111.760498, 25.228909) );
geometry.vertices.push( new THREE.Vector3(57.498001, 112.207100, 25.590149) );
geometry.vertices.push( new THREE.Vector3(56.947117, 111.466095, 25.790361) );
geometry.vertices.push( new THREE.Vector3(23.275690, 147.760910, -9.321600) );
geometry.vertices.push( new THREE.Vector3(57.310879, 115.844200, 22.577660) );
geometry.vertices.push( new THREE.Vector3(57.464249, 114.928497, 23.399330) );
geometry.vertices.push( new THREE.Vector3(57.524628, 113.942596, 24.256090) );
geometry.vertices.push( new THREE.Vector3(2.979120, 118.669106, -10.394469) );
geometry.vertices.push( new THREE.Vector3(2.957029, 121.862602, -9.580575) );
geometry.vertices.push( new THREE.Vector3(6.321637, 118.602005, -9.631425) );
geometry.vertices.push( new THREE.Vector3(6.312188, 121.797394, -8.741701) );
geometry.vertices.push( new THREE.Vector3(9.502425, 118.372498, -8.183100) );
geometry.vertices.push( new THREE.Vector3(9.410213, 121.596703, -7.428675) );
geometry.vertices.push( new THREE.Vector3(12.230250, 121.179703, -5.266988) );
geometry.vertices.push( new THREE.Vector3(3.001200, 115.475594, -11.208370) );
geometry.vertices.push( new THREE.Vector3(3.030217, 115.365395, -11.352710) );
geometry.vertices.push( new THREE.Vector3(3.059235, 115.255104, -11.497049) );
geometry.vertices.push( new THREE.Vector3(25.620821, 141.597397, 1.539514) );
geometry.vertices.push( new THREE.Vector3(23.804251, 144.088104, 1.429838) );
geometry.vertices.push( new THREE.Vector3(22.328701, 145.808304, -0.104167) );
geometry.vertices.push( new THREE.Vector3(21.346390, 146.072311, -0.052826) );
geometry.vertices.push( new THREE.Vector3(-6.130575, 113.972603, -10.415780) );
geometry.vertices.push( new THREE.Vector3(-5.384925, 114.039398, -10.822690) );
geometry.vertices.push( new THREE.Vector3(-4.944450, 114.198006, -11.534591) );
geometry.vertices.push( new THREE.Vector3(-4.927088, 114.405800, -12.360750) );
geometry.vertices.push( new THREE.Vector3(-5.337525, 114.606796, -13.079810) );
geometry.vertices.push( new THREE.Vector3(-6.065812, 114.747406, -13.499101) );
geometry.vertices.push( new THREE.Vector3(15.894040, 120.952904, 1.201001) );
geometry.vertices.push( new THREE.Vector3(15.889650, 121.203804, -0.425809) );
geometry.vertices.push( new THREE.Vector3(15.069260, 121.112297, -0.214525) );
geometry.vertices.push( new THREE.Vector3(14.469860, 120.978401, 0.376046) );
geometry.vertices.push( new THREE.Vector3(14.252061, 120.837402, 1.187662) );
geometry.vertices.push( new THREE.Vector3(14.474251, 120.727501, 2.002856) );
geometry.vertices.push( new THREE.Vector3(15.076839, 120.677994, 2.603190) );
geometry.vertices.push( new THREE.Vector3(15.898420, 120.702003, 2.827811) );
geometry.vertices.push( new THREE.Vector3(16.718779, 120.793106, 2.616525) );
geometry.vertices.push( new THREE.Vector3(17.313789, 121.177902, 0.399146) );
geometry.vertices.push( new THREE.Vector3(16.711199, 121.227707, -0.201190) );
geometry.vertices.push( new THREE.Vector3(16.516050, 112.243904, -0.143397) );
geometry.vertices.push( new THREE.Vector3(15.691240, 112.403595, -1.558920) );
geometry.vertices.push( new THREE.Vector3(16.511629, 112.494804, -1.770202) );
geometry.vertices.push( new THREE.Vector3(17.333210, 112.518799, -1.545589) );
geometry.vertices.push( new THREE.Vector3(17.935801, 112.469307, -0.945255) );
geometry.vertices.push( new THREE.Vector3(17.340790, 112.084106, 1.272124) );
geometry.vertices.push( new THREE.Vector3(16.520441, 111.993004, 1.483414) );
geometry.vertices.push( new THREE.Vector3(15.698851, 111.968994, 1.258796) );
geometry.vertices.push( new THREE.Vector3(15.096261, 112.018898, 0.658463) );
geometry.vertices.push( new THREE.Vector3(14.874080, 112.128700, -0.156731) );
geometry.vertices.push( new THREE.Vector3(15.091880, 112.269402, -0.968347) );
geometry.vertices.push( new THREE.Vector3(12.613199, 122.126198, -5.811262) );
geometry.vertices.push( new THREE.Vector3(11.660810, 122.359505, -7.133399) );
geometry.vertices.push( new THREE.Vector3(11.118790, 122.189201, -6.498413) );
geometry.vertices.push( new THREE.Vector3(10.977150, 122.002098, -5.679262) );
geometry.vertices.push( new THREE.Vector3(11.273931, 121.848404, -4.895513) );
geometry.vertices.push( new THREE.Vector3(11.929541, 121.768906, -4.357125) );
geometry.vertices.push( new THREE.Vector3(12.768340, 121.785400, -4.208362) );
geometry.vertices.push( new THREE.Vector3(13.565590, 121.892998, -4.489125) );
geometry.vertices.push( new THREE.Vector3(14.107611, 122.063194, -5.124113) );
geometry.vertices.push( new THREE.Vector3(13.296861, 122.483299, -7.265363) );
geometry.vertices.push( new THREE.Vector3(12.458060, 122.467102, -7.414125) );
geometry.vertices.push( new THREE.Vector3(13.114570, 113.509094, -7.691925) );
geometry.vertices.push( new THREE.Vector3(11.620160, 113.572098, -8.379038) );
geometry.vertices.push( new THREE.Vector3(12.162189, 113.742401, -9.014063) );
geometry.vertices.push( new THREE.Vector3(12.959440, 113.849998, -9.294787) );
geometry.vertices.push( new THREE.Vector3(13.798240, 113.866493, -9.146025) );
geometry.vertices.push( new THREE.Vector3(14.608990, 113.446106, -7.004775) );
geometry.vertices.push( new THREE.Vector3(14.066960, 113.276199, -6.369787) );
geometry.vertices.push( new THREE.Vector3(13.269711, 113.168594, -6.089025) );
geometry.vertices.push( new THREE.Vector3(12.430910, 113.152100, -6.237788) );
geometry.vertices.push( new THREE.Vector3(11.775300, 113.231598, -6.776175) );
geometry.vertices.push( new THREE.Vector3(11.478520, 113.385406, -7.559925) );
geometry.vertices.push( new THREE.Vector3(6.113325, 122.937408, -9.801412) );
geometry.vertices.push( new THREE.Vector3(4.516762, 122.961700, -10.201159) );
geometry.vertices.push( new THREE.Vector3(4.534087, 122.753998, -9.375000) );
geometry.vertices.push( new THREE.Vector3(4.974600, 122.595406, -8.663100) );
geometry.vertices.push( new THREE.Vector3(5.720212, 122.528603, -8.256187) );
geometry.vertices.push( new THREE.Vector3(6.571162, 122.571007, -8.263350) );
geometry.vertices.push( new THREE.Vector3(7.299450, 122.712006, -8.682600) );
geometry.vertices.push( new THREE.Vector3(7.709888, 122.913002, -9.401663) );
geometry.vertices.push( new THREE.Vector3(7.692563, 123.120705, -10.227820) );
geometry.vertices.push( new THREE.Vector3(5.655488, 123.303696, -11.339470) );
geometry.vertices.push( new THREE.Vector3(4.927200, 123.162697, -10.920230) );
geometry.vertices.push( new THREE.Vector3(6.523725, 114.381393, -11.960960) );
geometry.vertices.push( new THREE.Vector3(4.944488, 114.198006, -11.534550) );
geometry.vertices.push( new THREE.Vector3(4.927163, 114.405800, -12.360710) );
geometry.vertices.push( new THREE.Vector3(5.337637, 114.606796, -13.079781) );
geometry.vertices.push( new THREE.Vector3(6.065888, 114.747406, -13.499061) );
geometry.vertices.push( new THREE.Vector3(8.102962, 114.564804, -12.387380) );
geometry.vertices.push( new THREE.Vector3(8.120325, 114.356995, -11.561210) );
geometry.vertices.push( new THREE.Vector3(7.709850, 114.155998, -10.842150) );
geometry.vertices.push( new THREE.Vector3(6.981563, 114.014992, -10.422900) );
geometry.vertices.push( new THREE.Vector3(6.130612, 113.972603, -10.415740) );
geometry.vertices.push( new THREE.Vector3(5.385000, 114.039398, -10.822650) );
geometry.vertices.push( new THREE.Vector3(59.959133, 114.873695, 11.252470) );
geometry.vertices.push( new THREE.Vector3(58.629002, 116.072998, 10.714990) );
geometry.vertices.push( new THREE.Vector3(57.508121, 117.353203, 10.546910) );
geometry.vertices.push( new THREE.Vector3(56.554501, 118.182396, 10.722260) );
geometry.vertices.push( new THREE.Vector3(56.117249, 119.065903, 10.383790) );
geometry.vertices.push( new THREE.Vector3(56.302116, 120.405403, 8.694000) );
geometry.vertices.push( new THREE.Vector3(57.380630, 119.625000, 9.562426) );
geometry.vertices.push( new THREE.Vector3(58.257751, 118.234894, 9.595425) );
geometry.vertices.push( new THREE.Vector3(59.699619, 116.852203, 9.829763) );
geometry.vertices.push( new THREE.Vector3(60.997498, 115.616592, 10.384160) );
geometry.vertices.push( new THREE.Vector3(66.091118, 110.993599, 22.048161) );
geometry.vertices.push( new THREE.Vector3(65.630630, 110.177299, 22.111460) );
geometry.vertices.push( new THREE.Vector3(7.974112, 111.233994, 10.999880) );
geometry.vertices.push( new THREE.Vector3(-3.146467, 122.683098, -9.195863) );
geometry.vertices.push( new THREE.Vector3(-2.966126, 125.199699, -9.326589) );
geometry.vertices.push( new THREE.Vector3(-3.086801, 120.480797, -9.735450) );
geometry.vertices.push( new THREE.Vector3(-19.764299, 157.023804, -12.520390) );
geometry.vertices.push( new THREE.Vector3(-19.264009, 159.223495, -11.283710) );
geometry.vertices.push( new THREE.Vector3(-17.490219, 161.536896, -10.258800) );
geometry.vertices.push( new THREE.Vector3(-14.112491, 159.936005, -12.745131) );
geometry.vertices.push( new THREE.Vector3(3.086888, 120.480797, -9.735413) );
geometry.vertices.push( new THREE.Vector3(6.426450, 120.326996, -9.057263) );
geometry.vertices.push( new THREE.Vector3(9.272699, 119.968498, -7.535212) );
geometry.vertices.push( new THREE.Vector3(12.957830, 119.563103, -5.808525) );
geometry.vertices.push( new THREE.Vector3(15.307610, 119.181396, -2.538454) );
geometry.vertices.push( new THREE.Vector3(16.012310, 118.553307, 1.634235) );
geometry.vertices.push( new THREE.Vector3(15.181459, 117.923203, 5.524163) );
geometry.vertices.push( new THREE.Vector3(12.556351, 117.406906, 8.789025) );
geometry.vertices.push( new THREE.Vector3(9.763801, 117.094101, 10.777989) );
geometry.vertices.push( new THREE.Vector3(6.443175, 116.792999, 12.277241) );
geometry.vertices.push( new THREE.Vector3(3.310717, 116.649399, 12.678451) );
geometry.vertices.push( new THREE.Vector3(14.253449, 160.628998, 3.521422) );
geometry.vertices.push( new THREE.Vector3(12.722810, 161.938904, 3.000405) );
geometry.vertices.push( new THREE.Vector3(10.608860, 161.586700, 3.741495) );
geometry.vertices.push( new THREE.Vector3(7.582201, 161.000305, 4.871438) );
face = new THREE.Face3( 0, 1, 2, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3, 4, 5, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4, 3, 6, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6, 7, 4, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7, 6, 8, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9, 8, 6, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8, 9, 10, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9, 11, 10, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 11, 9, 12, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 13, 12, 9, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 12, 13, 14, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7, 15, 16, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 15, 7, 8, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8, 17, 15, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 17, 8, 10, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 10, 18, 17, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 18, 10, 11, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 11, 19, 18, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 19, 11, 20, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 12, 20, 11, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 20, 12, 21, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 20, 22, 19, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 23, 19, 22, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 19, 23, 24, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 24, 18, 19, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 18, 24, 25, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 25, 17, 18, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 17, 25, 26, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 26, 15, 17, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 15, 26, 27, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 27, 16, 15, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 23, 28, 24, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 28, 25, 24, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 25, 28, 29, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 29, 26, 25, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 30, 31, 23, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 28, 23, 31, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 31, 32, 28, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 32, 29, 28, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 29, 32, 33, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 33, 34, 29, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 26, 29, 34, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 35, 26, 34, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 26, 35, 27, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 36, 37, 38, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 37, 36, 39, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 32, 31, 40, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 41, 40, 31, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 31, 30, 41, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 39, 41, 30, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 41, 39, 42, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 36, 42, 39, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 42, 36, 43, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 40, 41, 44, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 42, 44, 41, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 44, 42, 45, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 43, 45, 42, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 45, 43, 46, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 44, 47, 48, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 47, 44, 45, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 49, 50, 51, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 51, 52, 49, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 52, 51, 48, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 48, 53, 52, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 53, 48, 47, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 47, 54, 53, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 54, 47, 55, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 56, 57, 58, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 57, 56, 59, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 60, 61, 58, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 61, 60, 62, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 63, 61, 62, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 64, 65, 66, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 65, 64, 63, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 67, 65, 68, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 69, 70, 71, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 69, 72, 70, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 73, 74, 75, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 73, 76, 74, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 77, 78, 79, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 80, 81, 82, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 81, 80, 83, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 84, 83, 80, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 83, 84, 78, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 78, 77, 83, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 83, 77, 85, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 83, 85, 81, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 86, 87, 88, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 87, 86, 89, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 90, 91, 92, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 91, 90, 93, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 94, 95, 96, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 95, 94, 97, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 98, 97, 94, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 97, 98, 99, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 100, 101, 102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 101, 100, 103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 104, 99, 105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 99, 104, 97, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 106, 107, 105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 107, 106, 108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 109, 110, 111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 110, 109, 112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 113, 85, 111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 85, 113, 81, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 114, 115, 116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 115, 114, 117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 118, 114, 116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 114, 118, 119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 120, 121, 96, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 121, 120, 122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 123, 96, 95, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 96, 123, 120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 124, 125, 126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 127, 128, 129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 128, 127, 130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 131, 130, 127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 130, 131, 125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 125, 124, 130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 121, 130, 124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 130, 121, 128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 132, 133, 134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 135, 136, 137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 136, 135, 138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 138, 139, 136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 139, 138, 140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 141, 139, 140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 139, 141, 133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 133, 132, 139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 132, 136, 139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 136, 132, 142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 142, 137, 136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 137, 142, 143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 144, 137, 143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 137, 144, 145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 145, 135, 137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 135, 145, 146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 146, 147, 135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 147, 138, 135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 138, 147, 148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 149, 150, 148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 150, 149, 151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 152, 153, 154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 153, 152, 151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 155, 153, 156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 153, 155, 157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 158, 159, 154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 159, 158, 160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 161, 162, 163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 162, 161, 164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 165, 164, 161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 164, 165, 166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 158, 166, 165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 166, 158, 157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 164, 167, 162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 167, 164, 168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 168, 169, 167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 169, 168, 170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 168, 171, 170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 171, 168, 172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 164, 172, 168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 172, 164, 166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 173, 174, 175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 174, 173, 176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 176, 177, 174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 177, 176, 178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 179, 170, 180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 170, 179, 169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 181, 169, 179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 169, 181, 178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 182, 178, 181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 178, 182, 177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 183, 177, 182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 177, 183, 184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 184, 174, 177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 174, 184, 185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 186, 125, 131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 125, 186, 187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 186, 182, 187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 182, 186, 183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 187, 126, 125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 126, 187, 188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 124, 96, 121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 96, 124, 94, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 126, 94, 124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 94, 126, 98, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 188, 98, 126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 98, 188, 189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 122, 128, 121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 190, 129, 128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 128, 122, 190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 191, 190, 122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 71, 70, 192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 193, 70, 194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 70, 193, 76, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 192, 70, 76, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 192, 76, 191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 191, 76, 73, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 190, 191, 73, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 73, 195, 190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 129, 190, 195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 195, 73, 75, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 196, 197, 198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 197, 196, 199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 200, 201, 202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 201, 200, 203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7, 204, 4, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 204, 7, 205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 205, 206, 204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 206, 205, 207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2, 1, 208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2, 208, 209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 210, 148, 147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 148, 210, 149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 140, 148, 150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 148, 140, 138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 211, 212, 213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 212, 211, 214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 215, 216, 217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 216, 215, 218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 166, 155, 172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 155, 166, 157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 219, 172, 155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 172, 219, 171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 220, 221, 222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 221, 220, 223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 160, 222, 221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 222, 160, 224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 225, 226, 227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 226, 225, 228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 229, 227, 226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 227, 229, 230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 231, 145, 144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 145, 231, 232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 233, 234, 235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 234, 233, 119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 119, 236, 234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 236, 119, 118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 212, 237, 238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 237, 212, 239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 214, 239, 212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 239, 214, 240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 241, 242, 243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 242, 241, 238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 238, 244, 242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 244, 238, 237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 245, 242, 244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 242, 245, 246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 246, 243, 242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 243, 246, 247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 248, 249, 250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 249, 248, 251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 251, 252, 249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 252, 251, 253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 254, 249, 252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 249, 254, 255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 255, 250, 249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 250, 255, 256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 181, 187, 182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 187, 181, 188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 179, 188, 181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 188, 179, 189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 241, 133, 141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 133, 241, 243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 243, 134, 133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 134, 243, 247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 140, 257, 141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 257, 140, 150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 219, 156, 258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 156, 219, 155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 151, 156, 153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 156, 151, 149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 149, 258, 156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 258, 149, 210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 157, 154, 153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 154, 157, 158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 211, 154, 159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 154, 211, 152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 259, 260, 261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 261, 262, 259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 262, 261, 263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 263, 264, 262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 264, 263, 265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 265, 266, 264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 266, 265, 267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 267, 268, 266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 268, 267, 50, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 50, 49, 268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 269, 263, 261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 263, 269, 270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 270, 265, 263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 265, 270, 271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 271, 267, 265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 267, 271, 33, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 33, 50, 267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 50, 33, 32, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 32, 51, 50, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 51, 32, 40, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 269, 35, 270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 34, 270, 35, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 270, 34, 271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 34, 33, 271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 180, 189, 179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 189, 180, 272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 99, 189, 272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 189, 99, 98, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 178, 167, 169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 167, 178, 176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 176, 162, 167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 162, 176, 173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 173, 163, 162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 163, 173, 273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 273, 274, 163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 274, 273, 275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 276, 163, 274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 163, 276, 161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 160, 277, 159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 277, 160, 221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 221, 278, 277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 278, 221, 223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 229, 279, 280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 279, 229, 226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 226, 281, 279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 281, 226, 228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 275, 282, 274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 282, 275, 283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 283, 284, 282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 284, 283, 285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 286, 287, 288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 288, 289, 286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 289, 288, 290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 290, 291, 289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 291, 290, 292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 293, 291, 292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 294, 293, 292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 290, 294, 292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 294, 290, 295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 296, 289, 291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 291, 293, 297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 298, 291, 297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 291, 298, 296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 299, 296, 298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 298, 300, 299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 300, 298, 301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 301, 302, 300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 302, 301, 303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 303, 304, 302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 304, 303, 305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 298, 297, 301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 297, 306, 307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 293, 294, 308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 309, 310, 311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 312, 311, 310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 310, 313, 312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 313, 314, 312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 314, 313, 315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 307, 315, 313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 315, 307, 306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 315, 306, 308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 306, 293, 308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 293, 306, 297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 313, 310, 305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 310, 309, 316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 317, 316, 309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 316, 317, 318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 319, 318, 317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 318, 319, 320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 321, 322, 323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 324, 323, 322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 323, 324, 320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 322, 321, 325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 325, 326, 322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 326, 325, 327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 327, 328, 326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 328, 327, 329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 329, 330, 328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 330, 331, 328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 331, 330, 332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 333, 331, 332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 331, 333, 334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 335, 327, 325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 327, 335, 336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 329, 327, 336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 92, 87, 337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 87, 92, 88, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 91, 88, 92, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 88, 91, 338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 199, 196, 335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 339, 88, 338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 88, 339, 86, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 198, 86, 339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 86, 198, 197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 340, 86, 197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 199, 340, 197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 340, 199, 341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 199, 335, 341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 335, 321, 341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 321, 335, 325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 86, 340, 89, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 342, 87, 89, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 342, 343, 344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 343, 342, 345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 346, 117, 114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 117, 346, 347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 347, 348, 117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 348, 347, 344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 347, 337, 344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 93, 232, 231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 232, 93, 90, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 232, 146, 145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 146, 232, 349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 349, 235, 146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 235, 349, 233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 349, 346, 233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 346, 349, 350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 147, 146, 235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 235, 210, 147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 210, 235, 234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 234, 236, 210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 272, 105, 99, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 105, 272, 106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 351, 272, 180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 272, 351, 106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 352, 106, 351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 106, 352, 108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 118, 353, 236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 210, 236, 353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 354, 210, 353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 210, 354, 258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 352, 258, 354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 258, 352, 219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 351, 219, 352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 219, 351, 171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 180, 171, 351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 171, 180, 170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 102, 107, 100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 108, 100, 107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 100, 108, 355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 355, 103, 100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 103, 355, 356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 355, 353, 356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 353, 118, 356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 353, 355, 354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 240, 277, 278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 277, 240, 214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 214, 159, 277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 159, 214, 211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 161, 224, 165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 224, 161, 276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 357, 224, 276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 224, 357, 222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 358, 222, 357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 222, 358, 220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 358, 282, 284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 282, 358, 357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 357, 274, 282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 274, 357, 276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 359, 360, 361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 360, 359, 362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 363, 360, 364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 360, 363, 365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 362, 364, 360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 364, 362, 366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 367, 366, 362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 366, 367, 368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 365, 361, 360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 361, 365, 369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 225, 370, 371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 370, 225, 363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 227, 363, 225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 363, 227, 365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 230, 365, 227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 365, 230, 369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 372, 369, 230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 369, 372, 373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 373, 361, 369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 361, 373, 374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 375, 376, 377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 377, 378, 375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 378, 379, 375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 379, 378, 380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 380, 381, 379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 381, 380, 382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 370, 381, 382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 381, 370, 383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 363, 383, 370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 383, 363, 364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 378, 377, 384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 385, 384, 377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 384, 385, 386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 387, 386, 218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 386, 387, 384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 200, 384, 387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 384, 200, 378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 202, 378, 200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 378, 202, 380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 388, 380, 202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 380, 388, 382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 371, 382, 388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 382, 371, 370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 389, 390, 391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 388, 392, 371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 392, 388, 393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 202, 393, 388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 393, 202, 201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 394, 393, 201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 393, 394, 395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 396, 395, 394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 395, 396, 397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 396, 398, 397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 398, 396, 390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 390, 389, 398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 399, 398, 389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 400, 393, 395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 393, 400, 392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 281, 392, 400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 392, 281, 228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 248, 279, 281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 279, 248, 250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 250, 280, 279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 280, 250, 256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 256, 401, 402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 401, 256, 255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 255, 403, 401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 403, 255, 254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 254, 404, 403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 404, 254, 405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 405, 406, 404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 406, 405, 407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 405, 408, 407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 408, 405, 409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 409, 410, 408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 410, 409, 411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 254, 409, 405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 409, 254, 252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 252, 411, 409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 411, 252, 253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 389, 412, 413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 412, 389, 391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 208, 414, 415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 208, 1, 414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 416, 417, 418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 417, 416, 206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 201, 419, 394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 419, 201, 203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 420, 394, 419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 394, 420, 396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 421, 422, 423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 422, 421, 424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 425, 379, 381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 379, 425, 426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 426, 375, 379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 375, 426, 427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 59, 428, 385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 428, 59, 56, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 56, 429, 428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 429, 56, 430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 431, 428, 429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 428, 431, 432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 432, 385, 428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 385, 432, 386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 40, 48, 51, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 48, 40, 44, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 45, 55, 47, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 55, 45, 46, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 68, 433, 67, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 433, 68, 434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 435, 58, 57, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 58, 435, 60, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 430, 58, 61, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 58, 430, 56, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 185, 175, 174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 175, 185, 436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 437, 438, 439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 438, 437, 440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 440, 441, 438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 441, 440, 442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 285, 438, 441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 438, 285, 283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 283, 439, 438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 439, 283, 275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 443, 367, 444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 367, 443, 445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 445, 368, 367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 368, 445, 446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 362, 444, 367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 444, 362, 359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 415, 447, 448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 447, 415, 414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 414, 449, 447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 449, 450, 451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 450, 449, 452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 449, 414, 452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1, 452, 414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 452, 1, 453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1, 0, 453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 454, 453, 0, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 0, 455, 454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5, 454, 455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 455, 3, 5, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 456, 457, 416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 204, 416, 457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 416, 204, 206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 450, 416, 418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 416, 450, 456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 452, 456, 450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 456, 452, 453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 453, 454, 456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 457, 456, 454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 454, 5, 457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4, 457, 5, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 457, 4, 204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 458, 459, 460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 459, 458, 461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 458, 417, 461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 417, 458, 462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 462, 418, 417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 418, 462, 463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 451, 418, 463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 418, 451, 450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 206, 461, 417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 461, 206, 207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 207, 464, 465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 464, 207, 205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 205, 16, 464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 16, 205, 7, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 16, 27, 466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 466, 464, 16, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 464, 466, 467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 467, 465, 464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 465, 467, 468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 468, 459, 465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 459, 468, 469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 469, 460, 459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 460, 469, 470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 469, 471, 470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 468, 472, 473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 472, 468, 467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 467, 474, 472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 474, 467, 466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 27, 474, 466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 474, 27, 35, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 35, 269, 474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 269, 472, 474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 472, 269, 475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 475, 473, 472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 473, 475, 476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 477, 473, 476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 473, 477, 478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 478, 468, 473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 468, 478, 469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 471, 469, 478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 478, 479, 471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 479, 478, 477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 480, 479, 477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 477, 481, 480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 481, 477, 476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 476, 260, 481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 260, 476, 475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 475, 261, 260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 261, 475, 269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 482, 483, 484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 483, 482, 480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 480, 485, 483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 485, 480, 481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 481, 486, 485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 486, 481, 260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 260, 259, 486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 479, 480, 482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 487, 488, 489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 488, 490, 489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 490, 488, 491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 491, 492, 490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 492, 491, 493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 494, 492, 493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 492, 494, 495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 488, 487, 496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 496, 427, 488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 427, 496, 376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 376, 375, 427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 427, 491, 488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 491, 427, 426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 426, 493, 491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 493, 426, 425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 497, 498, 22, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 498, 497, 499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 499, 37, 498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 37, 499, 433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 499, 67, 433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 67, 499, 500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 500, 66, 67, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 65, 67, 66, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 497, 500, 499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 61, 63, 64, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 64, 430, 61, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 430, 64, 501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 66, 501, 64, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 501, 66, 502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 66, 500, 502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 503, 502, 500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 500, 497, 503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 20, 503, 497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 22, 20, 497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 503, 20, 21, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 21, 504, 503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 502, 503, 504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 505, 502, 504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 502, 505, 501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 429, 501, 505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 501, 429, 430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 504, 506, 505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 506, 504, 507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 504, 21, 507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 14, 21, 12, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 21, 14, 507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 508, 507, 14, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 507, 508, 506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 509, 506, 508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 506, 509, 431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 216, 431, 509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 431, 216, 432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 218, 432, 216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 432, 218, 386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 509, 217, 216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 217, 509, 510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 215, 423, 422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 423, 215, 217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 217, 511, 423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 511, 217, 510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 512, 511, 510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 510, 508, 512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 508, 510, 509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 13, 513, 512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 511, 512, 513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 513, 514, 511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 514, 423, 511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 423, 514, 421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 514, 2, 421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 209, 421, 2, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 421, 209, 424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6, 13, 9, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 13, 6, 3, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 513, 13, 3, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3, 455, 513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 514, 513, 455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 0, 514, 455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2, 514, 0, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 498, 39, 30, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 515, 422, 424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 422, 515, 516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 420, 516, 515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 516, 420, 419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 419, 517, 516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 517, 419, 203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 518, 519, 84, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 321, 520, 521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 520, 321, 323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 323, 319, 520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 319, 323, 320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 71, 120, 123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 120, 71, 192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 192, 122, 120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 122, 192, 191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 522, 523, 524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 523, 522, 69, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 69, 123, 523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 123, 69, 71, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 334, 299, 300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 299, 334, 333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 302, 525, 526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 525, 302, 304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 345, 521, 520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 521, 345, 342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 313, 303, 307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 303, 313, 305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 295, 288, 527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 288, 295, 290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 316, 305, 310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 305, 316, 304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 89, 521, 342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 521, 89, 340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 74, 193, 528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 193, 74, 76, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 307, 301, 297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 301, 307, 303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 300, 526, 334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 526, 300, 302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 309, 529, 317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 529, 309, 518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 84, 529, 518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 529, 84, 80, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 304, 318, 525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 318, 304, 316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 340, 321, 521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 321, 340, 341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 530, 314, 531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 314, 530, 312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 72, 194, 70, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 194, 72, 532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 79, 84, 519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 84, 79, 78, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 342, 337, 87, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 337, 342, 344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 343, 348, 344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 348, 343, 113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 111, 348, 113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 348, 111, 110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 533, 534, 535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 536, 535, 534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 535, 536, 537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 527, 288, 536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 536, 288, 537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 537, 288, 287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 343, 81, 113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 81, 343, 82, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 345, 82, 343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 82, 345, 538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 529, 82, 538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 82, 529, 80, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 520, 538, 345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 538, 520, 319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 539, 322, 326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 322, 539, 324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 328, 539, 326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 539, 328, 331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 324, 526, 525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 526, 324, 539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 317, 538, 319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 538, 317, 529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 525, 320, 324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 320, 525, 318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 539, 334, 526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 334, 539, 331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 348, 115, 117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 115, 348, 110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 540, 530, 531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 541, 542, 540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 530, 540, 542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 530, 542, 311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 311, 312, 530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 72, 543, 77, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 72, 77, 79, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 79, 532, 72, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 532, 79, 544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 519, 544, 79, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 544, 519, 541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 542, 541, 519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 519, 518, 542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 518, 311, 542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 311, 518, 309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 545, 546, 547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 548, 547, 546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 547, 548, 524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 548, 522, 524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 522, 548, 543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 72, 522, 543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 522, 72, 69, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 97, 549, 95, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 549, 97, 104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 95, 523, 123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 523, 95, 549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 549, 524, 523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 524, 549, 547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 104, 547, 549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 547, 104, 545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 105, 545, 104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 111, 550, 109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 550, 111, 85, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 85, 77, 550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 545, 105, 107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 107, 102, 545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 546, 545, 102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 101, 546, 102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 546, 101, 112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 112, 548, 546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 548, 112, 109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 550, 548, 109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 548, 550, 543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 77, 543, 550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 101, 110, 112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 110, 101, 115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 101, 116, 115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 116, 101, 103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 350, 347, 346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 347, 350, 337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 350, 92, 337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 92, 350, 90, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 356, 116, 103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 116, 356, 118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 232, 350, 349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 350, 232, 90, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 233, 114, 119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 114, 233, 346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 420, 390, 396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 390, 420, 551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 551, 391, 390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 391, 551, 552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 443, 553, 554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 553, 443, 444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 444, 555, 553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 555, 444, 359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 398, 399, 556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 556, 397, 398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 397, 556, 557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 389, 558, 399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 558, 389, 413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 413, 559, 558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 559, 413, 560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 413, 561, 560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 561, 413, 412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 412, 562, 561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 562, 412, 563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 391, 563, 412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 563, 391, 552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 152, 150, 151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 150, 152, 257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 211, 257, 152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 257, 211, 213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 160, 165, 224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 165, 160, 158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 275, 564, 439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 564, 275, 273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 273, 175, 564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 175, 273, 173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 436, 564, 175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 564, 436, 565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 565, 439, 564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 439, 565, 437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 108, 354, 355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 354, 108, 352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 245, 404, 406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 404, 245, 244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 244, 403, 404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 403, 244, 237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 237, 401, 403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 401, 237, 239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 239, 402, 401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 402, 239, 240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 240, 566, 402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 566, 240, 278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 278, 567, 566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 567, 278, 223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 229, 566, 567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 566, 229, 280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 280, 402, 566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 402, 280, 256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 223, 372, 567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 372, 223, 220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 220, 373, 372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 373, 220, 358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 230, 567, 372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 567, 230, 229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 358, 374, 373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 374, 358, 284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 284, 555, 374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 555, 284, 285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 359, 374, 555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 374, 359, 361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 285, 553, 555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 553, 285, 441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 441, 554, 553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 554, 441, 442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 410, 558, 559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 558, 410, 411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 411, 399, 558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 399, 411, 253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 253, 556, 399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 556, 253, 251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 251, 557, 556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 557, 251, 248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 248, 400, 557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 400, 248, 281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 395, 557, 400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 557, 395, 397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 228, 371, 392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 371, 228, 225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 364, 568, 383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 568, 364, 366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 425, 383, 568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 383, 425, 381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 366, 494, 568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 494, 366, 368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 368, 495, 494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 495, 368, 446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 493, 568, 494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 568, 493, 425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 562, 569, 570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 569, 562, 563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 563, 571, 569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 571, 563, 552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 208, 569, 571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 569, 208, 415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 415, 570, 569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 570, 415, 448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 552, 572, 571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 572, 552, 551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 551, 515, 572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 515, 551, 420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 424, 572, 515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 572, 424, 209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 209, 571, 572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 571, 209, 208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 215, 516, 517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 516, 215, 422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 203, 387, 517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 387, 203, 200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 218, 517, 387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 517, 218, 215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 213, 141, 257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 141, 213, 241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 213, 238, 241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 238, 213, 212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 57, 376, 496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 376, 57, 59, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 59, 377, 376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 377, 59, 385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 435, 496, 487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 496, 435, 57, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 14, 512, 508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 512, 14, 13, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 431, 505, 506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 505, 431, 429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 461, 465, 459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 465, 461, 207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 30, 22, 498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 22, 30, 23, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 38, 37, 433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 38, 433, 434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 498, 37, 39, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 573, 574, 575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 574, 573, 576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 577, 578, 579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 578, 577, 580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 580, 581, 578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 581, 580, 582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 583, 584, 585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 584, 583, 586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 587, 584, 586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 584, 587, 588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 576, 589, 590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 589, 576, 573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 573, 591, 589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 591, 573, 592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 592, 575, 593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 575, 592, 573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 594, 595, 596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 595, 594, 597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 597, 598, 595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 598, 597, 599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 599, 600, 601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 600, 599, 597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 597, 602, 600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 602, 597, 594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 603, 604, 605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 604, 603, 606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 606, 607, 604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 607, 606, 608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 608, 609, 610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 609, 608, 606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 606, 611, 609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 611, 606, 603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 582, 612, 613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 612, 582, 580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 614, 615, 616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 615, 614, 617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 618, 619, 581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 619, 618, 620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 620, 621, 619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 621, 620, 622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 622, 623, 624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 623, 622, 620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 625, 626, 627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 626, 625, 628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 629, 630, 631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 630, 629, 628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 628, 632, 630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 632, 628, 625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 633, 631, 630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 631, 633, 634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 635, 636, 637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 636, 635, 638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 638, 639, 640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 639, 638, 635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 635, 641, 639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 641, 635, 642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 612, 643, 613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 643, 612, 644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 644, 645, 643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 645, 644, 646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 647, 643, 645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 643, 647, 648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 648, 613, 643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 613, 648, 649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 650, 651, 652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 651, 650, 653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 654, 652, 651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 652, 654, 655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 655, 656, 652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 656, 655, 657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 657, 658, 659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 658, 657, 655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 655, 660, 658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 660, 655, 654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 661, 658, 660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 658, 661, 662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 662, 659, 658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 659, 662, 663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 664, 665, 666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 665, 664, 667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 668, 669, 670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 669, 668, 671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 672, 673, 674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 675, 676, 677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 678, 679, 675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 679, 678, 680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 663, 681, 682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 681, 663, 662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 662, 683, 681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 683, 662, 661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 670, 681, 683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 681, 670, 684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 589, 685, 590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 685, 589, 686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 686, 687, 685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 687, 686, 688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 688, 689, 690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 689, 688, 686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 686, 591, 689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 591, 686, 589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 691, 689, 591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 689, 691, 692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 693, 694, 695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 694, 693, 692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 696, 697, 698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 697, 696, 699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 700, 701, 702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 701, 700, 699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 703, 702, 701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 702, 703, 704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 668, 702, 704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 702, 668, 705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 706, 702, 705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 702, 706, 700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 705, 670, 683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 670, 705, 668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 674, 699, 696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 699, 674, 701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 673, 701, 674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 701, 673, 703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 707, 703, 673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 703, 707, 708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 708, 704, 703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 704, 708, 709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 671, 704, 709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 704, 671, 668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 595, 710, 596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 710, 595, 711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 711, 574, 710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 574, 711, 575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 575, 712, 593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 712, 575, 711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 711, 598, 712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 598, 711, 595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 713, 712, 598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 712, 713, 714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 714, 593, 712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 593, 714, 715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 715, 716, 717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 716, 715, 714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 714, 718, 716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 718, 714, 713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 719, 716, 718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 716, 719, 720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 721, 722, 723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 722, 721, 720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 720, 724, 722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 724, 720, 719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 725, 722, 724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 722, 725, 726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 726, 723, 722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 723, 726, 727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 727, 728, 729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 728, 727, 726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 726, 730, 728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 730, 726, 725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 731, 728, 730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 728, 731, 732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 732, 729, 728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 729, 732, 733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 733, 734, 735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 734, 733, 732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 732, 736, 734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 736, 732, 731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 737, 734, 736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 734, 737, 738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 738, 735, 734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 735, 738, 739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 739, 740, 741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 740, 739, 738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 738, 742, 740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 742, 738, 737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 743, 744, 745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 744, 743, 746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 747, 748, 749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 748, 747, 750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 750, 621, 622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 621, 750, 747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 751, 752, 618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 752, 751, 753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 753, 649, 754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 649, 753, 751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 751, 613, 649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 613, 751, 582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 755, 756, 647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 756, 755, 757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 755, 690, 693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 690, 755, 758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 647, 758, 755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 758, 647, 645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 759, 760, 629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 760, 759, 761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 762, 656, 657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 656, 762, 763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 764, 660, 654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 660, 764, 765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 766, 699, 700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 699, 766, 697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 767, 697, 766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 765, 767, 766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 767, 765, 764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 768, 769, 770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 769, 768, 771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 771, 653, 769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 653, 771, 651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 771, 654, 651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 654, 771, 764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 768, 764, 771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 764, 768, 767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 768, 772, 767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 697, 767, 772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 772, 768, 773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 772, 698, 697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 698, 772, 774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 773, 774, 772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 774, 773, 775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 752, 776, 777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 776, 752, 753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 753, 778, 776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 778, 753, 754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 754, 650, 778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 650, 754, 779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 779, 653, 650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 653, 779, 756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 756, 769, 653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 769, 756, 757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 778, 652, 656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 652, 778, 650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 649, 779, 754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 779, 649, 648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 648, 756, 779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 756, 648, 647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 780, 638, 640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 638, 780, 781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 782, 781, 780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 783, 784, 785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 784, 786, 785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 786, 784, 787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 787, 782, 786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 782, 787, 788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 781, 782, 788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 788, 789, 781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 617, 789, 615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 789, 788, 615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 788, 616, 615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 616, 788, 787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 787, 790, 616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 790, 787, 784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 791, 790, 784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 784, 783, 791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 792, 791, 783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 791, 792, 793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 794, 617, 614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 795, 616, 790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 616, 795, 614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 796, 614, 795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 614, 796, 794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 797, 794, 796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 798, 797, 796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 797, 798, 799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 800, 799, 798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 799, 800, 801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 800, 802, 801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 802, 800, 803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 804, 790, 805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 790, 804, 795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 798, 795, 804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 795, 798, 796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 806, 805, 807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 805, 806, 804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 804, 800, 798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 800, 804, 806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 806, 803, 800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 803, 806, 808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 807, 808, 806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 808, 807, 809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 793, 809, 807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 805, 793, 807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 793, 805, 791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 790, 791, 805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 792, 810, 793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 809, 793, 810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 810, 811, 809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 812, 809, 811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 809, 812, 808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 813, 808, 812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 808, 813, 803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 814, 803, 813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 803, 814, 802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 815, 802, 814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 810, 792, 816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 816, 817, 810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 811, 810, 817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 817, 816, 818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 819, 642, 820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 642, 819, 667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 821, 707, 673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 707, 821, 822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 822, 739, 741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 739, 822, 821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 821, 735, 739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 735, 821, 672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 592, 691, 591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 691, 592, 823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 823, 593, 715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 593, 823, 592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 599, 713, 598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 713, 599, 824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 824, 718, 713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 718, 824, 825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 824, 601, 826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 601, 824, 599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 827, 774, 775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 774, 827, 828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 828, 698, 774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 698, 828, 829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 830, 826, 601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 826, 830, 831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 831, 607, 832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 607, 831, 830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 608, 832, 607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 832, 608, 833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 833, 834, 832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 834, 833, 835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 835, 836, 837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 836, 835, 833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 833, 610, 836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 610, 833, 608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 838, 839, 840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 839, 838, 841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 841, 842, 839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 842, 841, 843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 844, 845, 846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 845, 844, 847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 848, 849, 850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 849, 848, 847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 830, 604, 607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 604, 830, 851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 851, 605, 604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 605, 851, 852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 852, 600, 602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 600, 852, 851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 851, 601, 600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 601, 851, 830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 844, 853, 854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 853, 844, 855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 856, 848, 850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 848, 856, 857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 858, 859, 860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 859, 858, 861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 861, 862, 859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 862, 861, 863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 863, 864, 865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 864, 863, 861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 861, 866, 864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 866, 861, 858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 867, 868, 869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 868, 867, 870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 776, 656, 763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 656, 776, 778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 871, 736, 731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 736, 871, 872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 872, 873, 862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 873, 872, 871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 871, 874, 873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 874, 871, 875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 876, 877, 878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 877, 876, 879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 880, 819, 820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 819, 880, 881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 880, 630, 632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 630, 880, 633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 820, 633, 880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 633, 820, 637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 642, 637, 820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 637, 642, 635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 634, 637, 636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 637, 634, 633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 667, 641, 642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 641, 667, 664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 669, 684, 670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 684, 669, 882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 882, 665, 684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 682, 684, 665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 667, 682, 665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 682, 667, 819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 684, 682, 681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 665, 882, 666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 770, 773, 768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 773, 770, 883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 883, 775, 773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 775, 883, 884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 829, 727, 729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 727, 829, 828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 828, 723, 727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 723, 828, 827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 875, 845, 874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 845, 875, 885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 885, 846, 845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 846, 885, 886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 847, 874, 845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 874, 847, 848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 857, 874, 848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 874, 857, 873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 881, 682, 819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 682, 881, 663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 881, 632, 887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 632, 881, 880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 661, 705, 683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 705, 661, 706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 700, 765, 766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 765, 700, 706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 706, 660, 765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 660, 706, 661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 888, 889, 890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 889, 888, 891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 892, 893, 894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 893, 892, 895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 869, 896, 842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 896, 869, 897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 898, 899, 900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 899, 898, 901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 585, 901, 898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 901, 585, 584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 902, 903, 904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 903, 902, 905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 906, 840, 904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 840, 906, 907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 897, 908, 896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 908, 897, 909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 910, 911, 583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 911, 910, 912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 873, 859, 862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 859, 873, 857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 857, 860, 859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 860, 857, 856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 860, 879, 876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 876, 858, 860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 858, 876, 913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 913, 866, 858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 866, 913, 914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 870, 609, 611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 609, 870, 867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 867, 610, 609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 610, 867, 843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 869, 843, 867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 843, 869, 842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 678, 761, 759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 761, 678, 675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 677, 761, 675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 761, 677, 915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 916, 680, 678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 759, 916, 678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 916, 759, 917, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 629, 917, 759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 917, 629, 631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 634, 917, 631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 917, 634, 918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 918, 916, 917, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 919, 801, 920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 801, 919, 799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 921, 799, 919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 799, 921, 797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 921, 680, 797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 794, 797, 680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 680, 916, 794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 617, 794, 916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 916, 918, 617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 789, 617, 918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 886, 725, 724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 725, 886, 885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 885, 730, 725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 730, 885, 875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 875, 731, 730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 731, 875, 871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 781, 636, 638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 636, 781, 789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 918, 636, 789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 636, 918, 634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 910, 922, 912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 922, 910, 923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 924, 925, 926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 925, 924, 927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 928, 929, 930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 929, 928, 931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 932, 933, 934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 933, 932, 935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 936, 935, 932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 935, 936, 937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 927, 938, 939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 938, 927, 936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 925, 939, 940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 939, 925, 927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 941, 942, 943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 942, 941, 944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 945, 946, 947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 946, 945, 948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 946, 948, 949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 950, 951, 952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 951, 950, 953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 954, 908, 955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 908, 954, 905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 956, 957, 958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 957, 956, 959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 960, 961, 962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 960, 963, 961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 963, 960, 964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 960, 965, 964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 965, 966, 964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 966, 965, 967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 967, 965, 948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 967, 948, 945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 949, 948, 965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 965, 960, 949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 949, 960, 950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 962, 950, 960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 950, 962, 953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 968, 969, 970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 969, 968, 963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 968, 961, 963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 961, 968, 971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 912, 888, 911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 888, 912, 972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 891, 893, 889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 893, 891, 894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 973, 891, 974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 891, 973, 894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 894, 975, 892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 975, 894, 973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 942, 975, 973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 975, 942, 944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 646, 976, 977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 976, 646, 644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 978, 976, 644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 978, 644, 612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 580, 978, 612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 978, 580, 577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 687, 979, 980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 979, 687, 688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 688, 758, 979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 645, 979, 758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 979, 645, 646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 758, 688, 690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 692, 690, 689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 690, 692, 693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 757, 693, 695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 693, 757, 755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 757, 770, 769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 770, 757, 695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 695, 883, 770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 883, 695, 694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 694, 884, 883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 884, 694, 981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 981, 982, 884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 982, 981, 983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 983, 721, 982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 721, 983, 717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 717, 720, 721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 720, 717, 716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 983, 715, 717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 715, 983, 823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 981, 823, 983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 823, 981, 691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 981, 692, 691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 692, 981, 694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 943, 984, 985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 984, 943, 942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 943, 986, 941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 986, 943, 987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 988, 749, 989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 749, 988, 747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 747, 990, 621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 990, 747, 988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 991, 992, 993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 992, 991, 994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 980, 646, 977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 646, 980, 979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 995, 996, 997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 996, 995, 998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 999, 998, 995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 998, 999, 1000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 998, 749, 996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 749, 998, 989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 748, 996, 749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 996, 748, 1001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 676, 675, 679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 673, 672, 821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 696, 672, 674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 672, 696, 1002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1002, 735, 672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 735, 1002, 733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 733, 829, 729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 829, 733, 1002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1002, 698, 829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 698, 1002, 696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 872, 737, 736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 737, 872, 1003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1003, 742, 737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 742, 1003, 1004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1004, 863, 865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 863, 1004, 1003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1003, 862, 863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 862, 1003, 872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 587, 1005, 1006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1005, 587, 586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 877, 1007, 878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1007, 877, 1008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 889, 1008, 890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1008, 889, 1007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 893, 1007, 889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1007, 893, 1009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1010, 1011, 1012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1011, 1010, 1009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 878, 1009, 1010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1009, 878, 1007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1009, 895, 1011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 895, 1009, 893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 914, 1010, 1012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1010, 914, 913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 913, 878, 1010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 878, 913, 876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 719, 886, 724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 886, 719, 1013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1013, 846, 886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 846, 1013, 1014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 887, 663, 881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 663, 887, 659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 887, 657, 659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 657, 887, 762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 632, 762, 887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 762, 632, 625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 625, 763, 762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 763, 625, 627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 777, 763, 627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 763, 777, 776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 884, 827, 775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 827, 884, 982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 982, 723, 827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 723, 982, 721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 968, 1015, 971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1016, 968, 970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1017, 968, 1016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1015, 968, 1017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1018, 1019, 1020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1018, 1016, 1019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1016, 1018, 1017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 952, 949, 950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 922, 940, 1021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 940, 922, 1022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 940, 1023, 1021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1023, 940, 939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 974, 1023, 984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1023, 974, 1021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1024, 1025, 1026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1025, 1024, 1027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1027, 1028, 1025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1028, 1027, 1029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1024, 1029, 1027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1029, 1024, 926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1030, 1031, 1032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1032, 1033, 1030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1034, 1030, 1033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1033, 1035, 1034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1036, 1034, 1035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1036, 1035, 1028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1025, 1028, 1035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1037, 1025, 1035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1025, 1037, 1038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1038, 1026, 1025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1039, 1035, 1033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1033, 1032, 1040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1041, 1042, 1043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1041, 1039, 1042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1044, 1045, 955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1045, 1044, 1046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1046, 1043, 1045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1043, 1046, 1047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1047, 1041, 1043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1048, 1041, 1047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1048, 1049, 1041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1049, 1048, 1050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1048, 1047, 1051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1052, 1046, 1044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1046, 1052, 1053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 897, 868, 1054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1054, 909, 897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 909, 1054, 1055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 868, 897, 869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1039, 1037, 1035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1037, 1039, 1056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 938, 1057, 1058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1057, 938, 1059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1060, 947, 1061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 947, 1060, 945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1026, 1038, 1062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1062, 1063, 1026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1063, 1062, 1064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1064, 1065, 1063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1065, 1064, 1066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1060, 1065, 1066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1065, 1060, 1061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1061, 1067, 1065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1067, 1061, 1068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1068, 1069, 1067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1067, 1063, 1065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1070, 937, 1069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 937, 1070, 935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 927, 937, 936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 937, 927, 924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1069, 1068, 1070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1071, 1070, 1068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1070, 1071, 1072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1073, 1072, 1071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1072, 1073, 1074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1074, 933, 1072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 933, 1074, 930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 930, 934, 933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 934, 930, 929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1074, 952, 951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 952, 1074, 1073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1075, 1076, 1077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1078, 1075, 1077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1075, 1078, 1079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 929, 1075, 1079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1080, 929, 1079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 929, 1080, 934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1059, 934, 1080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 934, 1059, 932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1059, 936, 932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 936, 1059, 938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1081, 1078, 1077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1075, 929, 931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 931, 1076, 1075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1076, 931, 1082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 931, 1083, 1082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1083, 931, 928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1057, 1084, 1085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1080, 1057, 1059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1057, 1080, 1086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1084, 1057, 1086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1078, 1084, 1086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1084, 1078, 1081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 952, 946, 949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 946, 952, 1073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1073, 947, 946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 947, 1073, 1071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 935, 1072, 933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1072, 935, 1070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 924, 1069, 937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1069, 924, 1087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1087, 1067, 1069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1067, 1087, 1063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1087, 1026, 1063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1026, 1087, 1024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 924, 1024, 1087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1024, 924, 926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1086, 1079, 1078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1079, 1086, 1080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 947, 1068, 1061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1068, 947, 1071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 943, 1088, 987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1088, 943, 985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 987, 1089, 986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1089, 987, 1090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1088, 1090, 987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1090, 1088, 1085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1088, 1057, 1085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1057, 1088, 1058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 985, 1058, 1088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1058, 985, 1023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 984, 1023, 985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1084, 1089, 1090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1084, 1090, 1085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 973, 984, 942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 984, 973, 974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 972, 891, 888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 891, 972, 974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1021, 974, 972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 972, 922, 1021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 922, 972, 912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 890, 911, 888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 911, 586, 583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 586, 911, 1005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 911, 890, 1005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 890, 1006, 1005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1006, 890, 1008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1008, 1091, 1006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1091, 587, 1006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1091, 588, 587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1091, 1092, 588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1092, 1091, 1093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1091, 1008, 877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 879, 1091, 877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1091, 879, 1094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1094, 1093, 1091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1093, 1094, 1095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1093, 1096, 1092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1096, 1093, 1097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1095, 1097, 1093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1097, 1095, 1098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 849, 1098, 1095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1095, 850, 849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 850, 1095, 1094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1094, 856, 850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 856, 1094, 879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 879, 860, 856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1097, 1099, 1096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 854, 847, 844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 847, 854, 849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1098, 849, 854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 853, 1098, 854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1098, 853, 1100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1100, 1097, 1098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1097, 1100, 1101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1099, 1097, 1101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1101, 838, 1099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 840, 1099, 838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 843, 836, 610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 836, 843, 841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 841, 837, 836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 837, 841, 838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 838, 1101, 837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1101, 835, 837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 835, 1101, 1100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1100, 834, 835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 834, 1100, 853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 855, 834, 853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 855, 846, 1014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 846, 855, 844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 834, 855, 1102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1014, 1102, 855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1102, 1014, 1103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1014, 825, 1103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 825, 826, 1103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 826, 825, 824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1102, 832, 834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 832, 1102, 831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1103, 831, 1102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 831, 1103, 826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 825, 1014, 1013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1013, 718, 825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 718, 1013, 719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1056, 1041, 1049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1041, 1056, 1039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 966, 963, 964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 963, 966, 969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1058, 939, 938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 939, 1058, 1023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 951, 930, 1074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 930, 951, 928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 953, 928, 951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 928, 953, 1083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 909, 955, 908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 955, 909, 1044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1104, 955, 1045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 955, 1104, 954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1047, 1053, 1051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1053, 1047, 1046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1042, 1045, 1043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1045, 1042, 1104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1044, 1055, 1052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1055, 1044, 909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 958, 900, 1105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 900, 958, 898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1106, 923, 959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 923, 1106, 1107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1107, 922, 923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 922, 1107, 1022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1039, 1033, 1040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1042, 1039, 1040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 906, 1105, 900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 900, 907, 906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 907, 900, 899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1105, 956, 958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 957, 898, 958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 923, 957, 959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 957, 923, 910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 910, 585, 957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 898, 957, 585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 585, 910, 583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1108, 940, 1022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1022, 1109, 1108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1109, 1022, 1107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1107, 1110, 1109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1110, 1107, 1106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1111, 1110, 1106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 959, 1111, 1106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1111, 959, 956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1112, 1111, 956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 956, 1105, 1112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1034, 1111, 1113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1111, 1034, 1036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1110, 1111, 1036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1036, 1028, 1110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1110, 1028, 1109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1109, 1028, 1029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1109, 1029, 1108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 926, 1108, 1029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1108, 926, 925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 940, 1108, 925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1040, 1104, 1042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1104, 1040, 1032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1032, 954, 1104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 954, 1032, 1031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1031, 905, 954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 905, 1031, 903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1114, 903, 1031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1031, 1030, 1114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1113, 1114, 1030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1030, 1034, 1113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1115, 1112, 1105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1105, 906, 1115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 904, 1115, 906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1115, 904, 903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 903, 1114, 1115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1112, 1115, 1114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1114, 1113, 1112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1111, 1112, 1113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 905, 896, 908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 896, 905, 902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 902, 842, 896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 842, 902, 839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 904, 839, 902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 839, 904, 840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1099, 840, 907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 907, 1096, 1099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1096, 907, 899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 899, 1092, 1096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1092, 899, 901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 901, 588, 1092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 588, 901, 584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1000, 989, 998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 989, 1000, 1116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1117, 989, 1116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 989, 1117, 988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1118, 988, 1117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 988, 1118, 990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1118, 1119, 990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1119, 1118, 1120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 578, 1120, 579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1120, 578, 1119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 581, 1119, 578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1119, 581, 619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 619, 990, 1119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 990, 619, 621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 582, 618, 581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 618, 582, 751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 752, 620, 618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 620, 752, 623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 777, 623, 752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 623, 777, 1121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1121, 624, 623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 624, 1121, 1122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 626, 1122, 1121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1122, 626, 760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 628, 760, 626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 760, 628, 629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1121, 627, 626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 627, 1121, 777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 915, 760, 761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 760, 915, 1122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1123, 1122, 915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1122, 1123, 624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1123, 622, 624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 622, 1123, 750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1124, 750, 1123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 750, 1124, 748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1124, 1001, 748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1001, 1124, 1125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1125, 1126, 1001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1126, 1125, 1127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 676, 1127, 1125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1125, 677, 676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 677, 1125, 1124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1124, 915, 677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 915, 1124, 1123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1001, 997, 996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 997, 1001, 1126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 680, 921, 679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1128, 679, 921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 679, 1128, 676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1127, 676, 1128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1128, 1129, 1127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1129, 1126, 1127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1126, 1129, 746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 746, 997, 1126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 997, 746, 743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 743, 995, 997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 746, 1130, 744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1130, 746, 1129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1131, 1130, 1129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1129, 1128, 1131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 921, 1131, 1128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1131, 921, 919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 919, 1132, 1131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1132, 919, 920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1130, 1131, 1132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1133, 801, 802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 801, 1133, 920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1134, 920, 1133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 920, 1134, 1132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1135, 1132, 1134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1132, 1135, 1130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1136, 1130, 1135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1130, 1136, 744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1137, 744, 1136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 744, 1137, 745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 802, 815, 1133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1138, 1133, 815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1133, 1138, 1134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1139, 1134, 1138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1134, 1139, 1135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1140, 1135, 1139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1135, 1140, 1136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1141, 1136, 1140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1136, 1141, 1137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1142, 1137, 1141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 994, 745, 992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 745, 994, 743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1143, 745, 1137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 745, 1143, 992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1144, 992, 1143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 992, 1144, 993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1137, 1142, 1143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1145, 1143, 1142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1143, 1145, 1144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 995, 743, 994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 994, 999, 995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 999, 994, 991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1146, 1147, 1148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1149, 1150, 1151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1151, 1150, 1152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1153, 1154, 1155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1154, 1150, 1156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1157, 1154, 1156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1156, 1158, 1157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1159, 1160, 1161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1161, 1162, 1158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1162, 1161, 1163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1161, 1164, 1163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1154, 1157, 1165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1166, 1158, 1162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1158, 1166, 1167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1167, 1157, 1158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1168, 1169, 1170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1170, 1171, 1157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1172, 1170, 1173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1174, 1173, 1170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1173, 1174, 1175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1176, 1175, 1174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1175, 1176, 1177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1167, 1174, 1170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1166, 1178, 1179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1180, 1181, 1182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1182, 1183, 1180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1183, 1182, 1184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1184, 1185, 1183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1185, 1184, 1186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1176, 1185, 1186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1185, 1176, 1187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1188, 1189, 1190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1187, 1174, 1191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1174, 1167, 1191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1166, 1191, 1167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1191, 1166, 1192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1192, 1187, 1191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1187, 1192, 1193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1193, 1185, 1187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1185, 1193, 1194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1195, 1185, 1194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1185, 1195, 1183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1195, 1180, 1183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1179, 1192, 1166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1192, 1179, 1196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1196, 1193, 1192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1193, 1196, 1197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1197, 1194, 1193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1194, 1197, 1198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1199, 1194, 1198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1194, 1199, 1195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1195, 1199, 1200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1180, 1195, 1200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1201, 1202, 1203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1203, 1204, 1201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1205, 1201, 1204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1206, 1205, 1204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1205, 1206, 1207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1208, 1207, 1206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1207, 1208, 1209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1208, 1200, 1209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1199, 1209, 1200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1209, 1199, 1210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1211, 1212, 1213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1210, 1207, 1209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1207, 1210, 1214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1215, 1207, 1214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1207, 1215, 1216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1217, 1205, 1215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1205, 1217, 1213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1218, 1213, 1217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1219, 1220, 1221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1220, 1219, 1222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1222, 1223, 1220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1223, 1222, 1224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1224, 1218, 1223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1218, 1224, 1225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1213, 1218, 1225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1226, 1213, 1225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1213, 1226, 1201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1202, 1201, 1226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1224, 1226, 1225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1227, 1228, 1202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1226, 1227, 1202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1227, 1226, 1229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1226, 1224, 1229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1224, 1230, 1229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1230, 1224, 1222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1222, 1231, 1230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1231, 1222, 1219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1232, 1231, 1219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1221, 1232, 1219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1230, 1227, 1229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1228, 1227, 1233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1234, 1233, 1227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1227, 1230, 1234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1231, 1234, 1230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1234, 1231, 1235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1231, 1236, 1235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1236, 1237, 1235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1237, 1236, 1238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1239, 1238, 1236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1238, 1239, 1240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1233, 1234, 1241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1235, 1241, 1234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1241, 1235, 1237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1164, 1161, 1242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1242, 1243, 1164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1243, 1242, 1244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1149, 1232, 1243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1232, 1149, 1245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1232, 1245, 1231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1236, 1231, 1245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1236, 1245, 1239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1149, 1239, 1245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1239, 1149, 1246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1150, 1149, 1242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1242, 1156, 1150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1156, 1242, 1161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1239, 1247, 1240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1247, 1239, 1151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1151, 1248, 1247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1248, 1151, 1249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1249, 1250, 1248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1250, 1249, 1251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1252, 1250, 1251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1250, 1252, 1253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1254, 1255, 1256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1253, 1254, 1257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1254, 1258, 1257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1258, 1254, 1259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1259, 1260, 1258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1260, 1259, 1261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1261, 1262, 1260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1262, 1261, 1263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1263, 1261, 1264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1259, 1265, 1261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1186, 1177, 1176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1177, 1186, 1263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1186, 1184, 1263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1184, 1262, 1263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1262, 1184, 1266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1182, 1266, 1184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1266, 1182, 1267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1182, 1268, 1267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1268, 1182, 1181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1269, 1268, 1181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1268, 1269, 1270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1271, 1270, 1269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1270, 1271, 1272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1271, 1273, 1272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1200, 1208, 1180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1181, 1180, 1208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1206, 1181, 1208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1181, 1206, 1269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1204, 1269, 1206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1269, 1204, 1271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1204, 1203, 1271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1273, 1271, 1203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1203, 1274, 1273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1228, 1203, 1202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1275, 1276, 1277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1278, 1277, 1276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1278, 1279, 1277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1277, 1279, 1280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1280, 1281, 1277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1277, 1281, 1282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1283, 1277, 1282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1284, 1277, 1285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1286, 1277, 1284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1287, 1277, 1286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1288, 1277, 1287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1288, 1289, 1277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1289, 1290, 1277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1291, 1277, 1290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1291, 1292, 1277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1277, 1292, 1293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1277, 1293, 1275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1294, 1295, 1296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1295, 1294, 1297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1298, 1299, 1300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1299, 1298, 1301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1302, 1303, 1304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1303, 1302, 1305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1306, 1307, 1308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1307, 1306, 1309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1305, 1310, 1303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1310, 1305, 1311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1301, 1304, 1299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1304, 1301, 1302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1312, 1313, 1314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1313, 1312, 1315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1315, 1316, 1313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1316, 1315, 1317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1318, 1319, 1320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1319, 1318, 1321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1322, 1323, 1324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1323, 1322, 1325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1326, 1327, 1328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1327, 1329, 1328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1329, 1327, 1325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1329, 1325, 1322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1329, 1322, 1330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1330, 1322, 1331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1332, 1330, 1331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1332, 1331, 1333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1334, 1332, 1333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1333, 1335, 1334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1327, 1326, 1336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1337, 1338, 1334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1332, 1334, 1338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1339, 1332, 1338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1332, 1339, 1340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1339, 1341, 1340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1340, 1341, 1342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1342, 1341, 1330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1332, 1342, 1330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1332, 1340, 1342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1337, 1343, 1344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1345, 1346, 1343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1347, 1343, 1346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1343, 1347, 1344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1347, 1348, 1344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1348, 1337, 1344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1337, 1348, 1349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1338, 1337, 1349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1350, 1338, 1349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1338, 1350, 1339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1350, 1351, 1339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1350, 1349, 1348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1352, 1347, 1353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1354, 1355, 1353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1346, 1354, 1353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1346, 1353, 1347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1356, 1357, 1358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1357, 1356, 1359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1357, 1359, 1352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1359, 1360, 1352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1347, 1352, 1360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1348, 1347, 1360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1360, 1356, 1348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1356, 1350, 1348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1350, 1356, 1351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1356, 1360, 1359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1361, 1362, 1363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1362, 1361, 1364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1365, 1364, 1361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1364, 1365, 1366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1367, 1366, 1365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1367, 1368, 1366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1367, 1369, 1368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1369, 1351, 1368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1351, 1358, 1368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1358, 1351, 1356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1366, 1368, 1358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1370, 1371, 1372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1366, 1357, 1373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1373, 1364, 1366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1364, 1373, 1374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1375, 1364, 1374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1364, 1375, 1362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1375, 1376, 1362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1377, 1378, 1379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1380, 1378, 1377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1378, 1380, 1376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1376, 1375, 1378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1381, 1378, 1375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1375, 1374, 1381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1374, 1382, 1381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1382, 1374, 1373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1373, 1352, 1382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1352, 1373, 1357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1378, 1381, 1379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1383, 1384, 1385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1384, 1383, 1386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1386, 1387, 1384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1386, 1388, 1387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1389, 1387, 1388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1389, 1388, 1380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1390, 1380, 1388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1380, 1390, 1376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1363, 1376, 1390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1376, 1363, 1362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1369, 1367, 1391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1365, 1391, 1367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1391, 1365, 1392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1365, 1393, 1392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1393, 1365, 1361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1361, 1383, 1393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1383, 1361, 1363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1363, 1386, 1383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1386, 1363, 1390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1388, 1386, 1390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1341, 1339, 1351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1351, 1369, 1341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1394, 1341, 1369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1391, 1394, 1369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1394, 1391, 1395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1392, 1395, 1391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1395, 1392, 1396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1393, 1396, 1392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1393, 1385, 1396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1385, 1393, 1383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1341, 1394, 1397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1330, 1341, 1397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1330, 1397, 1329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1397, 1394, 1329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1394, 1395, 1329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1396, 1329, 1395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1329, 1396, 1328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1385, 1328, 1396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1385, 1384, 1328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1326, 1328, 1384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1384, 1389, 1326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1389, 1384, 1387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1398, 1399, 1400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1399, 1401, 1402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1401, 1399, 1403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1399, 1398, 1403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1404, 1403, 1398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1405, 1404, 1398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1398, 1406, 1405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1406, 1398, 1400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1400, 1407, 1406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1407, 1400, 1408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1399, 1408, 1400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1404, 1409, 1410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1409, 1404, 1405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1405, 1411, 1409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1411, 1405, 1406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1406, 1412, 1411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1412, 1406, 1407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1407, 1413, 1412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1413, 1407, 1414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1407, 1415, 1414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1415, 1407, 1408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1413, 1416, 1412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1416, 1413, 1417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1417, 1418, 1416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1418, 1417, 1419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1420, 1418, 1419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1412, 1421, 1411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1421, 1412, 1416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1416, 1422, 1421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1422, 1416, 1418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1423, 1422, 1418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1418, 1420, 1423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1424, 1423, 1420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1425, 1426, 1423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1422, 1423, 1426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1426, 1427, 1422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1427, 1421, 1422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1421, 1427, 1428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1428, 1411, 1421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1411, 1428, 1409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1428, 1410, 1409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1410, 1428, 1429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1428, 1430, 1429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1427, 1426, 1431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1432, 1431, 1426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1426, 1425, 1432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1433, 1432, 1425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1431, 1432, 1434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1430, 1428, 1427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1427, 1435, 1430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1435, 1427, 1431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1431, 1436, 1435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1436, 1431, 1434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1437, 1436, 1434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1432, 1437, 1434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1437, 1432, 1438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1432, 1433, 1438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1433, 1439, 1438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1440, 1441, 1442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1443, 1442, 1441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1441, 1444, 1443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1445, 1443, 1444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1443, 1445, 1446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1447, 1446, 1445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1448, 1447, 1445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1449, 1447, 1448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1447, 1449, 1439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1437, 1439, 1449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1439, 1437, 1438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1436, 1437, 1450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1449, 1450, 1437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1450, 1449, 1451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1448, 1451, 1449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1451, 1448, 1452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1445, 1452, 1448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1452, 1445, 1453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1445, 1454, 1453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1454, 1445, 1444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1444, 1455, 1454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1455, 1444, 1456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1456, 1457, 1455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1457, 1456, 1458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1458, 1459, 1457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1459, 1458, 1460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1461, 1459, 1460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1462, 1461, 1460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1460, 1463, 1462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1440, 1462, 1463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1441, 1440, 1463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1463, 1460, 1458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1456, 1463, 1458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1463, 1456, 1441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1444, 1441, 1456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1464, 1442, 1465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1442, 1464, 1440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1464, 1466, 1440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1462, 1440, 1466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1466, 1467, 1462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1461, 1462, 1467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1468, 1461, 1467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1461, 1468, 1469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1402, 1469, 1468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1469, 1402, 1401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1467, 1466, 1470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1471, 1467, 1470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1467, 1471, 1468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1471, 1402, 1468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1402, 1471, 1472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1472, 1399, 1402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1408, 1399, 1473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1399, 1472, 1473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1474, 1473, 1472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1472, 1475, 1474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1475, 1472, 1471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1471, 1476, 1475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1476, 1471, 1470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1470, 1477, 1476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1477, 1470, 1466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1466, 1464, 1477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1478, 1408, 1473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1473, 1474, 1478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1408, 1479, 1415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1479, 1408, 1478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1480, 1479, 1478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1474, 1480, 1478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1474, 1481, 1480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1481, 1482, 1480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1482, 1481, 1483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1484, 1483, 1481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1483, 1484, 1485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1484, 1486, 1485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1479, 1480, 1482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1486, 1484, 1487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1487, 1488, 1486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1488, 1487, 1489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1490, 1488, 1489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1488, 1490, 1491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1492, 1491, 1490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1491, 1492, 1493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1494, 1493, 1492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1493, 1494, 1495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1494, 1496, 1495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1439, 1433, 1497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1497, 1447, 1439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1447, 1497, 1498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1499, 1447, 1498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1447, 1499, 1446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1494, 1446, 1499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1494, 1443, 1446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1443, 1494, 1492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1442, 1443, 1492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1465, 1442, 1492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1496, 1494, 1499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1499, 1500, 1496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1500, 1499, 1498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1498, 1501, 1500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1501, 1498, 1497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1497, 1502, 1501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1502, 1497, 1433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1433, 1424, 1502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1424, 1433, 1425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1423, 1424, 1425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1503, 1504, 1505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1506, 1505, 1504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1505, 1506, 1507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1506, 1508, 1507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1508, 1506, 1509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1509, 1510, 1508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1510, 1509, 1511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1512, 1510, 1511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1510, 1512, 1513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1512, 1514, 1513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1515, 1516, 1517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1518, 1519, 1520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1521, 1519, 1518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1522, 1523, 1519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1519, 1524, 1522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1524, 1519, 1521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1525, 1524, 1521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1525, 1521, 1518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1518, 1526, 1525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1527, 1526, 1518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1528, 1526, 1527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1529, 1528, 1527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1528, 1529, 1530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1531, 1526, 1528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1532, 1533, 1534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1534, 1533, 1535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1535, 1533, 1536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1531, 1535, 1536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1537, 1531, 1536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1531, 1537, 1526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1538, 1526, 1537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1526, 1538, 1539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1526, 1539, 1525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1540, 1525, 1539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1541, 1542, 1543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1525, 1540, 1544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1540, 1541, 1544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1545, 1544, 1541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1541, 1546, 1545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1547, 1545, 1546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1548, 1547, 1546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1548, 1549, 1547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1549, 1548, 1550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1551, 1549, 1550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1552, 1551, 1550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1545, 1547, 1549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1553, 1552, 1554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1555, 1556, 1557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1556, 1553, 1557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1554, 1557, 1553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1557, 1554, 1558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1554, 1559, 1558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1554, 1560, 1559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1560, 1554, 1552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1550, 1560, 1552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1560, 1550, 1548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1560, 1548, 1546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1551, 1552, 1561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1552, 1553, 1561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1553, 1562, 1561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1562, 1553, 1556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1563, 1562, 1556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1556, 1555, 1563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1564, 1563, 1555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1563, 1564, 1565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1566, 1565, 1564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1566, 1567, 1565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1562, 1563, 1568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1565, 1568, 1563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1569, 1566, 1564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1523, 1522, 1570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1567, 1523, 1570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1523, 1567, 1571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1567, 1566, 1571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1566, 1572, 1571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1572, 1566, 1569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1573, 1572, 1569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1564, 1573, 1569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1573, 1564, 1574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1573, 1574, 1575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1572, 1576, 1577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1576, 1578, 1579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1578, 1576, 1580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1576, 1572, 1580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1572, 1573, 1580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1575, 1580, 1573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1580, 1575, 1578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1575, 1581, 1578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1582, 1578, 1581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1578, 1582, 1579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1583, 1579, 1582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1579, 1583, 1584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1585, 1579, 1584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1579, 1585, 1576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1586, 1576, 1585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1581, 1587, 1582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1587, 1581, 1588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1529, 1584, 1530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1584, 1589, 1530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1589, 1584, 1583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1583, 1590, 1589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1590, 1583, 1582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1582, 1591, 1590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1591, 1582, 1587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1592, 1591, 1587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1588, 1592, 1587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1592, 1588, 1593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1591, 1592, 1594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1593, 1534, 1592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1535, 1592, 1534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1592, 1535, 1594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1535, 1531, 1594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1591, 1594, 1531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1531, 1590, 1591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1590, 1531, 1528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1590, 1528, 1589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1589, 1528, 1530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1595, 1575, 1574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1581, 1575, 1595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1596, 1581, 1595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1581, 1596, 1588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1597, 1588, 1596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1588, 1597, 1593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1598, 1593, 1597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1593, 1598, 1599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1534, 1593, 1599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1534, 1599, 1532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1597, 1600, 1598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1600, 1597, 1601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1597, 1596, 1601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1595, 1601, 1596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1601, 1595, 1574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1568, 1602, 1603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1604, 1603, 1602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1603, 1604, 1605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1606, 1605, 1604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1605, 1606, 1607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1605, 1607, 1608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1609, 1608, 1607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1608, 1609, 1610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1610, 1611, 1608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1603, 1608, 1611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1608, 1603, 1605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1607, 1544, 1609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1544, 1545, 1609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1545, 1610, 1609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1610, 1545, 1549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1549, 1551, 1610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1611, 1610, 1551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1561, 1611, 1551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1611, 1561, 1562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1562, 1603, 1611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1603, 1562, 1568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1568, 1565, 1567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1567, 1570, 1568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1568, 1570, 1602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1522, 1602, 1570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1602, 1522, 1604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1524, 1604, 1522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1604, 1524, 1606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1525, 1606, 1524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1525, 1607, 1606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1607, 1525, 1544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1612, 1613, 1614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1613, 1612, 1615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1614, 1616, 1617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1616, 1614, 1613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1613, 1618, 1616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1618, 1613, 1619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1619, 1620, 1618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1618, 1621, 1616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1622, 1623, 1624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1621, 1622, 1624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1622, 1621, 1625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1625, 1621, 1618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1618, 1626, 1625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1618, 1620, 1626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1620, 1627, 1626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1622, 1626, 1627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1626, 1622, 1625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1628, 1629, 1630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1630, 1631, 1628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1619, 1628, 1631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1631, 1632, 1619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1620, 1619, 1632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1632, 1633, 1620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1627, 1620, 1633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1634, 1627, 1633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1627, 1634, 1622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1623, 1622, 1634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1634, 1635, 1623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1631, 1630, 1636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1636, 1632, 1631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1632, 1636, 1637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1633, 1632, 1637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1638, 1633, 1637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1633, 1638, 1634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1638, 1639, 1634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1635, 1634, 1639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1639, 1640, 1635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1640, 1639, 1641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1639, 1638, 1642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1642, 1641, 1639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1641, 1642, 1643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1642, 1644, 1643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1642, 1645, 1644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1645, 1642, 1638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1638, 1636, 1645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1636, 1638, 1637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1630, 1645, 1636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1646, 1647, 1648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1649, 1648, 1647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1647, 1650, 1649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1651, 1649, 1650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1643, 1651, 1650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1651, 1643, 1644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1644, 1652, 1651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1652, 1644, 1645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1645, 1629, 1652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1629, 1645, 1630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1652, 1649, 1651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1653, 1654, 1655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1656, 1654, 1653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1628, 1654, 1656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1629, 1628, 1656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1656, 1657, 1629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1657, 1652, 1629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1657, 1658, 1652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1649, 1652, 1658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1648, 1649, 1658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1657, 1656, 1653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1659, 1648, 1660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1648, 1661, 1660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1661, 1648, 1658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1661, 1658, 1662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1658, 1657, 1662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1662, 1657, 1663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1657, 1653, 1663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1653, 1664, 1663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1655, 1664, 1653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1655, 1665, 1664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1665, 1655, 1666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1666, 1667, 1665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1666, 1668, 1667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1668, 1660, 1667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1661, 1667, 1660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1667, 1661, 1665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1661, 1664, 1665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1664, 1661, 1662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1664, 1662, 1663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1628, 1619, 1654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1613, 1654, 1619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1613, 1655, 1654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1615, 1655, 1613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1655, 1615, 1666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1669, 1666, 1615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1669, 1668, 1666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1668, 1669, 1670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1659, 1668, 1670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1668, 1659, 1660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1671, 1612, 1672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1671, 1615, 1612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1671, 1673, 1615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1673, 1669, 1615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1674, 1669, 1673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1669, 1674, 1670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1675, 1670, 1674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1670, 1675, 1659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1675, 1646, 1659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1648, 1659, 1646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1647, 1646, 1676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1677, 1676, 1646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1677, 1646, 1678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1679, 1677, 1678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1680, 1679, 1678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1679, 1680, 1681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1673, 1681, 1680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1673, 1680, 1674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1678, 1674, 1680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1674, 1678, 1675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1678, 1646, 1675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1673, 1671, 1682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1682, 1681, 1673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1681, 1682, 1683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1683, 1679, 1681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1679, 1683, 1684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1685, 1679, 1684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1679, 1685, 1677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1685, 1686, 1677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1676, 1677, 1686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1686, 1687, 1676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1647, 1676, 1687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1650, 1647, 1687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1686, 1685, 1688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1686, 1688, 1689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1687, 1686, 1689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1232, 1221, 1690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1691, 1232, 1690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1232, 1691, 1243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1692, 1243, 1691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1243, 1692, 1164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1693, 1164, 1692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1164, 1693, 1163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1178, 1163, 1693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1163, 1178, 1162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1178, 1166, 1162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1694, 1695, 1696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1695, 1694, 1697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1698, 1697, 1694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1698, 1699, 1697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1698, 1700, 1699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1698, 1694, 1700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1701, 1702, 1703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1702, 1704, 1703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1704, 1702, 1699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1699, 1705, 1704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1705, 1699, 1700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1700, 1706, 1705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1694, 1706, 1700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1706, 1694, 1707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1696, 1707, 1694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1696, 1708, 1707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1707, 1709, 1706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1709, 1710, 1706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1710, 1705, 1706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1705, 1710, 1711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1712, 1705, 1711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1705, 1712, 1704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1704, 1712, 1703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1712, 1713, 1703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1713, 1714, 1703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1714, 1713, 1715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1716, 1717, 1718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1718, 1715, 1716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1713, 1716, 1715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1719, 1714, 1715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1715, 1718, 1719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1720, 1719, 1718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1718, 1717, 1720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1720, 1717, 1721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1722, 1721, 1717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1721, 1722, 1723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1724, 1721, 1723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1721, 1724, 1725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1725, 1726, 1721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1720, 1721, 1726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1726, 1727, 1720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1719, 1720, 1727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1719, 1727, 1728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1714, 1719, 1728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1701, 1714, 1728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1701, 1703, 1714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1726, 1725, 1729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1730, 1726, 1729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1726, 1730, 1731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1727, 1726, 1731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1727, 1731, 1728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1731, 1732, 1728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1733, 1728, 1732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1728, 1733, 1701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1732, 1731, 1730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1734, 1702, 1735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1702, 1701, 1735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1736, 1735, 1701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1736, 1701, 1733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1737, 1736, 1733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1738, 1735, 1739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1735, 1736, 1740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1740, 1741, 1735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1741, 1739, 1735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1741, 1742, 1739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1739, 1742, 1743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1741, 1740, 1744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1708, 1696, 1745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1746, 1708, 1745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1745, 1747, 1746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1748, 1746, 1747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1738, 1748, 1747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1738, 1749, 1748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1749, 1738, 1739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1750, 1749, 1739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1743, 1750, 1739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1751, 1750, 1743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1752, 1751, 1743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1746, 1753, 1708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1753, 1746, 1754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1746, 1748, 1754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1748, 1755, 1754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1755, 1748, 1749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1749, 1756, 1755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1756, 1749, 1750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1750, 1751, 1756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1757, 1756, 1751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1751, 1758, 1757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1755, 1753, 1754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1753, 1755, 1757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1756, 1757, 1755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1751, 1742, 1759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1758, 1751, 1759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1760, 1753, 1757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1753, 1760, 1761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1761, 1708, 1753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1708, 1761, 1762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1762, 1707, 1708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1763, 1757, 1758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1757, 1763, 1760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1764, 1760, 1763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1760, 1764, 1765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1765, 1761, 1760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1761, 1765, 1766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1762, 1761, 1766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1766, 1767, 1762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1707, 1762, 1767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1709, 1707, 1767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1710, 1709, 1768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1769, 1768, 1709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1709, 1767, 1769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1767, 1766, 1769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1768, 1769, 1770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1712, 1711, 1713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1716, 1713, 1711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1710, 1716, 1711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1716, 1710, 1717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1768, 1717, 1710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1717, 1768, 1722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1722, 1768, 1770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1770, 1723, 1722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1723, 1770, 1771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1724, 1723, 1771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1772, 1773, 1774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1775, 1776, 1777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1776, 1775, 1778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1779, 1778, 1775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1778, 1779, 1780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1780, 1781, 1782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1781, 1780, 1779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1782, 1783, 1784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1783, 1782, 1781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1783, 1785, 1784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1785, 1783, 1786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1787, 1788, 1789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1788, 1787, 1790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1787, 1791, 1792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1791, 1787, 1789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1793, 1791, 1794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1791, 1793, 1792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1795, 1790, 1787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1790, 1795, 1796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1792, 1795, 1787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1795, 1792, 1797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1798, 1796, 1795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1796, 1798, 1799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1795, 1800, 1798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1800, 1795, 1797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1801, 1802, 1803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1802, 1801, 1804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1784, 1803, 1802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1803, 1784, 1785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1782, 1802, 1805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1802, 1782, 1784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1806, 1807, 1808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1807, 1806, 1809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1810, 1807, 1811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1807, 1810, 1808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1794, 1802, 1804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1802, 1794, 1805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1810, 1804, 1801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1804, 1810, 1811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1812, 1778, 1780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1778, 1812, 1813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1813, 1791, 1789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1791, 1813, 1812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1800, 1814, 1815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1814, 1800, 1816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1814, 1807, 1809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1807, 1814, 1816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1811, 1816, 1793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1816, 1811, 1807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1780, 1805, 1812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1805, 1780, 1782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1813, 1776, 1778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1776, 1813, 1817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1793, 1804, 1811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1804, 1793, 1794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1794, 1812, 1805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1812, 1794, 1791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1789, 1817, 1813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1817, 1789, 1788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1779, 1818, 1819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1818, 1779, 1775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1775, 1820, 1818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1820, 1775, 1777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1773, 1772, 1821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1819, 1781, 1779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1781, 1819, 1822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1822, 1783, 1781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1783, 1822, 1823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1783, 1824, 1786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1824, 1783, 1823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1825, 1826, 1827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1826, 1825, 1828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1825, 1829, 1828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1829, 1825, 1830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1831, 1829, 1830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1829, 1831, 1832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1833, 1827, 1834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1827, 1833, 1825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1830, 1833, 1835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1833, 1830, 1825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1836, 1834, 1837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1834, 1836, 1833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1833, 1838, 1835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1838, 1833, 1836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1822, 1839, 1823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1839, 1822, 1840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1841, 1842, 1843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1842, 1841, 1844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1845, 1842, 1844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1842, 1845, 1846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1832, 1839, 1840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1839, 1832, 1847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1845, 1847, 1846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1847, 1845, 1848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1849, 1818, 1850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1818, 1849, 1819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1850, 1829, 1849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1829, 1850, 1828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1838, 1851, 1852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1851, 1838, 1853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1851, 1842, 1852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1842, 1851, 1843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1846, 1852, 1842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1852, 1846, 1831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1819, 1840, 1822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1840, 1819, 1849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1850, 1820, 1854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1820, 1850, 1818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1831, 1847, 1832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1847, 1831, 1846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1832, 1849, 1829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1849, 1832, 1840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1828, 1854, 1826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1854, 1828, 1850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1855, 1856, 1857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1856, 1855, 1858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1859, 1858, 1855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1860, 1861, 1862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1861, 1860, 1863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1860, 1864, 1863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1864, 1865, 1863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1865, 1864, 1866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1864, 1856, 1866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1856, 1867, 1866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1867, 1856, 1858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1858, 1868, 1867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1868, 1858, 1869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1870, 1871, 1872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1873, 1872, 1871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1872, 1873, 1862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1874, 1862, 1873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1862, 1874, 1860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1874, 1875, 1860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1864, 1860, 1875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1876, 1864, 1875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1864, 1876, 1877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1878, 1877, 1876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1877, 1878, 1879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1879, 1856, 1877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1856, 1864, 1877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1875, 1874, 1880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1876, 1881, 1878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1880, 1876, 1875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1876, 1880, 1882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1881, 1876, 1882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1882, 1883, 1881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1883, 1882, 1884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1880, 1884, 1882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1884, 1880, 1885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1874, 1885, 1880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1885, 1874, 1886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1873, 1886, 1874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1870, 1887, 1888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1871, 1870, 1888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1888, 1889, 1871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1889, 1873, 1871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1873, 1889, 1890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1886, 1873, 1890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1890, 1891, 1886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1891, 1885, 1886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1885, 1891, 1892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1892, 1884, 1885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1888, 1887, 1893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1889, 1888, 1893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1894, 1889, 1893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1889, 1894, 1895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1895, 1890, 1889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1890, 1895, 1896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1891, 1890, 1896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1896, 1897, 1891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1897, 1892, 1891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1892, 1897, 1898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1899, 1896, 1895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1895, 1900, 1899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1900, 1895, 1894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1901, 1900, 1894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1894, 1902, 1901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1902, 1894, 1893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1893, 1903, 1902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1903, 1893, 1887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1904, 1903, 1887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1887, 1870, 1904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1900, 1901, 1905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1906, 1907, 1908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1908, 1904, 1906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1903, 1904, 1908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1907, 1906, 1909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1909, 1906, 1910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1904, 1910, 1906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1910, 1904, 1911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1870, 1911, 1904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1911, 1870, 1912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1872, 1912, 1870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1912, 1872, 1913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1862, 1913, 1872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1913, 1862, 1861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1914, 1909, 1910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1909, 1914, 1915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1865, 1861, 1863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1861, 1865, 1916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1917, 1861, 1916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1861, 1917, 1913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1917, 1912, 1913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1912, 1917, 1918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1919, 1912, 1918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1912, 1919, 1911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1919, 1920, 1911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1911, 1920, 1910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1921, 1910, 1920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1910, 1921, 1914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1922, 1921, 1923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1921, 1922, 1924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1925, 1921, 1924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1921, 1925, 1914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1926, 1914, 1925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1914, 1926, 1915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1926, 1927, 1915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1927, 1909, 1915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1909, 1927, 1928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1928, 1907, 1909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1927, 1926, 1929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1930, 1931, 1932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1931, 1933, 1932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1933, 1931, 1934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1935, 1933, 1934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1936, 1935, 1934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1935, 1936, 1937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1936, 1938, 1937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1938, 1939, 1937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1938, 1923, 1939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1923, 1938, 1922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1931, 1936, 1934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1931, 1930, 1940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1941, 1931, 1940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1936, 1931, 1941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1942, 1936, 1941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1936, 1942, 1943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1938, 1936, 1943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1944, 1945, 1946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1945, 1944, 1947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1948, 1945, 1947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1947, 1949, 1948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1949, 1950, 1948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1950, 1949, 1951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1952, 1950, 1951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1951, 1953, 1952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1953, 1932, 1952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1932, 1953, 1930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1954, 1947, 1944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1947, 1954, 1955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1949, 1947, 1955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1955, 1956, 1949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1956, 1951, 1949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1951, 1956, 1957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1953, 1951, 1957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1954, 1958, 1955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1956, 1955, 1958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1956, 1958, 1959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1960, 1959, 1958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1959, 1960, 1961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1960, 1962, 1961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1962, 1960, 1963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1962, 1963, 1964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1963, 1965, 1964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1965, 1966, 1964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1965, 1967, 1968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1967, 1965, 1969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1970, 1969, 1965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1965, 1963, 1970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1960, 1970, 1963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1970, 1960, 1954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1958, 1954, 1960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1971, 1967, 1969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1966, 1965, 1968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1968, 1972, 1966, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1972, 1968, 1973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1968, 1974, 1973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1974, 1968, 1967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1975, 1974, 1967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1967, 1971, 1975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1971, 1976, 1975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1977, 1975, 1976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1976, 1978, 1977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1975, 1977, 1979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1974, 1975, 1979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1980, 1981, 1978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1978, 1976, 1980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1982, 1980, 1976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1976, 1971, 1982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1983, 1982, 1971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1969, 1983, 1971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1983, 1969, 1984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1969, 1970, 1984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1970, 1944, 1984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1944, 1970, 1954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1944, 1983, 1984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1985, 1986, 1987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1988, 1987, 1986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1987, 1988, 1981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1981, 1980, 1987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1989, 1987, 1980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1980, 1982, 1989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1990, 1989, 1982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1982, 1983, 1990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1946, 1990, 1983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1983, 1944, 1946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1987, 1989, 1985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1991, 1946, 1945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1992, 1993, 1994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1993, 1992, 1995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1995, 1991, 1993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1991, 1995, 1996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1946, 1991, 1996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1990, 1946, 1996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1990, 1996, 1997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1989, 1990, 1997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1997, 1998, 1989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1998, 1997, 1999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1996, 1999, 1997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1999, 1996, 1995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1995, 2000, 1999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2000, 1995, 1992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1999, 2001, 1998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2001, 1999, 2000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2000, 2002, 2001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2002, 2000, 2003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2003, 2004, 2002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2004, 2003, 2005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2005, 2006, 2004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2006, 2005, 2007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2008, 2006, 2007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2006, 2008, 2009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2009, 2010, 2006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2011, 2006, 2010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2006, 2011, 2004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2012, 2013, 2014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2013, 2015, 2014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2008, 2014, 2015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2016, 2008, 2015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2008, 2016, 2009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2016, 2017, 2009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2010, 2009, 2017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2017, 2018, 2010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2018, 2011, 2010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2011, 2018, 2019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2015, 2013, 2020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2020, 2016, 2015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2016, 2020, 2021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2021, 2022, 2016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2017, 2016, 2022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2022, 2021, 2023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2024, 2025, 2026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2027, 2026, 2025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2028, 2027, 2025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2027, 2028, 2018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2018, 2017, 2027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2017, 2029, 2027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2029, 2017, 2022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2022, 2030, 2029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2031, 2029, 2030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2029, 2031, 2026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2032, 2026, 2031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2026, 2027, 2029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2028, 2019, 2018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2019, 2028, 2033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2034, 2033, 2028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2033, 2034, 2035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2036, 2035, 2034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2035, 2036, 2037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1897, 2037, 2036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2037, 1897, 2038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1897, 1896, 2038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1896, 1899, 2038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1897, 2039, 1898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2039, 1897, 2036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2034, 2039, 2036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2039, 2034, 2040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1898, 2041, 1892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2041, 1898, 2042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1898, 2043, 2042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2043, 1898, 2039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2039, 2024, 2043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2024, 2039, 2040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2025, 2024, 2040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2034, 2025, 2040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2025, 2034, 2028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1884, 1892, 2041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2041, 1883, 1884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1883, 2041, 2044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2042, 2044, 2041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2044, 2042, 2045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2043, 2045, 2042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2045, 2043, 2046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2043, 2032, 2046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2032, 2043, 2024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2026, 2032, 2024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2047, 2048, 2049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1933, 2050, 2051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2050, 1933, 2052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1933, 1935, 2052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1933, 1952, 1932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1952, 1933, 2051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1950, 1952, 2051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2051, 2053, 1950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2053, 2051, 2050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2050, 2054, 2053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2054, 2050, 2055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2055, 2056, 2054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2057, 2054, 2056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2058, 2057, 2056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2057, 2058, 2059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2059, 1993, 2057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1993, 2059, 1994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2056, 2055, 2060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1993, 2061, 2057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2061, 1993, 1991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1991, 2062, 2061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2062, 1991, 1945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1945, 1948, 2062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1950, 2062, 1948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2062, 1950, 2053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2053, 2061, 2062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2061, 2053, 2054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2054, 2057, 2061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2050, 2063, 2055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2063, 2050, 2052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2064, 2065, 2066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2065, 2064, 2067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2067, 2068, 2069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2068, 2067, 2064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2070, 2068, 2064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2066, 2070, 2064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2070, 2066, 2071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2071, 2072, 2073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2073, 2070, 2071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2070, 2073, 2074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2075, 2070, 2074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2070, 2075, 2076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2068, 2070, 2076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2076, 2077, 2068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2078, 2068, 2077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2068, 2078, 2069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2078, 2079, 2069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2079, 2078, 2080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2078, 2081, 2082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2081, 2078, 2077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2077, 2083, 2081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2083, 2077, 2084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2077, 2076, 2084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2076, 2085, 2084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2085, 2076, 2075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2086, 2085, 2075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2074, 2086, 2075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2086, 2074, 2087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2085, 2086, 2088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2089, 2085, 2088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2085, 2089, 2090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2083, 2085, 2090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2085, 2083, 2084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2089, 2091, 2092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2091, 2089, 2088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2088, 2093, 2091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2093, 2088, 2086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2086, 2094, 2093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2094, 2086, 2087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2087, 2095, 2094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2095, 2087, 2096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2096, 2097, 2095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2097, 2096, 2098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2073, 2087, 2074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2087, 2073, 2096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2073, 2098, 2096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2098, 2073, 2072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2072, 2099, 2098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2099, 2072, 2100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2098, 2101, 2097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2101, 2098, 2099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2099, 2063, 2101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2063, 2099, 2055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1935, 2063, 2052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1920, 1923, 1921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1923, 1920, 2102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2102, 1939, 1923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1939, 2102, 2103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2103, 1937, 1939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1937, 2103, 1935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2063, 1935, 2103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2103, 2101, 2063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2101, 2103, 2104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2104, 2097, 2101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2105, 2102, 1920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2102, 2104, 2103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2102, 2105, 2104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2105, 2106, 2104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2106, 2105, 2107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2108, 2106, 2107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2106, 2108, 2109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2110, 2109, 2108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2097, 2104, 2106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2106, 2095, 2097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2095, 2106, 2109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2111, 2095, 2109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2109, 2110, 2111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2112, 2111, 2110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2111, 2112, 2113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2112, 2114, 2113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2091, 2113, 2114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2113, 2091, 2093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2093, 2111, 2113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2111, 2093, 2094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2095, 2111, 2094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2114, 2112, 2115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2048, 2047, 2116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2117, 2118, 2119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2118, 2120, 2119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2120, 2118, 2121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2122, 2120, 2121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2120, 2122, 2123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2123, 2124, 2120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2124, 2123, 2125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2124, 2125, 2126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2126, 2125, 2127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2125, 2128, 2127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2129, 2130, 2131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2130, 2129, 2132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2128, 2132, 2129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2132, 2128, 2133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2128, 2134, 2133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2128, 1905, 2134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1905, 2128, 2125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2125, 1900, 1905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1900, 2125, 2123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2123, 1899, 1900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1899, 2123, 2122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2122, 2038, 1899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2038, 2122, 2037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2122, 2035, 2037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2035, 2122, 2121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2121, 2033, 2035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2033, 2121, 2118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2118, 2019, 2033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2019, 2118, 2135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2118, 2117, 2135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2136, 2137, 2138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2137, 2136, 2139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2140, 2139, 2136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2139, 2140, 2141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2136, 2142, 2140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2142, 2136, 2143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2143, 2144, 2142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2144, 2143, 2145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1985, 2144, 2145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2145, 1986, 1985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1986, 2145, 2146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2145, 2117, 2146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2117, 2145, 2143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2143, 2138, 2117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2138, 2143, 2136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2144, 1985, 1989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2147, 2049, 2148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2149, 2150, 2151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2150, 2149, 2152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2153, 2149, 2151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2151, 2154, 2153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2154, 2151, 2155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2151, 2156, 2155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2156, 2151, 2150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2150, 2157, 2156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2157, 2150, 2158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2150, 2159, 2158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2159, 2150, 2152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2160, 2159, 2152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2152, 2161, 2160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2161, 2152, 2149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2162, 2161, 2149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2149, 2153, 2162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2153, 2163, 2162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2163, 2153, 2164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2154, 2164, 2153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2164, 2154, 2165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2154, 2166, 2165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2167, 2168, 2161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2161, 2162, 2167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2167, 2162, 2169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2163, 2169, 2162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2169, 2163, 2170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2170, 2171, 2169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2171, 2170, 2172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2168, 2167, 2173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2167, 2171, 2173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2171, 2167, 2169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2159, 2174, 2158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2174, 2159, 2175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2159, 2176, 2175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2176, 2159, 2177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2177, 2178, 2176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2178, 2177, 2179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2177, 2180, 2179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2180, 2177, 2160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2160, 2168, 2180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2168, 2160, 2161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2159, 2160, 2177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2176, 2178, 2181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2182, 2183, 2184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2183, 2182, 2185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2186, 2185, 2182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2185, 2186, 2187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2188, 2187, 2186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2187, 2188, 2189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2190, 2187, 2189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2188, 2191, 2192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2191, 2188, 2186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2186, 2193, 2191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2193, 2186, 2182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2182, 2194, 2193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2194, 2182, 2184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2195, 2194, 2184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2183, 2195, 2184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2195, 2183, 2196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2197, 2190, 2198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2190, 2197, 2199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2187, 2190, 2199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2200, 2187, 2199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2187, 2200, 2185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2201, 2185, 2200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2185, 2201, 2183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2202, 2183, 2201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2183, 2202, 2196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2202, 2203, 2196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2203, 2195, 2196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2195, 2203, 2204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2203, 2202, 2205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2206, 2205, 2202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2201, 2206, 2202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2206, 2201, 2207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2201, 2208, 2207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2208, 2201, 2200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2199, 2208, 2200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2208, 2199, 2197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2209, 2206, 2210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2207, 2210, 2206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2210, 2207, 2211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2207, 2212, 2211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2212, 2207, 2208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2208, 2213, 2212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2213, 2208, 2197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2197, 2214, 2213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2214, 2197, 2198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2215, 2209, 2216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2194, 2195, 2217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2195, 2218, 2217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2218, 2195, 2204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2219, 2203, 2220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2203, 2215, 2220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2215, 2203, 2205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2205, 2221, 2215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2205, 2206, 2221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2049, 2147, 2047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2222, 2223, 2224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2223, 2222, 2225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2222, 2226, 2227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2228, 2222, 2227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2222, 2228, 2225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2223, 2229, 2230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2231, 2223, 2230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2232, 2233, 2231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2234, 2235, 2236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2235, 2234, 2237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2238, 2237, 2234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2237, 2238, 2239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2226, 2239, 2238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2239, 2226, 2240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2226, 2222, 2240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2222, 2241, 2240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2241, 2222, 2224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2242, 2241, 2224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2243, 2244, 2245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2235, 2243, 2245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2243, 2235, 2237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2237, 2246, 2243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2246, 2237, 2239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2239, 2241, 2246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2241, 2239, 2240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2246, 2247, 2248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2247, 2246, 2241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2241, 2242, 2247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2249, 2247, 2242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2250, 2249, 2242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2249, 2250, 2251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2247, 2249, 2252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2253, 2247, 2252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2247, 2253, 2248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2253, 2254, 2248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2254, 2253, 2255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2252, 2256, 2253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2257, 2253, 2256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2253, 2257, 2255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2258, 2255, 2257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2255, 2258, 2259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2244, 2255, 2259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2255, 2244, 2254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2244, 2243, 2254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2243, 2248, 2254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2248, 2243, 2246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2223, 2242, 2224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2242, 2223, 2250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2223, 2231, 2250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2233, 2249, 2251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2249, 2233, 2260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2260, 2252, 2249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2252, 2260, 2261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2256, 2252, 2261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2262, 2263, 2264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2263, 2262, 2265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2262, 2266, 2265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2267, 2265, 2266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2268, 2267, 2266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2267, 2268, 2269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2269, 2270, 2271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2270, 2269, 2268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2272, 2270, 2268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2266, 2272, 2268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2272, 2266, 2273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2266, 2262, 2273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2274, 2273, 2262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2264, 2274, 2262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2274, 2264, 2275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2276, 2274, 2275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2273, 2274, 2277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2278, 2273, 2277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2273, 2278, 2272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2279, 2272, 2278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2272, 2279, 2280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2270, 2272, 2280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2274, 2276, 2281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2281, 2277, 2274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2277, 2281, 2282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2282, 2278, 2277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2278, 2282, 2283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2283, 2279, 2278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2279, 2283, 2284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2285, 2279, 2284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2285, 2280, 2279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2280, 2285, 2286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2284, 2283, 2287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2282, 2287, 2283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2287, 2282, 2288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2282, 2281, 2288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2289, 2288, 2281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2286, 2270, 2280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2270, 2286, 2290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2291, 2270, 2290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2270, 2291, 2271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2292, 2271, 2291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2271, 2292, 2293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2294, 2271, 2293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2271, 2294, 2269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2295, 2269, 2294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2269, 2295, 2267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2296, 2292, 2291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2295, 2297, 2267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2265, 2267, 2297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2298, 2265, 2297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2298, 2263, 2265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2263, 2298, 2299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2300, 2299, 2298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2299, 2300, 2301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2297, 2300, 2298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2300, 2297, 2302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2297, 2295, 2302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2303, 2304, 2305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2304, 2303, 2306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2307, 2308, 2309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2308, 2307, 2310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2311, 2312, 2313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2314, 2313, 2312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2315, 2314, 2312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2313, 2314, 2316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2315, 2317, 2318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2315, 2312, 2317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2319, 2317, 2312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2312, 2311, 2319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2311, 2320, 2319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2320, 2311, 2321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2322, 2320, 2321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2319, 2320, 2317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2317, 2323, 2324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2323, 2317, 2325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2320, 2325, 2317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2325, 2320, 2326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2320, 2322, 2326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2327, 2326, 2322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2326, 2327, 2328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2327, 2329, 2328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2330, 2328, 2329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2329, 2331, 2330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2330, 2332, 2333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2333, 2325, 2330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2328, 2330, 2325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2326, 2328, 2325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2325, 2333, 2323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2334, 2335, 2336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2335, 2334, 2337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2337, 2334, 2338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2338, 2339, 2337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2339, 2338, 2323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2340, 2339, 2323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2333, 2340, 2323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2340, 2333, 2341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2341, 2333, 2332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2332, 2342, 2341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2334, 2343, 2338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2342, 2344, 2341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2340, 2341, 2344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2345, 2340, 2344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2339, 2340, 2345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2346, 2339, 2345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2339, 2346, 2337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2337, 2346, 2335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2344, 2346, 2345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2347, 2344, 2342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2348, 2344, 2347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2348, 2346, 2344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2348, 2349, 2346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2349, 2335, 2346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2350, 2335, 2349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2350, 2351, 2335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2351, 2350, 2352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2353, 2351, 2352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2352, 2354, 2353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2355, 2349, 2348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2349, 2355, 2350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2355, 2352, 2350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2354, 2352, 2355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2347, 2356, 2357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2357, 2358, 2347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2358, 2348, 2347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2355, 2348, 2358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2359, 2355, 2358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2354, 2355, 2359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2360, 2354, 2359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2360, 2361, 2354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2361, 2360, 2362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2360, 2363, 2362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2364, 2358, 2357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2358, 2364, 2359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2359, 2364, 2365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2366, 2359, 2365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2359, 2366, 2360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2363, 2360, 2366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2363, 2367, 2362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2367, 2363, 2368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2368, 2369, 2367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2369, 2368, 2370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2370, 2371, 2369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2371, 2370, 2372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2373, 2369, 2371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2369, 2373, 2374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2374, 2367, 2369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2367, 2374, 2375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2361, 2367, 2375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2367, 2361, 2362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2354, 2376, 2353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2361, 2376, 2354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2376, 2361, 2377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2375, 2377, 2361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2377, 2375, 2378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2374, 2378, 2375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2378, 2374, 2379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2373, 2379, 2374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2379, 2373, 2380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2380, 2381, 2379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2381, 2378, 2379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2381, 2382, 2383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2378, 2381, 2383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2383, 2377, 2378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2377, 2383, 2384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2377, 2384, 2376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2384, 2353, 2376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2353, 2384, 2351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2384, 2385, 2351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2351, 2385, 2336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2335, 2351, 2336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2382, 2384, 2383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2384, 2382, 2386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2385, 2384, 2386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2387, 2334, 2336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2336, 2385, 2387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2388, 2387, 2385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2385, 2389, 2388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2389, 2385, 2386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2386, 2390, 2389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2390, 2386, 2382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2382, 2391, 2390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2391, 2382, 2392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2382, 2381, 2392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2381, 2380, 2393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2394, 2381, 2393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2381, 2394, 2392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2395, 2392, 2394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2392, 2395, 2391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2395, 2308, 2391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2308, 2390, 2391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2390, 2308, 2396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2396, 2389, 2390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2389, 2396, 2397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2308, 2395, 2309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2397, 2388, 2389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2388, 2397, 2398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2398, 2399, 2388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2399, 2398, 2400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2401, 2399, 2400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2400, 2402, 2401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2403, 2401, 2402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2401, 2403, 2404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2403, 2405, 2404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2406, 2404, 2405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2399, 2401, 2407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2401, 2406, 2407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2406, 2401, 2404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2405, 2403, 2408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2387, 2388, 2399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2407, 2387, 2399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2387, 2407, 2409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2407, 2406, 2409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2409, 2406, 2410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2406, 2411, 2410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2411, 2412, 2410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2412, 2411, 2413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2414, 2412, 2413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2415, 2414, 2413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2414, 2415, 2318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2318, 2324, 2414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2324, 2318, 2317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2416, 2413, 2411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2413, 2416, 2415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2417, 2412, 2418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2412, 2417, 2410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2417, 2409, 2410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2387, 2409, 2417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2418, 2387, 2417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2334, 2387, 2418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2412, 2334, 2418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2334, 2412, 2343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2412, 2414, 2343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2414, 2338, 2343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2338, 2414, 2324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2338, 2324, 2323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2419, 2420, 2421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2420, 2419, 2422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2423, 2424, 2425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2424, 2423, 2426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2420, 2427, 2428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2427, 2420, 2429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2426, 2430, 2428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2430, 2426, 2423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2431, 2432, 2433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2432, 2431, 2434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2435, 2436, 2437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2436, 2435, 2438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2439, 2440, 2441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2440, 2439, 2442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2443, 2440, 2442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2443, 2444, 2445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2444, 2443, 2446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2442, 2446, 2443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2446, 2442, 2447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2439, 2447, 2442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2447, 2439, 2448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2436, 2448, 2439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2448, 2436, 2449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2438, 2449, 2436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2449, 2438, 2450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2434, 2450, 2438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2450, 2434, 2451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2434, 2452, 2451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2452, 2434, 2431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2432, 2438, 2435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2438, 2432, 2434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2436, 2441, 2437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2441, 2436, 2439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2429, 2453, 2427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2453, 2429, 2454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2455, 2456, 2457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2456, 2455, 2458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2304, 2459, 2305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2459, 2304, 2460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2432, 2461, 2433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2461, 2432, 2462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2463, 2462, 2464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2462, 2463, 2461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2464, 2306, 2463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2306, 2464, 2304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2465, 2466, 2467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2466, 2465, 2468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2465, 2437, 2441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2437, 2465, 2467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2440, 2465, 2441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2465, 2440, 2469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2465, 2470, 2468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2470, 2465, 2469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2310, 2454, 2429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2454, 2310, 2307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2468, 2471, 2472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2471, 2468, 2470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2422, 2308, 2310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2308, 2422, 2396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2467, 2473, 2474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2473, 2467, 2466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2467, 2435, 2437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2435, 2467, 2474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2466, 2460, 2473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2460, 2466, 2475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2466, 2472, 2475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2472, 2466, 2468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2476, 2477, 2478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2427, 2456, 2458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2456, 2427, 2453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2405, 2479, 2480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2479, 2405, 2481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2405, 2408, 2481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2470, 2481, 2408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2481, 2470, 2469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2440, 2481, 2469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2481, 2440, 2479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2440, 2443, 2479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2443, 2480, 2479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2480, 2443, 2445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2406, 2405, 2480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2411, 2406, 2480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2445, 2411, 2480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2411, 2445, 2416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2444, 2416, 2445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2416, 2444, 2482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2482, 2415, 2416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2415, 2482, 2483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2483, 2318, 2415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2318, 2483, 2315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2477, 2476, 2484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2397, 2422, 2419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2422, 2397, 2396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2426, 2455, 2424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2455, 2426, 2458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2426, 2427, 2458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2427, 2426, 2428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2485, 2486, 2487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2420, 2430, 2421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2430, 2420, 2428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2488, 2489, 2490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2489, 2488, 2491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1806, 2491, 1809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2491, 1806, 2492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2493, 2494, 2495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2494, 2493, 2496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2497, 2490, 2498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2490, 2497, 2488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2499, 2500, 2501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2500, 2499, 2502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2499, 2490, 2502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2490, 2499, 2498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1809, 2488, 1814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2488, 1809, 2491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2503, 2504, 2501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2504, 2503, 2495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2505, 1815, 2497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1815, 2505, 2506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2499, 2504, 2507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2504, 2499, 2501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2498, 2507, 2508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2507, 2498, 2499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2509, 2495, 2494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2495, 2509, 2504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2508, 2510, 2511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2510, 2508, 2507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2512, 1798, 2506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1798, 2512, 1799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1814, 2497, 1815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2497, 1814, 2488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2513, 1810, 1801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1801, 2514, 2513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2514, 1801, 1803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1785, 2514, 1803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2514, 1785, 2515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1786, 2515, 1785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2515, 1786, 2516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2492, 2517, 2489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2518, 2517, 2492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2519, 2518, 2492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2520, 2519, 2492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1806, 2520, 2492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1806, 2521, 2520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2521, 1806, 1808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1808, 2522, 2521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2522, 1808, 1810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1810, 2513, 2522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2517, 2518, 2523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2517, 2523, 2524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2500, 2525, 2503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2525, 2500, 2526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2500, 2527, 2526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2527, 2528, 2526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2527, 2489, 2528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2489, 2517, 2528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2528, 2517, 2529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2529, 2517, 2524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2529, 2524, 2530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2524, 2531, 2530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2526, 2528, 2532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2503, 2533, 2493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2525, 2533, 2503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2525, 2534, 2533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2535, 2534, 2525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2525, 2526, 2535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2526, 2532, 2535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2532, 2530, 2535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2532, 2528, 2530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2528, 2529, 2530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2534, 2535, 2536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2531, 2537, 2530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2535, 2530, 2537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2538, 2535, 2537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2536, 2535, 2538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2538, 2539, 2536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2539, 2534, 2536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2540, 2534, 2539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2534, 2540, 2533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2533, 2540, 2541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2493, 2533, 2541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2538, 2542, 2543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2542, 2538, 2537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2542, 2537, 2531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2541, 2544, 2545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2544, 2541, 2546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2546, 2541, 2540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2541, 2496, 2493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2496, 2541, 2545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2545, 1316, 2496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1316, 2545, 1313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2545, 1314, 1313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1314, 2545, 2544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2547, 1314, 2544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2544, 2548, 2547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2548, 2544, 2546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2548, 2546, 2549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1314, 2547, 2550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2551, 2549, 2552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2549, 2553, 2548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2551, 2553, 2549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2553, 2551, 2554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2551, 2555, 2554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2555, 2551, 2556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2552, 2556, 2551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2556, 2552, 2557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2549, 2546, 2540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2549, 2540, 2552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2552, 2540, 2539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2539, 2538, 2552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2557, 2552, 2538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2543, 2557, 2538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2557, 2543, 2558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2558, 2556, 2557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2556, 2558, 2559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2559, 2555, 2556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2555, 2559, 2560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1307, 2561, 1308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2561, 1307, 2512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1307, 1799, 2512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1799, 1307, 2116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2116, 1796, 1799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1796, 2116, 2047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2047, 1790, 1796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1790, 2047, 2147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2562, 1790, 2147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1790, 2562, 1788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2562, 1817, 1788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1817, 2562, 2563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2563, 1776, 1817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1776, 2563, 1821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1772, 1776, 1821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1776, 1772, 1777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2486, 2485, 2564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2512, 2505, 2561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2505, 2512, 2506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2511, 2505, 2508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2505, 2511, 2561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2504, 2510, 2507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2510, 2504, 2509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2498, 2505, 2497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2505, 2498, 2508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2303, 2565, 2306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2565, 2303, 2566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2307, 2567, 2568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2567, 2307, 2309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2569, 2570, 2571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2572, 2570, 2569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2569, 2573, 2572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2570, 2572, 2574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2575, 2576, 2577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2576, 2575, 2578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2579, 2578, 2575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2578, 2579, 2580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2581, 2580, 2579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2580, 2581, 2571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2581, 2582, 2571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2582, 2569, 2571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2569, 2582, 2583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2573, 2569, 2583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2584, 2579, 2585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2575, 2585, 2579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2585, 2575, 2586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2586, 2587, 2585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2587, 2586, 2588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2586, 2589, 2588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2590, 2589, 2591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2592, 2593, 2594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2593, 2592, 2590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2590, 2595, 2593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2595, 2590, 2591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2596, 2595, 2591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2596, 2591, 2589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2597, 2596, 2589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2589, 2586, 2597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2586, 2577, 2597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2577, 2586, 2575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2595, 2596, 2598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2599, 2596, 2597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2596, 2599, 2600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2600, 2598, 2596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2600, 2601, 2598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2601, 2600, 2602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2600, 2603, 2602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2603, 2600, 2599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2604, 2603, 2599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2597, 2604, 2599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2604, 2597, 2577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2603, 2604, 2605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2606, 2603, 2605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2603, 2606, 2607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2576, 2604, 2577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2604, 2576, 2608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2608, 2605, 2604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2605, 2608, 2609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2609, 2606, 2605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2606, 2609, 2610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2610, 2611, 2606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2611, 2610, 2612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2612, 2613, 2611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2613, 2612, 2614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2614, 2615, 2613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2615, 2614, 2616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2452, 2615, 2616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2615, 2452, 2431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2116, 1309, 2048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2617, 2618, 2619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2618, 2617, 2620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2620, 2621, 2618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2621, 2620, 2622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2620, 2623, 2622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2623, 2620, 2624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2620, 2625, 2624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2625, 2620, 2617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2626, 2625, 2617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2625, 2626, 2627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2628, 2627, 2626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2627, 2628, 2629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2630, 2628, 2631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2628, 2630, 2629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2632, 2629, 2630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2632, 2627, 2629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2627, 2632, 2633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2633, 2625, 2627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2634, 2625, 2633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2624, 2625, 2634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2635, 2624, 2634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2624, 2635, 2623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2636, 2637, 2638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2637, 2636, 2635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2635, 2639, 2637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2639, 2635, 2634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2634, 2633, 2639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2639, 2633, 2640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2633, 2641, 2640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2641, 2633, 2632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2636, 2623, 2635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2623, 2636, 2642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2642, 2622, 2623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2622, 2642, 2643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2643, 2621, 2622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2621, 2643, 2644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2645, 2646, 2647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2648, 2647, 2646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2649, 2650, 2648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2649, 2648, 2646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2651, 2649, 2646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2645, 2651, 2646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2645, 2641, 2651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2641, 2645, 2652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2652, 2640, 2641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2640, 2652, 2653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2653, 2652, 2654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2655, 2653, 2654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2656, 2640, 2653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2640, 2656, 2639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2641, 2632, 2651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2630, 2651, 2632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2651, 2630, 2657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2649, 2651, 2657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2658, 2649, 2657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2657, 2659, 2658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2660, 2658, 2659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2659, 2657, 2661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2657, 2631, 2661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2631, 2657, 2630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2662, 2573, 2583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2573, 2662, 2663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2662, 2664, 2663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2664, 2662, 2665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2665, 2660, 2664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2660, 2665, 2666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2658, 2660, 2666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2666, 2667, 2658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2649, 2658, 2667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2667, 2668, 2649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2582, 2662, 2583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2669, 2662, 2582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2662, 2669, 2665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2669, 2666, 2665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2667, 2666, 2669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2669, 2670, 2667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2668, 2667, 2670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2668, 2670, 2671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2670, 2672, 2671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2673, 2671, 2672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2671, 2673, 2674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2674, 2668, 2671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2672, 2675, 2676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2675, 2672, 2677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2672, 2670, 2677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2670, 2669, 2677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2582, 2677, 2669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2677, 2582, 2678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2581, 2678, 2582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2678, 2581, 2584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2579, 2584, 2581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2679, 2584, 2680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2584, 2679, 2678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2677, 2678, 2679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2677, 2679, 2675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2673, 2672, 2676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2676, 2681, 2673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2675, 2681, 2676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2681, 2675, 2682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2682, 2675, 2679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2679, 2683, 2682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2679, 2680, 2683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2587, 2683, 2680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2584, 2587, 2680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2587, 2584, 2585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2684, 2685, 2686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2686, 2683, 2684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2683, 2686, 2682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2686, 2681, 2682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2587, 2687, 2688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2683, 2587, 2688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2689, 2683, 2688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2683, 2689, 2684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2689, 2690, 2684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2684, 2690, 2685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2690, 2691, 2685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2691, 2692, 2685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2692, 2691, 2693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2693, 2691, 2694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2689, 2695, 2690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2695, 2689, 2696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2689, 2697, 2696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2697, 2689, 2698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2687, 2698, 2689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2687, 2689, 2688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2699, 2695, 2700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2696, 2700, 2695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2700, 2696, 2592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2696, 2590, 2592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2590, 2696, 2697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2589, 2590, 2697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2698, 2589, 2697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2588, 2589, 2698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2588, 2698, 2687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2687, 2587, 2588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2700, 2701, 2699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2701, 2700, 2702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2700, 2594, 2702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2594, 2700, 2592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2703, 2394, 2393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2394, 2703, 2704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2704, 2395, 2394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2395, 2704, 2705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2567, 2395, 2705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2706, 2567, 2705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2567, 2706, 2707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2708, 2707, 2706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2707, 2708, 2699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2695, 2699, 2708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2395, 2567, 2309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2706, 2709, 2708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2709, 2706, 2710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2705, 2710, 2706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2710, 2705, 2704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2703, 2710, 2704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2710, 2703, 2711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2691, 2710, 2711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2710, 2691, 2709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2691, 2690, 2709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2690, 2708, 2709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2708, 2690, 2695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2711, 2694, 2691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2694, 2711, 2712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2703, 2712, 2711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2712, 2703, 2713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2693, 2714, 2715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2714, 2693, 2694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2694, 2716, 2714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2716, 2694, 2712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2712, 2717, 2716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2717, 2712, 2713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2713, 2718, 2717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2718, 2713, 2380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2703, 2380, 2713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2380, 2703, 2393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2714, 2719, 2720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2719, 2714, 2716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2717, 2719, 2716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2719, 2717, 2721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2718, 2721, 2717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2721, 2718, 2722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2722, 2723, 2721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2724, 2721, 2723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2719, 2725, 2720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2725, 2719, 2724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2721, 2724, 2719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2723, 2722, 2726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2727, 2728, 2729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2729, 2730, 2727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2727, 2730, 2731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2732, 2731, 2730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2733, 2731, 2732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2732, 2734, 2733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2734, 2732, 2735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2735, 2725, 2734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2725, 2735, 2720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2735, 2714, 2720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2730, 2736, 2732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2714, 2735, 2715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2732, 2715, 2735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2732, 2736, 2715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2737, 2715, 2736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2738, 2737, 2736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2736, 2739, 2738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2739, 2736, 2740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2730, 2740, 2736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2729, 2740, 2730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2729, 2673, 2740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2673, 2681, 2740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2681, 2739, 2740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2681, 2686, 2739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2739, 2686, 2738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2685, 2738, 2686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2738, 2685, 2737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2737, 2685, 2692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2715, 2737, 2692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2692, 2693, 2715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2650, 2649, 2668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2668, 2674, 2650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2674, 2648, 2650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2648, 2674, 2741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2647, 2648, 2741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2647, 2741, 2742, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2742, 2741, 2728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2728, 2741, 2674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2674, 2729, 2728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2674, 2673, 2729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1309, 2116, 1307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2701, 2743, 2744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2743, 2701, 2745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2746, 2747, 2748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2747, 2746, 2749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2743, 2750, 2751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2750, 2743, 2752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2748, 2753, 2746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2753, 2748, 2752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2431, 2754, 2615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2754, 2431, 2433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2755, 2611, 2613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2611, 2755, 2756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2754, 2613, 2615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2613, 2754, 2755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2611, 2607, 2606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2607, 2611, 2756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2751, 2453, 2454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2453, 2751, 2750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2757, 2758, 2759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2758, 2757, 2760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2751, 2744, 2743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2744, 2751, 2568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2761, 2762, 2763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2762, 2761, 2764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2763, 2755, 2754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2755, 2763, 2762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2761, 2757, 2764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2757, 2761, 2565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2765, 2456, 2766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2456, 2765, 2457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2744, 2567, 2707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2567, 2744, 2568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2767, 2764, 2768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2764, 2767, 2762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2767, 2755, 2762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2755, 2767, 2756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2768, 2769, 2770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2769, 2768, 2759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2768, 2757, 2759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2757, 2768, 2764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1296, 1317, 1294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1317, 1296, 1316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1320, 2771, 1318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2771, 1320, 2772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2773, 1321, 2774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1321, 2773, 1319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2550, 1311, 2775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1311, 2550, 1310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1300, 2776, 1298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2776, 1300, 2777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2563, 2778, 2779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2750, 2456, 2453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2456, 2750, 2766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2699, 2744, 2707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2744, 2699, 2701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2748, 2750, 2752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2750, 2748, 2766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2748, 2765, 2766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2765, 2748, 2747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2778, 2563, 2562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2743, 2753, 2752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2753, 2743, 2745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2780, 2781, 2782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2781, 2780, 2783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1841, 2782, 2784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2782, 1841, 1843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2785, 2786, 2787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2786, 2785, 2788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2789, 2783, 2780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2783, 2789, 2790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2791, 2792, 2793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2792, 2791, 2794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2791, 2783, 2790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2783, 2791, 2793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1843, 2780, 2782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2780, 1843, 1851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2795, 2796, 2788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2796, 2795, 2794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2797, 1853, 2798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1853, 2797, 2789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2791, 2796, 2794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2796, 2791, 2799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2790, 2799, 2791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2799, 2790, 2800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2801, 2788, 2796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2788, 2801, 2786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2800, 2802, 2799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2802, 2800, 2803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2804, 1836, 1837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1836, 2804, 2798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1851, 2789, 2780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2789, 1851, 1853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2781, 2805, 2784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2806, 2805, 2781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2806, 2781, 2807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2808, 2806, 2807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2808, 2807, 2792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2808, 2792, 2809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2795, 2809, 2792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2795, 2810, 2809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2785, 2810, 2795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2811, 2810, 2785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2812, 2805, 2806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2813, 2808, 2809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2813, 2814, 2808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2814, 2806, 2808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2815, 2806, 2814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2815, 2812, 2806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2815, 2816, 2812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2816, 2805, 2812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2816, 2817, 2805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2817, 2818, 2805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2784, 2805, 2818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2813, 2815, 2814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2813, 2819, 2820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2821, 2815, 2813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2821, 2813, 2822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2822, 2813, 2820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2823, 2822, 2820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2820, 2819, 2823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2819, 2824, 2823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2823, 2824, 2825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2825, 2824, 2826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2825, 2826, 2827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2553, 2827, 2826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2822, 2823, 2825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2822, 2825, 2828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2825, 2829, 2828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2829, 2825, 2827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2548, 2553, 2826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2826, 2830, 2548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2824, 2830, 2826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2827, 2553, 2554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2555, 2827, 2554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2827, 2555, 2829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2555, 2831, 2829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2832, 2829, 2831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2829, 2832, 2828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2833, 2828, 2832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2828, 2833, 2822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2834, 2822, 2833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2822, 2834, 2821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2835, 2821, 2834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2815, 2821, 2835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2815, 2835, 2816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2831, 2555, 2560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2562, 2148, 2778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2804, 2797, 2798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2797, 2804, 2836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2803, 2797, 2836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2797, 2803, 2800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2796, 2802, 2801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2802, 2796, 2799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2790, 2797, 2800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2797, 2790, 2789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2837, 2838, 2839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2838, 2837, 2840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2841, 2840, 2837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2840, 2841, 2842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2842, 2843, 2844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2843, 2842, 2841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2845, 2843, 2841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2837, 2845, 2841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2845, 2837, 2846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2837, 2847, 2846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2847, 2837, 2839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2839, 2848, 2847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2848, 2839, 2849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2838, 2849, 2839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2843, 2845, 2850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2850, 2851, 2843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2852, 2843, 2851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2851, 2850, 2853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2849, 2838, 2854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2838, 2855, 2854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2855, 2838, 2856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2857, 2855, 2856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2858, 2857, 2856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2857, 2858, 2859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2860, 2859, 2858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2859, 2860, 2861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2862, 2861, 2860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2861, 2862, 2863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2855, 2857, 2130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2863, 2864, 2865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2865, 2861, 2863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2861, 2865, 2866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2844, 2867, 2868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2868, 2862, 2844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2844, 2862, 2842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2860, 2842, 2862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2842, 2860, 2840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2858, 2840, 2860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2858, 2838, 2840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2838, 2858, 2856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2862, 2868, 2863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2864, 2863, 2868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2868, 2869, 2864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2869, 2868, 2867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2870, 2869, 2867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2867, 2852, 2870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2852, 2867, 2871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2843, 2852, 2871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2844, 2843, 2871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2867, 2844, 2871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2869, 2870, 2872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2148, 2562, 2147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2873, 2874, 2875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2874, 2873, 2876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2877, 2876, 2873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2876, 2878, 2879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2878, 2876, 2880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2876, 2877, 2880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2881, 2880, 2877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2877, 2882, 2881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2882, 2877, 2883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2873, 2883, 2877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2883, 2873, 2884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2873, 2885, 2884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2885, 2873, 2875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2875, 2886, 2885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2887, 2885, 2886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2886, 2888, 2887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2885, 2887, 2889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2890, 2885, 2889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2885, 2890, 2884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2891, 2884, 2890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2884, 2891, 2883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2892, 2883, 2891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2883, 2892, 2882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2892, 2893, 2882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2893, 2881, 2882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2881, 2893, 2894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2893, 2892, 2895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2892, 2896, 2895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2896, 2892, 2897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2891, 2897, 2892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2897, 2898, 2896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2897, 2891, 2899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2899, 2900, 2897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2900, 2898, 2897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2900, 2901, 2898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2901, 2900, 2902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2903, 2902, 2900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2902, 2903, 2904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2900, 2899, 2905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2900, 2905, 2903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2906, 2907, 2908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2901, 2908, 2907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2908, 2901, 2909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2901, 2910, 2909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2910, 2901, 2902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2902, 2911, 2910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2911, 2902, 2904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2851, 2911, 2904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2903, 2851, 2904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2851, 2903, 2852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2911, 2851, 2853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2912, 2913, 2914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2913, 2912, 2915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2915, 2912, 2916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2912, 2917, 2916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2917, 2918, 2916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2918, 2917, 2919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2917, 2906, 2919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2906, 2917, 2920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2920, 2921, 2906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2907, 2906, 2921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2912, 2922, 2923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2917, 2912, 2923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2924, 2917, 2923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2917, 2924, 2920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2925, 2926, 2927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2928, 2925, 2927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2925, 2928, 2929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2922, 2925, 2929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2924, 2922, 2929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2922, 2924, 2923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2930, 2931, 2932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2933, 2930, 2932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2932, 2926, 2933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2934, 2933, 2926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2926, 2925, 2934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2935, 2934, 2925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2925, 2922, 2935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2922, 2936, 2935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2936, 2922, 2914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2922, 2912, 2914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2931, 2937, 2938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2939, 2940, 2941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2940, 2939, 2942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2943, 2942, 2939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2942, 2943, 2944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2944, 2930, 2942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2945, 2942, 2930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2930, 2933, 2945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2946, 2945, 2933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2933, 2934, 2946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2947, 2946, 2934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2934, 2935, 2947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2936, 2947, 2935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2930, 2944, 2948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2942, 2945, 2940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2946, 2947, 2949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2949, 2950, 2946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2945, 2946, 2950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2951, 2945, 2950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2945, 2951, 2940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2951, 2952, 2940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2941, 2940, 2952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2952, 2953, 2941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2954, 2941, 2953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2941, 2954, 2939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2953, 2955, 2956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2955, 2957, 2956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2955, 1988, 2957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1988, 2955, 1981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2958, 1981, 2955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2955, 2953, 2958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2959, 2958, 2953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2953, 2952, 2959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2960, 2959, 2952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2952, 2951, 2960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2961, 2960, 2951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2960, 2961, 2962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2963, 2960, 2962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2960, 2963, 2964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2959, 2960, 2964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2964, 2965, 2959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2958, 2959, 2965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2965, 1978, 2958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1981, 2958, 1978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2966, 2967, 2968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2968, 2969, 2966, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2969, 2968, 2970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2970, 2971, 2969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2963, 2969, 2971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2971, 2972, 2963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2972, 2964, 2963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2964, 2972, 2973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2965, 2964, 2973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2973, 1977, 2965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1978, 2965, 1977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1977, 2973, 2974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2973, 2975, 2974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2975, 2973, 2972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2976, 2975, 2972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2972, 2971, 2976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2976, 2977, 2978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2975, 2976, 2978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2967, 2966, 2979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2979, 2980, 2967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2981, 2967, 2980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2981, 2968, 2967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2968, 2981, 2982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2983, 2968, 2982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2968, 2983, 2970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2984, 2970, 2983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2971, 2970, 2984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2985, 2971, 2984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2971, 2985, 2976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2986, 2976, 2985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2987, 2988, 2989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2990, 2989, 2988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2879, 2991, 2992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2991, 2993, 2992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2994, 2992, 2993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2993, 2987, 2994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2987, 2995, 2994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2995, 2987, 2989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2996, 2995, 2989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2989, 2990, 2996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2997, 2996, 2990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2990, 2998, 2997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2999, 2997, 2998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3000, 2888, 2997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2996, 2997, 2888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2888, 2886, 2996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2995, 2996, 2886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2886, 2875, 2995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2875, 2994, 2995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2994, 2875, 2874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2992, 2994, 2874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2876, 2992, 2874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2992, 2876, 2879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2997, 2999, 3000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3001, 3000, 2999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3002, 3000, 3001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3002, 3003, 3000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3003, 2866, 3000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2888, 3000, 2866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2865, 2888, 2866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2888, 2865, 2887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2864, 2887, 2865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2887, 2864, 2889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2869, 2889, 2864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2130, 3004, 2131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3004, 2130, 2857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2857, 3003, 3004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3003, 2857, 2859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2859, 2861, 3003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2866, 3003, 2861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2903, 2870, 2852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2905, 2870, 2903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2870, 2905, 2872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2905, 2899, 2872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2899, 2869, 2872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2869, 2899, 3005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2889, 2869, 3005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2889, 3005, 2890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3005, 2891, 2890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2891, 3005, 2899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1821, 2779, 1773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3006, 3007, 3008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3008, 3009, 3006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3009, 3008, 3010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3011, 3009, 3010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3009, 3011, 3012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3011, 3013, 3014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3011, 3015, 3016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3013, 3011, 3016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3017, 3013, 3016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3013, 3017, 3018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3019, 3020, 3021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3022, 3019, 3021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3019, 3022, 3023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3022, 3024, 3023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3024, 3022, 3025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3026, 3024, 3025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3024, 3026, 3015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3017, 3015, 3026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3015, 3017, 3016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3027, 3028, 3029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3019, 3027, 3029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3027, 3019, 3030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3019, 3007, 3030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3007, 3019, 3023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3023, 3008, 3007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3008, 3023, 3024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3024, 3010, 3008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3010, 3024, 3015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3015, 3011, 3010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3020, 3019, 3029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3028, 3020, 3029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3020, 3028, 3031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3032, 3031, 3028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3033, 3032, 3028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3028, 3027, 3033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3034, 3033, 3027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3030, 3034, 3027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3034, 3030, 3035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3007, 3035, 3030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3033, 3034, 3036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3037, 3038, 3039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3038, 3037, 3040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3032, 3040, 3037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3040, 3032, 3041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3032, 3033, 3041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3033, 3042, 3041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3042, 3033, 3036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3036, 3043, 3042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3043, 3036, 3044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3034, 3044, 3036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3038, 3045, 3046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3045, 3038, 3040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3041, 3045, 3040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3045, 3041, 3042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3042, 3047, 3045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3047, 3042, 3043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3046, 3047, 3048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3047, 3046, 3045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3044, 3034, 3049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3034, 3050, 3049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3051, 3049, 3050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3050, 3052, 3051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3053, 3051, 3052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3052, 3054, 3053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2928, 3053, 3054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3054, 3055, 2928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2924, 2928, 3055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3055, 2920, 2924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2928, 2924, 2929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3049, 3051, 3056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3051, 3057, 3056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3057, 3051, 3058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3051, 3053, 3058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2927, 3058, 3053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3053, 2928, 2927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3058, 2927, 3059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3060, 3061, 3062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3062, 3063, 3060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3063, 3062, 3064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3065, 3063, 3064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3063, 3065, 3066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3066, 3067, 3063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3068, 3063, 3067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3063, 3068, 3060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3068, 3069, 3060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3061, 3060, 3069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3069, 3070, 3061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3070, 3071, 3061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3071, 3070, 3072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3071, 3073, 3074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3073, 3071, 3072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3072, 3075, 3073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3075, 3072, 3076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3070, 3076, 3072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3076, 3070, 3077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3078, 3077, 3070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3077, 3078, 3079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3075, 3080, 3073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3080, 3075, 3081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3082, 3080, 3081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3080, 3082, 3083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3082, 3084, 3083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3084, 3082, 3085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3085, 3086, 3084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3086, 3085, 3087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3088, 3086, 3087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3086, 3088, 3089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3088, 3090, 3089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3090, 3088, 3091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3092, 3090, 3091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3090, 3092, 3093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3094, 3093, 3092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3093, 3094, 3095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3096, 3095, 3094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3095, 3096, 3097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3097, 3098, 3095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3099, 3100, 3101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3097, 3101, 3100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3101, 3097, 3096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3102, 2881, 2894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2881, 3102, 3103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2880, 2881, 3103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3098, 2880, 3103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2880, 3098, 2878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3098, 3097, 2878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3097, 2879, 2878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2879, 3097, 3100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2991, 2879, 3100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3100, 3099, 2991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2993, 2991, 3104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3104, 3105, 2993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2987, 2993, 3105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3105, 3104, 3106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3099, 3104, 2991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3104, 3099, 3107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3107, 3106, 3104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3106, 3107, 3108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3108, 3109, 3106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3109, 3105, 3106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3105, 3109, 3110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3110, 2987, 3105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2987, 3110, 3111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2988, 2987, 3111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3109, 3108, 3112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3113, 3109, 3112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3114, 3110, 3109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3109, 3113, 3114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3113, 3115, 3114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3115, 3113, 3116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3116, 3117, 3115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3117, 3116, 3118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3118, 3078, 3117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3070, 3069, 3078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3069, 3117, 3078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3117, 3069, 3119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3119, 3115, 3117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3115, 3119, 3120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3120, 3114, 3115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3114, 3120, 3121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3110, 3114, 3121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3122, 3110, 3121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3110, 3122, 3111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3120, 3122, 3121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3123, 3122, 3124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3122, 3120, 3124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3119, 3124, 3120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3125, 3111, 3122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3122, 3123, 3125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3123, 3126, 3125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3126, 3123, 3127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3067, 3127, 3123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3124, 3067, 3123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3067, 3124, 3068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3124, 3119, 3068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3069, 3068, 3119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3111, 3125, 2988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3125, 2990, 2988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2990, 3125, 3126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2998, 2990, 3126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3127, 2998, 3126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2998, 3127, 3128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3127, 3129, 3128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3129, 3127, 3130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3127, 3067, 3130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3067, 3066, 3130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3131, 3132, 3133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3134, 3133, 3132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3132, 3135, 3134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3136, 3134, 3135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3133, 3134, 3137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3035, 3007, 3136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3007, 3006, 3136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3134, 3136, 3006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3009, 3134, 3006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3134, 3009, 3137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3012, 3137, 3009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3137, 3012, 3138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3138, 3133, 3137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3133, 3138, 3139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2896, 3133, 3139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3140, 2896, 2898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2920, 3055, 2921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3140, 2921, 3055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2921, 3140, 2907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2898, 2907, 3140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2907, 2898, 2901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3133, 2896, 3131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2896, 3140, 3131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3055, 3131, 3140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3055, 3054, 3131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3132, 3131, 3054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3054, 3052, 3132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3135, 3132, 3052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3052, 3050, 3135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3050, 3136, 3135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3136, 3050, 3035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3050, 3034, 3035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2779, 1821, 2563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3141, 3142, 3143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3142, 3141, 3144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3145, 3144, 3141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3144, 3145, 3146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3145, 2956, 3146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2957, 3146, 2956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3146, 2957, 3147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3129, 3146, 3147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3146, 3129, 3144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3148, 3144, 3129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3144, 3148, 3142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2956, 3145, 2953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3149, 1774, 3150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3002, 3004, 3003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3004, 3002, 3151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3001, 3151, 3002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3151, 3001, 3152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3153, 3152, 3001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3152, 3153, 3154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3153, 3128, 3154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3129, 3154, 3128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3154, 3129, 3147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2957, 3154, 3147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3155, 3152, 3154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3128, 3153, 3156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3154, 2957, 3155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2957, 3157, 3155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3158, 3155, 3157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3155, 3158, 3152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3152, 3158, 3151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2131, 3151, 3158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3151, 2131, 3004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3157, 2957, 1988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1774, 3149, 1772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3159, 2939, 2954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2939, 3159, 2943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3065, 2943, 3159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2943, 3065, 3160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3160, 2944, 2943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2944, 3160, 3161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2937, 2944, 3161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2944, 2937, 2948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2937, 2931, 2948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2931, 2930, 2948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2950, 2961, 2951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2961, 2950, 3162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2950, 2949, 3162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3163, 3162, 2949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2947, 3163, 2949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3163, 2947, 3164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2947, 2936, 3164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3165, 3164, 2936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2914, 3165, 2936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3165, 2914, 2913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3164, 3165, 3166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2980, 3164, 3166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3164, 2980, 3163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2980, 2979, 3163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3162, 3163, 2979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2966, 3162, 2979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3162, 2966, 2961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2969, 2961, 2966, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2961, 2969, 2962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2969, 2963, 2962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3167, 3168, 3169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3167, 3170, 3168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3171, 3170, 3167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3171, 3172, 3170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3173, 3172, 3171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3173, 3174, 3172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3175, 3174, 3173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3175, 3176, 3177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3177, 3178, 3175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3175, 3178, 3174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3178, 3179, 3174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3174, 3179, 3180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3174, 3180, 3172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3172, 3180, 3181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3172, 3181, 3170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3170, 3181, 3182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3170, 3182, 3168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3168, 3182, 3183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3168, 3183, 3184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3169, 3168, 3184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3169, 3184, 3185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3185, 3186, 3169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3169, 3186, 3187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3169, 3187, 3167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3167, 3187, 3188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3167, 3188, 3171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3171, 3188, 3189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3171, 3189, 3173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3173, 3189, 3190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3173, 3190, 3175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3175, 3190, 3176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3186, 3191, 3187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3187, 3191, 3192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3187, 3192, 3188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3188, 3192, 3193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3188, 3193, 3189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3189, 3193, 3194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3189, 3194, 3190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3190, 3194, 3195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3190, 3195, 3176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3194, 3196, 3195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3197, 3198, 3196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3194, 3197, 3196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3193, 3197, 3194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3199, 3200, 3198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3197, 3199, 3198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3201, 3199, 3197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3193, 3201, 3197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3192, 3201, 3193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3202, 3203, 3200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3199, 3202, 3200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3204, 3202, 3199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3201, 3204, 3199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3205, 3204, 3201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3192, 3205, 3201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3191, 3205, 3192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3206, 3207, 3191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3207, 3205, 3191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3207, 3208, 3205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3208, 3204, 3205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3208, 3209, 3204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3209, 3202, 3204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3209, 3210, 3202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3210, 3203, 3202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3211, 3203, 3210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3200, 3203, 3211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3212, 3213, 3207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3213, 3208, 3207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3213, 3214, 3208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3214, 3209, 3208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3214, 3215, 3209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3215, 3210, 3209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3216, 3210, 3215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3216, 3211, 3210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3217, 3211, 3216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3218, 3211, 3217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3212, 3207, 3206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3219, 3212, 3206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3220, 3212, 3219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3220, 3221, 3212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3221, 3213, 3212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3221, 3222, 3213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3222, 3214, 3213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3222, 3223, 3214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3223, 3215, 3214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3224, 3215, 3223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3225, 3221, 3220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3225, 3226, 3221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3226, 3222, 3221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3226, 3227, 3222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3227, 3223, 3222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3228, 3223, 3227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3228, 3224, 3223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3229, 3224, 3228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3229, 3230, 3224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3231, 3230, 3229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3232, 3231, 3233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3233, 3231, 3229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3233, 3229, 3234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3234, 3229, 3228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3234, 3228, 3235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3235, 3228, 3227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3235, 3227, 3236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3236, 3227, 3226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3237, 3236, 3226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3237, 3226, 3225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3238, 3234, 3239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3239, 3234, 3235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3239, 3235, 3240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3240, 3235, 3236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3240, 3236, 3241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3241, 3236, 3237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3237, 3242, 3241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3237, 3243, 3242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3243, 3244, 3242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3243, 3245, 3244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3246, 3247, 3248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3246, 3249, 3247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3238, 3249, 3246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3238, 3250, 3249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3239, 3250, 3238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3239, 3251, 3250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3240, 3251, 3239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3240, 3252, 3251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3241, 3252, 3240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3248, 3253, 3254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3248, 3247, 3253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3247, 3255, 3253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3247, 3256, 3255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3249, 3256, 3247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3249, 3257, 3256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3250, 3257, 3249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3250, 3258, 3257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3251, 3258, 3250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3251, 3259, 3258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3252, 3259, 3251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2484, 3150, 2477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3225, 3243, 3237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3225, 3260, 3243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3220, 3260, 3225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3220, 3261, 3260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3219, 3261, 3220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3219, 3262, 3261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3263, 3262, 3219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3219, 3206, 3263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3263, 3206, 3186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3206, 3191, 3186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3260, 3245, 3243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3260, 3264, 3245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3261, 3264, 3260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3261, 3265, 3264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3262, 3265, 3261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3262, 3266, 3265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3267, 3266, 3262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3263, 3267, 3262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3185, 3267, 3263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3263, 3186, 3185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3150, 2484, 3149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3268, 3269, 3270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3268, 3271, 3269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3272, 3271, 3268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3272, 3273, 3271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3274, 3273, 3272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3272, 3275, 3274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3274, 3275, 3276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3275, 3277, 3276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3276, 3277, 3232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3232, 3277, 3231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3231, 3278, 3230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3277, 3278, 3231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3279, 3278, 3277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3275, 3279, 3277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3280, 3279, 3275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3272, 3280, 3275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3268, 3280, 3272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3224, 3216, 3215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3230, 3216, 3224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3230, 3217, 3216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3278, 3217, 3230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3281, 3217, 3278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3279, 3281, 3278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3282, 3281, 3279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3280, 3282, 3279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3283, 3282, 3280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3268, 3283, 3280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3270, 3283, 3268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3281, 3218, 3217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3284, 3218, 3281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3282, 3284, 3281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3285, 3284, 3282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3283, 3285, 3282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3286, 3285, 3283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3270, 3286, 3283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3287, 3286, 3270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3270, 3288, 3287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3270, 3269, 3288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3218, 3200, 3211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3198, 3200, 3218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3284, 3198, 3218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3196, 3198, 3284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3285, 3196, 3284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3195, 3196, 3285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3286, 3195, 3285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3176, 3195, 3286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3287, 3176, 3286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3177, 3176, 3287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3287, 3289, 3177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3287, 3288, 3289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3288, 3290, 3289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3288, 3291, 3290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3269, 3291, 3288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3269, 3292, 3291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3271, 3292, 3269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3271, 3293, 3292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3273, 3293, 3271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3273, 3294, 3293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3295, 3294, 3273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3274, 3295, 3273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3254, 3295, 3274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3274, 3276, 3254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3254, 3276, 3248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3248, 3276, 3232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3248, 3232, 3246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3246, 3232, 3233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3246, 3233, 3238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3238, 3233, 3234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3296, 3297, 3298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3299, 3297, 3296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3300, 3299, 3296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3301, 3299, 3300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3302, 3301, 3300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3303, 3301, 3302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3304, 3303, 3302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3298, 3305, 3296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3306, 3305, 3298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3307, 3306, 3298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3298, 3308, 3307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3297, 3308, 3298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3297, 3309, 3308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3310, 3309, 3297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3299, 3310, 3297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3311, 3310, 3299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3301, 3311, 3299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3312, 3311, 3301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3303, 3312, 3301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3313, 3312, 3303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3314, 3313, 3303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3314, 3303, 3304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3315, 3314, 3304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3316, 3317, 3315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3315, 3318, 3316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3304, 3318, 3315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3319, 3318, 3304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3302, 3319, 3304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3320, 3319, 3302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3300, 3320, 3302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3321, 3320, 3300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3296, 3321, 3300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3305, 3321, 3296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3319, 3322, 3318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3323, 3324, 3322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3323, 3322, 3319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3320, 3323, 3319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3325, 3326, 3324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3325, 3324, 3323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3327, 3325, 3323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3327, 3323, 3320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3321, 3327, 3320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3328, 3329, 3326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3328, 3326, 3325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3330, 3328, 3325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3330, 3325, 3327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3331, 3330, 3327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3331, 3327, 3321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3305, 3331, 3321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3332, 3333, 3329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3332, 3329, 3328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3334, 3332, 3328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3334, 3328, 3330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3335, 3334, 3330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3335, 3330, 3331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3336, 3335, 3331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3336, 3331, 3305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3306, 3336, 3305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3337, 3333, 3338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3338, 3333, 3332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3338, 3332, 3339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3339, 3332, 3334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3339, 3334, 3340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3340, 3334, 3335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3340, 3335, 3341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3341, 3335, 3336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3341, 3336, 3342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3342, 3336, 3306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3343, 3344, 3345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3346, 3343, 3345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3345, 3342, 3346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3347, 3342, 3345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3347, 3341, 3342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3348, 3341, 3347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3348, 3340, 3341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3349, 3340, 3348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3349, 3339, 3340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3350, 3339, 3349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3342, 3306, 3346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3346, 3306, 3307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3307, 3351, 3346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3351, 3343, 3346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3351, 3352, 3343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3352, 3353, 3343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3343, 3353, 3344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3353, 3354, 3344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3344, 3354, 3355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3354, 3356, 3355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3357, 3358, 3359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3359, 3358, 3360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3360, 3358, 3361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3360, 3361, 3362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3362, 3361, 3363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3363, 3364, 3362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3355, 3364, 3363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3365, 3355, 3363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3344, 3355, 3365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3345, 3344, 3365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3363, 3366, 3365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3361, 3366, 3363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3361, 3367, 3366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3358, 3367, 3361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3365, 3347, 3345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3366, 3347, 3365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3366, 3348, 3347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3367, 3348, 3366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3367, 3349, 3348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3368, 3349, 3367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3358, 3368, 3367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3357, 3368, 3358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3368, 3350, 3349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3369, 3350, 3368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3369, 3368, 3357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3370, 3369, 3357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3371, 3369, 3370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3372, 3371, 3370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3373, 3371, 3372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3374, 3373, 3372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3375, 3373, 3374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3375, 3374, 3376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3377, 3376, 3378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3376, 3379, 3378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3376, 3374, 3379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3379, 3374, 3380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3374, 3372, 3380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3380, 3372, 3381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3372, 3370, 3381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3381, 3370, 3382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3370, 3357, 3382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3382, 3357, 3359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3383, 3382, 3384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3381, 3382, 3383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3385, 3381, 3383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3380, 3381, 3385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3386, 3380, 3385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3379, 3380, 3386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3387, 3379, 3386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3378, 3379, 3387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3387, 3388, 3378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3388, 3389, 3378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3386, 3390, 3387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3391, 3392, 3390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3391, 3390, 3386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3385, 3391, 3386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3393, 3391, 3385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3383, 3393, 3385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3394, 3393, 3383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3384, 3394, 3383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3395, 3394, 3384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3396, 3395, 3384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3397, 3395, 3396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3398, 3397, 3396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3399, 3392, 3391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3393, 3399, 3391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3400, 3399, 3393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3394, 3400, 3393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3401, 3400, 3394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3395, 3401, 3394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3402, 3401, 3395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3397, 3402, 3395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3403, 3404, 3405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3404, 3403, 3406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3407, 3406, 3403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3406, 3407, 3408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3409, 3406, 3408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3406, 3409, 3410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3410, 3404, 3406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3404, 3410, 3411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3412, 3413, 3414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3415, 3416, 3417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3416, 3415, 3418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3415, 3419, 3418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3419, 3415, 3420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3415, 3421, 3420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3421, 3415, 3422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3417, 3422, 3415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3422, 3417, 3423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3424, 3425, 3426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3425, 3424, 3427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3428, 3426, 3429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3426, 3430, 3429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3430, 3426, 3425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3431, 3430, 3425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3427, 3431, 3425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3431, 3427, 3432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3427, 3433, 3432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3433, 3427, 3434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3434, 3435, 3433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3435, 3434, 3436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3430, 3431, 3437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3438, 3426, 3439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3426, 3438, 3424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3438, 3440, 3424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3440, 3427, 3424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3427, 3440, 3434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3440, 3436, 3434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3436, 3440, 3441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3442, 3436, 3441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3443, 3442, 3441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3441, 3444, 3443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3440, 3438, 3444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3444, 3441, 3440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3444, 3445, 3443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3445, 3444, 3446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3444, 3447, 3446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3447, 3444, 3438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3439, 3447, 3438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3447, 3439, 3448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3449, 3447, 3448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3450, 3447, 3451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3447, 3449, 3451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3452, 3451, 3449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3449, 3453, 3452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3453, 3449, 3454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3448, 3454, 3449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3454, 3448, 3455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3448, 3428, 3455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3428, 3448, 3439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3426, 3428, 3439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3451, 3452, 3456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3457, 3451, 3456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3451, 3457, 3450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3457, 3458, 3450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3458, 3457, 3459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3459, 3460, 3458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3460, 3459, 3461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3462, 3460, 3461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3460, 3462, 3463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3464, 3460, 3463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3465, 3464, 3463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3463, 3466, 3465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3435, 3465, 3466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3466, 3463, 3462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3460, 3464, 3467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3467, 3458, 3460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3465, 3435, 3436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3436, 3442, 3465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3464, 3465, 3442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3442, 3443, 3464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3443, 3467, 3464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3467, 3443, 3445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3458, 3467, 3445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3446, 3458, 3445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3458, 3446, 3450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3447, 3450, 3446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3413, 3412, 3468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3469, 3470, 3471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3470, 3469, 3472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3473, 3472, 3469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3472, 3473, 3474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3475, 3474, 3473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3474, 3475, 3476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3476, 3477, 3474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3477, 3476, 3478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3479, 3477, 3478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3477, 3472, 3474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3480, 3479, 3481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3479, 3480, 3482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3477, 3479, 3482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3482, 3483, 3477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3472, 3477, 3483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3484, 3472, 3483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3472, 3484, 3470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3484, 3485, 3470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3485, 3471, 3470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3471, 3485, 3486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3483, 3487, 3484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3488, 3489, 3490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3491, 3488, 3490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3488, 3491, 3492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3487, 3492, 3491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3492, 3487, 3493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3487, 3483, 3493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3483, 3482, 3493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3480, 3493, 3482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3493, 3480, 3492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3480, 3488, 3492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3489, 3488, 3494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3488, 3480, 3495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3495, 3494, 3488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3494, 3495, 3496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3495, 3497, 3496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3497, 3495, 3498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3495, 3481, 3498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3481, 3495, 3480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3499, 3500, 3501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3500, 3499, 3502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3499, 3490, 3502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3490, 3499, 3491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3503, 3491, 3499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3499, 3504, 3503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3504, 3505, 3503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3505, 3504, 3506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3507, 3501, 3500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3491, 3503, 3487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3505, 3487, 3503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3487, 3505, 3484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3485, 3484, 3505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3506, 3485, 3505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3485, 3506, 3508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3506, 3507, 3508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3507, 3506, 3504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3501, 3507, 3504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3504, 3499, 3501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3508, 3486, 3485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3486, 3508, 3509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3508, 3510, 3509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3510, 3508, 3507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3507, 3511, 3510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3511, 3507, 3500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3500, 3512, 3511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3512, 3500, 3502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3502, 3489, 3512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3489, 3502, 3490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3513, 3514, 3515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3514, 3513, 3516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3517, 3518, 3519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3515, 3517, 3519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3517, 3515, 3514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3514, 3520, 3517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3520, 3514, 3521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3516, 3521, 3514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3516, 3522, 3521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3522, 3516, 3523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3523, 3524, 3522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3524, 3523, 3525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3525, 3526, 3524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3526, 3525, 3527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3528, 3526, 3527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3522, 3520, 3521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3520, 3522, 3529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3524, 3529, 3522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3518, 3530, 3531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3530, 3518, 3532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3518, 3517, 3532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3517, 3533, 3532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3533, 3517, 3520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3520, 3534, 3533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3534, 3520, 3529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3535, 3534, 3529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3529, 3524, 3535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3524, 3536, 3535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3537, 3538, 3539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3538, 3540, 3539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3540, 3538, 3541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3541, 3542, 3540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3542, 3541, 3543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3536, 3543, 3541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3541, 3535, 3536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3535, 3541, 3538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3534, 3535, 3538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3538, 3537, 3534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3537, 3533, 3534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3544, 3545, 3546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3540, 3546, 3545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3547, 3540, 3545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3540, 3547, 3539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3548, 3539, 3547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3539, 3548, 3537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3548, 3549, 3537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3533, 3537, 3549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3549, 3532, 3533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3532, 3549, 3530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3550, 3547, 3545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3545, 3544, 3550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3551, 3550, 3544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3551, 3552, 3553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3550, 3551, 3553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3553, 3554, 3550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3547, 3550, 3554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3555, 3547, 3554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3547, 3555, 3548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3554, 3553, 3556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3557, 3554, 3556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3554, 3557, 3555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3557, 3558, 3555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3558, 3548, 3555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3548, 3558, 3559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3549, 3548, 3559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3560, 3549, 3559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3549, 3560, 3530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3560, 3531, 3530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3556, 3561, 3557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3562, 3559, 3558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3559, 3562, 3560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3563, 3564, 3561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3564, 3557, 3561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3557, 3564, 3565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3558, 3557, 3565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3566, 3558, 3565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3558, 3566, 3562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3566, 3567, 3562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3567, 3560, 3562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3560, 3567, 3568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3531, 3560, 3568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3569, 3565, 3564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3565, 3569, 3566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3569, 3570, 3566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3567, 3566, 3570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3569, 3571, 3572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3570, 3569, 3572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3571, 3569, 3573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3573, 3569, 3574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3564, 3574, 3569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3574, 3564, 3575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3564, 3563, 3575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3576, 3575, 3563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3576, 3563, 3577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3578, 3576, 3577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3579, 3578, 3577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3578, 3579, 3580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3581, 3576, 3582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3578, 3581, 3582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3576, 3578, 3582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3580, 3583, 3578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3581, 3578, 3583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3584, 3581, 3583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3576, 3581, 3585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3586, 3585, 3581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3581, 3584, 3586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3584, 3587, 3586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3587, 3584, 3588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3589, 3588, 3584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3583, 3589, 3584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3589, 3583, 3590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3583, 3580, 3590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3580, 3591, 3590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3592, 3590, 3591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3591, 3593, 3592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3586, 3587, 3585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3590, 3592, 3589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3593, 3594, 3595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3595, 3592, 3593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3592, 3595, 3596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3596, 3589, 3592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3589, 3596, 3597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3588, 3589, 3597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3598, 3588, 3597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3588, 3598, 3599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3599, 3587, 3588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3587, 3599, 3600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3596, 3598, 3597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3598, 3596, 3601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3595, 3601, 3596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3601, 3595, 3602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3594, 3602, 3595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3603, 3599, 3604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3599, 3603, 3600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3605, 3601, 3602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3601, 3605, 3606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3606, 3598, 3601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3598, 3606, 3607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3607, 3599, 3598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3599, 3607, 3608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3608, 3604, 3599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3604, 3608, 3609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3571, 3604, 3609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3604, 3571, 3573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3587, 3600, 3585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3585, 3600, 3603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3610, 3585, 3603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3604, 3610, 3603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3610, 3604, 3573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3610, 3573, 3574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3574, 3611, 3610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3611, 3574, 3575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3575, 3576, 3611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3585, 3611, 3576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3611, 3585, 3610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3612, 3613, 3614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3613, 3612, 3615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3616, 3617, 3618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3617, 3616, 3619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3620, 3621, 3622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3617, 3620, 3622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3620, 3617, 3619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3619, 3623, 3620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3623, 3619, 3624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3616, 3624, 3619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3620, 3625, 3626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3621, 3620, 3626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3627, 3621, 3626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3621, 3627, 3628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3629, 3630, 3631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3630, 3632, 3631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3632, 3633, 3631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3633, 3632, 3616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3634, 3616, 3632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3616, 3634, 3624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3635, 3624, 3634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3624, 3635, 3623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3635, 3625, 3623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3625, 3620, 3623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3636, 3633, 3637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3633, 3636, 3629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3633, 3629, 3631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3638, 3629, 3636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3626, 3639, 3627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3639, 3626, 3625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3625, 3640, 3639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3640, 3625, 3641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3625, 3635, 3641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3635, 3642, 3641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3643, 3641, 3642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3644, 3643, 3642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3643, 3644, 3645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3645, 3644, 3646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3641, 3643, 3640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3632, 3630, 3647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3632, 3647, 3634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3647, 3648, 3634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3648, 3635, 3634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3642, 3635, 3648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3648, 3644, 3642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3648, 3649, 3644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3648, 3647, 3649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3647, 3650, 3649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3650, 3647, 3630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3651, 3650, 3630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3650, 3651, 3652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3644, 3653, 3646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3653, 3644, 3649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3653, 3649, 3654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3650, 3654, 3649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3654, 3650, 3655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3652, 3655, 3650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3655, 3652, 3656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3657, 3656, 3652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3657, 3652, 3658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3656, 3657, 3659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3657, 3660, 3659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3658, 3660, 3657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3660, 3658, 3661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3658, 3662, 3661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3662, 3658, 3663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3663, 3658, 3652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3652, 3664, 3663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3664, 3652, 3665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3665, 3666, 3664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3664, 3662, 3663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3662, 3664, 3666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3666, 3665, 3667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3667, 3665, 3668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3665, 3669, 3668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3669, 3665, 3670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3665, 3671, 3670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3671, 3665, 3652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3652, 3638, 3671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3638, 3652, 3651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3629, 3638, 3651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3630, 3629, 3651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3672, 3673, 3674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3673, 3672, 3675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3676, 3674, 3673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3674, 3676, 3677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3677, 3678, 3674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3678, 3672, 3674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3672, 3678, 3679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3678, 3680, 3679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3681, 3682, 3683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3684, 3681, 3683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3680, 3684, 3683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3684, 3680, 3685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3680, 3678, 3685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3594, 3685, 3678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3678, 3677, 3594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3602, 3594, 3677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3676, 3602, 3677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3602, 3676, 3605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3681, 3684, 3686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3561, 3556, 3687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3556, 3688, 3687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3688, 3556, 3689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3689, 3686, 3688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3686, 3689, 3690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3690, 3681, 3686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3681, 3690, 3691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3692, 3681, 3691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3681, 3692, 3693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3682, 3681, 3693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3691, 3694, 3692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3695, 3696, 3697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3694, 3695, 3697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3695, 3694, 3698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3694, 3691, 3698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3691, 3699, 3698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3699, 3691, 3690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3690, 3552, 3699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3552, 3690, 3689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3689, 3553, 3552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3553, 3689, 3556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3700, 3701, 3695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3702, 3700, 3695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3698, 3702, 3695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3702, 3698, 3699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3552, 3702, 3699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3702, 3552, 3703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3552, 3551, 3703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3551, 3704, 3703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3705, 3703, 3704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3703, 3705, 3702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3700, 3702, 3705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3706, 3707, 3708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3707, 3706, 3709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3709, 3710, 3707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3710, 3709, 3711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3704, 3710, 3711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3710, 3704, 3712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3704, 3551, 3712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3551, 3713, 3712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3713, 3551, 3544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3546, 3713, 3544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3708, 3714, 3706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3714, 3708, 3715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3546, 3540, 3542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3542, 3716, 3546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3713, 3546, 3716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3717, 3718, 3719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3714, 3717, 3719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3717, 3714, 3715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3720, 3717, 3715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3708, 3720, 3715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3720, 3708, 3721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3722, 3720, 3721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3720, 3722, 3723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3724, 3725, 3723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3725, 3720, 3723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3720, 3725, 3726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3717, 3720, 3726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3726, 3727, 3717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3718, 3717, 3727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3727, 3728, 3718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3728, 3729, 3718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3729, 3728, 3730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3731, 3729, 3730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3727, 3726, 3732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3725, 3732, 3726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3733, 3734, 3735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3734, 3733, 3736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3736, 3724, 3734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3724, 3736, 3737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3725, 3724, 3737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3737, 3738, 3725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3732, 3725, 3738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3738, 3739, 3732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3739, 3727, 3732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3727, 3739, 3740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3741, 3739, 3742, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3739, 3741, 3740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3743, 3740, 3741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3741, 3744, 3743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3744, 3741, 3745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3742, 3745, 3741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3745, 3742, 3746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3747, 3746, 3742, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3739, 3747, 3742, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3747, 3739, 3748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3739, 3738, 3748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3749, 3748, 3738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3746, 3747, 3750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3728, 3727, 3740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3740, 3743, 3728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3743, 3730, 3728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3730, 3743, 3751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3743, 3752, 3751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3752, 3743, 3744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3753, 3752, 3744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3745, 3753, 3744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3753, 3745, 3754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3746, 3754, 3745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3752, 3753, 3755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3756, 3752, 3755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3751, 3731, 3730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3731, 3751, 3757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3752, 3757, 3751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3757, 3752, 3758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3752, 3756, 3758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3759, 3758, 3756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3758, 3759, 3760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3761, 3760, 3759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3760, 3761, 3762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3761, 3763, 3762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3763, 3761, 3764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3765, 3763, 3764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3763, 3765, 3766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3766, 3767, 3763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3767, 3766, 3768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3769, 3767, 3768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3763, 3770, 3762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3770, 3763, 3767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3771, 3770, 3767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3767, 3769, 3771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3772, 3771, 3769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3771, 3772, 3773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3774, 3773, 3772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3773, 3774, 3775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3776, 3775, 3774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3776, 3777, 3775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3777, 3773, 3775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3778, 3771, 3773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3773, 3777, 3778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3779, 3778, 3777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3777, 3780, 3779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3771, 3778, 3781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3782, 3781, 3778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3778, 3779, 3782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3783, 3782, 3779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3780, 3783, 3779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3783, 3780, 3784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3785, 3784, 3780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3784, 3785, 3786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3785, 3787, 3786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3787, 3788, 3786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3782, 3783, 3789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3789, 3790, 3782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3781, 3782, 3790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3791, 3781, 3790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3729, 3731, 3789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3790, 3789, 3731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3757, 3790, 3731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3790, 3757, 3791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3758, 3791, 3757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3791, 3758, 3760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3762, 3791, 3760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3791, 3762, 3770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3781, 3791, 3770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3770, 3771, 3781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3783, 3792, 3793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3792, 3783, 3794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3795, 3792, 3794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3792, 3795, 3788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3796, 3797, 3798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3797, 3796, 3799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3796, 3800, 3799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3800, 3796, 3788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3801, 3788, 3796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3788, 3801, 3792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3801, 3802, 3792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3803, 3792, 3802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3792, 3803, 3793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3804, 3793, 3803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3793, 3804, 3729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3729, 3783, 3793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3783, 3729, 3789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3801, 3805, 3806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3802, 3801, 3806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3807, 3808, 3700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3700, 3809, 3807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3809, 3700, 3705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3810, 3809, 3705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3809, 3810, 3811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3805, 3809, 3811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3809, 3805, 3812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3805, 3801, 3812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3801, 3798, 3812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3798, 3801, 3796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3812, 3807, 3809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3807, 3812, 3798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3798, 3808, 3807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3808, 3798, 3797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2772, 3414, 2771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3813, 3814, 3815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3814, 3813, 3816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3817, 3814, 3816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3815, 3818, 3819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3820, 3815, 3819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3815, 3820, 3813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3821, 3813, 3820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3813, 3821, 3822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3822, 3816, 3813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3816, 3822, 3823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3824, 3816, 3823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3816, 3824, 3817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3825, 3817, 3824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3818, 3815, 3543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3543, 3536, 3818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3536, 3826, 3818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3826, 3819, 3818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3819, 3826, 3827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3828, 3829, 3830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3820, 3827, 3831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3831, 3832, 3820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3536, 3524, 3526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3826, 3536, 3526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3526, 3528, 3826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3528, 3827, 3826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3827, 3528, 3833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3834, 3827, 3833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3827, 3834, 3831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3834, 3835, 3831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3821, 3831, 3835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3836, 3821, 3835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3835, 3834, 3837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3838, 3835, 3837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3835, 3838, 3836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3839, 3838, 3840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3838, 3839, 3836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3839, 3841, 3836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3841, 3842, 3836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3842, 3841, 3735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3735, 3843, 3842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3843, 3735, 3734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3734, 3722, 3843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3722, 3734, 3724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3722, 3724, 3723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3836, 3842, 3821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3821, 3842, 3822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3843, 3822, 3842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3822, 3843, 3823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3722, 3823, 3843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3823, 3722, 3824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3721, 3824, 3722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3824, 3721, 3825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3708, 3825, 3721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3825, 3708, 3707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3710, 3825, 3707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3817, 3825, 3844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3825, 3710, 3844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3712, 3844, 3710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3844, 3712, 3713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3713, 3817, 3844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3817, 3713, 3716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3814, 3817, 3716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3716, 3542, 3814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3542, 3815, 3814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3815, 3542, 3543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3845, 3846, 3847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3846, 3845, 3848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3845, 3849, 3848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3849, 3850, 3851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3850, 3849, 3852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3849, 3845, 3852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3845, 3853, 3852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3853, 3845, 3854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3847, 3854, 3845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3854, 3847, 3855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3856, 3850, 3857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3850, 3853, 3857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3853, 3850, 3852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3754, 3746, 3858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3746, 3859, 3858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3859, 3746, 3750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3750, 3856, 3859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3856, 3750, 3860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3850, 3856, 3860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3861, 3850, 3860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3850, 3861, 3851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3861, 3862, 3851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3862, 3849, 3851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3862, 3861, 3863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3864, 3865, 3862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3863, 3864, 3862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3864, 3863, 3749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3748, 3749, 3863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3863, 3747, 3748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3747, 3863, 3861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3861, 3750, 3747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3750, 3861, 3860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3738, 3737, 3749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3736, 3749, 3737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3749, 3736, 3864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3733, 3864, 3736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3864, 3733, 3866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3865, 3864, 3866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3866, 3867, 3865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3867, 3866, 3868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3866, 3869, 3868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3869, 3866, 3733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3733, 3841, 3869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3841, 3733, 3735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3849, 3862, 3865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3865, 3848, 3849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3848, 3865, 3867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3867, 3846, 3848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3846, 3867, 3870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3868, 3870, 3867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3870, 3868, 3871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3869, 3871, 3868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3871, 3869, 3872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3841, 3872, 3869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3872, 3841, 3873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3841, 3839, 3873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3414, 2772, 3412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3874, 3875, 3876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3876, 3877, 3874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3877, 3876, 3878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3878, 3879, 3877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3880, 3879, 3878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3878, 3876, 3880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3876, 3881, 3880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3881, 3876, 3875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3875, 3882, 3881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3883, 3579, 3875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3875, 3874, 3883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3884, 3883, 3874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3877, 3884, 3874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3877, 3885, 3884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3877, 3684, 3885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3879, 3684, 3877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3686, 3684, 3879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3686, 3879, 3688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3879, 3880, 3688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3881, 3688, 3880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3688, 3881, 3687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3881, 3579, 3687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3577, 3687, 3579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3561, 3687, 3577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3563, 3561, 3577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3579, 3883, 3580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3591, 3580, 3883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3883, 3884, 3591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3593, 3591, 3884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3885, 3593, 3884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3593, 3885, 3886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3886, 3885, 3684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3685, 3886, 3684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3685, 3594, 3886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3594, 3593, 3886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3468, 2478, 3413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3887, 3888, 3889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3888, 3887, 3890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3890, 3887, 3891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3892, 3891, 3887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3887, 3893, 3892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3894, 3892, 3893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3893, 3696, 3894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3696, 3893, 3895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3889, 3895, 3893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3895, 3889, 3896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3888, 3896, 3889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3896, 3888, 3897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3898, 3899, 3900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3901, 3898, 3900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3901, 3902, 3898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3891, 3902, 3901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3902, 3891, 3903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3891, 3892, 3903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3701, 3903, 3892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3892, 3894, 3701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3695, 3701, 3894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3696, 3695, 3894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3788, 3787, 3800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3787, 3899, 3800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3899, 3799, 3800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3799, 3899, 3898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3898, 3797, 3799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3797, 3898, 3902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3903, 3797, 3902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3797, 3903, 3808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3903, 3701, 3808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3808, 3701, 3700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3777, 3776, 3904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3780, 3777, 3904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3905, 3780, 3904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3780, 3905, 3785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3905, 3906, 3785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3787, 3785, 3906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3906, 3907, 3787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3899, 3787, 3907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3908, 3899, 3907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3899, 3908, 3900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3908, 3909, 3910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3909, 3908, 3907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3909, 3907, 3906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3911, 3909, 3906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3906, 3905, 3911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3912, 3911, 3905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3904, 3912, 3905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3912, 3904, 3776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3911, 3912, 3913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3913, 3909, 3911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3909, 3913, 3914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2478, 3468, 2476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3915, 3916, 3917, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3916, 3915, 3918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3919, 3920, 3921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3920, 3922, 3921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3922, 3920, 3923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3920, 3924, 3923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3925, 3926, 3927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3926, 3928, 3927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3928, 3926, 3929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3929, 3930, 3928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3930, 3929, 3931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3931, 3919, 3930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3919, 3931, 3932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3920, 3919, 3932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3932, 3933, 3920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3924, 3920, 3933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3926, 3934, 3935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3929, 3926, 3935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3936, 3929, 3935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3929, 3936, 3931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3937, 3931, 3936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3931, 3937, 3932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3933, 3932, 3937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3938, 3933, 3937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3933, 3938, 3939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3939, 3938, 3940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3937, 3941, 3938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3939, 3924, 3933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3924, 3939, 3942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3940, 3942, 3939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3942, 3940, 3943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3941, 3940, 3938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3940, 3941, 3944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3941, 3945, 3944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3945, 3946, 3944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3946, 3945, 3947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3947, 3948, 3946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3948, 3947, 3949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3949, 3950, 3948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3950, 3949, 3951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3949, 3952, 3951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3953, 3950, 3954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3950, 3953, 3948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3946, 3948, 3953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3940, 3946, 3953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3946, 3940, 3944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3941, 3937, 3936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3941, 3936, 3935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3935, 3945, 3941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3945, 3935, 3934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3934, 3947, 3945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3947, 3934, 3955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3955, 3949, 3947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3949, 3955, 3956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3952, 3949, 3956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3956, 3957, 3952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3958, 3956, 3959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3956, 3960, 3959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3960, 3956, 3961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3955, 3961, 3956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3961, 3955, 3962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3934, 3962, 3955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3962, 3934, 3963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3963, 3934, 3964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3934, 3925, 3964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3925, 3934, 3926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3960, 3965, 3959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3966, 3959, 3965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3957, 3956, 3967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3968, 3957, 3967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3968, 3967, 3969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3967, 3970, 3969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3970, 3967, 3971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3971, 3972, 3970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3972, 3971, 3973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3973, 3966, 3972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3966, 3973, 3958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3959, 3966, 3958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3957, 3968, 3974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3956, 3958, 3973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3971, 3956, 3973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3956, 3971, 3967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3975, 3976, 3977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3976, 3975, 3978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3979, 3980, 3981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3980, 3979, 3982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3982, 3983, 3984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3983, 3982, 3979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3983, 3979, 3985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3981, 3985, 3979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3985, 3981, 3986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3981, 3987, 3986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3980, 3987, 3981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3987, 3980, 3988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3980, 3989, 3988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3989, 3980, 3990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3987, 3991, 3986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3982, 3990, 3980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3990, 3982, 3992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3984, 3992, 3982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3993, 3992, 3984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3983, 3993, 3984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3993, 3983, 3994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3985, 3994, 3983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3994, 3985, 3995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3986, 3995, 3985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3986, 3996, 3995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3997, 3998, 3999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4000, 3999, 3998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3999, 4000, 3996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4000, 4001, 3996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3995, 3996, 4001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3994, 3995, 4001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4002, 3994, 4001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3994, 4002, 4003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4002, 4004, 4003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4005, 4003, 4004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4003, 4005, 4006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3999, 4007, 3997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4003, 3993, 3994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3993, 4003, 4006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4008, 3993, 4006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4009, 4008, 4006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4005, 4009, 4006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4009, 4005, 4010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4011, 4010, 4005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4012, 4005, 4004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4005, 4012, 4011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4012, 4013, 4011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4013, 4014, 4011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4010, 4011, 4014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4014, 4015, 4010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4015, 4009, 4010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4009, 4015, 4016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4014, 4013, 4017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4017, 4018, 4014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4015, 4014, 4018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4018, 4019, 4015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4019, 4016, 4015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4016, 4019, 4020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4021, 4016, 4020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4020, 4022, 4021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4022, 4023, 4021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4023, 4022, 4024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4017, 4025, 4026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4026, 4027, 4017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4018, 4017, 4027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4027, 4028, 4018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4019, 4018, 4028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4029, 4020, 4019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4019, 4030, 4029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4030, 4019, 4028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4031, 4030, 4028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4028, 4027, 4031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4032, 4031, 4027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4027, 4026, 4032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4033, 4032, 4026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4025, 4033, 4026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4033, 4025, 4034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4034, 4035, 4033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4035, 4036, 4033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4032, 4033, 4036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4036, 4037, 4032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4031, 4032, 4037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4038, 4031, 4037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4031, 4038, 4039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4038, 4040, 4039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4040, 4030, 4039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4030, 4031, 4039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4041, 4038, 4037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4037, 4036, 4041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4040, 4042, 4043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4042, 4040, 4044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4040, 4038, 4044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4045, 4044, 4038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4038, 4041, 4045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4046, 4045, 4041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4036, 4046, 4041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4046, 4036, 4047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4036, 4035, 4047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4048, 4047, 4035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4049, 4042, 4044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4044, 4045, 4049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4045, 4050, 4049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4045, 4046, 4050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4046, 4051, 4050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4051, 4046, 4052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4046, 4053, 4052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4053, 4046, 4047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4054, 4053, 4047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4047, 4048, 4054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4055, 4054, 4048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4054, 4055, 4056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4057, 4054, 4056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4054, 4057, 4053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4058, 4053, 4057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4053, 4058, 4052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4059, 4052, 4058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4052, 4059, 4051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4060, 4051, 4059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4059, 4061, 4060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4062, 4060, 4061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4061, 4063, 4062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4060, 4062, 4064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4065, 4066, 4063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4063, 4061, 4065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4067, 4065, 4061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4061, 4059, 4067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4058, 4067, 4059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4068, 4058, 4057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4058, 4068, 4069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4067, 4058, 4069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4069, 4070, 4067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4065, 4067, 4070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4070, 4071, 4065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4066, 4065, 4071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4071, 4072, 4066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4072, 4071, 4073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4074, 4072, 4073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4072, 4074, 4075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4076, 4077, 4078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4077, 4076, 4079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4073, 4079, 4076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4079, 4073, 4071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4071, 4070, 4079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4080, 4079, 4070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4070, 4069, 4080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4079, 4080, 4077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4076, 4074, 4073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4074, 4076, 4081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4076, 4082, 4081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4082, 4076, 4078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4083, 4082, 4078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4077, 4083, 4078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4083, 4077, 4084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4080, 4084, 4077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4084, 4080, 4085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4069, 4085, 4080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4083, 4086, 4087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4082, 4083, 4087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4083, 4088, 4089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4088, 4083, 4084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4085, 4088, 4084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4088, 4085, 4090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4091, 4088, 4090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4088, 4091, 4092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4093, 4092, 4091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4092, 4093, 4094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4095, 4092, 4094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4092, 4095, 4096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4089, 4092, 4096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4092, 4089, 4088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4093, 4097, 4094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4098, 4094, 4097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4094, 4098, 4095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4099, 4095, 4098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4095, 4099, 4100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4100, 4096, 4095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4096, 4100, 4101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4086, 4096, 4101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4096, 4086, 4089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4086, 4083, 4089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4098, 4102, 4099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4103, 4104, 4105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4102, 4105, 4104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4105, 4102, 4106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4102, 4098, 4106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4098, 4107, 4106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4107, 4098, 4097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4108, 4107, 4097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4097, 4093, 4108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4093, 4109, 4108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4109, 4110, 4108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4107, 4108, 4110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4111, 4112, 4113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4114, 4113, 4112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4110, 4114, 4112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4115, 4110, 4112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4110, 4115, 4107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4115, 4106, 4107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4106, 4115, 4105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4111, 4105, 4115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4105, 4111, 4103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4112, 4111, 4115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4110, 4109, 4116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4114, 4110, 4116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4116, 4117, 4114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4117, 4118, 4114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4113, 4114, 4118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4118, 4119, 4113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4119, 4111, 4113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4111, 4119, 4120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4120, 4103, 4111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4103, 4120, 4121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4122, 4121, 4120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4121, 4122, 4123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4119, 4122, 4120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4122, 4119, 4124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4125, 4122, 4124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4122, 4125, 4126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4127, 4122, 4126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4122, 4127, 4123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4127, 4128, 4123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4129, 4123, 4128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4123, 4129, 4121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4130, 4121, 4129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4121, 4130, 4103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4104, 4103, 4130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4128, 4127, 4131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4132, 4133, 4134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4133, 4132, 4135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4136, 4133, 4135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4137, 4136, 4135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4136, 4137, 4138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4137, 4139, 4138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4125, 4138, 4139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4140, 4135, 4132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4135, 4140, 4137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4141, 4137, 4140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4139, 4137, 4141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4134, 4142, 4143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4142, 4134, 4144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4134, 4117, 4144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4117, 4134, 4133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4118, 4117, 4133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4133, 4136, 4118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4119, 4118, 4136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4138, 4119, 4136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4119, 4138, 4124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4138, 4125, 4124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4117, 4116, 4145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4109, 4145, 4116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4145, 4109, 4146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4085, 4069, 4068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4068, 4090, 4085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4090, 4068, 4147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4147, 4091, 4090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4091, 4147, 4148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4148, 4093, 4091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4093, 4148, 4149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4109, 4093, 4149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4150, 4109, 4149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4109, 4150, 4146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4148, 4150, 4149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4035, 4034, 4151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4152, 4035, 4151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4035, 4152, 4048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4150, 4048, 4152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4048, 4150, 4055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4150, 4148, 4055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4148, 4056, 4055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4056, 4148, 4147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4147, 4057, 4056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4057, 4147, 4068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4150, 4153, 4146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4153, 4150, 4152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4152, 4154, 4153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4154, 4152, 4151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4034, 4154, 4151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4154, 4034, 4155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4034, 4156, 4155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4156, 4034, 4025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4013, 4156, 4025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4025, 4017, 4013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4012, 4157, 4158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4013, 4012, 4158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4156, 4013, 4158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4158, 4159, 4156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4159, 4158, 4157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4160, 4161, 4157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4157, 4012, 4160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4004, 4160, 4012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4161, 4162, 4163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4004, 4002, 4164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4160, 4004, 4164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4164, 4165, 4160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4161, 4160, 4165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4165, 4166, 4161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4161, 4166, 4162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4166, 4167, 4162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4168, 4162, 4167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4167, 4169, 4168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4170, 4168, 4169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4169, 4167, 4171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4172, 4171, 4167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4167, 4166, 4172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4173, 4172, 4166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4173, 4166, 4165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4171, 4172, 4174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4165, 4164, 4175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4175, 4176, 4165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4177, 4165, 4176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4165, 4177, 4173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4177, 4178, 4173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4172, 4173, 4178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4179, 4172, 4178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4172, 4179, 4174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4180, 4174, 4179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4174, 4180, 4181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4181, 4171, 4174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4178, 4177, 4182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4182, 4179, 4178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4179, 4182, 4183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4183, 4180, 4179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4180, 4183, 4184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1308, 2487, 1306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2487, 1308, 2485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1314, 2775, 1312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2775, 1314, 2550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2564, 1297, 2486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1297, 2564, 1295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2777, 2774, 2776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4185, 4186, 4187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4186, 4185, 4188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4185, 4189, 4190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4189, 4185, 4187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4187, 4191, 4189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4191, 4187, 4192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4186, 4192, 4187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4192, 4186, 4193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4194, 4189, 4191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4186, 4195, 4196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4195, 4186, 4188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4197, 4195, 4188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4185, 4197, 4188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4197, 4185, 4198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4190, 4198, 4185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4198, 4190, 4199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4190, 4200, 4199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4200, 4190, 4201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4189, 4201, 4190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3991, 3996, 3986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3996, 3991, 4202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3987, 4202, 3991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4202, 3987, 4200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3988, 4200, 3987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4200, 3988, 4199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3989, 4199, 3988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4199, 3989, 4198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4203, 4198, 3989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4198, 4203, 4197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3989, 4204, 4203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4205, 4206, 4207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4207, 4203, 4205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4203, 4208, 4205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4208, 4203, 4204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4209, 4208, 4204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4208, 4209, 4210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4209, 4211, 4210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4211, 4212, 4210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4212, 4211, 4213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4214, 4213, 4211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4213, 4214, 4215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4209, 4214, 4211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4210, 4212, 4206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4206, 4208, 4210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4208, 4206, 4205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4204, 3989, 3990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3992, 4204, 3990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4204, 3992, 4209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3992, 3993, 4209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4209, 3993, 4214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3993, 4008, 4214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4216, 4214, 4008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4214, 4216, 4215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4216, 4217, 4215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4217, 4213, 4215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4217, 4216, 4218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4219, 4220, 4221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4221, 4222, 4219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4222, 4221, 4217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4217, 4223, 4222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4223, 4217, 4218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4224, 4223, 4218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4216, 4224, 4218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4224, 4216, 4225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4008, 4225, 4216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4225, 4008, 4226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4223, 4224, 4227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4224, 4228, 4227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4228, 4224, 4229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4225, 4229, 4224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4229, 4225, 4230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4225, 4231, 4230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4231, 4225, 4226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4008, 4009, 4226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4009, 4231, 4226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4231, 4009, 4016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4016, 4021, 4231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4021, 4230, 4231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4230, 4021, 4023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4023, 4229, 4230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4229, 4023, 4232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4232, 4228, 4229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4228, 4232, 4233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4024, 4232, 4023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4232, 4024, 4234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4234, 4233, 4232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4233, 4234, 4235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4234, 4236, 4235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4236, 4234, 4237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4238, 4236, 4237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4239, 4238, 4237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4238, 4239, 4240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4241, 4240, 4239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4239, 4022, 4241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4022, 4239, 4024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4239, 4234, 4024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4234, 4239, 4237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4242, 4243, 4244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4245, 4242, 4244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4242, 4245, 4240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4238, 4240, 4245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4246, 4238, 4245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4238, 4246, 4247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4236, 4238, 4247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4240, 4241, 4242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4241, 4248, 4242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4243, 4242, 4248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4249, 4243, 4248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4243, 4249, 4250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4249, 4251, 4250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4251, 4249, 4252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4252, 4253, 4251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4253, 4252, 4043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4042, 4253, 4043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4043, 4254, 4040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4254, 4043, 4252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4249, 4254, 4252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4042, 4255, 4256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4253, 4042, 4256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4051, 4060, 4257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4064, 4257, 4060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4257, 4064, 4258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4259, 4257, 4258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4257, 4259, 4260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4259, 4261, 4260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4255, 4260, 4261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4260, 4255, 4262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4255, 4042, 4262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4042, 4049, 4262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4260, 4051, 4257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4051, 4260, 4050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4049, 4050, 4260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4262, 4049, 4260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4261, 4259, 4263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2774, 2777, 2773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4264, 4265, 4266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4265, 4264, 4029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4030, 4265, 4029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4030, 4040, 4254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4265, 4030, 4254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4254, 4249, 4265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4249, 4266, 4265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4266, 4249, 4248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4248, 4241, 4266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4241, 4264, 4266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4264, 4241, 4022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4022, 4020, 4264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4020, 4029, 4264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4162, 4267, 4163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4267, 4162, 4268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4161, 4159, 4157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4159, 4161, 4163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4163, 4269, 4159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4269, 4163, 4267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4270, 4269, 4267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4268, 4270, 4267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4270, 4268, 4271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4271, 4272, 4270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4272, 4271, 4273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4274, 4270, 4272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4270, 4274, 4275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4269, 4270, 4275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4159, 4276, 4277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4276, 4159, 4269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4269, 4278, 4276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4278, 4269, 4275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4275, 4279, 4278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4279, 4275, 4274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4280, 4279, 4274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4274, 4117, 4280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4117, 4274, 4281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4272, 4281, 4274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4281, 4272, 4282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4279, 4280, 4283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4284, 4285, 4169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4169, 4286, 4284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4286, 4169, 4171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4287, 4286, 4171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4285, 4170, 4169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4288, 4170, 4285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4289, 4288, 4285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4288, 4289, 4290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4291, 4290, 4289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4290, 4291, 3975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4292, 4290, 3975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4293, 4290, 4292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4143, 4293, 4292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4293, 4143, 4142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4294, 4293, 4142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4293, 4294, 4295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4295, 4290, 4293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4290, 4295, 4288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4295, 4170, 4288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4170, 4295, 4296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4268, 4170, 4296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4170, 4268, 4168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4162, 4168, 4268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4132, 4297, 4140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4297, 4132, 4298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4298, 3977, 4297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3977, 4298, 4299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4299, 3975, 3977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4292, 3975, 4299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4299, 4143, 4292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4143, 4299, 4298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4298, 4134, 4143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4134, 4298, 4132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4176, 4175, 4300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4301, 4300, 4175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4300, 4301, 4302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4301, 4303, 4302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4303, 4301, 4304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4304, 4305, 4303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4305, 4304, 4000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4001, 4000, 4304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4304, 4002, 4001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4002, 4304, 4301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4301, 4164, 4002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4164, 4301, 4175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4306, 4307, 4308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4309, 1334, 1335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4310, 4309, 1335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4309, 4310, 4311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4310, 4312, 4311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4307, 4311, 4312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4312, 4313, 4307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4313, 4308, 4307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4313, 4314, 4308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4314, 4306, 4308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4306, 4314, 4315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4314, 4313, 4316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4316, 4317, 4314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4314, 4317, 4315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4315, 4317, 4318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4318, 4319, 4315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4313, 4312, 4320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4321, 4320, 4312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4322, 4320, 4321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4312, 4310, 4321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1335, 4321, 4310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4321, 1335, 4322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1335, 1333, 4322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1333, 4320, 4322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4320, 1333, 1331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1331, 1322, 4320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4320, 1322, 4313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1324, 4313, 1322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4313, 1324, 4316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4323, 1586, 4324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4324, 4325, 4326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4325, 4324, 1586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1585, 4325, 1586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1576, 1586, 1577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1586, 4323, 1577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1572, 1577, 4323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4323, 1571, 1572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1571, 4323, 1523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4324, 1523, 4323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4324, 1519, 1523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1519, 4324, 4326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1520, 1519, 4326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1520, 4326, 4325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1518, 1520, 4325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1518, 4325, 1527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1527, 4325, 1529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4325, 1585, 1529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1584, 1529, 1585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4327, 4328, 4329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4329, 4330, 4327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4330, 4329, 4331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4332, 4330, 4331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4330, 4332, 4333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4334, 4333, 4332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4333, 4334, 4335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4334, 4336, 4335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4336, 4334, 4337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4337, 4338, 4336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4339, 4340, 4341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4340, 4339, 4342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4340, 4342, 4343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4344, 4340, 4343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4345, 4340, 4344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4346, 4340, 4345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4347, 4340, 4346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4348, 4340, 4349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4348, 4350, 4340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4340, 4350, 4351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4351, 4352, 4340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4340, 4352, 4353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4354, 4340, 4353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4340, 4354, 4355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4355, 4356, 4340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4356, 4357, 4340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4340, 4357, 4341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1848, 1839, 1847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1839, 1848, 4358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1823, 4358, 1824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4358, 1823, 1839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4359, 4360, 4361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4360, 4359, 4362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4361, 4363, 4359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4363, 4364, 4359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4364, 4362, 4359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4362, 4364, 4365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4366, 2643, 4365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2642, 4365, 2643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4365, 2642, 4362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2636, 4362, 2642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4362, 2636, 4360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2636, 4367, 4360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4368, 4360, 4367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4360, 4368, 4361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4368, 4369, 4361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4369, 4363, 4361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4370, 4369, 4368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4367, 2636, 2638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4371, 4369, 4370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4369, 4371, 4372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4372, 4373, 4369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4373, 4363, 4369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4374, 4363, 4373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4363, 4374, 4375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4364, 4363, 4375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4375, 4376, 4364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4366, 4364, 4376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4364, 4366, 4365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4376, 4375, 4377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4373, 4378, 4374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4378, 4373, 4379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4373, 4372, 4379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4380, 4379, 4372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4380, 4378, 4379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4378, 4380, 4381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2643, 4366, 2644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2460, 4382, 2459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4382, 2460, 2475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2429, 2422, 2310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2422, 2429, 2420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2464, 2474, 2473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2474, 2464, 2462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2462, 2435, 2474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2435, 2462, 2432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2464, 2460, 2304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2460, 2464, 2473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2565, 2760, 2757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2760, 2565, 2566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2754, 2461, 2763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2461, 2754, 2433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2463, 2763, 2461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2763, 2463, 2761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2761, 2306, 2565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2306, 2761, 2463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4383, 2768, 2770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2768, 4383, 2767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4383, 2756, 2767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2756, 4383, 2607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2603, 4383, 2602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4383, 2603, 2607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4383, 2601, 2602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2601, 4383, 2770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2568, 2454, 2307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2454, 2568, 2751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2770, 4384, 2601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4384, 2770, 2769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4385, 2069, 2079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2069, 4385, 2067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4386, 2067, 4385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2067, 4386, 2065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4386, 4387, 2065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4387, 2066, 2065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2066, 4387, 4388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4389, 2066, 4388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2066, 4389, 2071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2072, 2071, 4389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4387, 4386, 4390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1986, 4391, 4392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3157, 1986, 4392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4392, 3158, 3157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3158, 4392, 4393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4394, 3158, 4393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4394, 2131, 3158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2131, 4394, 2129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4391, 4393, 4392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1986, 3157, 1988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2129, 2127, 2128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2127, 2129, 4394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4394, 2126, 2127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2126, 4394, 4393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4393, 4395, 2126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4395, 4393, 4391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2119, 4395, 4391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4391, 2117, 2119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2117, 4391, 2146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4391, 1986, 2146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4395, 2119, 4396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1697, 1699, 1702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1702, 1734, 1697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1697, 1734, 1695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1695, 1734, 4397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4397, 1696, 1695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1696, 4397, 1745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1747, 1745, 4397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4397, 1738, 1747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1738, 4397, 1734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1738, 1734, 1735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1903, 4398, 1902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4398, 1903, 4399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1903, 1907, 4399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1928, 4399, 1907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4399, 1928, 4400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1928, 4401, 4400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4400, 4401, 4402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4402, 4399, 4400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4399, 4402, 4398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1907, 1903, 1908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4401, 1928, 1927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1927, 4403, 4401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4404, 4401, 4403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4403, 1927, 1929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1902, 4405, 1901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4405, 1902, 4398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4398, 4406, 4405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4406, 4398, 4402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4407, 4406, 4402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4401, 4407, 4402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4407, 4401, 4408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4401, 4404, 4408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4404, 4409, 4408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4409, 4404, 4410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4407, 4411, 4406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4411, 4407, 4412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4408, 4412, 4407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4412, 4408, 4409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4409, 4413, 4412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4413, 4409, 4414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4411, 4412, 4415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4413, 4415, 4412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4415, 4413, 4416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4417, 4409, 4410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4409, 4417, 4414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2848, 4414, 4417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4414, 2848, 2849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2849, 4413, 4414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4413, 2849, 2854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2855, 4413, 2854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4413, 2855, 4416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2855, 2132, 4416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2132, 4415, 4416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2132, 2855, 2130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4415, 2132, 2133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2133, 4411, 4415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4411, 2133, 2134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2134, 4406, 4411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4406, 2134, 4405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2134, 1901, 4405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1901, 2134, 1905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1793, 1816, 1797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4418, 4372, 4371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4418, 4380, 4372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4380, 4418, 4419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4419, 4381, 4380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4381, 4419, 4420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4419, 4421, 4420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2329, 2327, 4421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4421, 4419, 2329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2331, 2329, 4419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4418, 2331, 4419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2331, 4418, 4422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4422, 4418, 4423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4424, 4422, 4423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4424, 4425, 4422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4422, 4425, 2331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4426, 2331, 4425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2332, 2330, 2331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2331, 4426, 2332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2342, 2332, 4426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4425, 2342, 4426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2342, 4425, 4427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4425, 4424, 4427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4428, 4427, 4424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2356, 4427, 4428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2342, 4427, 2356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2356, 2347, 2342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4429, 4430, 4431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4430, 4429, 4432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4433, 4432, 4429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4432, 4433, 4434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4433, 4435, 4434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4370, 4434, 4435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4436, 4370, 4435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4370, 4436, 4371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4423, 4371, 4436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4371, 4423, 4418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4437, 4436, 4435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4435, 4433, 4437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4434, 4370, 4368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4368, 4432, 4434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4432, 4368, 4367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2638, 4432, 4367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4432, 2638, 4430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1858, 1859, 1869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1859, 4438, 1869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4438, 1859, 4439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4440, 4438, 4439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4438, 4440, 4441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4442, 4441, 4440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4441, 4442, 4443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4442, 2012, 4443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2012, 4442, 4444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2013, 2012, 4444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1792, 1793, 1797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2419, 2398, 2397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2398, 2419, 4445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4446, 2398, 4445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2398, 4446, 2400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2402, 2400, 4446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1797, 1816, 1800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4447, 4448, 4449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4448, 4306, 4449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4306, 4448, 4450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4307, 4306, 4450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4311, 4307, 4450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4450, 1345, 4311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1343, 4311, 1345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4311, 1343, 4309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1343, 1337, 4309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1334, 4309, 1337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4448, 4447, 4451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4451, 1345, 4448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1345, 4450, 4448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4315, 4449, 4306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4449, 4315, 4319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4452, 4449, 4319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4449, 4452, 4447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4453, 4447, 4452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4447, 4453, 1355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4451, 4447, 1355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1355, 1354, 4451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1345, 4451, 1354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1346, 1345, 1354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1835, 1852, 1831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3996, 4202, 3999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4007, 3999, 4202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4200, 4007, 4202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4007, 4200, 4201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4454, 4007, 4201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4007, 4454, 4455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4455, 3997, 4007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3997, 4455, 4456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4201, 4189, 4454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4189, 4194, 4454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4457, 4454, 4194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4454, 4457, 4455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4458, 4455, 4457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4455, 4458, 4456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4458, 4459, 4456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4460, 4456, 4459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4456, 4460, 3997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3998, 3997, 4460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4459, 4458, 4461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1848, 4462, 4358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4462, 1824, 4358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1824, 4462, 4463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4463, 1786, 1824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1786, 4463, 4464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2784, 2818, 4465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2784, 4465, 4466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2784, 4466, 1841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4467, 1841, 4466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1841, 4467, 1844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4468, 1844, 4467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1844, 4468, 1845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4469, 1845, 4468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1845, 4469, 1848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4462, 1848, 4469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1835, 1831, 1830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2547, 1310, 2550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1310, 2547, 4470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2548, 4470, 2547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4470, 2548, 2830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2811, 4470, 2830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2824, 2811, 2830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2811, 2824, 2810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2824, 2819, 2810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2810, 2819, 2809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2819, 2813, 2809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2787, 2811, 2785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2811, 2787, 4471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4470, 2811, 4471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4471, 1310, 4470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1310, 4471, 1303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4471, 1304, 1303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1304, 4471, 2787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2786, 1304, 2787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1304, 2786, 1299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2786, 1300, 1299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1300, 2786, 2801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2802, 1300, 2801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1300, 2802, 2777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2803, 2777, 2802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2777, 2803, 2773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2803, 1319, 2773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1319, 2803, 2836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2836, 1320, 1319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1320, 2836, 2804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1837, 1320, 2804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1320, 1837, 2772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1834, 2772, 1837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2772, 1834, 3412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1827, 3412, 1834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3412, 1827, 3468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1827, 2476, 3468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2476, 1827, 1826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1854, 2476, 1826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2476, 1854, 2484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1820, 2484, 1854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2484, 1820, 3149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1820, 1772, 3149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1772, 1820, 1777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1838, 1852, 1835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4213, 4217, 4472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4472, 4212, 4213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4212, 4472, 4473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4473, 4206, 4212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4474, 4206, 4473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4473, 4220, 4474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4220, 4473, 4221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4472, 4221, 4473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4472, 4217, 4221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4203, 4207, 4197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4195, 4197, 4207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4206, 4195, 4207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4206, 4196, 4195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4474, 4196, 4206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4474, 4186, 4196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4186, 4474, 4220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4220, 4193, 4186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4193, 4220, 4475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4220, 4219, 4475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3388, 4476, 3389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4476, 4477, 3389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3389, 4477, 4478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4477, 4479, 4478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4478, 4479, 4480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4479, 4481, 4480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4480, 4481, 4482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4481, 4483, 4482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4482, 4483, 3317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4482, 3317, 3316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4484, 4485, 4486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4484, 4486, 4487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3316, 4484, 4487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4487, 4482, 3316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4480, 4482, 4487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4488, 4480, 4487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4478, 4480, 4488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3377, 4478, 4488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3389, 4478, 3377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3378, 3389, 3377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4489, 3375, 3376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4489, 3376, 3377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4488, 4489, 3377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4486, 4489, 4488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4487, 4486, 4488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4490, 3350, 3369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3371, 4490, 3369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4491, 4490, 3371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3373, 4491, 3371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4492, 4491, 3373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4492, 3373, 3375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4493, 4492, 3375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4493, 3375, 4489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4486, 4493, 4489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3350, 3338, 3339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4490, 3338, 3350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3337, 3338, 4490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4491, 3337, 4490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4494, 3337, 4491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4494, 4491, 4492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4495, 4494, 4492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4495, 4492, 4493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4485, 4495, 4493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4485, 4493, 4486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3318, 4484, 3316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3318, 3322, 4484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3322, 4485, 4484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3322, 3324, 4485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3324, 4495, 4485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3324, 3326, 4495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3326, 4494, 4495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3326, 3329, 4494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3329, 3337, 4494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3329, 3333, 3337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3355, 3356, 3364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3356, 4496, 3364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3364, 4496, 4497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3364, 4497, 3362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3362, 4497, 3398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3398, 3360, 3362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3396, 3360, 3398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3359, 3360, 3396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3384, 3359, 3396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3382, 3359, 3384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4498, 4499, 4500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1403, 1404, 4501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4502, 1403, 4501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1403, 4502, 1401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4503, 1401, 4502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1401, 4503, 1469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4504, 1469, 4503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1469, 4504, 1461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1459, 1461, 4504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3893, 3887, 3889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4505, 4506, 4507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4508, 3901, 3900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4509, 3901, 4508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3901, 4509, 3891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4509, 3890, 3891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3900, 3908, 4510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2014, 2008, 4511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 3914, 3913, 4512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4513, 4514, 4515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4514, 4513, 4516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4516, 4517, 4514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4517, 4516, 4518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4517, 4518, 4519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2166, 2154, 4513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2155, 4513, 2154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4513, 2155, 4516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2156, 4516, 2155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4516, 2156, 4518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2157, 4518, 2156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4518, 2157, 4519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4519, 2157, 4520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2158, 4520, 2157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4520, 2158, 2174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2408, 2471, 2470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4521, 4522, 4523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2472, 4382, 2475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4524, 4525, 4526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1815, 2506, 1800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4527, 4528, 4529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2527, 2502, 2490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4530, 4531, 4532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2527, 2500, 2502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2926, 2932, 4533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2491, 2492, 2489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4534, 4535, 4536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2490, 2489, 2527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4537, 4538, 4539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2495, 2503, 2493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1838, 1836, 2798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2501, 2500, 2503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2795, 2792, 2794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2506, 1798, 1800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2785, 2795, 2788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1316, 2494, 2496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2494, 1316, 1296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1295, 2494, 1296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2494, 1295, 2509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1295, 2510, 2509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2510, 1295, 2564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2564, 2511, 2510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2511, 2564, 2485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1308, 2511, 2485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2511, 1308, 2561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2807, 2781, 2783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4540, 2655, 4541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2653, 2655, 2656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2655, 4540, 2656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4540, 2639, 2656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2639, 4540, 2637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4540, 2638, 2637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2638, 4540, 4430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4541, 4430, 4540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4430, 4541, 4431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2601, 4384, 2598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2781, 2784, 2782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2759, 2758, 2769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2793, 2792, 2807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 1838, 2798, 1853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 2783, 2793, 2807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4542, 4543, 4544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4543, 4542, 4545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4546, 4547, 4548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4549, 4546, 4550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4546, 4549, 4551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4547, 4546, 4551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4551, 4552, 4547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4553, 4547, 4552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4552, 4554, 4553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4554, 4555, 4553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4555, 4554, 4556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4557, 4556, 4554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4556, 4557, 4558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4559, 4554, 4560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4554, 4552, 4560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4561, 4560, 4552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4552, 4551, 4561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4551, 4562, 4561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4562, 4551, 4549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4549, 4563, 4562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4563, 4549, 4564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4565, 4563, 4564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4563, 4565, 4566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4567, 4562, 4563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4568, 4569, 4570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4570, 4571, 4568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4571, 4570, 4566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4566, 4572, 4571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4572, 4566, 4565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4573, 4572, 4565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4564, 4573, 4565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4573, 4564, 4574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4549, 4574, 4564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4574, 4549, 4550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4572, 4573, 4575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4576, 4577, 4578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4577, 4576, 4579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4580, 4579, 4576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4579, 4580, 4568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4571, 4579, 4568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4579, 4571, 4581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4571, 4582, 4581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4577, 4579, 4581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4582, 4571, 4572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4575, 4582, 4572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4582, 4575, 4583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4584, 4582, 4583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4582, 4584, 4585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4585, 4581, 4582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4581, 4585, 4586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4586, 4577, 4581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4577, 4586, 4587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4587, 4578, 4577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4578, 4587, 4588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4588, 4589, 4578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4589, 4588, 4590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4590, 4591, 4589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4591, 4590, 4592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4592, 4593, 4591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4593, 4592, 4594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4594, 4595, 4593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4595, 4594, 4596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4597, 4595, 4596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4598, 4597, 4599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4576, 4600, 4580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4600, 4576, 4601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4578, 4601, 4576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4601, 4578, 4589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4589, 4602, 4601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4602, 4589, 4591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4593, 4602, 4591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4602, 4593, 4603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4604, 4603, 4593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4603, 4604, 4605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4606, 4605, 4607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4605, 4606, 4608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4608, 4603, 4605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4603, 4608, 4609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4610, 4603, 4609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4603, 4610, 4602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4600, 4602, 4610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4602, 4600, 4601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4608, 4611, 4612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4612, 4609, 4608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4609, 4612, 4613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4613, 4610, 4609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4610, 4613, 4614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4614, 4600, 4610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4600, 4614, 4615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4615, 4580, 4600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4580, 4615, 4569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4569, 4568, 4580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4616, 4613, 4612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4566, 4567, 4563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4567, 4566, 4570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4570, 4617, 4567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4617, 4570, 4569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4569, 4618, 4617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4618, 4569, 4615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4615, 4619, 4618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4619, 4615, 4614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4614, 4620, 4619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4620, 4614, 4613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4621, 4622, 4623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4624, 4623, 4622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4622, 4620, 4624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4620, 4622, 4625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4619, 4620, 4625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4625, 4618, 4619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4618, 4625, 4626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4626, 4617, 4618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4626, 4567, 4617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4567, 4626, 4627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4627, 4628, 4629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4628, 4627, 4626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4626, 4630, 4628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4630, 4626, 4625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4562, 4567, 4627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4629, 4562, 4627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4562, 4629, 4561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4560, 4561, 4629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4629, 4559, 4560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4559, 4629, 4628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4628, 4631, 4559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4631, 4628, 4630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4630, 4632, 4631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4632, 4630, 4633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4625, 4633, 4630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4633, 4625, 4622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4622, 4621, 4633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4634, 4633, 4621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4633, 4634, 4632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4635, 4632, 4634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4632, 4635, 4636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4636, 4631, 4632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4631, 4636, 4637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4557, 4631, 4637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4631, 4557, 4559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4554, 4559, 4557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4637, 4558, 4557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4558, 4637, 4638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4636, 4638, 4637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4638, 4636, 4639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4635, 4639, 4636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4639, 4635, 4640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4635, 4641, 4640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4641, 4642, 4640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4642, 4641, 4643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4643, 4644, 4642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4645, 4646, 4647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4646, 4645, 4648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4649, 4646, 4648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4646, 4649, 4650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4649, 4651, 4650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4651, 4644, 4650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4644, 4651, 4652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4652, 4642, 4644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4642, 4652, 4653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4653, 4640, 4642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4640, 4653, 4639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4654, 4639, 4653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4639, 4654, 4638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4653, 4652, 4654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4644, 4643, 4655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4655, 4650, 4644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4650, 4655, 4656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4656, 4646, 4650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4646, 4656, 4657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4657, 4647, 4646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4647, 4657, 4658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4659, 4658, 4657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4658, 4659, 4660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4659, 4661, 4660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4662, 4663, 4659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4657, 4662, 4659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4662, 4657, 4656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4655, 4662, 4656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4661, 4659, 4663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4663, 4664, 4661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4664, 4663, 4665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4665, 4666, 4664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4666, 4665, 4667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4667, 4668, 4666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4668, 4667, 4669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4669, 4670, 4668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4670, 4669, 4671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4672, 4670, 4671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4673, 4674, 4662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4663, 4662, 4674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4675, 4663, 4674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4663, 4675, 4665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4675, 4667, 4665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4667, 4675, 4676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4676, 4669, 4667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4669, 4676, 4677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4678, 4669, 4677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4679, 4678, 4677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4673, 4680, 4681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4674, 4673, 4681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4681, 4675, 4674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4675, 4681, 4682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4682, 4676, 4675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4676, 4682, 4683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4683, 4677, 4676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4677, 4683, 4679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4683, 4684, 4679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4684, 4683, 4685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4686, 4687, 4688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4689, 4688, 4687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4687, 4690, 4689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4685, 4689, 4690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4689, 4685, 4691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4680, 4689, 4691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4691, 4681, 4680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4681, 4691, 4682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4685, 4682, 4691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4682, 4685, 4683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4689, 4680, 4692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4688, 4689, 4692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4693, 4694, 4695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4686, 4695, 4694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4695, 4686, 4696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4688, 4696, 4686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4696, 4688, 4697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4692, 4697, 4688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4697, 4692, 4698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4692, 4699, 4698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4699, 4692, 4680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4680, 4673, 4699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4700, 4696, 4701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4697, 4701, 4696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4701, 4697, 4702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4698, 4702, 4697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4702, 4698, 4641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4699, 4641, 4698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4641, 4699, 4643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4699, 4655, 4643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4655, 4699, 4673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4662, 4655, 4673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4624, 4620, 4613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4613, 4616, 4624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4623, 4624, 4616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4616, 4703, 4623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4700, 4623, 4703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4623, 4700, 4621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4701, 4621, 4700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4621, 4701, 4634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4702, 4634, 4701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4634, 4702, 4635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4641, 4635, 4702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4704, 4705, 4706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4706, 4707, 4704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4708, 4704, 4707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4707, 4709, 4708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4710, 4708, 4709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4693, 4710, 4709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4710, 4693, 4703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4695, 4703, 4693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4703, 4695, 4700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4696, 4700, 4695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4711, 4712, 4705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4705, 4704, 4711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4713, 4711, 4704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4704, 4708, 4713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4611, 4713, 4708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4708, 4710, 4611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4710, 4612, 4611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4612, 4710, 4616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4703, 4616, 4710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4714, 4715, 4716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4717, 4716, 4715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4712, 4717, 4715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4717, 4712, 4718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4712, 4711, 4718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4719, 4718, 4711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4711, 4713, 4719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4606, 4719, 4713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4713, 4611, 4606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4611, 4608, 4606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4604, 4720, 4605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4720, 4607, 4605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4607, 4720, 4721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4722, 4607, 4721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4721, 4723, 4722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4717, 4722, 4723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4722, 4717, 4718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4718, 4719, 4722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4607, 4722, 4719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4719, 4606, 4607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4723, 4721, 4724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4721, 4725, 4724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4725, 4721, 4720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4720, 4726, 4725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4726, 4720, 4727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4604, 4727, 4720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4593, 4727, 4604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4727, 4593, 4595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4728, 4727, 4595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4727, 4728, 4726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4595, 4597, 4728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4597, 4598, 4728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4729, 4728, 4598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4728, 4729, 4726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4730, 4726, 4729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4726, 4730, 4725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4731, 4725, 4730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4725, 4731, 4724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4732, 4724, 4731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4724, 4732, 4723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4733, 4723, 4732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4723, 4733, 4717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4716, 4717, 4733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4734, 4735, 4736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4737, 4734, 4736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4734, 4737, 4738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4735, 4734, 4739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4740, 4739, 4734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4738, 4740, 4734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4740, 4738, 4741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4742, 4740, 4741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4740, 4742, 4743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4744, 4743, 4742, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4743, 4745, 4740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4739, 4740, 4745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4746, 4739, 4745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4739, 4746, 4747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4745, 4743, 4748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4749, 4745, 4748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4745, 4749, 4746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4749, 4750, 4746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4750, 4747, 4746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4747, 4750, 4751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4752, 4747, 4751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4747, 4752, 4753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4735, 4747, 4753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4747, 4735, 4739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4754, 4755, 4756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4755, 4754, 4757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4749, 4757, 4754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4757, 4749, 4748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4748, 4758, 4757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4759, 4757, 4758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4759, 4758, 4760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4757, 4759, 4755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4761, 4756, 4755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4755, 4762, 4761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4762, 4755, 4759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4763, 4762, 4759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4763, 4759, 4760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4760, 4764, 4763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4764, 4760, 4744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4760, 4758, 4744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4743, 4744, 4758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4758, 4748, 4743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4762, 4763, 4765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4766, 4762, 4765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4766, 4767, 4768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4762, 4766, 4768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4761, 4762, 4768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4768, 4769, 4761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4769, 4768, 4770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4768, 4771, 4770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4771, 4768, 4767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4767, 4772, 4771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4772, 4767, 4773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4773, 4774, 4772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4774, 4773, 4775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4775, 4773, 4776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4773, 4777, 4776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4777, 4773, 4767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4767, 4766, 4777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4778, 4772, 4774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4772, 4778, 4779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4772, 4779, 4780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4771, 4772, 4780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4781, 4771, 4780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4771, 4781, 4770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4782, 4770, 4781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4770, 4782, 4769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4782, 4756, 4769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4756, 4761, 4769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4756, 4782, 4783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4784, 4756, 4783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4756, 4784, 4754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4785, 4754, 4784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4754, 4785, 4749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4750, 4749, 4785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4786, 4787, 4788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4787, 4786, 4789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4789, 4790, 4787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4790, 4789, 4791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4791, 4792, 4790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4792, 4791, 4793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4794, 4787, 4790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4787, 4794, 4795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4796, 4795, 4794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4795, 4796, 4797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4797, 4798, 4795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4798, 4797, 4799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4795, 4788, 4787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4788, 4795, 4798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4788, 4800, 4786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4800, 4788, 4798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4800, 4799, 4801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4799, 4800, 4798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4802, 4803, 4804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4803, 4802, 4805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4806, 4807, 4808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4807, 4806, 4809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4809, 4810, 4811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4810, 4809, 4806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4812, 4799, 4797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4799, 4812, 4813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4814, 4797, 4796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4797, 4814, 4812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4803, 4814, 4815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4814, 4803, 4807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4807, 4805, 4808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4805, 4807, 4803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4804, 4815, 4816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4815, 4804, 4803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4813, 4817, 4818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4817, 4813, 4811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4819, 4820, 4821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4820, 4819, 4822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4822, 4793, 4820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4793, 4822, 4792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4794, 4792, 4822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4792, 4794, 4790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4796, 4822, 4819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4822, 4796, 4794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4815, 4821, 4816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4821, 4815, 4819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4818, 4799, 4813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4799, 4818, 4801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4811, 4823, 4817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4823, 4811, 4810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4824, 4825, 4826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4826, 4827, 4824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4827, 4826, 4828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4828, 4802, 4827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4802, 4829, 4827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4829, 4802, 4830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4804, 4830, 4802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4829, 4824, 4827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4802, 4828, 4805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4830, 4831, 4829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4831, 4830, 4832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4833, 4832, 4830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4830, 4804, 4833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4816, 4833, 4804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4834, 4835, 4836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4836, 4837, 4834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4820, 4834, 4837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4837, 4821, 4820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4821, 4837, 4838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4838, 4816, 4821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4816, 4838, 4839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4833, 4816, 4839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4839, 4840, 4833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4832, 4833, 4840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4837, 4836, 4841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4841, 4838, 4837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4838, 4841, 4842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4842, 4839, 4838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4839, 4842, 4843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4840, 4839, 4843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4836, 4844, 4845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4845, 4841, 4836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4841, 4845, 4846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4846, 4842, 4841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4842, 4846, 4847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4847, 4843, 4842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4843, 4847, 4848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4848, 4840, 4843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4840, 4848, 4849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4850, 4840, 4849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4851, 4852, 4853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4854, 4853, 4852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4852, 4855, 4854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4856, 4854, 4855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4854, 4856, 4857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4858, 4857, 4856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4857, 4858, 4859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4844, 4859, 4858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4859, 4844, 4835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4844, 4836, 4835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4834, 4820, 4793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4793, 4860, 4834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4835, 4834, 4860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4861, 4835, 4860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4835, 4861, 4859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4862, 4859, 4861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4859, 4862, 4857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4863, 4857, 4862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4857, 4863, 4854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4853, 4854, 4863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4863, 4801, 4853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4818, 4853, 4801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4860, 4793, 4791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4789, 4860, 4791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4860, 4789, 4861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4786, 4861, 4789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4861, 4786, 4862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4800, 4862, 4786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4862, 4800, 4863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4801, 4863, 4800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4864, 4865, 4866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4867, 4868, 4869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4869, 4870, 4867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4870, 4869, 4871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4872, 4870, 4871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4870, 4872, 4873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4865, 4873, 4872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4873, 4865, 4874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4865, 4864, 4874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4875, 4874, 4864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4874, 4875, 4876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4873, 4877, 4870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4877, 4867, 4870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4867, 4877, 4878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4878, 4879, 4867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4880, 4881, 4882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4881, 4880, 4876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4880, 4874, 4876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4874, 4880, 4873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4877, 4873, 4880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4880, 4883, 4877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4883, 4878, 4877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4878, 4883, 4884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4884, 4885, 4878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4879, 4878, 4885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4885, 4886, 4879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4883, 4880, 4882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4887, 4888, 4884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4885, 4884, 4888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4888, 4889, 4885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4886, 4885, 4889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4889, 4823, 4886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4810, 4886, 4823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4886, 4810, 4890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4890, 4879, 4886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4879, 4890, 4868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4868, 4867, 4879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4888, 4887, 4891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4891, 4892, 4888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4889, 4888, 4892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4892, 4893, 4889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4823, 4889, 4893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4893, 4817, 4823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4817, 4893, 4894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4894, 4818, 4817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4818, 4894, 4851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4853, 4818, 4851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4892, 4891, 4895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4895, 4896, 4892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4893, 4892, 4896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4896, 4894, 4893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4894, 4896, 4897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4897, 4851, 4894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4851, 4897, 4898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4852, 4851, 4898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4898, 4899, 4852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4855, 4852, 4899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4899, 4898, 4900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4897, 4900, 4898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4900, 4897, 4901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4896, 4901, 4897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4901, 4896, 4902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4896, 4895, 4902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4814, 4809, 4812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4809, 4814, 4807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4811, 4812, 4809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4812, 4811, 4813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4903, 4904, 4905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4904, 4903, 4906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4907, 4906, 4903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4906, 4907, 4908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4909, 4908, 4907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4908, 4909, 4825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4825, 4824, 4908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4910, 4908, 4824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4824, 4829, 4910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4831, 4910, 4829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4910, 4831, 4911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4911, 4906, 4910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4908, 4910, 4906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4906, 4911, 4904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4840, 4850, 4832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4912, 4832, 4850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4832, 4912, 4831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4913, 4831, 4912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4831, 4913, 4911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4914, 4911, 4913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4911, 4914, 4904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4904, 4914, 4915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4916, 4904, 4915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4904, 4916, 4905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4917, 4905, 4916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4597, 4918, 4599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4919, 4920, 4921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4921, 4922, 4919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4922, 4921, 4923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4923, 4924, 4922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4924, 4923, 4925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4925, 4926, 4924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4926, 4925, 4918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4918, 4597, 4926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4597, 4927, 4926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4927, 4597, 4596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4926, 4928, 4924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4928, 4926, 4927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4929, 4928, 4927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4928, 4929, 4930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4931, 4928, 4930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4931, 4924, 4928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4924, 4931, 4922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4932, 4922, 4931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4922, 4932, 4919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4932, 4933, 4919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4934, 4929, 4935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4929, 4934, 4936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4929, 4936, 4930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4937, 4930, 4936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4937, 4931, 4930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4938, 4931, 4937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4931, 4938, 4932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4938, 4939, 4932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4933, 4932, 4939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4939, 4940, 4933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4936, 4941, 4937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4942, 4937, 4941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4937, 4942, 4938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4942, 4943, 4938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4939, 4938, 4943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4943, 4944, 4939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4944, 4943, 4945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4946, 4945, 4943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4945, 4946, 4947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4948, 4947, 4946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4947, 4948, 4949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4941, 4950, 4942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4950, 4946, 4942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4943, 4942, 4946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4946, 4950, 4948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4940, 4939, 4944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4951, 4940, 4944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4945, 4951, 4944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4951, 4945, 4952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4947, 4952, 4945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4952, 4947, 4953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4949, 4953, 4947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4953, 4949, 4954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4955, 4954, 4949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4954, 4955, 4956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4940, 4951, 4957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4958, 4957, 4951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4951, 4959, 4958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4959, 4951, 4952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4953, 4959, 4952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4959, 4953, 4960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4954, 4960, 4953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4960, 4954, 4961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4956, 4961, 4954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4961, 4956, 4962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4963, 4964, 4965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4964, 4963, 4966, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4967, 4966, 4963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4966, 4967, 4962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4968, 4962, 4967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4962, 4968, 4961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4969, 4961, 4968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4961, 4969, 4960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4970, 4960, 4969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4960, 4970, 4959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4971, 4965, 4972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4965, 4971, 4963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4973, 4963, 4971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4963, 4973, 4967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4974, 4967, 4973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4967, 4974, 4968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4975, 4968, 4974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4968, 4975, 4969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4975, 4970, 4969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4970, 4975, 4976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4976, 4977, 4978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4977, 4976, 4979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4975, 4979, 4976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4979, 4975, 4980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4974, 4980, 4975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4980, 4974, 4981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4973, 4981, 4974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4981, 4973, 4982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4973, 4983, 4982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4984, 4982, 4983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4983, 4973, 4971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4972, 4983, 4971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4979, 4985, 4977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4985, 4979, 4986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4980, 4986, 4979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4986, 4980, 4987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4981, 4987, 4980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4987, 4981, 4988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4982, 4988, 4981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4988, 4982, 4989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4982, 4984, 4989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4990, 4989, 4984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4991, 4989, 4992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4989, 4990, 4992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4993, 4992, 4990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4990, 4994, 4993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4995, 4991, 4996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4992, 4996, 4991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4996, 4992, 4997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4992, 4993, 4997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4998, 4997, 4993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4998, 4996, 4997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4996, 4998, 4999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5000, 4996, 4999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4996, 5000, 4995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5001, 4995, 5000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5002, 4999, 5003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4999, 5004, 5003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5004, 4999, 4998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4998, 5005, 5004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5006, 4985, 5007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5007, 5008, 5006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5008, 5007, 5009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5009, 5010, 5008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5010, 5009, 5011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5001, 5011, 5009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5011, 5001, 5012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5000, 5012, 5001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5012, 5000, 5002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4999, 5002, 5000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4995, 5001, 5013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5009, 5013, 5001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5007, 5013, 5009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5013, 5007, 5014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5007, 4986, 5014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4987, 5014, 4986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5014, 4987, 5015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4988, 5015, 4987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5015, 4988, 4991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4989, 4991, 4988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5015, 5013, 5014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5013, 5015, 4995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4991, 4995, 5015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4986, 5007, 4985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4976, 5016, 4970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5016, 4976, 4978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4978, 5017, 5016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5017, 4978, 5018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4978, 5019, 5018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5019, 4978, 4977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5020, 5019, 4977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4985, 5020, 4977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5020, 4985, 5021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4985, 5006, 5021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5022, 5016, 5017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5016, 4959, 4970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4959, 5016, 4958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5016, 5022, 4958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5022, 4957, 4958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4957, 5022, 5023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5023, 4940, 4957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4940, 5023, 5024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5024, 4933, 4940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4933, 5024, 4920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4920, 4919, 4933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4814, 4819, 4815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4819, 4814, 4796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5025, 5026, 5027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5026, 5025, 5028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5029, 5028, 5025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5028, 5029, 5030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5025, 5031, 5029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5028, 5032, 5026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5032, 5033, 5026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5033, 5027, 5026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5027, 5033, 5034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5033, 5032, 5035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5036, 5027, 5034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5034, 5037, 5036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5037, 5034, 5038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5034, 5039, 5038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5039, 5034, 5033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5033, 5040, 5039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5040, 5033, 5035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5041, 5040, 5035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5032, 5041, 5035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5041, 5032, 5042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5042, 5043, 5041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5040, 5041, 5044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5041, 5045, 5044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5045, 5041, 5043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5043, 5046, 5045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5046, 5043, 5047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5047, 5048, 5046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5048, 5047, 5049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5049, 5050, 5048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5050, 5049, 5051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5052, 5050, 5051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5051, 5053, 5052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5052, 5054, 5055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5050, 5052, 5056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5055, 5056, 5052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5056, 5055, 5057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5055, 5058, 5057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5058, 5055, 5059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5054, 5059, 5055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5059, 5054, 5060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5054, 5061, 5060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5061, 5054, 5062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5062, 5063, 5061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5054, 5052, 5053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5064, 5054, 5053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5054, 5064, 5062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5062, 5064, 5065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5063, 5062, 5065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5066, 5063, 5065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5063, 5066, 5067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5068, 5067, 5066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5067, 5068, 5069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5068, 5070, 5069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5071, 5053, 5072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5053, 5071, 5064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5073, 5064, 5071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5064, 5073, 5065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5073, 5066, 5065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5066, 5073, 5074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5074, 5068, 5066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5075, 5073, 5071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5071, 5076, 5075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5076, 5071, 5072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5077, 5074, 5073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5073, 5075, 5077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5078, 5077, 5075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5076, 5078, 5075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5078, 5076, 5079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5079, 5080, 5078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5080, 5079, 5081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5081, 5082, 5080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5082, 5081, 5042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5043, 5042, 5081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5081, 5047, 5043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5047, 5081, 5079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5079, 5049, 5047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5049, 5079, 5076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5076, 5051, 5049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5051, 5076, 5072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5053, 5051, 5072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5083, 5042, 5032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5042, 5083, 5082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5083, 5084, 5082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5084, 5080, 5082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5080, 5084, 5085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5085, 5078, 5080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5078, 5085, 5086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5077, 5078, 5086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5086, 5087, 5077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5074, 5077, 5087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5087, 5086, 5088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5086, 5089, 5088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5089, 5086, 5085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5084, 5089, 5085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5089, 5084, 5090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5091, 5090, 5084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5084, 5083, 5091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5083, 5030, 5091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5030, 5083, 5028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5032, 5028, 5083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5092, 5030, 5029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5030, 5092, 5093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5093, 5091, 5030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5091, 5093, 5094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5090, 5091, 5094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5090, 5094, 5095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5096, 5090, 5095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5090, 5096, 5089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5097, 5089, 5096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5089, 5097, 5088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5098, 5088, 5097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5088, 5098, 5087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5099, 5087, 5098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5087, 5099, 5074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5068, 5074, 5099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5099, 5100, 5068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5100, 5099, 5101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5098, 5101, 5099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5101, 5098, 5102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5097, 5102, 5098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5102, 5097, 5103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5096, 5103, 5097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5103, 5096, 5104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5070, 5068, 5100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5100, 5105, 5070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5105, 5100, 5106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5101, 5106, 5100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5106, 5101, 5107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5102, 5107, 5101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5107, 5102, 5108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5103, 5108, 5102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5108, 5103, 5109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5104, 5109, 5103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5095, 5104, 5096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5104, 5095, 5110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5111, 5110, 5095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5110, 5111, 5112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5111, 5113, 5112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5113, 5111, 5114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5114, 5115, 5113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5115, 5114, 5116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5116, 5117, 5115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5117, 5116, 5118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5118, 5119, 5120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5119, 5118, 5116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5116, 5092, 5119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5092, 5116, 5114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5114, 5093, 5092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5093, 5114, 5111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5111, 5094, 5093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5094, 5111, 5095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5118, 5121, 5117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5121, 5118, 5122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5120, 5122, 5118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5122, 5120, 5123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5120, 5124, 5123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5124, 5120, 5125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5120, 5031, 5125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5031, 5120, 5119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5119, 5029, 5031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5029, 5119, 5092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5126, 5115, 5117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5117, 5127, 5126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5127, 5117, 5121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5121, 5128, 5127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5128, 5121, 5129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5122, 5129, 5121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5129, 5122, 5130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5123, 5130, 5122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5130, 5123, 5131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5123, 5132, 5131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5132, 5123, 5124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5133, 5132, 5124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5125, 5133, 5124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5133, 5125, 5134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5031, 5134, 5125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5134, 5031, 5135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5031, 5025, 5135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5025, 5136, 5135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5136, 5025, 5027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5027, 5036, 5136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5137, 5133, 5134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5135, 5137, 5134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5137, 5135, 5136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5036, 5137, 5136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5138, 5139, 5140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5139, 5138, 5141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5141, 5142, 5139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5142, 5141, 5143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5143, 5037, 5142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5037, 5143, 5036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5137, 5036, 5143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5143, 5144, 5137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5133, 5137, 5144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5144, 5145, 5133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5132, 5133, 5145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5144, 5143, 5141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5141, 5146, 5144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5145, 5144, 5146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5146, 5141, 5138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5147, 5148, 5149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5150, 5149, 5148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5149, 5150, 5151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5151, 5152, 5149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5153, 5149, 5152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5149, 5153, 5147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5154, 5147, 5153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5155, 5156, 5157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5158, 5157, 5156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5159, 5158, 5156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5158, 5159, 5150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5160, 5150, 5159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5150, 5160, 5151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5160, 5161, 5151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5152, 5151, 5161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5161, 5162, 5152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5162, 5153, 5152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5159, 5163, 5160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5163, 5159, 5164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5159, 5165, 5164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5165, 5159, 5156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5156, 5155, 5165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5166, 5163, 5167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5168, 5166, 5169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5170, 5166, 5167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5166, 5170, 5169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5170, 5171, 5169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5172, 5169, 5171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5169, 5172, 5168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5172, 5162, 5168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5162, 5161, 5168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5166, 5168, 5161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5161, 5160, 5166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5163, 5166, 5160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5171, 5170, 5173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5174, 5175, 5176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5175, 5174, 5177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5177, 5178, 5175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5178, 5177, 5162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5162, 5172, 5178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5153, 5162, 5177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5177, 5154, 5153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5154, 5177, 5174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5179, 5154, 5174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5176, 5179, 5174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5179, 5176, 5180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5181, 5180, 5176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5180, 5181, 5182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5181, 5183, 5182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5183, 5184, 5182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5185, 5186, 5187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5186, 5184, 5187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5184, 5186, 5188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5188, 5182, 5184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5182, 5188, 5180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5189, 5180, 5188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5180, 5189, 5179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5189, 5190, 5179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5154, 5179, 5190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5190, 5191, 5154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5186, 5189, 5188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5192, 5193, 5189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5190, 5189, 5193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5193, 5194, 5190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5191, 5190, 5194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5194, 5195, 5191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5196, 5191, 5195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5195, 5197, 5196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5197, 5198, 5196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5197, 5199, 5198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5200, 5198, 5199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5197, 5195, 5201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5201, 5202, 5197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5199, 5197, 5202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5203, 5196, 5198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5198, 5200, 5203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5204, 5203, 5200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5200, 5205, 5204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5206, 5207, 5202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5208, 5202, 5207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5202, 5208, 5199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5209, 5199, 5208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5207, 5206, 5210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5199, 5209, 5200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5205, 5200, 5209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5211, 5205, 5209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5208, 5211, 5209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5211, 5208, 5212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5207, 5212, 5208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5212, 5207, 5213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5207, 4934, 5213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4934, 5207, 5210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5210, 4936, 4934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5205, 5214, 5215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5214, 5205, 5216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5205, 5211, 5216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5216, 5211, 5217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5212, 5217, 5211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5217, 5212, 5218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5213, 5218, 5212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5218, 5213, 5219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4934, 5219, 5213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5219, 4934, 4935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4594, 4927, 4596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4927, 4594, 4929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4592, 4929, 4594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4929, 4592, 4935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4590, 4935, 4592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4935, 4590, 5219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4588, 5219, 4590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5219, 4588, 5218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4587, 5218, 4588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5218, 4587, 5217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4586, 5217, 4587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5217, 4586, 5216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4585, 5216, 4586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5216, 4585, 5214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4584, 5214, 4585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5214, 4584, 5220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5221, 5214, 5220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5214, 5221, 5215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5155, 5215, 5221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5215, 5155, 5157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5147, 5154, 5191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5191, 5196, 5147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5148, 5147, 5196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5196, 5203, 5148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5203, 5150, 5148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5150, 5203, 5158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5203, 5204, 5158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5157, 5158, 5204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5204, 5215, 5157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5215, 5204, 5205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5222, 5223, 5224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5225, 5226, 5223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5223, 5222, 5225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5227, 5225, 5222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5228, 5229, 5225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5226, 5225, 5229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5230, 5226, 5229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5226, 5230, 5231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5230, 5232, 5231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5232, 5230, 5233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5234, 5233, 5230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5233, 5234, 5235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5236, 5235, 5234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5235, 5236, 5237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5238, 5233, 5235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5239, 5240, 5241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5239, 5234, 5240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5239, 5236, 5234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5242, 5243, 5244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5244, 5245, 5242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5245, 5244, 5246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5247, 5245, 5246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5246, 5248, 5247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5248, 5238, 5247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5248, 5249, 5238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5233, 5238, 5249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5250, 5233, 5249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5233, 5250, 5232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5251, 5249, 5248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5249, 5251, 5250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5232, 5250, 5252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5250, 5253, 5252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5253, 5250, 5251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5254, 5253, 5251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5248, 5254, 5251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5254, 5248, 5255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5248, 5246, 5255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5244, 5255, 5246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5255, 5244, 5256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5243, 5256, 5244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5257, 5258, 5259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5260, 5259, 5258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5259, 5260, 5261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5262, 5261, 5260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5261, 5262, 5254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5253, 5254, 5262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5263, 5264, 5265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5265, 5266, 5263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5266, 5265, 5267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5257, 5266, 5267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5266, 5257, 5268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5257, 5269, 5268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5269, 5257, 5259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5261, 5269, 5259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5269, 5261, 5256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5254, 5256, 5261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5256, 5254, 5255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5256, 5243, 5269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5270, 5269, 5243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5269, 5270, 5268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5271, 5268, 5270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5268, 5271, 5266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5272, 5266, 5271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5266, 5272, 5263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5272, 5273, 5263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5264, 5263, 5273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5274, 5264, 5273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5273, 5272, 5275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5275, 5276, 5273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5273, 5276, 5274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5276, 5275, 5183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5184, 5183, 5275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5275, 5187, 5184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5187, 5275, 5272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5272, 5185, 5187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5185, 5272, 5271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5271, 5277, 5185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5277, 5271, 5270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5270, 5278, 5277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5278, 5270, 5243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5243, 5242, 5278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5279, 5280, 5281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5281, 5242, 5279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5242, 5281, 5278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5281, 5277, 5278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5277, 5281, 5282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5282, 5185, 5277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5185, 5282, 5283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5186, 5185, 5283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5283, 5192, 5186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5189, 5186, 5192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5284, 5285, 5286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5286, 5280, 5284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5280, 5286, 5287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5287, 5281, 5280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5281, 5287, 5282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5288, 4956, 4955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4956, 5288, 5289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5285, 5289, 5288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5289, 5285, 5290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5285, 5284, 5290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5284, 4964, 5290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4964, 5284, 5291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5284, 5292, 5291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5292, 5284, 5280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5280, 5279, 5292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5289, 4962, 4956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4962, 5289, 4966, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5290, 4966, 5289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4966, 5290, 4964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5293, 5294, 5295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5294, 5293, 5296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5293, 5297, 5296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5297, 5298, 5296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5298, 5297, 5299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5292, 5298, 5299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5300, 5292, 5299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5292, 5300, 5291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4965, 5291, 5300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5291, 4965, 4964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5236, 5301, 5237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5301, 5295, 5237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5295, 5301, 5293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5301, 5302, 5293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5297, 5293, 5302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5302, 5303, 5297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5303, 5299, 5297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5299, 5303, 5300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4972, 5300, 5303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5300, 4972, 4965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5301, 5236, 5304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5304, 5305, 5301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5302, 5301, 5305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5305, 5306, 5302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5303, 5302, 5306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5306, 4972, 5303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4972, 5306, 5307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4983, 4972, 5307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4983, 5307, 5308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5307, 5309, 5308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5310, 5308, 5309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5309, 5311, 5310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5311, 5312, 5310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5311, 5313, 5312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5313, 5311, 5304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5305, 5304, 5311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5311, 5309, 5305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5306, 5305, 5309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5309, 5307, 5306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4984, 4983, 5308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4984, 5308, 5314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5308, 5310, 5314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5315, 5314, 5310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5312, 5315, 5310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5312, 5241, 5315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5312, 5313, 5241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5239, 5241, 5313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5304, 5239, 5313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5239, 5304, 5236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5316, 4984, 5314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5314, 5315, 5316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4984, 5316, 4990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4994, 4990, 5316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5316, 5317, 4994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5317, 5316, 5315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5315, 5318, 5317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5318, 5315, 5241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5241, 5228, 5318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5228, 5241, 5240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5229, 5228, 5240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5234, 5229, 5240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5229, 5234, 5230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5005, 4998, 4993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4993, 5319, 5005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5319, 4993, 4994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4994, 5320, 5319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5320, 4994, 5317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5317, 5321, 5320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5321, 5317, 5318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5318, 5227, 5321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5227, 5318, 5228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5225, 5227, 5228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5323, 5324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5325, 5323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5326, 5325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5327, 5326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5328, 5327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5329, 5328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5330, 5329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5331, 5330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5332, 5331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5333, 5332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5334, 5333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5335, 5334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5322, 5336, 5335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5337, 5338, 5339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4936, 5210, 5340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4941, 4936, 5340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5340, 5341, 4941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4950, 4941, 5341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5341, 5337, 4950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5337, 4948, 4950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4948, 5337, 5339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5339, 4949, 4948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4949, 5339, 4955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5338, 4955, 5339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5342, 5343, 5344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5344, 5345, 5342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5346, 5342, 5345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5347, 5346, 5345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5206, 5346, 5347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5347, 5210, 5206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5210, 5347, 5340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5341, 5340, 5347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5347, 5348, 5341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5337, 5341, 5348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5348, 5347, 5345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5345, 5344, 5348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5349, 5348, 5344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5344, 5350, 5349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5350, 5344, 5343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5343, 5351, 5350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5348, 5349, 5337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5338, 5337, 5349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5349, 5352, 5338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5352, 5349, 5350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5350, 5353, 5352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5353, 5350, 5351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5351, 5354, 5353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4955, 5338, 5288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5338, 5285, 5288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5285, 5338, 5352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5352, 5286, 5285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5286, 5352, 5353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5353, 5287, 5286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5287, 5353, 5354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5354, 5282, 5287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5282, 5354, 5283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5192, 5283, 5354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5354, 5351, 5192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5193, 5192, 5351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5351, 5343, 5193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5194, 5193, 5343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5343, 5342, 5194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5195, 5194, 5342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5342, 5346, 5195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5195, 5346, 5201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5346, 5206, 5201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5202, 5201, 5206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5355, 5356, 5357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5356, 5355, 5358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5359, 5357, 5360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5357, 5359, 5361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5357, 5361, 5355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5355, 5361, 5362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5355, 5362, 5358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5363, 5358, 5362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5358, 5363, 5364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5363, 5365, 5364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5366, 5367, 5368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5367, 5366, 5369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5369, 5359, 5367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5359, 5369, 5370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5370, 5361, 5359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5361, 5370, 5371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5371, 5362, 5361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5362, 5371, 5372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5372, 5363, 5362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5373, 5372, 5371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5371, 5374, 5373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5374, 5371, 5370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5369, 5374, 5370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5374, 5369, 5375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5366, 5375, 5369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5376, 5363, 5377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5363, 5372, 5377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5378, 5377, 5372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5372, 5373, 5378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4784, 5378, 5373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5373, 4785, 4784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4785, 5373, 5374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5374, 4750, 4785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4750, 5374, 5375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5379, 4750, 5375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5378, 4784, 4783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4782, 5378, 4783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5379, 5380, 5381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4752, 5379, 5381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5379, 4752, 4751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4750, 5379, 4751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5375, 5366, 5379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5380, 5379, 5366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5368, 5380, 5366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5380, 5368, 5382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5368, 5383, 5382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5383, 5368, 5384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5367, 5384, 5368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5384, 5367, 5385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5367, 5360, 5385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5360, 5367, 5359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5386, 4781, 4780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5387, 5388, 5389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5388, 5387, 5386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4780, 5388, 5386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4780, 4779, 5388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4778, 5388, 4779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5388, 4778, 5390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5390, 5389, 5388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5389, 5390, 5391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5392, 5389, 5391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5393, 5389, 5392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5389, 5393, 5387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5365, 5387, 5393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5387, 5365, 5376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5365, 5363, 5376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5376, 5386, 5387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5386, 5376, 5394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4781, 5386, 5394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5394, 4782, 4781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4782, 5394, 5395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5378, 4782, 5395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5377, 5378, 5395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5395, 5376, 5377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5376, 5395, 5394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5396, 5397, 5398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5399, 5396, 5400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5396, 5399, 5401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5397, 5396, 5401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5401, 5402, 5397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5402, 5401, 5403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5403, 5404, 5402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5404, 5403, 5405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5405, 5406, 5404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5405, 5407, 5406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5407, 5405, 5408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5409, 5410, 5411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5410, 5399, 5411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5399, 5410, 5412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5412, 5401, 5399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5401, 5412, 5403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5412, 5405, 5403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5405, 5412, 5408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5412, 5413, 5408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5413, 5412, 5410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5414, 5413, 5410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5410, 5409, 5414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5415, 5414, 5409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5414, 5415, 5416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5417, 5416, 5415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5416, 5418, 5414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5413, 5414, 5418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5419, 5407, 5408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5413, 5419, 5408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5419, 5413, 5420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5418, 5420, 5413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5420, 5418, 5421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5422, 5421, 5418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5418, 5416, 5422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5423, 5422, 5416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5416, 5417, 5423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4543, 5423, 5417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5424, 5425, 5426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5427, 5426, 5425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5428, 5427, 5425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5427, 5428, 4545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5429, 4545, 5428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5429, 4543, 4545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5423, 4543, 5429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5429, 5430, 5423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5422, 5423, 5430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5430, 5431, 5422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5421, 5422, 5431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5424, 5432, 5433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5433, 5434, 5424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5425, 5424, 5434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5435, 5425, 5434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5425, 5435, 5428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5436, 5428, 5435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5428, 5436, 5429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5430, 5429, 5436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5436, 5437, 5430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5431, 5430, 5437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5437, 5436, 5438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5436, 5439, 5438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5439, 5436, 5435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5435, 5440, 5439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5440, 5435, 5434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5434, 5433, 5440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5441, 5442, 5443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5444, 5445, 5446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5445, 5444, 5447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5448, 5447, 5444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5447, 5448, 5442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5449, 5442, 5448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5442, 5449, 5443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5449, 5450, 5443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5451, 5443, 5450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5443, 5451, 5441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5452, 5441, 5451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5450, 5449, 5453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5454, 5446, 5455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5446, 5454, 5444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5456, 5444, 5454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5444, 5456, 5448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5457, 5448, 5456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5448, 5457, 5449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5458, 5449, 5457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5449, 5458, 5453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5458, 5459, 5453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5459, 5450, 5453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5460, 5455, 5461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5455, 5460, 5454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5462, 5454, 5460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5454, 5462, 5456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5463, 5456, 5462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5456, 5463, 5457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5464, 5457, 5463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5457, 5464, 5458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5464, 5465, 5458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5459, 5458, 5465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5465, 5464, 5466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5466, 5467, 5465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5468, 5465, 5467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5469, 5468, 5467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5468, 5469, 5470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5471, 5468, 5470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5468, 5471, 5472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5473, 5472, 5471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5467, 5466, 5474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5475, 5467, 5474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5467, 5475, 5469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5465, 5468, 5459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5468, 5476, 5459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5476, 5468, 5472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5477, 5476, 5472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5472, 5473, 5477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5473, 5478, 5477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5478, 5473, 5479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5479, 5480, 5478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5480, 5479, 5481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5482, 5480, 5481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5450, 5459, 5476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5476, 5451, 5450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5451, 5476, 5477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5478, 5451, 5477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5451, 5478, 5452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5480, 5452, 5478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5483, 5484, 5452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5452, 5480, 5483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5485, 5483, 5480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5483, 5485, 5486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5486, 5487, 5483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5487, 5486, 5488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5488, 5489, 5487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5489, 5488, 5490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5490, 5491, 5489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5491, 5490, 5492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5480, 5482, 5485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5493, 5485, 5482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5485, 5493, 5494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5494, 5486, 5485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5486, 5494, 5495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5495, 5488, 5486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5488, 5495, 5496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5496, 5490, 5488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5490, 5496, 5497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5497, 5492, 5490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5492, 5497, 5498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5498, 5499, 5492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5499, 5498, 5500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5501, 5499, 5500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5499, 5501, 5502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5503, 5502, 5501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5502, 5503, 5504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5505, 5504, 5503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5504, 5505, 5506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5507, 5506, 5505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5492, 5508, 5491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5508, 5492, 5499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5499, 5509, 5508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5509, 5499, 5502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5504, 5509, 5502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5509, 5504, 5510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5506, 5510, 5504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5510, 5506, 5511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5512, 5511, 5506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5511, 5512, 5513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5509, 5514, 5508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5514, 5509, 5515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5510, 5515, 5509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5515, 5510, 5516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5511, 5516, 5510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5516, 5511, 5517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5513, 5517, 5511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5517, 5513, 5518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5519, 5513, 5512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5513, 5519, 5520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5520, 5518, 5513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5518, 5520, 5521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5522, 5518, 5521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5518, 5522, 5523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5524, 5518, 5523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5518, 5524, 5517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5525, 5517, 5524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5517, 5525, 5516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5525, 5526, 5527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5526, 5525, 5528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5524, 5528, 5525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5521, 5529, 5522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5529, 5530, 5522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5530, 5523, 5522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5523, 5530, 5531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5531, 5524, 5523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5524, 5531, 5532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5528, 5524, 5532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5533, 5528, 5532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5528, 5533, 5534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5535, 5534, 5533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5536, 5535, 5533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5532, 5536, 5533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5536, 5532, 5531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5530, 5536, 5531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5530, 5529, 5537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5537, 5538, 5530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5536, 5530, 5538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5538, 5539, 5536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5535, 5536, 5539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5539, 5540, 5535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5540, 5539, 5541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5542, 5541, 5539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5541, 5542, 5543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5544, 5543, 5542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5543, 5544, 5545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5538, 5537, 5546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5546, 5542, 5538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5539, 5538, 5542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5542, 5546, 5544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5534, 5535, 5547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5540, 5547, 5535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5547, 5540, 5548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5549, 5547, 5548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5547, 5549, 5550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5551, 5550, 5549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5550, 5551, 5552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5551, 5455, 5552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5455, 5553, 5552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5553, 5455, 5446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5553, 5550, 5552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5550, 5553, 5554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5455, 5551, 5461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5550, 5534, 5547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5534, 5550, 5554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5554, 5528, 5534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5528, 5554, 5526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5553, 5526, 5554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5526, 5553, 5555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5555, 5527, 5526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5527, 5555, 5556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5555, 5557, 5556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5558, 5556, 5557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5527, 5516, 5525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5516, 5527, 5515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5556, 5515, 5527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5515, 5556, 5514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5556, 5558, 5514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5508, 5514, 5558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5558, 5491, 5508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5491, 5558, 5559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5559, 5489, 5491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5489, 5559, 5560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5560, 5487, 5489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5487, 5560, 5484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5484, 5483, 5487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5557, 5559, 5558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5559, 5557, 5561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5562, 5559, 5561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5559, 5562, 5560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5562, 5484, 5560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5446, 5555, 5553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5555, 5446, 5445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5557, 5555, 5445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5447, 5557, 5445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5557, 5447, 5561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5442, 5561, 5447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5561, 5442, 5562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5442, 5441, 5562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5484, 5562, 5441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5441, 5452, 5484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5563, 5564, 5565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5565, 5566, 5563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5566, 5565, 5567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5567, 5568, 5566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5568, 5567, 5569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5569, 5570, 5568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5570, 5569, 5571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5572, 5570, 5571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5426, 5427, 5564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5564, 5563, 5426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5573, 5426, 5563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5563, 5574, 5573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5574, 5563, 5566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5566, 5575, 5574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5575, 5566, 5568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5568, 5576, 5575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5576, 5568, 5570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5577, 5576, 5570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5570, 5572, 5577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5578, 5577, 5572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5576, 5577, 5579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5579, 5580, 5576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5580, 5575, 5576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5575, 5580, 5581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5581, 5574, 5575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5574, 5581, 5582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5582, 5573, 5574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5573, 5582, 5432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5432, 5424, 5573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5426, 5573, 5424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5583, 5584, 5585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5586, 5583, 5585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5583, 5586, 5587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5588, 5587, 5586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5587, 5588, 5589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5590, 5589, 5588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5589, 5590, 5591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5592, 5591, 5590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5591, 5592, 5579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5580, 5579, 5592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5579, 5593, 5591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5594, 5591, 5593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5591, 5594, 5589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5595, 5589, 5594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5589, 5595, 5587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5595, 5583, 5587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5584, 5583, 5596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5597, 5596, 5583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5583, 5595, 5597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5598, 5597, 5595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5594, 5598, 5595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5598, 5594, 5599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5593, 5599, 5594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5599, 5593, 5578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5577, 5578, 5593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5593, 5579, 5577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5597, 5598, 5600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5600, 5601, 5597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5596, 5597, 5601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5601, 5602, 5596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5602, 5601, 5603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5604, 5602, 5603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5603, 5605, 5604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5606, 5604, 5605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5605, 5607, 5606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5608, 5606, 5607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5601, 5600, 5609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5609, 5603, 5601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5603, 5609, 5610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5605, 5603, 5610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5610, 5611, 5605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5607, 5605, 5611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5611, 5610, 5612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5609, 5612, 5610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5612, 5609, 5613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5606, 5608, 5614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5614, 5615, 5606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5604, 5606, 5615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5615, 5616, 5604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5602, 5604, 5616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5616, 5615, 5617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5618, 5617, 5615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5615, 5614, 5618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5617, 5618, 5619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5620, 5619, 5621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5620, 5617, 5619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5617, 5620, 5622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5622, 5623, 5617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5623, 5616, 5617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5616, 5623, 5624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5624, 5602, 5616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5602, 5624, 5625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5625, 5596, 5602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5596, 5625, 5584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5626, 5627, 5628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5629, 5630, 5627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5627, 5626, 5629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5631, 5629, 5626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5632, 5633, 5634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5635, 5634, 5633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5634, 5635, 5636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5637, 5636, 5635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5636, 5637, 5638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5630, 5638, 5637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5638, 5630, 5639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5630, 5629, 5639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5640, 5639, 5629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5629, 5631, 5640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5636, 5641, 5634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5638, 5642, 5636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5641, 5636, 5642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5642, 5643, 5641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5644, 5641, 5643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5641, 5644, 5645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5645, 5634, 5641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5634, 5645, 5632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5646, 5647, 5648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5648, 5649, 5646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5649, 5648, 5650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5642, 5649, 5650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5651, 5642, 5650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5643, 5642, 5651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5651, 5652, 5643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5643, 5652, 5644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5652, 5653, 5644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5654, 5644, 5653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5655, 5656, 5646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5657, 5655, 5646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5649, 5657, 5646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5656, 5658, 5659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5658, 5656, 5655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5655, 5660, 5658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5660, 5655, 5661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5655, 5640, 5661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5640, 5655, 5657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5639, 5640, 5657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5649, 5639, 5657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5639, 5649, 5638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5642, 5638, 5649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5631, 5661, 5640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5661, 5631, 5662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5663, 5661, 5662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5661, 5663, 5660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4672, 5660, 5663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5664, 4672, 5663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4670, 4672, 5664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4671, 5665, 4672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5660, 4672, 5665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5666, 5660, 5665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5660, 5666, 5658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5667, 5658, 5666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5658, 5667, 5659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5667, 5668, 5659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5668, 5656, 5659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5656, 5668, 5647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5647, 5646, 5656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5669, 5647, 5668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5668, 5670, 5669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5670, 5668, 5671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5668, 5667, 5671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5672, 5671, 5667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5672, 5667, 5666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5666, 5673, 5672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5673, 5666, 4678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5666, 5665, 4678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5665, 4671, 4678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4669, 4678, 4671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5674, 5669, 5670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4678, 4679, 5673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4684, 5673, 4679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5673, 4684, 5672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4684, 5675, 5672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5671, 5672, 5675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5676, 5671, 5675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5671, 5676, 5670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5677, 5670, 5676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5670, 5677, 5674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5678, 5674, 5677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5679, 5677, 5676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5680, 5678, 5677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5677, 5679, 5680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5681, 5680, 5679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5682, 5681, 5679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5676, 5682, 5679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5682, 5676, 5675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5675, 4684, 5682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5683, 5684, 5685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5685, 5686, 5683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5686, 5653, 5683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5653, 5678, 5683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5684, 5683, 5678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5678, 5680, 5684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5687, 5684, 5680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5680, 5681, 5687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5681, 5688, 5687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5688, 5689, 5687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5689, 5685, 5684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5684, 5687, 5689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5689, 5688, 5690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5690, 5691, 5689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5685, 5689, 5691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5691, 5692, 5685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5686, 5685, 5692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5692, 5693, 5686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4685, 5682, 4684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5682, 4685, 4690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5681, 5682, 4690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4690, 4687, 5681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5688, 5681, 4687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4687, 4686, 5688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4694, 5688, 4686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5688, 4694, 5690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4694, 5694, 5690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5691, 5690, 5694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5695, 5696, 4706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4707, 4706, 5696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5696, 5697, 4707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4709, 4707, 5697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5697, 4693, 4709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4693, 5697, 5698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4694, 4693, 5698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5694, 4694, 5698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5698, 5699, 5694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5700, 5694, 5699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5699, 5701, 5700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5702, 5700, 5701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5701, 5703, 5702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5703, 5701, 5695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5696, 5695, 5701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5701, 5699, 5696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5697, 5696, 5699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5699, 5698, 5697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5694, 5700, 5691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5692, 5691, 5700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5700, 5702, 5692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5693, 5692, 5702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5702, 5704, 5693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5704, 5702, 5703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5705, 5704, 5703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5695, 5705, 5703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5705, 5695, 5706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4706, 5706, 5695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5707, 5706, 5708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5706, 5707, 5705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5709, 5707, 5710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5707, 5709, 5705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5704, 5705, 5709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5711, 5710, 5712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5710, 5713, 5712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5713, 5710, 5707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5707, 4714, 5713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4714, 5707, 5708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4715, 4714, 5708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4712, 4715, 5708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5706, 4712, 5708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4712, 5706, 4705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5706, 4706, 4705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5653, 5686, 5654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5686, 5714, 5654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5714, 5686, 5693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5693, 5715, 5714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5715, 5693, 5704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5704, 5716, 5715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5716, 5704, 5709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5709, 5717, 5716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5717, 5709, 5710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5710, 5711, 5717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5632, 5718, 5719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5718, 5632, 5645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5645, 5720, 5718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5720, 5645, 5644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5644, 5654, 5720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5654, 5721, 5720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5721, 5654, 5714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5714, 5722, 5721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5722, 5714, 5715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5715, 5723, 5722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5723, 5715, 5716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5716, 5724, 5723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5724, 5716, 5717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5725, 5721, 5722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5718, 5726, 5719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5726, 5718, 5727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5720, 5727, 5718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5727, 5720, 5721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5721, 5725, 5727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5728, 5727, 5725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5725, 5729, 5728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5729, 5725, 5730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5722, 5730, 5725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5730, 5722, 5723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5723, 5731, 5730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5731, 5723, 5724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5727, 5728, 5726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5731, 5729, 5730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5729, 5731, 5732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5733, 5729, 5732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5733, 5728, 5729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5728, 5733, 5734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5734, 5726, 5728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5726, 5734, 5735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5736, 5726, 5735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5726, 5736, 5719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5632, 5719, 5736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5733, 5737, 5738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5738, 5734, 5733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5734, 5738, 5739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5739, 5735, 5734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5735, 5739, 5740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5741, 5735, 5740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5735, 5741, 5736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5742, 5736, 5741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5736, 5742, 5632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5633, 5632, 5742, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5717, 5711, 5743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5743, 5724, 5717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5724, 5743, 5744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5745, 5724, 5744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5724, 5745, 5731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5746, 5731, 5745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5731, 5746, 5732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5747, 5732, 5746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5732, 5747, 5737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5737, 5733, 5732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5567, 5748, 5569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5748, 5567, 5749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5569, 5750, 5571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5750, 5569, 5748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5571, 5751, 5572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5751, 5571, 5750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5752, 5748, 5753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5748, 5752, 5750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5754, 5753, 5755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5753, 5754, 5752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5755, 5756, 5757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5756, 5755, 5753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5753, 5749, 5756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5749, 5753, 5748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5749, 5565, 5756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5565, 5749, 5567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5565, 5757, 5756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5757, 5565, 5564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5609, 5758, 5613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5758, 5609, 5600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5759, 5760, 5761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5760, 5759, 5762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5761, 4544, 5759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4544, 5761, 4542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5763, 5761, 5760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5761, 5763, 5764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4542, 5764, 5765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5764, 4542, 5761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5763, 5766, 5754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5766, 5763, 5767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5764, 5757, 5765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5757, 5764, 5755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5763, 5755, 5764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5755, 5763, 5754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5758, 5763, 5760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5763, 5758, 5767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5760, 5613, 5758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5613, 5760, 5762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5600, 5767, 5758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5767, 5600, 5598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5765, 4545, 4542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4545, 5765, 5427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5766, 5578, 5768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5578, 5766, 5599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5768, 5572, 5751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5572, 5768, 5578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5752, 5751, 5750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5751, 5752, 5768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5754, 5768, 5752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5768, 5754, 5766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5767, 5599, 5766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5599, 5767, 5598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5427, 5757, 5564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5757, 5427, 5765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5769, 5336, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5770, 5769, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5771, 5770, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5772, 5771, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5773, 5772, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5774, 5773, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5775, 5774, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5776, 5775, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5777, 5776, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5778, 5777, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5779, 5778, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5780, 5779, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5324, 5780, 5322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5781, 5782, 5669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5669, 5674, 5781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5783, 5781, 5674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5674, 5678, 5783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5678, 5653, 5783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5652, 5783, 5653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5781, 5783, 5652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5652, 5651, 5781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5782, 5781, 5651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5651, 5650, 5782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5648, 5782, 5650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5782, 5648, 5647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5647, 5669, 5782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5784, 5785, 5786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5787, 5784, 5786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5788, 5787, 5786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5789, 5788, 5786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5788, 5789, 5790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5791, 5790, 5789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5790, 5791, 5792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5793, 5792, 5791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5792, 5793, 5794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5795, 5794, 5793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5796, 5797, 5795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5795, 5798, 5796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5793, 5798, 5795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5798, 5793, 5799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5791, 5799, 5793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5799, 5791, 5800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5791, 5801, 5800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5801, 5791, 5789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5789, 5785, 5801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5785, 5789, 5786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5802, 5803, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5805, 5802, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5806, 5805, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5807, 5806, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5806, 5807, 5808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5807, 5809, 5808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5809, 5807, 5810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5810, 5811, 5809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5811, 5810, 5797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5797, 5796, 5811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5794, 5795, 5812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5795, 5813, 5812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5813, 5795, 5797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5797, 5814, 5813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5814, 5797, 5810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5807, 5814, 5810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5814, 5807, 5815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5804, 5815, 5807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5815, 5804, 5816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5817, 5816, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5818, 5817, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5803, 5818, 5804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5109, 5104, 5819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5110, 5819, 5104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5819, 5110, 5820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5110, 5821, 5820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5821, 5110, 5112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5112, 5822, 5821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5822, 5112, 5113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5113, 5823, 5822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5823, 5113, 5115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5115, 5126, 5823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4547, 5824, 4548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5824, 4547, 5825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4547, 4553, 5825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4555, 5825, 4553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5825, 4555, 5826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5826, 5824, 5825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5824, 5826, 5827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5298, 5292, 5279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5242, 5298, 5279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5298, 5242, 5245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5245, 5296, 5298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5296, 5245, 5294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5245, 5247, 5294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5294, 5247, 5238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5238, 5295, 5294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5235, 5295, 5238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5295, 5235, 5237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4544, 4543, 5417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4544, 5417, 5828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5415, 5828, 5417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5828, 5415, 5829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5409, 5829, 5415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5829, 5409, 5830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5411, 5830, 5409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5830, 5411, 5831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5411, 5400, 5831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5400, 5411, 5399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5832, 4876, 4875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4876, 5832, 4881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5832, 5833, 4881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5834, 4881, 5833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4881, 5834, 4882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4882, 5834, 5835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5835, 4883, 4882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4883, 5835, 5836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5836, 4884, 4883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 4884, 5836, 4887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5837, 5838, 5839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5840, 5837, 5839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5837, 5840, 5841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5842, 5841, 5840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5841, 5842, 5843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5842, 5844, 5843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5844, 5842, 5845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5845, 5846, 5844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5845, 5847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5847, 5848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5848, 5849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5849, 5850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5850, 5851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5851, 5852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5846, 5852, 5853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5853, 5844, 5846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5844, 5853, 5854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5855, 5844, 5854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5844, 5855, 5843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5856, 5843, 5855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5843, 5856, 5841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5857, 5841, 5856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5841, 5857, 5837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5857, 5858, 5837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5858, 5859, 5837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5859, 5858, 5860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5860, 5861, 5859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5861, 5860, 5862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5863, 5861, 5862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5861, 5863, 5864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5865, 5864, 5863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5864, 5865, 5866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5866, 5865, 5867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5866, 5867, 5868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5866, 5868, 5869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5869, 5864, 5866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5864, 5869, 5870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5870, 5861, 5864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5861, 5870, 5871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5871, 5859, 5861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5859, 5871, 5838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5838, 5837, 5859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5264, 5274, 5872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5873, 5264, 5872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5264, 5873, 5874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5874, 5265, 5264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5265, 5874, 5875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5875, 5267, 5265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5267, 5875, 5876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5877, 5267, 5876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5267, 5877, 5257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5258, 5257, 5877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5506, 5507, 5512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5878, 5512, 5507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5512, 5878, 5519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5879, 5519, 5878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5519, 5879, 5880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5880, 5520, 5519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5520, 5880, 5881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5881, 5521, 5520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5521, 5881, 5882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5529, 5521, 5882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5883, 5884, 5885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5886, 5887, 5888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5887, 5886, 5889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5890, 5891, 5892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5891, 5890, 5893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5890, 5894, 5895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5894, 5890, 5896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5897, 5898, 5899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5898, 5897, 5900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5900, 5901, 5898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5901, 5900, 5902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5903, 5902, 5900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5900, 5904, 5903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5904, 5900, 5897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5897, 5905, 5904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5905, 5897, 5906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5899, 5906, 5897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5906, 5899, 5907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5902, 5903, 5908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5901, 5909, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5902, 5909, 5901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5909, 5902, 5911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5908, 5911, 5902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5911, 5908, 5912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5912, 5908, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5914, 5912, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5915, 5914, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5916, 5915, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5917, 5916, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5909, 5918, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5918, 5919, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5919, 5920, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5920, 5921, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5921, 5922, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5922, 5923, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5923, 5924, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5924, 5925, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5925, 5926, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5926, 5927, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5927, 5901, 5910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5929, 5930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5930, 5931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5931, 5932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5932, 5933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5933, 5934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5934, 5935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5935, 5936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5936, 5937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5937, 5938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5938, 5939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5939, 5940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5928, 5940, 5929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5940, 5941, 5929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5942, 5929, 5941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5943, 5942, 5941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5942, 5943, 5944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5944, 5945, 5942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5945, 5944, 5946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5946, 5947, 5945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5947, 5946, 5948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5948, 5949, 5947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5929, 5942, 5950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5945, 5950, 5942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5950, 5945, 5951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5947, 5951, 5945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5951, 5947, 5952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5949, 5952, 5947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5952, 5949, 5953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5954, 5953, 5949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5953, 5954, 5955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5956, 5955, 5954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5949, 5948, 5957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5957, 5954, 5949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5954, 5957, 5958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5958, 5956, 5954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5956, 5958, 5959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5959, 5960, 5956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5960, 5959, 5961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5961, 5962, 5960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5962, 5961, 5963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5955, 5956, 5964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5960, 5964, 5956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5964, 5960, 5965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5960, 5966, 5965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5966, 5960, 5962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5968, 5969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5969, 5970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5970, 5971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5971, 5972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5972, 5973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5973, 5974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5974, 5975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5975, 5976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5976, 5977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5977, 5978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5978, 5943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5967, 5943, 5968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5941, 5968, 5943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5968, 5941, 5979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5941, 5940, 5979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5980, 5979, 5940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5979, 5980, 5981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5982, 5981, 5980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5981, 5982, 5983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5984, 5983, 5982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5983, 5984, 5985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5986, 5983, 5985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5983, 5986, 5987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5987, 5981, 5983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5981, 5987, 5988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5988, 5979, 5981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5979, 5988, 5968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5989, 5990, 5991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5991, 5992, 5989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5992, 5991, 5993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5993, 5994, 5992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5994, 5993, 5995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5995, 5996, 5994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5996, 5995, 5997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5998, 5994, 5996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5994, 5998, 5999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6000, 5994, 5999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5994, 6000, 5992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6001, 5992, 6000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5992, 6001, 5989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6002, 5989, 6001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5989, 6002, 6003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6004, 6003, 6002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6003, 6004, 6005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6006, 6005, 6004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6007, 6008, 6009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6009, 6010, 6007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6010, 6009, 6011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6011, 6012, 6010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6012, 6011, 6013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6013, 6005, 6012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6005, 6013, 6014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6014, 6003, 6005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6003, 6014, 5990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5990, 5989, 6003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6005, 6006, 6012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6015, 6012, 6006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6012, 6015, 6010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6016, 6010, 6015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6010, 6016, 6007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6017, 6007, 6016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6007, 6017, 6018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6019, 6018, 6017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6018, 6019, 6020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6021, 6020, 6019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6020, 6021, 6022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6023, 6022, 6021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6022, 6023, 6024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6025, 6022, 6024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6022, 6025, 6026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6026, 6020, 6022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6020, 6026, 6027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6027, 6018, 6020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6018, 6027, 6008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6008, 6007, 6018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6029, 6030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6030, 6031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6031, 6032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6032, 6033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6033, 6034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6034, 6035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6035, 6036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6036, 6009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6009, 6008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6008, 6037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6037, 6038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6028, 6038, 6029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6039, 6040, 6041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6041, 6042, 6039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6042, 6041, 6043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6043, 6044, 6042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6044, 6043, 6045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6046, 6042, 6044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6042, 6046, 6047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6047, 6039, 6042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6039, 6047, 6048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6048, 6049, 6039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6049, 6048, 6050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6050, 6051, 6049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6051, 6050, 6052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6052, 6053, 6051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6053, 6052, 6054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6055, 6056, 6057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6057, 6058, 6055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6058, 6057, 6059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6059, 6053, 6058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6053, 6059, 6060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6060, 6051, 6053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6051, 6060, 6061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6061, 6049, 6051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6049, 6061, 6040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6040, 6039, 6049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6054, 6058, 6053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6058, 6054, 6062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6062, 6055, 6058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6055, 6062, 6063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6063, 6064, 6055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6064, 6063, 6065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6065, 6066, 6064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6066, 6065, 6067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6067, 6068, 6066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6068, 6067, 6069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6069, 6070, 6068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6070, 6069, 6071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6072, 6071, 6073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6071, 6072, 6070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6072, 6074, 6070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6074, 6068, 6070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6068, 6074, 6075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6075, 6066, 6068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6066, 6075, 6076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6076, 6064, 6066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6064, 6076, 6056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6056, 6055, 6064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6074, 6072, 6077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6078, 6079, 6080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6080, 6081, 6078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6081, 6080, 6082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6082, 6083, 6081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6083, 6082, 6084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6085, 6081, 6083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6081, 6085, 6086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6086, 6078, 6081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6078, 6086, 6087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6087, 6088, 6078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6088, 6087, 6089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6089, 6090, 6088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6090, 6089, 6091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6091, 6092, 6090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6092, 6091, 6093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6094, 6095, 6096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6096, 6097, 6094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6097, 6096, 6098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6098, 6092, 6097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6092, 6098, 6099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6099, 6090, 6092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6090, 6099, 6100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6100, 6088, 6090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6088, 6100, 6079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6079, 6078, 6088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6093, 6097, 6092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6097, 6093, 6101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6101, 6094, 6097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6094, 6101, 6102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6102, 6103, 6094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6103, 6102, 6104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6104, 6105, 6103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6105, 6104, 6106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6106, 6107, 6105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6107, 6106, 6108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6108, 6109, 6107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6109, 6108, 6110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6111, 6110, 6112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6110, 6111, 6109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6111, 6113, 6109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6113, 6107, 6109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6107, 6113, 6114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6114, 6105, 6107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6105, 6114, 6115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6115, 6103, 6105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6103, 6115, 6095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6095, 6094, 6103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6113, 6111, 6116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6117, 6118, 6119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6119, 6120, 6117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6120, 6119, 6121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6121, 6122, 6120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6122, 6121, 6123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6124, 6120, 6122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6120, 6124, 6125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6125, 6117, 6120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6117, 6125, 6126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6126, 6127, 6117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6127, 6126, 6128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6128, 6129, 6127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6129, 6128, 6130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6130, 6131, 6129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6131, 6130, 6132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6133, 6134, 6135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6135, 6136, 6133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6136, 6135, 6137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6137, 6131, 6136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6131, 6137, 6138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6138, 6129, 6131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6129, 6138, 6139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6139, 6127, 6129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6127, 6139, 6118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6118, 6117, 6127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6132, 6136, 6131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6136, 6132, 6140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6140, 6133, 6136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6133, 6140, 6141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6141, 6142, 6133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6142, 6141, 6143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6143, 6144, 6142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6144, 6143, 6145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6145, 6146, 6144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6146, 6145, 6147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6147, 6148, 6146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6148, 6147, 6149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6150, 6149, 6151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6149, 6150, 6148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6150, 6152, 6148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6152, 6146, 6148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6146, 6152, 6153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6153, 6144, 6146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6144, 6153, 6154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6154, 6142, 6144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6142, 6154, 6134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6134, 6133, 6142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6152, 6150, 6155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6156, 6157, 6158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6158, 6159, 6156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6159, 6158, 6160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6160, 6161, 6159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6161, 6160, 6162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6163, 6159, 6161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6159, 6163, 6164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6164, 6156, 6159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6156, 6164, 6165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6165, 6166, 6156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6166, 6165, 6167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6167, 6168, 6166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6168, 6167, 6169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6169, 6170, 6168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6170, 6169, 6171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6172, 6173, 6174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6174, 6175, 6172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6175, 6174, 6176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6176, 6170, 6175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6170, 6176, 6177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6177, 6168, 6170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6168, 6177, 6178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6178, 6166, 6168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6166, 6178, 6157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6157, 6156, 6166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6171, 6175, 6170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6175, 6171, 6179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6179, 6172, 6175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6172, 6179, 6180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6180, 6181, 6172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6181, 6180, 6182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6182, 6183, 6181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6183, 6182, 6184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6184, 6185, 6183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6185, 6184, 6186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6186, 6187, 6185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6187, 6186, 6188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6189, 6188, 6190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6188, 6189, 6187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6189, 6191, 6187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6191, 6185, 6187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6185, 6191, 6192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6192, 6183, 6185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6183, 6192, 6193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6193, 6181, 6183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6181, 6193, 6173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6173, 6172, 6181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6191, 6189, 6194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6195, 5893, 6196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6195, 5891, 5893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6196, 6197, 6198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6197, 6196, 5893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6199, 5887, 6200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5887, 6199, 6201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5888, 6202, 6203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6202, 5888, 6201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6204, 6205, 6206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6205, 6204, 6207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6208, 6207, 6204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6209, 6206, 6210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6206, 6211, 6210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6211, 6206, 6212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6206, 6213, 6212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6213, 6206, 6205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6214, 6213, 6205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6207, 6214, 6205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6214, 6207, 6215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6215, 6216, 6214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6217, 6214, 6216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6216, 6218, 6217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6214, 6217, 6219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6213, 6214, 6219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6220, 6221, 6222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6218, 6220, 6222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6220, 6218, 6223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6218, 6216, 6223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6224, 6223, 6216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6216, 6215, 6224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6225, 6224, 6215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6207, 6225, 6215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6225, 6207, 6226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6207, 6208, 6226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6227, 6226, 6228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6226, 6227, 6229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6226, 6229, 6225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6230, 6225, 6229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6225, 6230, 6231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6224, 6225, 6231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6231, 6232, 6224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6223, 6224, 6232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6233, 6223, 6232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6223, 6233, 6220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6233, 6234, 6220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6227, 6235, 6236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6236, 6237, 6227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6230, 6227, 6237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6227, 6230, 6229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6237, 6236, 6238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6239, 6237, 6238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6238, 6240, 6239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6240, 6238, 6241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6238, 6242, 6241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6242, 6238, 6236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6236, 6243, 6242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6243, 6236, 6235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6235, 6244, 6243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6228, 6244, 6235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6235, 6227, 6228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6243, 6244, 6245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6245, 6242, 6243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6242, 6245, 6246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6208, 6228, 6226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6228, 6208, 6247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6244, 6228, 6247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6247, 6248, 6244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6247, 6208, 6248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6208, 6249, 6248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6249, 6208, 6250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6204, 6250, 6208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6250, 6204, 6209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6206, 6209, 6204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6252, 6253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6253, 6254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6254, 6255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6255, 6017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6017, 6016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6016, 6256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6256, 6257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6257, 6258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6258, 6259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6259, 6260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6260, 6261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6251, 6261, 6252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6262, 6263, 6264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6263, 6262, 6265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6266, 6263, 6265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6263, 6266, 6267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6264, 6268, 6269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6268, 6264, 6263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6263, 6270, 6268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6270, 6263, 6271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6271, 6263, 6267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6267, 6272, 6271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6272, 6267, 6273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6266, 6273, 6267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6273, 6266, 6274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6275, 6268, 6270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6268, 6275, 6276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6276, 6269, 6268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6269, 6276, 6277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6278, 6269, 6277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6269, 6278, 6279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6280, 6279, 6278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6281, 6282, 6283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6283, 6284, 6281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6285, 6281, 6284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6284, 6286, 6285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6286, 6280, 6285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6280, 6286, 6287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6279, 6280, 6287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6287, 6288, 6279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6269, 6279, 6288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6288, 6264, 6269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6285, 6289, 6290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6281, 6285, 6290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6286, 6291, 6292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6292, 6287, 6286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6287, 6292, 6293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6288, 6287, 6293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6293, 6294, 6288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6264, 6288, 6294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6295, 6264, 6294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6264, 6295, 6262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6296, 6262, 6295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6262, 6296, 6297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6297, 6265, 6262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6265, 6297, 6298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6299, 6298, 6297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6300, 6296, 6295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6294, 6300, 6295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6300, 6294, 6301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6294, 6293, 6301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6292, 6301, 6293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6301, 6292, 6302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6291, 6302, 6292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6302, 6300, 6301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6291, 6286, 6284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6284, 6283, 6291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6283, 6303, 6291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6302, 6291, 6303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6303, 6304, 6302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6300, 6302, 6304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6304, 6305, 6300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6296, 6300, 6305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6306, 6296, 6305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6296, 6306, 6307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6304, 6303, 6308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6308, 6309, 6304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6305, 6304, 6309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6309, 6306, 6305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6306, 6309, 6310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6310, 6311, 6306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6311, 6307, 6306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6307, 6311, 6312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6311, 6313, 6312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6313, 6311, 6314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6314, 6315, 6313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6314, 6316, 6315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6307, 6297, 6296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6297, 6307, 6299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6312, 6299, 6307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6299, 6312, 6317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6313, 6317, 6312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6317, 6313, 6318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6313, 6315, 6318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6318, 6315, 6319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6316, 6319, 6315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6319, 6316, 6320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6321, 6316, 6322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6323, 6324, 6325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6324, 6323, 6326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6326, 6320, 6324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6320, 6326, 6319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6326, 6318, 6319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6327, 6325, 6328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6325, 6327, 6323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6329, 6326, 6323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6323, 6330, 6329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6330, 6323, 6327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6327, 6331, 6330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6328, 6331, 6327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6331, 6328, 6332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6333, 6332, 6328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6328, 6334, 6333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6328, 6325, 6334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6324, 6334, 6325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6330, 6335, 6336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6337, 6335, 6330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6337, 6330, 6331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6330, 6336, 6329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6336, 6338, 6329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6338, 6336, 6339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6340, 6339, 6336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6336, 6341, 6340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6335, 6341, 6336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6341, 6335, 6342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6342, 6335, 6337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6343, 6342, 6337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6342, 6343, 6344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6265, 6341, 6266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6341, 6265, 6298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6340, 6341, 6298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6298, 6299, 6340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6339, 6340, 6299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6339, 6299, 6317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6339, 6317, 6318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6338, 6339, 6318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6318, 6326, 6338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6326, 6329, 6338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6345, 6346, 6347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6348, 6345, 6347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6345, 6348, 6349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6349, 6348, 6350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6350, 6351, 6349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6351, 6350, 6352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6352, 6274, 6351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6342, 6351, 6274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6266, 6342, 6274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6342, 6266, 6341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6351, 6342, 6344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6345, 6351, 6344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6351, 6345, 6349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6273, 6352, 6272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6274, 6352, 6273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6353, 6344, 6343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6344, 6353, 6345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6346, 6345, 6353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6353, 6354, 6346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6355, 6346, 6354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6354, 6356, 6355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6354, 6353, 6357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6343, 6357, 6353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6346, 6355, 6358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6359, 6360, 6361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6361, 6356, 6359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6356, 6361, 6362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6362, 6355, 6356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6355, 6362, 6363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6363, 6358, 6355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6358, 6363, 6364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6364, 6365, 6358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6365, 6346, 6358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6346, 6365, 6347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6365, 6364, 6366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6366, 6367, 6365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6367, 6347, 6365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6347, 6367, 6348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6367, 6366, 6368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6369, 6370, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6372, 6369, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6373, 6372, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6050, 6373, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6052, 6050, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6374, 6052, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6375, 6374, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6376, 6375, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6377, 6376, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6378, 6377, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6379, 6378, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6370, 6379, 6371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6380, 6381, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6383, 6380, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6384, 6383, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6385, 6384, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6386, 6385, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6387, 6386, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6388, 6387, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6061, 6388, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6040, 6061, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6389, 6040, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6390, 6389, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6381, 6390, 6382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6391, 6392, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6394, 6391, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6395, 6394, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6089, 6395, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6091, 6089, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6396, 6091, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6397, 6396, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6398, 6397, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6399, 6398, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6400, 6399, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6401, 6400, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6392, 6401, 6393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6402, 6403, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6405, 6402, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6406, 6405, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6407, 6406, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6408, 6407, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6409, 6408, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6410, 6409, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6100, 6410, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6079, 6100, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6411, 6079, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6412, 6411, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6403, 6412, 6404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6413, 6414, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6416, 6413, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6417, 6416, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6128, 6417, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6130, 6128, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6418, 6130, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6419, 6418, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6420, 6419, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6421, 6420, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6422, 6421, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6423, 6422, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6414, 6423, 6415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6424, 6425, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6427, 6424, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6428, 6427, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6429, 6428, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6430, 6429, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6431, 6430, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6432, 6431, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6139, 6432, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6118, 6139, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6433, 6118, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6434, 6433, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6425, 6434, 6426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6435, 6436, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6438, 6435, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6439, 6438, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6167, 6439, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6169, 6167, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6440, 6169, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6441, 6440, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6442, 6441, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6443, 6442, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6444, 6443, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6445, 6444, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6436, 6445, 6437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6446, 6447, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6449, 6446, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6450, 6449, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6451, 6450, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6452, 6451, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6453, 6452, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6454, 6453, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6178, 6454, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6157, 6178, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6455, 6157, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6456, 6455, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6447, 6456, 6448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5887, 6201, 5888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6457, 6458, 6459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6459, 6460, 6457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6460, 6459, 6461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6462, 6461, 6459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6461, 6462, 6463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6211, 6461, 6463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6461, 6211, 6212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6213, 6461, 6212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6461, 6213, 6460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6213, 6464, 6460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6464, 6457, 6460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6457, 6464, 6465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6466, 6465, 6464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6464, 6217, 6466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6218, 6466, 6217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6464, 6213, 6219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6217, 6464, 6219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6467, 6221, 6468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6221, 6467, 6222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6467, 6218, 6222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6218, 6467, 6469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6466, 6218, 6469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6469, 6470, 6466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6465, 6466, 6470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6470, 6471, 6465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6471, 6457, 6465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6457, 6471, 6472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6471, 6470, 6473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6474, 6475, 6476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6476, 6475, 6477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6477, 6475, 6478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6479, 6477, 6478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6480, 6479, 6478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6479, 6480, 6481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6480, 6473, 6481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6473, 6482, 6481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6482, 6473, 6470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6470, 6469, 6482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6482, 6479, 6481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6479, 6482, 6483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6484, 6479, 6483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6479, 6484, 6485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6477, 6479, 6485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6469, 6483, 6482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6483, 6469, 6467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6468, 6483, 6467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6483, 6468, 6484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6468, 6486, 6484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6486, 6485, 6484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6485, 6486, 6487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6487, 6477, 6485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6477, 6487, 6488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6489, 6488, 6487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6486, 6468, 6490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6491, 6486, 6490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6486, 6489, 6487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6489, 6486, 6492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6486, 6491, 6492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6491, 6493, 6492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6493, 6489, 6492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6489, 6493, 6494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6495, 6494, 6493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6494, 6495, 6496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6488, 6497, 6498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6497, 6488, 6489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6489, 6499, 6497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6499, 6489, 6494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6494, 6500, 6499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6500, 6494, 6496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6496, 6501, 6500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6501, 6496, 6502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6496, 6503, 6502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6503, 6496, 6495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6497, 6504, 6498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6505, 6499, 6500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6501, 6505, 6500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6505, 6501, 6506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6506, 6507, 6505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6507, 6506, 6508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6508, 6509, 6507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6509, 6508, 6510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6511, 6512, 6513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6513, 6509, 6511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6509, 6513, 6507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6513, 6505, 6507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6505, 6513, 6514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6513, 6515, 6514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6515, 6513, 6512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6516, 6515, 6512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6512, 6511, 6517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6518, 6512, 6517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6512, 6518, 6516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6518, 6519, 6516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6516, 6519, 6504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6515, 6516, 6504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6515, 6504, 6497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6497, 6514, 6515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6514, 6497, 6499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6499, 6505, 6514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6519, 6518, 6520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6521, 6519, 6520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6522, 6523, 6524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6523, 6522, 6525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6525, 6521, 6523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6521, 6525, 6526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6519, 6521, 6526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6519, 6526, 6476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6504, 6519, 6476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6476, 6477, 6504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6498, 6504, 6477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6488, 6498, 6477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6527, 6528, 6529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6530, 6529, 6528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6529, 6530, 6531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6531, 6532, 6529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6532, 6531, 6533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6533, 6525, 6532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6525, 6533, 6534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6474, 6525, 6534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6525, 6474, 6526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6476, 6526, 6474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6534, 6475, 6474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6535, 6478, 6475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6475, 6534, 6535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6535, 6534, 6536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6533, 6536, 6534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6536, 6533, 6537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6531, 6537, 6533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6537, 6531, 6538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6531, 6539, 6538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6539, 6531, 6530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6540, 6539, 6530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6541, 6538, 6539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6542, 6541, 6539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6541, 6542, 6543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6544, 6543, 6542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6543, 6544, 6545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6546, 6545, 6544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6545, 6546, 6547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6546, 6548, 6547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6547, 6548, 6549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6548, 6550, 6549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6551, 6549, 6550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6472, 6551, 6550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6551, 6472, 6552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6471, 6552, 6472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6553, 6547, 6549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6549, 6551, 6553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6554, 6553, 6551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6551, 6555, 6554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6555, 6551, 6552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6471, 6555, 6552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6555, 6471, 6473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6473, 6480, 6555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6556, 6555, 6480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6555, 6556, 6554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6557, 6554, 6556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6554, 6557, 6558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6553, 6554, 6558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6558, 6545, 6553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6547, 6553, 6545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6478, 6535, 6480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6536, 6480, 6535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6480, 6536, 6556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6537, 6556, 6536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6556, 6537, 6557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6538, 6557, 6537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6557, 6538, 6541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6541, 6558, 6557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6558, 6541, 6543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6545, 6558, 6543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6559, 6560, 6561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6560, 6559, 6562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6563, 6564, 6565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6564, 6563, 6566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6567, 6568, 6565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6568, 6567, 6569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6567, 6570, 6569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6570, 6567, 6571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6572, 6571, 6561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6571, 6572, 6573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6567, 6574, 6571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6574, 6567, 6575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6576, 6571, 6574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6571, 6576, 6561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6575, 6565, 6577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6565, 6575, 6567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6578, 6579, 6580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6579, 6578, 6574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6581, 6582, 6583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6582, 6581, 6584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6585, 6584, 6581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6359, 6586, 6587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6588, 6587, 6586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6587, 6588, 6589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6589, 6588, 6582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6582, 6590, 6589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6584, 6590, 6582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6591, 6590, 6584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6584, 6585, 6591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6585, 6592, 6591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6592, 6585, 6593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6590, 6591, 6594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6595, 6591, 6592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6591, 6595, 6594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6595, 6596, 6594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6596, 6590, 6594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6590, 6596, 6597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6598, 6590, 6597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6590, 6598, 6589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6360, 6589, 6598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6589, 6360, 6587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6360, 6359, 6587, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6596, 6595, 6599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6600, 6343, 6337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6601, 6343, 6600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6357, 6343, 6601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6601, 6602, 6357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6602, 6354, 6357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6354, 6602, 6603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6356, 6354, 6603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6604, 6356, 6603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6356, 6604, 6359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6586, 6359, 6604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6602, 6604, 6603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6604, 6602, 6605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6602, 6601, 6606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6607, 6602, 6606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6602, 6607, 6605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6607, 6608, 6605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6608, 6604, 6605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6604, 6608, 6586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6608, 6588, 6586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6609, 6588, 6608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6609, 6582, 6588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6582, 6609, 6610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6611, 6607, 6606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6612, 6611, 6613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6611, 6612, 6614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6607, 6611, 6614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6607, 6614, 6615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6608, 6607, 6615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6609, 6608, 6615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6616, 6609, 6615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6616, 6617, 6609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6609, 6617, 6610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6612, 6615, 6614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6612, 6616, 6615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6618, 6610, 6617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6619, 6620, 6618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6617, 6619, 6618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6619, 6617, 6621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6622, 6619, 6621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6610, 6583, 6582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6610, 6618, 6583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6618, 6581, 6583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6581, 6618, 6620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6620, 6585, 6581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6585, 6620, 6623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6624, 6623, 6620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6620, 6619, 6624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6625, 6624, 6619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6619, 6622, 6625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6626, 6625, 6622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6585, 6627, 6593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6627, 6585, 6623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6564, 6627, 6623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6624, 6564, 6623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6564, 6624, 6628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6624, 6625, 6628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6625, 6577, 6628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6577, 6625, 6629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6629, 6625, 6626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6580, 6629, 6626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6579, 6629, 6580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6627, 6564, 6566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6559, 6576, 6630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6576, 6559, 6561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6577, 6564, 6628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6564, 6577, 6565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6629, 6575, 6577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6575, 6629, 6579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6574, 6631, 6576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6631, 6574, 6578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6632, 6633, 6634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6633, 6632, 6635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6636, 6637, 6638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6637, 6636, 6639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6640, 6641, 6642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6641, 6640, 6643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6644, 6645, 6646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6645, 6644, 6647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6648, 6649, 6650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6651, 6650, 6649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6652, 6651, 6649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6651, 6652, 6653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6654, 6655, 6656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6655, 6657, 6656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6658, 6656, 6657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6659, 6658, 6657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6658, 6659, 6660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6660, 6659, 6648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6649, 6648, 6659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6659, 6661, 6649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6649, 6661, 6652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6662, 6652, 6661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6657, 6663, 6664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6657, 6664, 6659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6665, 6664, 6666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6667, 6664, 6665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6664, 6667, 6659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6661, 6659, 6667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6666, 6668, 6669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6663, 6666, 6664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6666, 6663, 6670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6671, 6666, 6670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6668, 6666, 6671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6672, 6668, 6671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6672, 6673, 6668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6673, 6674, 6668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6675, 6674, 6673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6674, 6675, 6654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6655, 6654, 6675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6656, 6676, 6654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6656, 6658, 6677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6656, 6677, 6678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6678, 6679, 6656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6676, 6656, 6679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6676, 6679, 6636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6680, 6636, 6679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6636, 6680, 6639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6680, 6647, 6639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6681, 6682, 6683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6682, 6678, 6683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6678, 6682, 6679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6682, 6680, 6679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6684, 6685, 6680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6680, 6682, 6684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6686, 6684, 6682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6682, 6681, 6686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6686, 6681, 6687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6681, 6651, 6687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6653, 6687, 6651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6687, 6653, 6688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6653, 6689, 6688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6689, 6690, 6688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6691, 6692, 6693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6693, 6694, 6691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6694, 6693, 6685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6685, 6684, 6694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6695, 6694, 6684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6684, 6686, 6695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6696, 6695, 6686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6686, 6688, 6696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6688, 6686, 6687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6697, 6698, 6696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6695, 6696, 6698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6698, 6699, 6695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6694, 6695, 6699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6699, 6691, 6694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6700, 6692, 6701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6702, 6701, 6692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6692, 6691, 6702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6703, 6702, 6691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6691, 6699, 6703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6704, 6703, 6699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6699, 6698, 6704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6705, 6704, 6698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6698, 6697, 6705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6706, 6705, 6697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6707, 6708, 6704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6703, 6704, 6708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6708, 6709, 6703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6702, 6703, 6709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6710, 6711, 6712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6713, 6712, 6711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6712, 6713, 6714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6715, 6714, 6713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6714, 6715, 6716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6717, 6716, 6715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6716, 6717, 6718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6707, 6718, 6717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6718, 6707, 6705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6704, 6705, 6707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6705, 6706, 6718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6719, 6718, 6706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6718, 6719, 6716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6720, 6716, 6719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6716, 6720, 6714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6721, 6714, 6720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6714, 6721, 6712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6722, 6712, 6721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6712, 6722, 6710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6723, 6710, 6722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6720, 6724, 6721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6725, 6721, 6724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6721, 6725, 6722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6726, 6722, 6725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6722, 6726, 6723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6727, 6723, 6726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6723, 6727, 6728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6729, 6728, 6727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6728, 6729, 6730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6729, 6731, 6730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6732, 6733, 6734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6733, 6732, 6735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6732, 6729, 6735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6729, 6736, 6735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6736, 6729, 6727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6727, 6737, 6736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6737, 6727, 6726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6726, 6725, 6737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6736, 6738, 6735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6739, 6732, 6734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6740, 6736, 6737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6736, 6740, 6741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6741, 6738, 6736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6742, 6738, 6741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6742, 6735, 6738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6735, 6742, 6733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6742, 6743, 6744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6743, 6742, 6741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6741, 6745, 6743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6745, 6741, 6740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6740, 6746, 6745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6746, 6740, 6747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6737, 6747, 6740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6747, 6737, 6748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6725, 6748, 6737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6748, 6725, 6749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6750, 6751, 6752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6753, 6752, 6751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6752, 6753, 6749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6754, 6749, 6753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6749, 6754, 6748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6755, 6748, 6754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6748, 6755, 6747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6756, 6747, 6755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6747, 6756, 6746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6757, 6746, 6756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6724, 6749, 6725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6749, 6724, 6752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6758, 6752, 6724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6752, 6758, 6750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6759, 6750, 6758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6750, 6759, 6760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6761, 6760, 6759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6760, 6761, 6762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6763, 6762, 6761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6762, 6763, 6764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6690, 6764, 6763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6764, 6690, 6765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6690, 6689, 6765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6762, 6766, 6760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6762, 6767, 6766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6652, 6662, 6768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6769, 6768, 6662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6768, 6769, 6767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6769, 6766, 6767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6766, 6769, 6770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6770, 6760, 6766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6760, 6770, 6771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6772, 6760, 6771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6760, 6772, 6750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6751, 6750, 6772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6773, 6774, 6775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6676, 6638, 6776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6638, 6676, 6636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6639, 6644, 6637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6644, 6639, 6647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6643, 6645, 6641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6645, 6643, 6646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6640, 6635, 6632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6635, 6640, 6642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6777, 6778, 6779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6780, 6779, 6778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6780, 6781, 6779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6781, 6777, 6779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6777, 6781, 6782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6780, 6783, 6784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6780, 6785, 6783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6780, 6778, 6785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6786, 6785, 6778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6778, 6777, 6786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6787, 6786, 6777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6777, 6782, 6787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6788, 6787, 6782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6787, 6788, 6789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6788, 6790, 6789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6786, 6787, 6791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6787, 6792, 6791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6792, 6787, 6789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6793, 6792, 6789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6793, 6794, 6792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6794, 6791, 6792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6791, 6794, 6795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6795, 6786, 6791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6786, 6795, 6796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6785, 6786, 6796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6797, 6785, 6796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6785, 6797, 6783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6798, 6783, 6797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6783, 6798, 6784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6797, 6799, 6798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6796, 6799, 6797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6799, 6796, 6795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6795, 6800, 6799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6800, 6795, 6794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6801, 6800, 6794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6794, 6793, 6801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6731, 6801, 6793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6789, 6731, 6793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6731, 6789, 6802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6801, 6731, 6803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6803, 6804, 6801, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6800, 6801, 6804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6731, 6729, 6803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6729, 6732, 6803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6804, 6803, 6732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6732, 6739, 6804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6804, 6739, 6800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6798, 6800, 6739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6800, 6798, 6799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6805, 6806, 6802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6806, 6805, 6807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6808, 6807, 6805, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6805, 6809, 6808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6810, 6808, 6809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6809, 6811, 6810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6811, 6812, 6810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6811, 6813, 6812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6814, 6812, 6813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6812, 6814, 6815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6816, 6812, 6815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6810, 6817, 6818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6817, 6810, 6812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6808, 6810, 6818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6819, 6808, 6818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6817, 6819, 6818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6819, 6817, 6820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6820, 6821, 6819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6816, 6817, 6812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6817, 6816, 6822, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6822, 6820, 6817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6822, 6823, 6820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6821, 6820, 6823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6824, 6821, 6823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6821, 6824, 6825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6826, 6821, 6825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6826, 6819, 6821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6826, 6827, 6819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6808, 6819, 6827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6807, 6808, 6827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6823, 6828, 6824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6828, 6823, 6829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6830, 6829, 6823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6823, 6822, 6830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6829, 6830, 6831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6832, 6829, 6831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6832, 6833, 6829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6833, 6832, 6834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6835, 6824, 6828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6836, 6835, 6828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6828, 6829, 6836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6829, 6837, 6836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6837, 6829, 6833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6838, 6837, 6833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6838, 6833, 6834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6834, 6839, 6838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6839, 6834, 6840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6840, 6841, 6839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6837, 6838, 6842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6839, 6842, 6838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6842, 6839, 6843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6841, 6843, 6839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6841, 6844, 6843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6844, 6842, 6843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6842, 6844, 6845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6845, 6837, 6842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6837, 6845, 6846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6846, 6836, 6837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6836, 6846, 6847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6835, 6836, 6847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6848, 6835, 6847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6846, 6848, 6847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6849, 6850, 6851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6850, 6849, 6852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6841, 6852, 6849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6841, 6849, 6844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6851, 6844, 6849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6844, 6851, 6845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6851, 6846, 6845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6846, 6851, 6853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6848, 6846, 6853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6853, 6854, 6848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6854, 6853, 6850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6853, 6851, 6850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6835, 6848, 6855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6848, 6854, 6855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6854, 6856, 6855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6856, 6854, 6857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6858, 6856, 6857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6856, 6858, 6859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6860, 6859, 6858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6859, 6860, 6861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6862, 6861, 6860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6861, 6862, 6863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6863, 6864, 6861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6865, 6861, 6864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6861, 6865, 6859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6866, 6859, 6865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6859, 6866, 6856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6835, 6856, 6866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6856, 6835, 6855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6867, 6863, 6862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6863, 6867, 6868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6868, 6869, 6863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6864, 6863, 6869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6869, 6826, 6864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6826, 6865, 6864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6865, 6826, 6825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6825, 6866, 6865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6866, 6825, 6824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6824, 6835, 6866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6870, 6871, 6869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6869, 6868, 6870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6872, 6870, 6868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6867, 6872, 6868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6872, 6867, 6873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6867, 6874, 6873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6874, 6875, 6873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6875, 6874, 6876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6876, 6877, 6875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6877, 6876, 6878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6879, 6873, 6875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6873, 6879, 6872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6880, 6872, 6879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6881, 6875, 6877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6875, 6881, 6879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6882, 6879, 6881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6879, 6882, 6880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6883, 6880, 6882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6880, 6883, 6884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6885, 6884, 6883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6884, 6885, 6886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6887, 6886, 6885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6886, 6887, 6888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6886, 6889, 6884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6889, 6886, 6890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6888, 6890, 6886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6890, 6888, 6891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6892, 6891, 6888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6891, 6892, 6709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6893, 6709, 6892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6709, 6893, 6702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6701, 6702, 6893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6891, 6894, 6890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6895, 6890, 6894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6890, 6895, 6889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6896, 6889, 6895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6889, 6896, 6897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6898, 6897, 6896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6709, 6708, 6891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6894, 6891, 6708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6708, 6707, 6894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6717, 6894, 6707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6894, 6717, 6895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6715, 6895, 6717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6895, 6715, 6896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6713, 6896, 6715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6896, 6713, 6898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6711, 6898, 6713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6710, 6723, 6899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6899, 6871, 6710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6711, 6710, 6871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6871, 6870, 6711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6898, 6711, 6870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6870, 6872, 6898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6897, 6898, 6872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6872, 6880, 6897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6884, 6897, 6880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6897, 6884, 6889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6802, 6730, 6731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6730, 6802, 6806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6728, 6730, 6806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6806, 6807, 6728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6807, 6723, 6728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6827, 6723, 6807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6723, 6827, 6899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6827, 6826, 6899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6871, 6899, 6826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6826, 6869, 6871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6900, 6789, 6790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6789, 6900, 6802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6802, 6900, 6901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6901, 6805, 6802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6805, 6901, 6902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6809, 6805, 6902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6902, 6903, 6809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6811, 6809, 6903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6903, 6904, 6811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6813, 6811, 6904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6905, 6906, 6907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6906, 6905, 6908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6908, 6909, 6906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6908, 6901, 6909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6901, 6908, 6910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6910, 6902, 6901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6903, 6902, 6910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6908, 6903, 6910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6903, 6908, 6905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6904, 6903, 6905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6909, 6911, 6906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6911, 6909, 6912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6913, 6911, 6912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6913, 6914, 6911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6914, 6906, 6911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6906, 6914, 6907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6904, 6915, 6813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6813, 6915, 6814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6916, 6814, 6915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6814, 6916, 6917, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6913, 6917, 6916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6913, 6916, 6918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6913, 6918, 6914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6919, 6914, 6918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6914, 6919, 6907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6919, 6905, 6907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6905, 6919, 6904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6915, 6904, 6919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6918, 6915, 6919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6915, 6918, 6916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6920, 6876, 6874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6876, 6920, 6921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6922, 6921, 6920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6921, 6922, 6923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6923, 6924, 6925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6924, 6923, 6922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6922, 6926, 6924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6926, 6922, 6927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6920, 6927, 6922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6927, 6920, 6928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6874, 6928, 6920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6928, 6874, 6929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6862, 6929, 6874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6874, 6867, 6862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6929, 6862, 6930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6930, 6862, 6860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6921, 6878, 6876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6878, 6921, 6931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6923, 6931, 6921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6931, 6923, 6932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6923, 6933, 6932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6933, 6923, 6925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6934, 6933, 6925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6924, 6934, 6925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6934, 6924, 6935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6935, 6924, 6926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6936, 6937, 6938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6933, 6936, 6938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6936, 6933, 6934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6937, 6939, 6940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6939, 6937, 6941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6937, 6936, 6941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6936, 6942, 6941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6942, 6936, 6943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6934, 6943, 6936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6943, 6934, 6935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6942, 6939, 6941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6939, 6942, 6944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6926, 6943, 6935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6943, 6926, 6945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6945, 6942, 6943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6942, 6945, 6946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6947, 6942, 6946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6942, 6947, 6944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6944, 6947, 6948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6949, 6944, 6948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6944, 6949, 6939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6939, 6949, 6940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6950, 6951, 6952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6951, 6950, 6953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6954, 6757, 6952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6952, 6955, 6954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6955, 6952, 6951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6956, 6955, 6951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6953, 6956, 6951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6956, 6953, 6957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6958, 6957, 6953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6953, 6959, 6958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6959, 6953, 6950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6950, 6960, 6959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6952, 6960, 6950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6960, 6952, 6757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6955, 6956, 6961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6746, 6757, 6954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6954, 6745, 6746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6745, 6954, 6955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6955, 6743, 6745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6743, 6955, 6961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6961, 6744, 6743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6744, 6961, 6962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6961, 6956, 6962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6956, 6963, 6962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6963, 6956, 6957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6964, 6965, 6966, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6966, 6963, 6964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6963, 6966, 6967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6967, 6966, 6968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6957, 6964, 6963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6957, 6958, 6964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6965, 6964, 6958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6959, 6965, 6958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6965, 6959, 6969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6960, 6969, 6959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6969, 6960, 6970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6969, 6970, 6968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6965, 6969, 6968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6966, 6965, 6968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6971, 6972, 6973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6776, 6654, 6676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6654, 6776, 6674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6974, 6975, 6976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6975, 6974, 6977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6974, 6978, 6977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6978, 6979, 6977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6977, 6979, 6980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6980, 6975, 6977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6981, 6978, 6982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6983, 6976, 6984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6976, 6983, 6974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6983, 6985, 6974, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6978, 6974, 6985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6986, 6978, 6985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6978, 6986, 6982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6986, 6987, 6982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6987, 6981, 6982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6981, 6987, 6988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6989, 6981, 6988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6990, 6991, 6981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6978, 6981, 6991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6991, 6992, 6978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6993, 6992, 6994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6995, 6996, 6990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6991, 6990, 6996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6996, 6997, 6991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6992, 6991, 6997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6998, 6992, 6997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6992, 6998, 6994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6998, 6999, 6994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6999, 7000, 6994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7000, 6999, 7001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7001, 7002, 7000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6997, 7003, 6998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7003, 7004, 6998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6999, 6998, 7004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7005, 6999, 7004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6999, 7005, 7006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7006, 7001, 6999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7001, 7006, 7007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7007, 7008, 7001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7008, 7007, 7009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7008, 7009, 7010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7004, 7003, 7011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7012, 7004, 7011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7004, 7012, 7005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7002, 7001, 7008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7010, 7002, 7008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7002, 7010, 7013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7013, 7014, 7002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7014, 7013, 7015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7015, 7016, 7014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7016, 7015, 7017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7015, 7018, 7017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7018, 7015, 7019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7013, 7019, 7015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7009, 7020, 7010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7020, 7013, 7010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7013, 7020, 7021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7019, 7013, 7021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7021, 7022, 7019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7022, 7018, 7019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7022, 7023, 7018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7023, 7022, 7024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7025, 7023, 7024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7026, 7025, 7024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7027, 7026, 7028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7028, 7020, 7027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7020, 7028, 7021, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7022, 7021, 7028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7026, 7022, 7028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7022, 7026, 7024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7025, 7026, 7029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7026, 7027, 7029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7027, 7030, 7029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7030, 7027, 7031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7027, 7020, 7031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7020, 7009, 7031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7025, 7029, 7030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7032, 7033, 7034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7035, 7034, 7033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7033, 7036, 7035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7037, 7035, 7036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7035, 7037, 7038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7038, 7039, 7035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7034, 7035, 7039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7040, 7041, 7038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7040, 7038, 7037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7042, 7040, 7037, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7037, 7043, 7042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7043, 7037, 7036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7044, 7043, 7036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7036, 7033, 7044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7045, 7044, 7033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7033, 7032, 7045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7032, 7046, 7045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7044, 7045, 7047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7048, 7045, 7046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7045, 7048, 7047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7047, 7048, 7049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7049, 7044, 7047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7044, 7049, 7050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7043, 7044, 7050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7048, 7051, 7049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7052, 7048, 7046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7053, 7052, 7046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7046, 7032, 7053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7032, 7054, 7053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7032, 7055, 7054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7055, 7032, 7034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7034, 7056, 7055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7056, 7034, 7039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7041, 7056, 7039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7039, 7038, 7041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7041, 7040, 7057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7057, 7058, 7041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7056, 7041, 7058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7059, 7060, 7061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7062, 7061, 7060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7061, 7062, 7063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7061, 7063, 7064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7059, 7061, 7064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7065, 7059, 7064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7066, 7065, 7064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7066, 7067, 7065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7067, 7059, 7065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7059, 7067, 7068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7060, 7059, 7068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7068, 7069, 7060, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7060, 7069, 7062, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7070, 7062, 7069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7062, 7070, 6984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6983, 6984, 7070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7067, 7066, 7071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6987, 6986, 7072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7073, 7072, 6986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7072, 7073, 7074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7073, 7075, 7074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7075, 7071, 7074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7071, 7075, 7076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7067, 7071, 7076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7076, 7068, 7067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7068, 7076, 7077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7069, 7068, 7077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7078, 7069, 7077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7069, 7078, 7070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7078, 6983, 7070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6983, 7078, 7079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6985, 6983, 7079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7079, 6986, 6985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6986, 7079, 7073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7078, 7073, 7079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7073, 7078, 7075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7078, 7076, 7075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7076, 7078, 7077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7080, 7081, 7082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7081, 7080, 7083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7083, 7084, 7081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7084, 7083, 7085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7085, 7086, 7084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7086, 7085, 7087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7087, 7088, 7086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7088, 7087, 7089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7089, 7090, 7088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7090, 7089, 7091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7091, 7092, 7090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7092, 7091, 7093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7094, 7089, 7087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7089, 7094, 7095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7095, 7091, 7089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7091, 7095, 7096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7096, 7093, 7091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7093, 7096, 7097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7097, 7098, 7093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7098, 7092, 7093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7092, 7098, 7099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7098, 7097, 7100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5911, 7082, 5909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7082, 5911, 7080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5912, 7080, 5911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7080, 5912, 7101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7101, 7083, 7080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7083, 7101, 7102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7102, 7085, 7083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7085, 7102, 7103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7103, 7087, 7085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7087, 7103, 7094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7104, 7105, 7106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7105, 7104, 7107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7108, 7105, 7107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7105, 7108, 7109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7108, 7110, 7109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7110, 7111, 7109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7111, 7110, 7112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7112, 7113, 7111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7113, 7112, 7114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7115, 7113, 7114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7114, 7116, 7115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7117, 7107, 7118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7107, 7117, 7108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7117, 7110, 7108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7110, 7117, 7119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7119, 7112, 7110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7112, 7119, 7120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7120, 7114, 7112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7114, 7120, 7121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7116, 7114, 7121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7120, 7122, 7123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7122, 7120, 7119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7119, 7124, 7122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7124, 7119, 7117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7117, 7125, 7124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7125, 7117, 7118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7118, 7126, 7125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7126, 7118, 7127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7118, 7104, 7127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7104, 7118, 7107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7128, 7122, 7124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7124, 7129, 7128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7129, 7124, 7125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7125, 7130, 7129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7130, 7125, 7126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7130, 7131, 7129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7131, 7128, 7129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7128, 7131, 7132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7133, 7132, 7131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7134, 7135, 7136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7137, 7136, 7135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7136, 7137, 7138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7139, 7138, 7137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7138, 7139, 7133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7132, 7133, 7139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7139, 7140, 7132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7141, 7132, 7140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7132, 7141, 7128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7122, 7128, 7141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7142, 7143, 7144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7140, 7142, 7144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7142, 7140, 7145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7140, 7139, 7145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7139, 7146, 7145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7146, 7139, 7137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7137, 7147, 7146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7147, 7137, 7135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7135, 7148, 7147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7135, 7134, 7148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7146, 7142, 7145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7149, 7147, 7148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7150, 7151, 7152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7152, 7149, 7150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7149, 7152, 7153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7147, 7149, 7153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7153, 7146, 7147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7146, 7153, 7154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7142, 7146, 7154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7154, 7155, 7142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7143, 7142, 7155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7155, 7156, 7143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7152, 7157, 7158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7158, 7153, 7152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7153, 7158, 7154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7155, 7154, 7158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7158, 7159, 7155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7156, 7155, 7159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7159, 7160, 7156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7160, 7159, 7161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7157, 7161, 7159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7159, 7158, 7157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7162, 7143, 7156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7156, 7163, 7162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7163, 7156, 7160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7164, 7163, 7160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7161, 7164, 7160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7164, 7161, 7165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7166, 7165, 7161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7161, 7157, 7166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7151, 7166, 7157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7157, 7152, 7151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7163, 7164, 7167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7168, 7167, 7164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7165, 7168, 7164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7167, 7168, 7169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7170, 7169, 7168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7171, 7170, 7168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7168, 7165, 7171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7172, 7171, 7165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7165, 7166, 7172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7173, 7172, 7166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7166, 7151, 7173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7174, 7173, 7151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7151, 7150, 7174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7173, 7174, 7175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7176, 7177, 7175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7177, 7173, 7175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7173, 7177, 7178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7172, 7173, 7178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7178, 7179, 7172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7171, 7172, 7179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7179, 7180, 7171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7170, 7171, 7180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7181, 7170, 7180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7177, 7182, 7178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7179, 7178, 7182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7182, 7183, 7179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7180, 7179, 7183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7184, 7180, 7183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7180, 7184, 7181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7185, 7181, 7184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7181, 7185, 7186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7186, 7187, 7181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7170, 7181, 7187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7187, 7188, 7170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7169, 7170, 7188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7185, 7189, 7190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7191, 7185, 7190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7185, 7191, 7186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7191, 7192, 7186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7187, 7186, 7192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7192, 7193, 7187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7188, 7187, 7193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7193, 7194, 7188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7195, 7188, 7194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7194, 7196, 7195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7196, 7194, 7197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7193, 7192, 7198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7198, 7199, 7193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7199, 7198, 7200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7200, 7201, 7199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7201, 7200, 7202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7203, 7201, 7202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7201, 7203, 7204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7204, 7197, 7201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7197, 7199, 7201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7199, 7197, 7194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7194, 7193, 7199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7204, 7205, 7206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7205, 7204, 7203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7203, 7207, 7205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7207, 7203, 7208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7202, 7208, 7203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7208, 7202, 7209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7202, 7210, 7209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7210, 7202, 7200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7200, 7211, 7210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7211, 7200, 7198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7198, 7212, 7211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7212, 7198, 7192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7192, 7191, 7212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7213, 7214, 7215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7216, 7217, 7218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7218, 7219, 7216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7219, 7218, 7220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7213, 7220, 7218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7218, 7221, 7213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7214, 7213, 7221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7222, 7214, 7221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7214, 7222, 7223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7224, 7223, 7222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7223, 7224, 7225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7216, 7226, 7227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7226, 7216, 7228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7229, 7227, 7226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7230, 7216, 7219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7216, 7230, 7228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7230, 7231, 7228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7232, 7228, 7231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7228, 7232, 7226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7233, 7226, 7232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7226, 7233, 7229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7234, 7229, 7233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7231, 7235, 7236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7236, 7232, 7231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7232, 7236, 7237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7237, 7233, 7232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7233, 7237, 7238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7238, 7234, 7233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7234, 7238, 7239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7239, 7240, 7234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7240, 7239, 7241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7241, 7242, 7240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7242, 7243, 7244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7244, 7240, 7242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7240, 7244, 7245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7245, 7234, 7240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7234, 7245, 7246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7229, 7234, 7246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7246, 7247, 7229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7227, 7229, 7247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7247, 7217, 7227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7217, 7216, 7227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7248, 7244, 7243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7245, 7249, 7246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7247, 7246, 7249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7250, 7247, 7249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7247, 7250, 7251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7217, 7247, 7251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7252, 7245, 7244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7245, 7252, 7253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7249, 7245, 7253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7254, 7249, 7253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7249, 7254, 7250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7254, 7224, 7250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7222, 7250, 7224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7250, 7222, 7251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7221, 7251, 7222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7251, 7221, 7217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7221, 7218, 7217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7224, 7254, 7255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7256, 7255, 7254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7254, 7252, 7256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7252, 7254, 7253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7255, 7256, 7257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7255, 7225, 7224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7225, 7255, 7258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7257, 7258, 7255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7258, 7257, 7259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7260, 7259, 7257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7257, 7261, 7260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7261, 7257, 7256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7256, 7248, 7261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7248, 7256, 7252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7244, 7248, 7252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7262, 7263, 7264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7263, 7262, 7265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7266, 7265, 7262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7266, 7267, 7265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7267, 7266, 7268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7261, 7267, 7268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7269, 7261, 7268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7261, 7269, 7260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7269, 7270, 7260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7259, 7260, 7270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7267, 7261, 7248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7243, 7267, 7248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7267, 7243, 7271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7271, 7265, 7267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7265, 7271, 7272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7273, 7265, 7272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7265, 7273, 7263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7274, 7275, 7276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7277, 7274, 7276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7274, 7277, 7273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7273, 7278, 7274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7278, 7273, 7272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7272, 7279, 7278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7279, 7272, 7271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7271, 7280, 7279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7280, 7271, 7243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7243, 7242, 7280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7242, 7241, 7281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7281, 7280, 7242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7280, 7281, 7282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7282, 7279, 7280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7279, 7282, 7283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7284, 7279, 7283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7279, 7284, 7278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7285, 7278, 7284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7278, 7285, 7274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7275, 7274, 7285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5890, 5895, 5893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7286, 6993, 7287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6993, 7288, 7287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6994, 7288, 6993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7288, 6994, 7289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6994, 7000, 7289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7002, 7289, 7000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7289, 7002, 7014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7014, 7288, 7289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7288, 7014, 7016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7290, 7291, 7292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7293, 7292, 7291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7293, 7294, 7292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7294, 7293, 7295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7295, 7286, 7294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7286, 7295, 7296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6993, 7286, 7296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7296, 7297, 6993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6992, 6993, 7297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6992, 7297, 7298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7299, 7300, 7290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7301, 7302, 7303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7303, 7304, 7301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7304, 7305, 7301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7306, 7305, 7304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7305, 7306, 7307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7306, 7299, 7307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7299, 7306, 7308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7300, 7299, 7308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7308, 7291, 7300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7291, 7290, 7300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7304, 7303, 7309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7304, 7308, 7306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7308, 7304, 7309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7291, 7308, 7309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7309, 7293, 7291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7293, 7309, 7303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7303, 7295, 7293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7295, 7303, 7302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7302, 7296, 7295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7296, 7302, 7310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7297, 7296, 7310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7311, 7312, 7313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7312, 7314, 7313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7314, 7312, 7315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7312, 7310, 7315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7310, 7316, 7315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7316, 7310, 7302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7302, 7301, 7316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7301, 7314, 7316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7314, 7301, 7305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7315, 7316, 7314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7310, 7312, 7297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7298, 7297, 7312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7317, 7298, 7312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7298, 7317, 7318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7319, 7318, 7317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7320, 7319, 7317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7319, 7320, 7321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7322, 7321, 7320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7321, 7322, 7323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7322, 7324, 7323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7298, 6978, 6992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6978, 7298, 7318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7318, 6979, 6978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7318, 7319, 6979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7319, 6980, 6979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6980, 7319, 7325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7321, 7325, 7319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7325, 7321, 7326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7321, 7323, 7326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7323, 7327, 7326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7328, 7329, 7330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7331, 7330, 7329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7332, 7331, 7329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7331, 7332, 7327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7328, 7332, 7329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7327, 7323, 7324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7331, 7327, 7324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7324, 7333, 7331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7330, 7331, 7333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7334, 7330, 7333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7330, 7334, 7335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7336, 7335, 7334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7335, 7336, 7337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7328, 7335, 7337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7328, 7330, 7335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7324, 7322, 7338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7333, 7324, 7338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7338, 7334, 7333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7334, 7338, 7339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7334, 7339, 7336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7339, 7340, 7336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7340, 7339, 7341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7341, 7311, 7340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7311, 7341, 7342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7312, 7311, 7342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7342, 7317, 7312, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7317, 7342, 7320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7342, 7322, 7320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7322, 7342, 7341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7339, 7322, 7341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7322, 7339, 7338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7343, 7344, 7345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7346, 7345, 7344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7344, 7347, 7346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7347, 7344, 7348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7348, 7349, 7347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7349, 7348, 7052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7348, 7350, 7052, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7350, 7348, 7351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7344, 7351, 7348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7351, 7344, 7352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7344, 7353, 7352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7353, 7344, 7354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7344, 7343, 7354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7355, 7354, 7343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7354, 7356, 7353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7356, 7357, 7353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7358, 7353, 7357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7353, 7358, 7352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7359, 7352, 7358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7352, 7359, 7351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7051, 7351, 7359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7351, 7051, 7350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7051, 7048, 7350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7048, 7052, 7350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7360, 7361, 7362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7363, 7360, 7362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7360, 7363, 7356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7364, 7356, 7363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7356, 7364, 7365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7357, 7356, 7365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7366, 7367, 7368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7367, 7366, 7369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7362, 7369, 7366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7366, 7363, 7362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7363, 7366, 7368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7370, 7363, 7368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7363, 7370, 7364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7371, 7372, 7373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7374, 7373, 7372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7373, 7374, 7375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7367, 7375, 7374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7375, 7367, 7376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7369, 7376, 7367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7376, 7369, 7377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7378, 7377, 7369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7369, 7362, 7378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7361, 7378, 7362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7376, 7379, 7380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7377, 7379, 7376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7379, 7377, 7381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7377, 7378, 7381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7382, 7381, 7378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7378, 7361, 7382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7355, 7382, 7361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7361, 7360, 7355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7354, 7355, 7360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7356, 7354, 7360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7381, 7383, 7379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7383, 7381, 7384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7381, 7382, 7384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7385, 7384, 7382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7382, 7355, 7385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7386, 7385, 7355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7343, 7386, 7355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7386, 7343, 7003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7345, 7003, 7343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7003, 7345, 7011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6981, 6989, 6990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7387, 6990, 6989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6990, 7387, 6995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7383, 6995, 7387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6995, 7383, 7384, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7384, 7385, 6995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6996, 6995, 7385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7385, 7386, 6996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6997, 6996, 7386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7003, 6997, 7386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7388, 7389, 6239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6239, 7390, 7388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7390, 6239, 6240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7391, 7392, 7393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7394, 7393, 7392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7393, 7394, 7395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7388, 7393, 7395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7395, 7396, 7388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7389, 7388, 7396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7396, 7397, 7389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7393, 7388, 7390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7398, 7393, 7390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7393, 7398, 7391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7391, 7398, 7399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7399, 7400, 7391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7392, 7391, 7400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7400, 7401, 7392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7401, 7394, 7392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7394, 7401, 7402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7403, 7394, 7402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7400, 7399, 7404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7404, 7405, 7400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7401, 7400, 7405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7406, 7401, 7405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7406, 7402, 7401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7402, 7406, 6971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6971, 7403, 7402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7403, 6971, 6973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7403, 6973, 7407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7408, 7403, 7407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7394, 7403, 7409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7409, 7395, 7394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7395, 7409, 7410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7396, 7395, 7410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7396, 7410, 7411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7397, 7396, 7411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7411, 7412, 7397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7413, 7397, 7412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7414, 7413, 7412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7413, 7414, 7415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7397, 7413, 7416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7415, 7417, 7418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7418, 7413, 7415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6234, 6233, 7418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7413, 7418, 6233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6232, 7413, 6233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7413, 6232, 7416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6232, 6231, 7416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6231, 7397, 7416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7397, 6231, 6230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6230, 7389, 7397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7389, 6230, 6237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6237, 6239, 7389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7419, 7420, 7421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7420, 7419, 7422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7423, 7420, 7422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7424, 7423, 7422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7423, 7424, 7425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7425, 7426, 7423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7426, 7425, 7427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7427, 6234, 7426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6234, 7427, 6221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6221, 6220, 6234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7419, 7428, 7429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7429, 7430, 7419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7424, 7419, 7430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7419, 7424, 7422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7430, 7429, 7431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7432, 7433, 7434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7435, 7434, 7433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7434, 7435, 7436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7437, 7436, 7435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7436, 7437, 7438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7439, 7438, 7437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7438, 7439, 7440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7428, 7438, 7440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7438, 7428, 7421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7428, 7419, 7421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7420, 7434, 7436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7436, 7421, 7420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7421, 7436, 7438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7441, 7414, 7432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7441, 7432, 7434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7414, 7441, 7415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7417, 7415, 7441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7434, 7417, 7441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7417, 7434, 7442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7434, 7420, 7442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7420, 7423, 7442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7423, 7417, 7442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7417, 7423, 7426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6234, 7417, 7426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7417, 6234, 7418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7403, 7408, 7409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7443, 7409, 7408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7409, 7443, 7444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7443, 7445, 7444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7446, 7444, 7445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7446, 7445, 7447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7447, 7414, 7446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7414, 7447, 7448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7414, 7448, 7432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7433, 7432, 7448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7448, 7447, 7433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7449, 7435, 7450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7433, 7450, 7435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7450, 7433, 7451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7433, 7447, 7451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7447, 7452, 7451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7447, 7445, 7452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7445, 7453, 7452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7453, 7445, 7454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7445, 7443, 7454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7455, 7453, 7456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7453, 7455, 7452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7455, 7451, 7452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7457, 7451, 7455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7451, 7457, 7450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7457, 7449, 7450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7449, 7457, 7458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7459, 7455, 7456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7455, 7459, 7457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7460, 7457, 7459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7457, 7460, 7458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7460, 7461, 7458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7462, 7458, 7461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7458, 7462, 7449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7439, 7449, 7462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7449, 7439, 7437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7435, 7449, 7437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7461, 7460, 7463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7464, 6562, 6559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7345, 7346, 7011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7346, 7012, 7011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7012, 7346, 7465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7346, 7466, 7465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7466, 7346, 7347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7347, 7467, 7466, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7467, 7347, 7349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7349, 7054, 7467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7054, 7349, 7053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7052, 7053, 7349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7468, 7469, 7470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7469, 7468, 7471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7472, 7471, 7468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7471, 7472, 7473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7474, 7473, 7472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7473, 7474, 7372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7475, 7372, 7474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7372, 7475, 7374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7368, 7374, 7475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7374, 7368, 7367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7475, 7370, 7368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7370, 7475, 7476, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7474, 7476, 7475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7476, 7474, 7477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7472, 7477, 7474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7477, 7472, 7478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7468, 7478, 7472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7478, 7468, 7479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7470, 7479, 7468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7479, 7470, 7480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7480, 7481, 7482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7481, 7480, 7470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7470, 7483, 7481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7483, 7470, 7469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7469, 7484, 7483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7484, 7469, 7485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7471, 7485, 7469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7485, 7471, 7486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7473, 7486, 7471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7486, 7473, 7371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7372, 7371, 7473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7482, 7487, 7488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7487, 7482, 7481, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7481, 7489, 7487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7489, 7481, 7483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7483, 7490, 7489, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7490, 7483, 7484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7484, 7491, 7490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7491, 7484, 7492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7485, 7492, 7484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7492, 7485, 7493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7486, 7493, 7485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7493, 7486, 7494, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7371, 7494, 7486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7494, 7371, 7495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7373, 7495, 7371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7495, 7373, 7496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7375, 7496, 7373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7496, 7375, 7497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7376, 7497, 7375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7497, 7376, 7380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7498, 7499, 7500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7499, 7498, 7501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7498, 7502, 7501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7502, 7503, 7501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7504, 7501, 7503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7503, 7505, 7504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7501, 7504, 7499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7502, 7498, 7506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7506, 7507, 7502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7503, 7502, 7507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7507, 7508, 7503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7505, 7503, 7508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7508, 7509, 7505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7509, 7508, 7510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7510, 7511, 7509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7511, 7510, 7512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7512, 7513, 7511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7514, 7515, 7516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7506, 7516, 7515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7515, 7517, 7506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7507, 7506, 7517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7517, 7518, 7507, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7508, 7507, 7518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7518, 7510, 7508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7510, 7518, 7519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7519, 7512, 7510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7512, 7519, 7520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7521, 7514, 7522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7514, 7521, 7515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7517, 7515, 7521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7523, 7517, 7521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7517, 7523, 7524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7523, 7525, 7524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7519, 7524, 7525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7524, 7519, 7518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7518, 7517, 7524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7525, 7523, 7526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7525, 7520, 7519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7520, 7525, 7527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7526, 7527, 7525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7527, 7526, 7528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7526, 7529, 7528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7529, 7526, 7530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7523, 7530, 7526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7530, 7523, 7531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7521, 7531, 7523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7531, 7521, 7522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7532, 7529, 7533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7530, 7533, 7529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7533, 7530, 7534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7531, 7534, 7530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7534, 7531, 7535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7522, 7535, 7531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7535, 7522, 7536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7522, 7537, 7536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7537, 7522, 7514, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7537, 7514, 7516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7535, 7538, 7534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7538, 7535, 7539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7536, 7539, 7535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7539, 7536, 7540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7537, 7540, 7536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7540, 7537, 7541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7516, 7541, 7537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7541, 7516, 7542, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7498, 7542, 7516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7516, 7506, 7498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7543, 7544, 7545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7545, 7546, 7543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7545, 7547, 7546, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7547, 7545, 7532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7532, 7548, 7547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7548, 7532, 7549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7533, 7549, 7532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7549, 7533, 7550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7534, 7550, 7533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7550, 7534, 7538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7513, 7512, 7551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7520, 7551, 7512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7551, 7520, 7552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7527, 7552, 7520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7552, 7527, 7553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7528, 7553, 7527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7553, 7528, 7544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7529, 7544, 7528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7544, 7529, 7545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7529, 7532, 7545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7551, 7554, 7513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7554, 7551, 7555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7551, 7556, 7555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7556, 7551, 7552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7556, 7552, 7557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7553, 7557, 7552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7557, 7553, 7558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7544, 7558, 7553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7558, 7544, 7559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7544, 7543, 7559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7560, 7561, 7562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7561, 7563, 7562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7563, 7561, 7564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7564, 7565, 7563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7565, 7564, 7566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7566, 7567, 7565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7567, 7566, 7568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7568, 7569, 7567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7569, 7568, 7570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7570, 7571, 7569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7571, 7570, 7572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7570, 7573, 7572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7573, 7574, 7572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7575, 7572, 7574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7576, 7572, 7575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7572, 7576, 7571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7577, 7571, 7576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7571, 7577, 7578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7578, 7569, 7571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7569, 7578, 7579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7579, 7567, 7569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7574, 7573, 7580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7573, 7581, 7580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7581, 7573, 7582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7582, 7583, 7581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7583, 7582, 7584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7585, 7583, 7584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7583, 7585, 7586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7585, 7587, 7586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7587, 7585, 7588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7589, 7582, 7573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7582, 7589, 7590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7590, 7584, 7582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7584, 7590, 7591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7591, 7585, 7584, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7585, 7591, 7592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7592, 7588, 7585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7588, 7592, 7593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7594, 7593, 7592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7593, 7594, 7595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7596, 7590, 7589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7590, 7596, 7597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7597, 7591, 7590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7591, 7597, 7598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7598, 7592, 7591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7592, 7598, 7594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7599, 7594, 7598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7594, 7599, 7600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7601, 7600, 7599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7600, 7601, 7602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7596, 7603, 7597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7603, 7598, 7597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7598, 7603, 7599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7604, 7599, 7603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7599, 7604, 7601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7605, 7601, 7604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7601, 7605, 7606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7606, 7602, 7601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7602, 7606, 7607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7607, 7606, 7608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7606, 7605, 7608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7609, 7608, 7605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7604, 7609, 7605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7609, 7604, 7610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7604, 7611, 7610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7611, 7604, 7603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7603, 7596, 7611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7561, 7560, 7609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7610, 7561, 7609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7561, 7610, 7564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7611, 7564, 7610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7564, 7611, 7566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7596, 7566, 7611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7566, 7596, 7568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7589, 7568, 7596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7568, 7589, 7570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7573, 7570, 7589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7567, 7579, 7612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7612, 7565, 7567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7565, 7612, 7613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7613, 7563, 7565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7563, 7613, 7614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7614, 7562, 7563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7562, 7614, 7615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7615, 7560, 7562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7560, 7615, 7616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7600, 7595, 7594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7595, 7600, 7617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7602, 7617, 7600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7617, 7602, 7618, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7607, 7618, 7602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7618, 7607, 7619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7608, 7619, 7607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7619, 7608, 7620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7608, 7560, 7620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7608, 7609, 7560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7621, 7622, 7623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7623, 7624, 7621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7624, 7623, 7625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7625, 7626, 7624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7626, 7625, 7627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7627, 7628, 7626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7628, 7627, 7629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7630, 7626, 7628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7631, 7630, 7628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7631, 7628, 7629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7632, 7631, 7629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7629, 7633, 7632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7633, 7629, 7627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7627, 7634, 7633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7634, 7627, 7625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7625, 7635, 7634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7635, 7625, 7623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7623, 7636, 7635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7636, 7623, 7622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7622, 7637, 7636, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7631, 7632, 7638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7639, 7640, 7630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7631, 7639, 7630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7639, 7631, 7641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7642, 7641, 7643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7640, 7639, 7644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7645, 7644, 7639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7639, 7641, 7645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7646, 7645, 7641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7641, 7642, 7646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7647, 7646, 7642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7646, 7647, 7648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7649, 7648, 7647, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7648, 7649, 7650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7651, 7650, 7649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7652, 7653, 7654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7653, 7655, 7654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7655, 7653, 7650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7656, 7650, 7653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7650, 7656, 7648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7645, 7648, 7656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7648, 7645, 7646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7653, 7652, 7657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7657, 7656, 7653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7656, 7657, 7644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7644, 7645, 7656, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7658, 7654, 7659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7660, 7658, 7661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7659, 7661, 7658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7661, 7659, 7662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7659, 7663, 7662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7663, 7659, 7664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7654, 7664, 7659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7664, 7654, 7655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7665, 7661, 7662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7661, 7665, 7666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7667, 7661, 7666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7661, 7667, 7660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7668, 7660, 7667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7660, 7668, 7669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7669, 7670, 7660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7658, 7660, 7670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7670, 7652, 7658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7654, 7658, 7652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7671, 7668, 7672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7668, 7671, 7669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7671, 7673, 7669, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7670, 7669, 7673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7673, 7674, 7670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7652, 7670, 7674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7675, 7652, 7674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7652, 7675, 7657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7640, 7657, 7675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7657, 7640, 7644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7676, 7671, 7672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7671, 7676, 7637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7637, 7622, 7671, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7673, 7671, 7622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7622, 7621, 7673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7674, 7673, 7621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7621, 7675, 7674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7675, 7621, 7624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7624, 7640, 7675, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7640, 7624, 7626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7626, 7630, 7640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7677, 7678, 7679, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7680, 7679, 7678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7678, 7681, 7680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7680, 7681, 7682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7682, 7683, 7680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7683, 7682, 7684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7679, 7680, 7683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7685, 7686, 7681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7681, 7678, 7685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7687, 7685, 7678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7678, 7677, 7687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7688, 7687, 7677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7687, 7688, 7689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7690, 7689, 7688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7689, 7690, 7691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7692, 7691, 7690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7691, 7692, 7693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7694, 7693, 7692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7695, 7693, 7696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7693, 7695, 7691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7697, 7691, 7695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7691, 7697, 7689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7698, 7689, 7697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7689, 7698, 7687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7685, 7687, 7698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7698, 7699, 7685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7686, 7685, 7699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7699, 7700, 7686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7695, 7701, 7697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7702, 7697, 7701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7697, 7702, 7698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7699, 7698, 7702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7703, 7699, 7702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7699, 7703, 7704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7705, 7704, 7703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7704, 7705, 7706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7707, 7704, 7706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7704, 7707, 7700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7700, 7699, 7704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7701, 7703, 7702, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7703, 7701, 7708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7709, 7708, 7701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7708, 7709, 7710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7711, 7708, 7710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7708, 7711, 7712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7712, 7703, 7708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7703, 7712, 7705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7713, 7712, 7711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7711, 7714, 7713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7714, 7711, 7715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7711, 7716, 7715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7716, 7711, 7710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7710, 7717, 7716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7717, 7710, 7709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7709, 7696, 7717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7696, 7709, 7695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7701, 7695, 7709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7693, 7694, 7718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7719, 7693, 7718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7693, 7719, 7696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7720, 7696, 7719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7720, 7717, 7696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7717, 7720, 7721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7721, 7716, 7717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7716, 7721, 7722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7723, 7716, 7722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7716, 7723, 7715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7723, 7724, 7715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7725, 7715, 7724, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7715, 7725, 7714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7726, 7714, 7725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7714, 7726, 7727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7727, 7713, 7714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7713, 7727, 7728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7728, 7729, 7713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7729, 7728, 7730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7730, 7731, 7729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7732, 7686, 7700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7732, 7700, 7707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7732, 7707, 7733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7706, 7733, 7707, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7733, 7706, 7734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7706, 7731, 7734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7731, 7706, 7705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7705, 7729, 7731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7729, 7705, 7712, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7712, 7713, 7729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7731, 7730, 7735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7735, 7734, 7731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7734, 7735, 7736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7736, 7733, 7734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7733, 7736, 7737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7737, 7732, 7733, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7732, 7737, 7738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7732, 7738, 7682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7686, 7732, 7682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7686, 7682, 7681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6565, 6568, 6563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7739, 7740, 7741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7742, 7741, 7740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7743, 7742, 7740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7742, 7743, 7744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7745, 7744, 7743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7744, 7745, 7746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7747, 7746, 7745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7746, 7747, 7748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7749, 7748, 7747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7748, 7749, 7750, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7751, 7750, 7749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7750, 7751, 7752, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7749, 7753, 7751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7751, 7753, 7754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7754, 7752, 7751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7752, 7754, 7755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7740, 7739, 7756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7757, 7740, 7756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7740, 7757, 7743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7758, 7743, 7757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7743, 7758, 7745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7759, 7745, 7758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7745, 7759, 7747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7760, 7747, 7759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7747, 7760, 7749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7753, 7749, 7760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7761, 7754, 7753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7753, 7762, 7761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7762, 7753, 7760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7760, 7763, 7762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7763, 7760, 7759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7759, 7764, 7763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7764, 7759, 7758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7757, 7764, 7758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7764, 7757, 7765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7757, 7766, 7765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7766, 7757, 7756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7767, 7762, 7763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7763, 7768, 7767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7768, 7763, 7764, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7764, 7769, 7768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7769, 7764, 7765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7765, 7770, 7769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7770, 7765, 7766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7771, 7770, 7766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7766, 7739, 7771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7739, 7766, 7756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7772, 7768, 7769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7769, 7773, 7772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7773, 7769, 7770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7774, 7773, 7770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7775, 7774, 7770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7770, 7771, 7775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7773, 7774, 7776, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7776, 7777, 7773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7777, 7772, 7773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7772, 7777, 7778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7778, 7779, 7772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7779, 7778, 7780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7780, 7781, 7779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7781, 7780, 7782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7782, 7783, 7781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7783, 7782, 7784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7784, 7785, 7783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7785, 7784, 7786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7787, 7785, 7786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7787, 7788, 7785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7788, 7783, 7785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7783, 7788, 7789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7789, 7781, 7783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7781, 7789, 7767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7767, 7779, 7781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7779, 7767, 7768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7768, 7772, 7779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7790, 7786, 7784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7786, 7790, 7791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7791, 7787, 7786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7787, 7791, 7792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7787, 7792, 7754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7754, 7788, 7787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7788, 7754, 7761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7761, 7789, 7788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7789, 7761, 7762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7762, 7767, 7789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7793, 7794, 7795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7794, 7793, 7796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7797, 7798, 7799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7798, 7797, 7800, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7801, 7802, 7803, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7802, 7801, 7804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7805, 7806, 7807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7806, 7805, 7808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7809, 7810, 7811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7810, 7809, 7812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7812, 7813, 7810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7812, 7814, 7813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7815, 7816, 7817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7816, 7815, 7818, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7818, 7809, 7816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7809, 7818, 7819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7809, 7819, 7812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7819, 7820, 7812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7814, 7812, 7820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7814, 7820, 7821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7820, 7822, 7821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7822, 7820, 7823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7824, 7825, 7826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7827, 7825, 7824, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7825, 7827, 7828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7828, 7827, 7823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7820, 7828, 7823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7829, 7828, 7820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7820, 7819, 7829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7828, 7829, 7830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7825, 7828, 7830, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7831, 7825, 7832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7833, 7822, 7823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7833, 7823, 7834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7834, 7835, 7833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7835, 7834, 7836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7836, 7837, 7835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7837, 7836, 7838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7831, 7837, 7838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7831, 7838, 7839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7826, 7831, 7839, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7825, 7831, 7826, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7840, 7797, 7799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7797, 7840, 7841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7797, 7841, 7842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7833, 7842, 7841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7842, 7833, 7835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7822, 7833, 7843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7844, 7843, 7833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7833, 7841, 7844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7845, 7844, 7841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7840, 7845, 7841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7845, 7840, 7846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7847, 7846, 7840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7846, 7847, 7848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7848, 7849, 7846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7849, 7848, 7850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7845, 7851, 7852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7844, 7845, 7852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7853, 7854, 7850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7850, 7855, 7853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7855, 7850, 7848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7848, 7856, 7855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7856, 7848, 7847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7847, 7802, 7856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7802, 7847, 7806, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7806, 7847, 7807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7840, 7807, 7847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7807, 7840, 7799, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7856, 7802, 7804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7795, 7856, 7804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7856, 7795, 7857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7857, 7855, 7856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7855, 7857, 7858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7858, 7853, 7855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7853, 7858, 7859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7859, 7860, 7853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7860, 7859, 7861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7861, 7862, 7860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7794, 7857, 7795, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7861, 7863, 7864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7863, 7861, 7859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7859, 7865, 7863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7865, 7859, 7858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7858, 7866, 7865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7866, 7858, 7857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7857, 7867, 7866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7867, 7857, 7794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7794, 7868, 7867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7868, 7794, 7796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7865, 7869, 7870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7869, 7865, 7866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7866, 7871, 7869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7871, 7866, 7867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7867, 7872, 7871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7872, 7867, 7868, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7873, 7874, 7875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7874, 7873, 7876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7876, 7877, 7874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7877, 7876, 7878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7878, 7879, 7877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7879, 7878, 7864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7864, 7880, 7879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7880, 7864, 7863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7863, 7870, 7880, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7870, 7863, 7865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7881, 7875, 7882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7875, 7881, 7873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7883, 7873, 7881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7873, 7883, 7884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7884, 7876, 7873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7876, 7884, 7885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7885, 7878, 7876, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7878, 7885, 7886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7886, 7864, 7878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7864, 7886, 7861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7862, 7861, 7886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7886, 7887, 7862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7887, 7886, 7885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7885, 7888, 7887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7888, 7885, 7884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7884, 7889, 7888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7889, 7884, 7883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7883, 7890, 7889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7890, 7883, 7891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7891, 7892, 7890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7889, 7893, 7894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7894, 7888, 7889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7888, 7894, 7895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7895, 7887, 7888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7887, 7895, 7896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7896, 7862, 7887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7862, 7896, 7897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7897, 7860, 7862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7860, 7897, 7854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7854, 7853, 7860, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7850, 7898, 7849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7898, 7850, 7854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7854, 7899, 7898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7899, 7854, 7897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7897, 7900, 7899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7900, 7897, 7896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7896, 7901, 7900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7901, 7896, 7895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7895, 7902, 7901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7902, 7895, 7894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7903, 7851, 7904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7851, 7845, 7904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7846, 7904, 7845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7904, 7846, 7849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7849, 7905, 7904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7905, 7849, 7898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7898, 7906, 7905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7906, 7898, 7899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7899, 7907, 7906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7907, 7899, 7900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7905, 7908, 7909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7910, 7905, 7909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7910, 7904, 7905, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7904, 7910, 7903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7911, 7908, 7912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7908, 7911, 7913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7913, 7909, 7908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7909, 7913, 7914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7915, 7909, 7914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7909, 7915, 7910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7910, 7915, 7811, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7811, 7903, 7910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7903, 7811, 7810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7903, 7810, 7851, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7916, 7817, 7911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7917, 7916, 7911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7918, 7919, 7920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7919, 7918, 7921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7921, 7922, 7919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7922, 7921, 7923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7923, 7917, 7922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7917, 7923, 7924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7925, 7917, 7924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7917, 7925, 7916, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7815, 7916, 7925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7916, 7815, 7817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7926, 7927, 7928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7927, 7926, 7920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7920, 7929, 7927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7929, 7920, 7919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7919, 7930, 7929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7930, 7919, 7922, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7922, 7931, 7930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7931, 7922, 7917, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7917, 7912, 7931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7912, 7917, 7911, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7932, 7927, 7929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7929, 7933, 7932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7933, 7929, 7930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7930, 7934, 7933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7934, 7930, 7931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7931, 7907, 7934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7907, 7931, 7912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7912, 7906, 7907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7906, 7912, 7908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7908, 7905, 7906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7900, 7934, 7907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7934, 7900, 7901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7901, 7933, 7934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7933, 7901, 7902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7902, 7932, 7933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7932, 7902, 7935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7935, 7936, 7932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7936, 7935, 7937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7937, 7938, 7936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7938, 7937, 7939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7940, 7938, 7939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7938, 7940, 7941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7942, 7941, 7940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7943, 7938, 7941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7894, 7935, 7902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7935, 7894, 7893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7893, 7937, 7935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7937, 7893, 7944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7944, 7939, 7937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7939, 7944, 7945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7945, 7940, 7939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7940, 7945, 7946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7946, 7942, 7940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7942, 7946, 7947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7946, 7948, 7947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7949, 7948, 7950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7948, 7951, 7950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7948, 7946, 7951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7952, 7951, 7946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7952, 7946, 7945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7953, 7952, 7945, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7945, 7954, 7953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7955, 7953, 7954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7953, 7955, 7956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7957, 7956, 7955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7958, 7955, 7954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7955, 7958, 7959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7959, 7957, 7955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7957, 7959, 7960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7961, 7962, 7963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7962, 7961, 7964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7961, 7957, 7964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7957, 7965, 7964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7965, 7957, 7960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7960, 7966, 7965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7959, 7966, 7960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7966, 7959, 7967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7959, 7968, 7967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7968, 7959, 7958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7965, 7962, 7964, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7956, 7957, 7969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7957, 7961, 7969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7961, 7970, 7969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7963, 7970, 7961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7970, 7963, 7971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7963, 7972, 7971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7972, 7963, 7973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7973, 7974, 7972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7974, 7973, 7975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7976, 7971, 7972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7974, 7976, 7972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7976, 7974, 7977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7974, 7978, 7977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7974, 7975, 7978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7975, 7979, 7978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7973, 7979, 7975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7979, 7973, 7980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7963, 7980, 7973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7980, 7963, 7962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7981, 7982, 7978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7979, 7981, 7978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7979, 7983, 7981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7983, 7979, 7980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7962, 7983, 7980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7983, 7962, 7984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7962, 7965, 7984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7966, 7984, 7965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7984, 7966, 7985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7985, 7983, 7984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7985, 7981, 7983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7981, 7985, 7982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7842, 7800, 7797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7800, 7842, 7986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7799, 7805, 7807, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7805, 7799, 7798, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7803, 7806, 7808, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7806, 7803, 7802, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7801, 7795, 7804, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7795, 7801, 7793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7987, 7988, 7989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7989, 7990, 7987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7990, 7989, 7991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7992, 7990, 7991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7990, 7992, 7993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7994, 7993, 7992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7994, 7995, 7993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7996, 7993, 7995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7993, 7996, 7990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7990, 7996, 7987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7996, 7997, 7987, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7988, 7987, 7997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7997, 7996, 7998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7999, 8000, 8001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8002, 8001, 8000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8000, 7998, 8002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7998, 8000, 8003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7997, 7998, 8003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8004, 7997, 8003, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7997, 8004, 7988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8004, 8005, 7988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8005, 7989, 7988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7989, 8005, 8006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8001, 8002, 8007, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8003, 8008, 8004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8009, 8004, 8008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8004, 8009, 8010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8005, 8004, 8010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8011, 8005, 8012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8012, 8005, 8010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8010, 8013, 8012, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8013, 8010, 8009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8009, 8014, 8013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8014, 8009, 8015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8008, 8015, 8009, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8015, 8008, 7999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8000, 7999, 8008, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8008, 8003, 8000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8015, 8016, 8014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8017, 8016, 8015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7999, 8017, 8015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8017, 7999, 7928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8001, 7928, 7999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7928, 8001, 7926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8007, 7926, 8001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7926, 8007, 8018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8018, 7920, 7926, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7920, 8018, 7918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7927, 7932, 7936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7936, 8019, 7927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8019, 7936, 7938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7938, 8020, 8019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8020, 7938, 7943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7943, 8021, 8020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8021, 8017, 8020, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7928, 8020, 8017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8020, 7928, 8019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7928, 7927, 8019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7942, 8022, 8023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8023, 8024, 7942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7941, 7942, 8024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8024, 8025, 7941, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7943, 7941, 8025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8025, 8026, 7943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8021, 7943, 8026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8027, 8021, 8026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8021, 8027, 8028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8029, 8021, 8028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8021, 8029, 8030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8017, 8021, 8030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8030, 8016, 8017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8031, 8027, 8032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8027, 8031, 8028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8033, 8028, 8031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8028, 8033, 8029, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8034, 8029, 8033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8029, 8034, 8035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8036, 8029, 8035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8029, 8036, 8030, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8014, 8030, 8036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8030, 8014, 8016, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8037, 8038, 8034, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8037, 8034, 8033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8031, 8037, 8033, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8037, 8031, 8039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8032, 8039, 8031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8039, 8032, 8040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8041, 8039, 8040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8039, 8041, 8042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8042, 8037, 8039, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8037, 8042, 8043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8038, 8037, 8043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8038, 8043, 8044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8045, 8038, 8044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8044, 8046, 8045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8045, 8046, 8047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8046, 8048, 8047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8049, 8045, 8047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8038, 8045, 8049, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8046, 8044, 8050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8043, 8050, 8044, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8050, 8043, 8042, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8042, 8051, 8050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8051, 8042, 8041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8052, 8051, 8041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8040, 8052, 8041, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8052, 8040, 8053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8053, 8040, 8032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8027, 8053, 8032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8051, 8046, 8050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8046, 8051, 8048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8054, 8048, 8051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8051, 8052, 8054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8048, 8055, 8047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8048, 8054, 8055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8054, 8056, 8055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8056, 8054, 8057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8052, 8057, 8054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8052, 8058, 8057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8058, 8052, 8053, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8053, 8059, 8058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8053, 8060, 8059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8060, 8053, 8061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8055, 8056, 8047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8025, 8024, 8061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8061, 8026, 8025, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8026, 8061, 8027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8053, 8027, 8061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8062, 8060, 8061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8024, 8062, 8061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8062, 8024, 8063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8024, 8023, 8063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8064, 8063, 8023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8023, 8065, 8064, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8066, 8064, 8065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8065, 8067, 8066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8068, 8066, 8067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8069, 8068, 8067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8070, 8071, 8072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8062, 8072, 8071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8072, 8062, 8073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8062, 8063, 8073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8063, 8064, 8073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8064, 8072, 8073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8072, 8064, 8074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8064, 8066, 8074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8075, 8074, 8066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8066, 8068, 8075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8068, 8076, 8075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8076, 8068, 8077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8069, 8077, 8068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8077, 8069, 8078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8077, 8078, 8079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8076, 8077, 8079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8080, 8076, 8079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8080, 8075, 8076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8075, 8080, 8081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8074, 8075, 8081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8070, 8074, 8081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8074, 8070, 8072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8082, 8080, 8079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8083, 8082, 8079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8071, 8082, 8083, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8082, 8071, 8070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8070, 8080, 8082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8080, 8070, 8081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6560, 6572, 6561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7986, 7835, 7837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7835, 7986, 7842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8084, 8085, 8086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8087, 8086, 8085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8086, 8087, 8088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8088, 8089, 8090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8089, 8088, 8087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8091, 8089, 8087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8085, 8091, 8087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8091, 8085, 8092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8093, 8092, 8085, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8085, 8084, 8093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8094, 8093, 8084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8095, 8094, 8096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8094, 8095, 8097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8093, 8094, 8097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8097, 8098, 8093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8092, 8093, 8098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8099, 8092, 8098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8092, 8099, 8100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8092, 8100, 8091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8100, 8101, 8091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8089, 8091, 8101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8101, 8100, 8102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8102, 8103, 8101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8104, 8097, 8095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8097, 8104, 8105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8098, 8097, 8105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8099, 8098, 8105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8104, 8099, 8105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8099, 8104, 8106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8104, 8107, 8106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8107, 8104, 8108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8109, 8107, 8108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8108, 8110, 8109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8104, 8095, 8111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8111, 8112, 8104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8112, 8108, 8104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8108, 8112, 8113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8110, 8108, 8113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8114, 8110, 8113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8110, 8114, 8115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8116, 8115, 8114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8117, 8115, 8116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8115, 8117, 8118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8114, 8119, 8116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8119, 8114, 8120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8113, 8120, 8114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8120, 8113, 8112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8121, 8120, 8112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8112, 8111, 8121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8111, 8122, 8121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8122, 8111, 8123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8123, 8124, 8122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8124, 8123, 8125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8120, 8126, 8119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8127, 8128, 8129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8129, 8128, 8126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8126, 8130, 8129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8126, 8120, 8130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8120, 8121, 8130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8122, 8130, 8121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8129, 8130, 8122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8122, 8127, 8129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8127, 8122, 8131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8131, 8132, 8127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8133, 8134, 8135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8134, 8133, 8131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8122, 8134, 8131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8136, 8137, 8135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8135, 8138, 8136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8138, 8135, 8134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8134, 8139, 8138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8139, 8134, 8140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8134, 8122, 8140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8122, 8141, 8140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8141, 8122, 8124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8124, 8142, 8141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8142, 8124, 8143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8144, 8141, 8142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8141, 8144, 8145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8139, 8141, 8145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8141, 8139, 8140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8125, 8143, 8124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8143, 8125, 8146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8146, 8147, 8143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8147, 8146, 8148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8148, 8149, 8147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8149, 8148, 8150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8150, 8151, 8149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8151, 8150, 8152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8152, 8153, 8151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8153, 8152, 8154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8154, 8155, 8156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8155, 8154, 8152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8157, 8155, 8152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8150, 8157, 8152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8157, 8150, 8148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8154, 8158, 8153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8158, 8154, 8156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8156, 8159, 8158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8160, 8158, 8159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8159, 8161, 8160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8162, 8160, 8161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8161, 8163, 8162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8164, 8165, 8155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8166, 8155, 8165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8155, 8166, 8156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8166, 8167, 8156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8159, 8156, 8167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8167, 8168, 8159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8161, 8159, 8168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8168, 8169, 8161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8163, 8161, 8169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8169, 8170, 8163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8169, 8168, 8171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8172, 8171, 8168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8168, 8167, 8172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8173, 8172, 8167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8167, 8166, 8173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8174, 8175, 8176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8176, 8177, 8174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8178, 8174, 8177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8174, 8178, 8179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8179, 8180, 8174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8180, 8179, 8171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8171, 8172, 8180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8181, 8180, 8172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8172, 8173, 8181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8175, 8174, 8180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8180, 8181, 8175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8182, 8183, 8184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8183, 8182, 8177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8185, 8177, 8182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8177, 8185, 8178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8186, 8178, 8185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8178, 8186, 8187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8187, 8179, 8178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8179, 8187, 8188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8188, 8171, 8179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8171, 8188, 8169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8170, 8169, 8188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8188, 8189, 8170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8189, 8188, 8187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8187, 8190, 8189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8190, 8187, 8186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8186, 8191, 8190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8191, 8186, 8192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8185, 8192, 8186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8192, 8185, 8193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8182, 8193, 8185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8193, 8182, 8194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8184, 8194, 8182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8194, 8184, 8195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6571, 6573, 6570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8196, 8197, 8198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8199, 8198, 8197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8200, 8199, 8201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8199, 8200, 8202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8198, 8199, 8202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8202, 8203, 8198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8203, 8196, 8198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8196, 8203, 8204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8204, 8205, 8196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8203, 8202, 8206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8200, 8206, 8202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8206, 8200, 8207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8208, 8206, 8207, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8206, 8208, 8209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8209, 8203, 8206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8210, 8203, 8209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8203, 8210, 8204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8204, 8210, 8211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8205, 8204, 8211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8212, 8205, 8211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8205, 8212, 8213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8208, 8207, 8214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8215, 8211, 8210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8211, 8215, 8212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8216, 8212, 8215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8217, 8213, 8212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8212, 8216, 8217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8218, 8217, 8216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8217, 8218, 8219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8220, 8219, 8218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8219, 8220, 8221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8220, 8222, 8221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8222, 8220, 8223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8224, 8222, 8223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8222, 8224, 8225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8222, 8226, 8221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8226, 8227, 8221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8227, 8219, 8221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8219, 8227, 8228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8228, 8217, 8219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8217, 8228, 8229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8213, 8217, 8229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8230, 8213, 8229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8230, 8205, 8213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8205, 8230, 8231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8232, 8233, 8234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8233, 8235, 8234, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8235, 8233, 8231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8231, 8236, 8235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8236, 8231, 8230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8229, 8236, 8230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8236, 8229, 8096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8123, 8096, 8229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8096, 8123, 8095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8111, 8095, 8123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8231, 8196, 8205, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8196, 8231, 8233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8197, 8196, 8233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8233, 8232, 8197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8197, 8232, 8199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8237, 8199, 8232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8199, 8237, 8201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8201, 8237, 8214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8201, 8214, 8200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8207, 8200, 8214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6579, 6574, 6575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8238, 8239, 8240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8241, 8239, 8238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8242, 8243, 8244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8238, 8242, 8244, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8242, 8238, 8240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8245, 8242, 8240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8239, 8245, 8240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8245, 8239, 8246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8239, 8247, 8246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8247, 8239, 8248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8239, 8241, 8248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8241, 8249, 8248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8250, 8251, 8245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8246, 8250, 8245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8250, 8246, 8252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8247, 8252, 8246, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8252, 8247, 8253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8254, 8253, 8247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8253, 8254, 8225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8255, 8225, 8254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8225, 8255, 8222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8226, 8222, 8255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8164, 8256, 8257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8255, 8257, 8256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8257, 8255, 8258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8255, 8249, 8258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8249, 8255, 8254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8254, 8248, 8249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8248, 8254, 8247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8249, 8241, 8259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8259, 8258, 8249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8258, 8259, 8260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8260, 8257, 8258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8257, 8260, 8261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8261, 8164, 8257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8164, 8261, 8262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8165, 8164, 8262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8228, 8123, 8229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8123, 8228, 8125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8227, 8125, 8228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8125, 8227, 8146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8263, 8146, 8227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8146, 8263, 8148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8256, 8148, 8263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8148, 8256, 8157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8256, 8164, 8157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8155, 8157, 8164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8227, 8226, 8263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8255, 8263, 8226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8263, 8255, 8256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8264, 8265, 8266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8267, 8268, 8269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8269, 8270, 8267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8269, 8271, 8270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8271, 8265, 8270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8265, 8271, 8272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8272, 8266, 8265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8266, 8272, 8273, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8274, 8275, 8276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8268, 8274, 8276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8274, 8268, 8277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8268, 8267, 8277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8278, 8277, 8267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8270, 8278, 8267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8279, 8278, 8270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8265, 8279, 8270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8280, 8279, 8265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8265, 8264, 8280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7464, 8280, 8264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8280, 7464, 6559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8279, 8280, 6559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6630, 8279, 6559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6630, 8281, 8279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8281, 8278, 8279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6631, 6630, 6576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8282, 6630, 6631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8281, 6630, 8282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8282, 8283, 8281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8283, 8278, 8281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8278, 8283, 8284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8277, 8278, 8284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8285, 8277, 8284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8277, 8285, 8274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8285, 8286, 8274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8286, 8285, 8287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8288, 8286, 8287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8286, 8288, 8289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8288, 8290, 8289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8283, 8282, 8291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8291, 8292, 8283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8292, 8284, 8283, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8284, 8292, 8285, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8293, 8285, 8292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8285, 8293, 8287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8294, 8287, 8293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8287, 8294, 8288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8294, 8295, 8288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8290, 8288, 8295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8295, 8296, 8290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8296, 8297, 8298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8297, 8296, 8299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8296, 8295, 8299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8300, 8299, 8295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8295, 8294, 8300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8301, 8300, 8294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8293, 8301, 8294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8301, 8293, 8302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8292, 8302, 8293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8302, 8292, 8303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8298, 8304, 8305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8304, 8298, 8297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8297, 8306, 8304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8306, 8297, 8299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8307, 8306, 8299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8299, 8300, 8307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8308, 8307, 8300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8300, 8301, 8308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8309, 8308, 8301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8302, 8309, 8301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8307, 8310, 8306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8306, 8311, 8304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8311, 8306, 8310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8312, 8311, 8310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8313, 8312, 8310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8310, 8307, 8313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8314, 8313, 8307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8307, 8308, 8314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8315, 8314, 8308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8308, 8309, 8315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8313, 8314, 8316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8316, 8317, 8313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8312, 8313, 8317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8312, 8317, 8318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8319, 8312, 8318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8312, 8319, 8320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8311, 8312, 8320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8321, 8311, 8320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8311, 8321, 8322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8322, 8304, 8311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8322, 8305, 8304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8317, 8323, 8318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8323, 8317, 8324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8314, 8315, 6310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6309, 8314, 6310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8314, 6309, 8316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6309, 6308, 8316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8317, 8316, 6308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6303, 8317, 6308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8317, 6303, 8324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6303, 6283, 8324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6283, 8323, 8324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8323, 6283, 6282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6321, 8325, 8326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6322, 8325, 6321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8327, 8325, 6322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6316, 8327, 6322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8327, 6316, 8328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6316, 6314, 8328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8309, 8328, 6314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6311, 8309, 6314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8309, 6311, 8315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6311, 6310, 8315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8329, 8327, 8328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8328, 8309, 8329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8309, 8302, 8329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8302, 8330, 8329, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8327, 8329, 8330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8330, 8331, 8327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8325, 8327, 8331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8331, 6580, 8325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6580, 8326, 8325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8326, 6580, 6626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6626, 8332, 8326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8332, 6626, 6622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8331, 8330, 8333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8303, 8333, 8330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8330, 8302, 8303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8292, 8291, 8303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8333, 8303, 8291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8282, 8333, 8291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8333, 8282, 6631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6578, 8333, 6631, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8333, 6578, 8331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6580, 8331, 6578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8089, 8101, 8103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8089, 8103, 8090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8334, 8090, 8103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8334, 8088, 8090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8088, 8334, 8335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8088, 8335, 8086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8336, 8086, 8335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8086, 8336, 8084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8337, 8084, 8336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8084, 8337, 8094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8337, 8096, 8094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8096, 8337, 8338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8338, 8236, 8096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8339, 8340, 8341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8340, 8339, 8342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8343, 8344, 8345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8344, 8343, 8346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8347, 8348, 8349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8348, 8347, 8346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8347, 8350, 8351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8350, 8347, 8349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8352, 8351, 8353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8351, 8352, 8342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8347, 8354, 8355, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8354, 8347, 8351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8356, 8351, 8342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8351, 8356, 8354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8355, 8346, 8347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8346, 8355, 8357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8358, 8359, 8354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8359, 8358, 8360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8339, 8356, 8342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8356, 8339, 8361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8357, 8344, 8346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8344, 8357, 8362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8363, 8364, 8365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8363, 8366, 8364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8366, 8363, 8367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8368, 8366, 8367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8366, 8368, 8369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8370, 8366, 8369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8369, 8371, 8370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8372, 8370, 8371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8373, 8372, 8371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8372, 8373, 8374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8375, 8374, 8373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8374, 8375, 8376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8377, 8369, 8368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8369, 8377, 8378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8371, 8369, 8378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8379, 8371, 8378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8371, 8379, 8373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8379, 8375, 8373, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8380, 8375, 8379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8379, 8378, 8377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8381, 8372, 8382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8372, 8383, 8382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8383, 8372, 8374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8374, 8384, 8383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8384, 8374, 8376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8385, 8384, 8376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8375, 8385, 8376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8385, 8375, 8386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8375, 8387, 8386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8387, 8375, 8380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8384, 8385, 8388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8380, 8389, 8387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8389, 8380, 8390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8391, 8390, 8380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8379, 8391, 8380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8391, 8379, 8392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8377, 8392, 8379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8377, 8368, 8392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8393, 8394, 8392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8394, 8391, 8392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8395, 8391, 8394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8390, 8391, 8395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8395, 8396, 8390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8396, 8389, 8390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8389, 8396, 8397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8398, 8397, 8396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8397, 8398, 8399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8394, 8400, 8395, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8396, 8395, 8400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8400, 8398, 8396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8398, 8400, 8401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8393, 8402, 8403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8403, 8394, 8393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8394, 8403, 8404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8400, 8394, 8404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8405, 8400, 8404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8400, 8405, 8401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8405, 8406, 8401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8406, 8398, 8401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8398, 8406, 8407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8407, 8399, 8398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8408, 8403, 8402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8393, 8409, 8410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8411, 8412, 8413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8413, 8414, 8411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8413, 8415, 8414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8416, 8414, 8415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8417, 8416, 8415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8418, 8416, 8417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8417, 8408, 8418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8408, 8410, 8418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8410, 8408, 8402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8402, 8393, 8410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8408, 8417, 8419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8419, 8417, 8420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8415, 8420, 8417, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8414, 8421, 8411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8421, 8414, 8416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8418, 8421, 8416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8421, 8418, 8410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8409, 8422, 8410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8422, 8421, 8410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8421, 8422, 8423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8423, 8411, 8421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8411, 8423, 8424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8424, 8425, 8411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8425, 8424, 8426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8425, 8426, 8427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8427, 8412, 8425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8412, 8411, 8425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8360, 8426, 8365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8424, 8365, 8426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8365, 8424, 8363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8424, 8428, 8363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8428, 8424, 8423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8423, 8368, 8428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8368, 8423, 8422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8409, 8368, 8422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8368, 8409, 8392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8393, 8392, 8409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8429, 8430, 8431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8430, 8429, 8432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8429, 8433, 8432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8433, 8429, 8434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8429, 8358, 8434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8358, 8429, 8435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8435, 8360, 8358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8360, 8435, 8436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8426, 8360, 8436, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8426, 8436, 8437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8435, 8431, 8438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8431, 8435, 8429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8438, 8439, 8440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8438, 8436, 8435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8436, 8438, 8440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8437, 8436, 8440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8439, 8437, 8440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8437, 8439, 8441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8439, 8442, 8441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8443, 8441, 8442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8444, 8443, 8442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8443, 8444, 8445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8444, 8446, 8445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8442, 8447, 8444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8442, 8439, 8447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8448, 8443, 8445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8445, 8449, 8448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8450, 8437, 8441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8441, 8443, 8450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8451, 8450, 8443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8443, 8448, 8451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8452, 8451, 8448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8448, 8449, 8452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8449, 8453, 8452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8454, 8453, 8449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8450, 8451, 8455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8456, 8455, 8451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8451, 8452, 8456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8437, 8427, 8426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8437, 8450, 8427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8450, 8412, 8427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8412, 8450, 8455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8412, 8455, 8413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8455, 8456, 8413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8415, 8413, 8456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8452, 8415, 8456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8415, 8452, 8420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8452, 8453, 8420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8420, 8453, 8457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8453, 8454, 8457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8458, 8457, 8454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8454, 8459, 8458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8457, 8458, 8460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8461, 8457, 8460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8461, 8462, 8463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8462, 8461, 8464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8465, 8462, 8464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8466, 8465, 8464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8461, 8466, 8464, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8466, 8461, 8467, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8460, 8467, 8461, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8467, 8460, 8468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8467, 8468, 8469, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8470, 8471, 8472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8471, 8470, 8473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8463, 8473, 8470, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8473, 8463, 8462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8403, 8405, 8404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8405, 8403, 8474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8403, 8408, 8474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8408, 8472, 8474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8472, 8408, 8419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8419, 8470, 8472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8420, 8470, 8419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8457, 8470, 8420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8470, 8457, 8463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8457, 8461, 8463, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8475, 8476, 8477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8476, 8475, 8465, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8462, 8465, 8475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8478, 8462, 8475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8462, 8478, 8473, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8406, 8473, 8478, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8473, 8406, 8471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8406, 8405, 8471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8405, 8472, 8471, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8472, 8405, 8474, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8477, 8478, 8475, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8478, 8477, 8479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8407, 8478, 8479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8478, 8407, 8406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8399, 8407, 8480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8407, 8479, 8480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8479, 8481, 8480, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8477, 8481, 8479, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8481, 8477, 8482, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8476, 8482, 8477, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8482, 8476, 8483, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6633, 8484, 6634, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8484, 6633, 6700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6692, 6700, 6633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6635, 6692, 6633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6635, 6693, 6692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6693, 6635, 6642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6642, 6641, 6693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6641, 6685, 6693, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6685, 6641, 6645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6647, 6685, 6645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6647, 6680, 6685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8485, 6888, 6887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6888, 8485, 6892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8486, 6892, 8485, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6892, 8486, 6893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8487, 6893, 8486, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6893, 8487, 6701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8488, 6701, 8487, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6701, 8488, 6700, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8489, 6700, 8488, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6700, 8489, 8484, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8490, 8355, 8359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8355, 8490, 8357, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8354, 8434, 8358, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8434, 8354, 8356, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6971, 8491, 6972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8491, 6971, 7406, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7412, 8492, 7414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7412, 7411, 8492, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7410, 8492, 7411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8492, 7410, 8493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7409, 8493, 7410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8493, 7409, 7444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8493, 7444, 7446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7446, 8492, 8493, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7414, 8492, 7446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8494, 8495, 8496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8497, 8494, 8496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8494, 8497, 8498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8499, 8498, 8497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8498, 8499, 8500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8501, 8500, 8499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8500, 8501, 8502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8501, 8503, 8502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8503, 8501, 8504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8505, 8503, 8504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8503, 8505, 8506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8505, 8507, 8506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8507, 8508, 8506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8508, 8503, 8506, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8503, 8508, 8509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8509, 8502, 8503, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8502, 8509, 8510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8510, 8500, 8502, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8500, 8510, 8511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8511, 8498, 8500, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8498, 8511, 8512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8508, 8507, 8513, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8514, 8513, 8515, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8513, 8514, 8508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8514, 8509, 8508, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8509, 8514, 8516, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8516, 8510, 8509, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8510, 8516, 8517, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8517, 8511, 8510, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8511, 8517, 8518, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8518, 8512, 8511, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8512, 8518, 8519, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8519, 8520, 8512, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8520, 8519, 8521, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8512, 8494, 8498, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8494, 8512, 8520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8495, 8494, 8520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8521, 8495, 8520, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8495, 8521, 8522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8523, 8524, 8525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8524, 8523, 8526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8526, 8523, 8527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8527, 8528, 8526, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8528, 8527, 8529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8495, 8529, 8527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8530, 8495, 8527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8495, 8530, 8496, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8531, 8496, 8530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8496, 8531, 8497, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8523, 8530, 8527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8525, 8530, 8523, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8530, 8525, 8531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8532, 8531, 8525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8531, 8532, 8533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8534, 8533, 8532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8533, 8534, 8535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8536, 8535, 8534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8535, 8536, 8537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8538, 8537, 8536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8537, 8538, 8539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8540, 8539, 8541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8539, 8542, 8541, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8538, 8542, 8539, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8533, 8497, 8531, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8497, 8533, 8499, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8535, 8499, 8533, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8499, 8535, 8501, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8537, 8501, 8535, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8501, 8537, 8504, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8539, 8504, 8537, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8504, 8539, 8505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8539, 8540, 8505, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8507, 8505, 8540, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5894, 8543, 5895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8543, 5894, 8544, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8545, 8546, 8547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8546, 8545, 8548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8549, 8545, 8550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8545, 8549, 8548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8551, 8552, 8553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8552, 8551, 8554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8555, 8556, 8557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8556, 8555, 8558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8557, 8559, 8560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8559, 8557, 8556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8561, 8562, 8563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8562, 8561, 8564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8564, 8565, 8562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8565, 8564, 8566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8567, 8563, 8568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8563, 8567, 8561, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8569, 8570, 8563, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8570, 8569, 8571, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8572, 8562, 8565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8562, 8572, 8569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8556, 8573, 8574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8573, 8556, 8558, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8571, 8572, 8575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8572, 8571, 8569, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8564, 8554, 8566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8554, 8564, 8576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8559, 8574, 8577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8574, 8559, 8556, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8578, 8577, 8579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8577, 8578, 8559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8580, 8581, 8582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8581, 8580, 8583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8578, 8584, 8585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8584, 8578, 8586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8587, 8588, 8589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8588, 8587, 8590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8591, 8592, 8576, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8592, 8591, 8593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8594, 8595, 8596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8595, 8594, 8597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8598, 8599, 8600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8599, 8598, 8601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8596, 8602, 8603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8602, 8596, 8595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8593, 8600, 8592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8600, 8593, 8598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8555, 8604, 8605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8604, 8555, 8606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8607, 8606, 8608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8606, 8607, 8604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8607, 8597, 8594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8597, 8607, 8608, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8561, 8576, 8564, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8576, 8561, 8591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8591, 8609, 8593, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8609, 8591, 8610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8552, 8576, 8592, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8576, 8552, 8554, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8611, 8594, 8596, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8594, 8611, 8609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8550, 8597, 8549, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8597, 8550, 8595, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8603, 8612, 8613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8612, 8603, 8589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8587, 8602, 8614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8602, 8587, 8589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8598, 8613, 8601, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8613, 8598, 8611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8615, 8600, 8599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8600, 8615, 8616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8617, 8618, 8619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8618, 8617, 8620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8596, 8613, 8611, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8613, 8596, 8603, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8614, 8595, 8550, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8595, 8614, 8602, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8621, 8550, 8545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8550, 8621, 8614, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8593, 8611, 8598, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8611, 8593, 8609, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8616, 8592, 8600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8592, 8616, 8552, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8552, 8622, 8553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8622, 8552, 8616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8623, 8617, 8622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8617, 8623, 8620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5891, 8624, 5892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8624, 5891, 8625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5889, 6200, 5887, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6200, 5889, 8626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6200, 8627, 8628, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8627, 6200, 8626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8629, 8558, 8605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8558, 8629, 8573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8579, 8624, 8586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8624, 8579, 8630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8565, 8583, 8572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8583, 8565, 8581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8580, 8631, 8632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8631, 8580, 8582, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8631, 8628, 8632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8628, 8631, 8633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8605, 8634, 8629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8634, 8605, 8568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8605, 8567, 8568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8567, 8605, 8604, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8635, 8636, 8637, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8638, 8526, 8528, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8526, 8638, 8524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8639, 8524, 8638, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8524, 8639, 8640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8641, 8640, 8639, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8640, 8641, 8642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8643, 8642, 8641, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8642, 8643, 8644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8636, 8644, 8643, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8644, 8636, 8645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8636, 8635, 8645, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8646, 8645, 8635, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8542, 8538, 8646, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8645, 8646, 8538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8536, 8645, 8538, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8645, 8536, 8644, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8534, 8644, 8536, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8644, 8534, 8642, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8532, 8642, 8534, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8642, 8532, 8640, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8525, 8640, 8532, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8640, 8525, 8524, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8647, 8648, 8649, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7777, 7776, 8648, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8648, 8647, 7777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8647, 7778, 7777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7778, 8647, 8650, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8650, 7780, 7778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7780, 8650, 8651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8651, 7782, 7780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7782, 8651, 8652, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8652, 7784, 7782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7784, 8652, 7790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5896, 5892, 8653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5892, 5896, 5890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6197, 5895, 8543, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5895, 6197, 5893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8588, 8612, 8589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8612, 8588, 8654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8655, 8587, 8621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8587, 8655, 8590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8656, 8655, 8657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8655, 8656, 8658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8656, 8659, 8658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8659, 8656, 8660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6196, 8656, 6195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8656, 6196, 8660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8654, 8661, 8662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8661, 8654, 8588, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8663, 8588, 8590, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8588, 8663, 8661, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8557, 8606, 8555, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8606, 8557, 8664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8578, 8560, 8559, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8560, 8578, 8585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8609, 8607, 8594, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8607, 8609, 8610, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5891, 8546, 8625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8546, 5891, 6195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8624, 8584, 8586, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8584, 8624, 8625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8590, 8665, 8663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8665, 8590, 8655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8630, 5892, 8624, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5892, 8630, 8653, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8664, 8608, 8606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8608, 8664, 8666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8549, 8608, 8666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8608, 8549, 8597, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8585, 8666, 8560, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8666, 8585, 8667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8667, 8549, 8666, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8549, 8667, 8548, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8584, 8546, 8667, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8546, 8584, 8625, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8621, 8547, 8657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8547, 8621, 8545, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8668, 8669, 8670, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8670, 8671, 8668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8671, 8670, 8672, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8673, 8668, 8674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8669, 8668, 8673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8675, 8669, 8673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8669, 8675, 8676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8675, 8677, 8676, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8677, 8675, 8678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8678, 8679, 8677, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8679, 8678, 8680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8681, 8679, 8680, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8680, 8682, 8681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8682, 8680, 8683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8684, 8675, 8673, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8673, 8674, 8684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8685, 8674, 8686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8674, 8685, 8684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8685, 8687, 8684, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8675, 8684, 8687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8688, 8675, 8687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8675, 8688, 8678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8688, 8680, 8678, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8680, 8688, 8683, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8689, 8683, 8688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8683, 8689, 8690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8687, 8685, 8691, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8691, 8688, 8687, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8688, 8691, 8689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8691, 8692, 8689, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8693, 8689, 8692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8694, 8693, 8692, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8692, 8695, 8694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8695, 8692, 8696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8696, 8697, 8695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8697, 8696, 8698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8692, 8691, 8696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8691, 8698, 8696, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8698, 8691, 8685, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8685, 8699, 8698, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8699, 8685, 8686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8700, 8699, 8686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8674, 8700, 8686, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8701, 8700, 8674, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8674, 8671, 8701, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8671, 8674, 8668, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8698, 8702, 8697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8702, 8698, 8699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8703, 8702, 8699, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8699, 8700, 8703, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8702, 8703, 8704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8705, 8702, 8704, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8702, 8705, 8706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8707, 8706, 8705, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8706, 8707, 8708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8708, 8709, 8706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8709, 8702, 8706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8702, 8709, 8697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8695, 8710, 8694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8710, 8695, 8711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8697, 8711, 8695, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8697, 8712, 8711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8712, 8697, 8709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8713, 8712, 8709, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8709, 8708, 8713, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8714, 8713, 8708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8707, 8714, 8708, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8714, 8707, 8715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8712, 8710, 8711, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8712, 8713, 8716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8713, 8714, 8717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8718, 8713, 8717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8713, 8718, 8716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8719, 8716, 8718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8716, 8719, 8720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8720, 8712, 8716, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8712, 8720, 8721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8710, 8712, 8721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8721, 8722, 8710, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8723, 8710, 8722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8724, 8725, 8726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8722, 8726, 8725, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8726, 8722, 8727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8722, 8721, 8727, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8720, 8727, 8721, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8725, 8724, 8728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8725, 8723, 8722, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8723, 8725, 8729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8725, 8730, 8729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8730, 8725, 8728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8731, 8730, 8728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8724, 8731, 8728, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8732, 8733, 8734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8733, 8732, 8731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8735, 8731, 8732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8731, 8735, 8730, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8736, 8730, 8735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8730, 8736, 8729, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8693, 8729, 8736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8729, 8693, 8723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8693, 8694, 8723, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8710, 8723, 8694, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8689, 8693, 8690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8693, 8737, 8690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8737, 8693, 8736, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8736, 8738, 8737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8738, 8736, 8735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8732, 8738, 8735, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8738, 8732, 8739, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8734, 8739, 8732, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8739, 8734, 8740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8737, 8683, 8690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8683, 8737, 8682, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8738, 8682, 8737, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8682, 8738, 8741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8739, 8741, 8738, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8682, 8742, 8681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8742, 8682, 8741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8743, 8742, 8741, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8741, 8739, 8743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8739, 8744, 8743, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8744, 8739, 8740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8744, 8740, 8745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8734, 8745, 8740, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8745, 8734, 8746, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8733, 8746, 8734, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8733, 8747, 8748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8746, 8733, 8748, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8749, 8744, 8745, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8750, 8744, 8749, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8744, 8750, 8751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8751, 8752, 8753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8752, 8751, 8754, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8750, 8754, 8751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8754, 8750, 8755, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8753, 8744, 8751, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8753, 8743, 8744, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8742, 8743, 8753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8752, 8742, 8753, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8742, 8752, 8756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8757, 8742, 8756, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8742, 8757, 8681, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8679, 8681, 8757, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7741, 7742, 8758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6198, 8660, 6196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8660, 6198, 8759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8547, 8656, 8657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8656, 8547, 6195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8561, 8610, 8591, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8610, 8561, 8567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8604, 8610, 8567, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8610, 8604, 8607, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8563, 8634, 8568, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8634, 8563, 8570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6202, 8760, 8761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8760, 6202, 6201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8762, 8612, 8654, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8612, 8762, 8763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8762, 8764, 8763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8764, 8762, 8765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8764, 8766, 8623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8766, 8764, 8765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8766, 8618, 8620, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8618, 8766, 8767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8618, 8768, 8769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8768, 8618, 8767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8618, 8760, 8619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8760, 8618, 8769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8770, 8654, 8662, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8654, 8770, 8762, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8762, 8771, 8765, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8771, 8762, 8770, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8772, 8773, 8774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8773, 8772, 8775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8731, 8724, 8773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8773, 8733, 8731, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8733, 8773, 8775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8747, 8733, 8775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8775, 8776, 8747, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8776, 8775, 8772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8777, 8776, 8772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8774, 8777, 8772, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8777, 8774, 8778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8774, 8779, 8778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8627, 8778, 8780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8778, 8627, 8777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8627, 8781, 8777, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8776, 8777, 8781, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8779, 8780, 8778, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8780, 8779, 8782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8782, 8779, 8575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8779, 8571, 8575, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8781, 8627, 8626, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8783, 8573, 8629, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8629, 8634, 8783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8634, 8570, 8783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8571, 8783, 8570, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8783, 8571, 8784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8571, 8779, 8784, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8785, 8784, 8779, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8779, 8774, 8785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8774, 8724, 8785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8724, 8774, 8773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8727, 8786, 8726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8786, 8727, 8787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8727, 8720, 8787, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8719, 8787, 8720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8787, 8719, 8783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8784, 8787, 8783, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8787, 8784, 8786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8784, 8785, 8786, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8724, 8786, 8785, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8786, 8724, 8726, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8653, 8714, 8715, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8714, 8653, 8630, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8630, 8717, 8714, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8717, 8630, 8579, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8579, 8718, 8717, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8718, 8579, 8577, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8718, 8577, 8574, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8574, 8719, 8718, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8719, 8574, 8573, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8573, 8783, 8719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8575, 8583, 8782, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8583, 8575, 8572, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8782, 8580, 8780, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8580, 8782, 8583, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8601, 8612, 8763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8612, 8601, 8613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6199, 8788, 8619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8788, 6199, 8633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8780, 8628, 8627, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8628, 8780, 8632, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8789, 8765, 8771, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8765, 8789, 8766, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8628, 6199, 6200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6199, 8628, 8633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8768, 8790, 8769, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8790, 8768, 8791, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8791, 8768, 8792, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8792, 8768, 8793, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8767, 8793, 8768, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8793, 8767, 8794, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8766, 8794, 8767, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8794, 8766, 8789, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8760, 6199, 8619, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6199, 8760, 6201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8769, 8761, 8760, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8761, 8769, 8790, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8795, 8796, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8798, 8795, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8799, 8798, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8800, 8799, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8801, 8800, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8802, 8801, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8803, 8802, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8804, 8803, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8805, 8804, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8806, 8805, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8807, 8806, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8808, 8807, 8797, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7650, 7651, 7655, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8809, 7655, 7651, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7655, 8809, 7664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8810, 7664, 8809, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7664, 8810, 7663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8811, 7663, 8810, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7663, 8811, 8812, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8812, 7662, 7663, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7662, 8812, 8813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7665, 7662, 8813, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7951, 7952, 8814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8814, 7950, 7951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7950, 8814, 8815, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7956, 7952, 7953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7952, 7956, 8814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7969, 8814, 7956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8814, 7969, 7970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7970, 8815, 8814, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8815, 7970, 8816, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8816, 7970, 8817, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7971, 8817, 7970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8817, 7971, 7976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8818, 8819, 8820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8819, 8818, 8821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8822, 8819, 8821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8819, 8822, 8823, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8823, 8824, 8819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8824, 8820, 8819, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8820, 8824, 8825, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8825, 8826, 8820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8826, 8818, 8820, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8818, 8826, 8827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8828, 8818, 8827, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8818, 8828, 8829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8830, 8829, 8828, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8829, 8830, 8831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8832, 8833, 8834, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8833, 8832, 8835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8835, 8830, 8833, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8830, 8835, 8836, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8830, 8836, 8831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8836, 8837, 8831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8837, 8829, 8831, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8829, 8837, 8838, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8838, 8818, 8829, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8818, 8838, 8821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8839, 8838, 8837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8838, 8839, 8840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8822, 8838, 8840, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8838, 8822, 8821, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8841, 8842, 8843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8842, 8841, 8844, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8844, 8845, 8842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8845, 8844, 8846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8839, 8845, 8846, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8845, 8839, 8847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8847, 8839, 8837, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8837, 8836, 8847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8836, 8845, 8847, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8845, 8836, 8835, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8835, 8842, 8845, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8842, 8835, 8832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8832, 8843, 8842, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8843, 8832, 8848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8848, 8849, 8843, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8849, 8848, 8850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8848, 8851, 8850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8851, 8848, 8852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8853, 8851, 8852, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8851, 8853, 7891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7883, 8851, 7891, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8851, 7883, 8850, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7881, 8850, 7883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8850, 7881, 8849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7882, 8849, 7881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8849, 7882, 8854, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8854, 8843, 8849, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8843, 8854, 8841, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7892, 7891, 8853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8853, 8855, 7892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8855, 8853, 8856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8852, 8856, 8853, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8856, 8852, 8857, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8857, 8852, 8858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8852, 8859, 8858, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8859, 8852, 8848, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8848, 8834, 8859, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8834, 8848, 8832, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7958, 8857, 7968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8857, 7958, 8856, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7954, 8856, 7958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8856, 7954, 8855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7954, 7945, 8855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7945, 7892, 8855, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7892, 7945, 7944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7944, 7890, 7892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7890, 7944, 7893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7893, 7889, 7890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6774, 8860, 8861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8860, 6774, 6773, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6532, 6527, 6529, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6527, 6532, 8862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6532, 6522, 8862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6522, 6532, 6525, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6528, 6540, 6530, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6540, 6528, 8863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6528, 8864, 8863, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6528, 6527, 8864, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8864, 6527, 8861, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8862, 8861, 6527, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8861, 8862, 6774, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6522, 6774, 8862, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6774, 6522, 6775, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6524, 6775, 6522, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8006, 7991, 7989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7991, 8006, 8865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8865, 7992, 7991, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7992, 8865, 8866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7994, 7992, 8866, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7994, 8866, 8867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8866, 8011, 8867, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8011, 8866, 8865, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8011, 8865, 8006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8005, 8011, 8006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8868, 8869, 8870, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8870, 8871, 8872, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8871, 8870, 8869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8873, 8871, 8869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8868, 8873, 8869, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8868, 8874, 8873, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8868, 8875, 8874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8876, 8874, 8875, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8874, 8876, 8877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8877, 8873, 8874, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8873, 8877, 8878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8871, 8873, 8878, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8878, 8879, 8871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8879, 8872, 8871, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8137, 8872, 8879, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8872, 8137, 8136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8132, 8131, 8133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8880, 8132, 8133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8135, 8880, 8133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8880, 8135, 8137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8879, 8880, 8137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8880, 8879, 8881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8879, 8878, 8881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8878, 8882, 8881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8882, 8878, 8877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8876, 8882, 8877, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8882, 8880, 8881, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8880, 8882, 8883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8132, 8880, 8883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8876, 8883, 8882, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8883, 8876, 8884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8883, 8884, 8132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8885, 8132, 8884, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8132, 8885, 8127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8128, 8127, 8885, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8886, 8887, 8888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8118, 8117, 8889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8890, 8118, 8889, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8889, 8891, 8890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8891, 8892, 8890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8892, 8891, 8893, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8893, 8894, 8892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8894, 8893, 8895, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8895, 8893, 8888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8893, 8891, 8888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8891, 8886, 8888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8891, 8889, 8886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8889, 8887, 8886, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8887, 8889, 8117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8894, 8896, 8892, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8897, 8896, 8894, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8896, 8897, 8109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8107, 8109, 8897, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8110, 8896, 8109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8896, 8110, 8898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8898, 8892, 8896, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8892, 8898, 8890, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8118, 8890, 8898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8110, 8118, 8898, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8118, 8110, 8115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8177, 8176, 8183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8899, 8900, 8901, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8900, 8899, 8902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8903, 8902, 8899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5885, 8901, 5883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5883, 8901, 8900, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8900, 5884, 5883, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5884, 8900, 8904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8900, 8905, 8904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8905, 8900, 8902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8906, 8905, 8902, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8902, 8903, 8906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8907, 8906, 8903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8908, 8907, 8903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8909, 8910, 8907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8910, 8911, 8907, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8907, 8911, 8906, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8906, 8911, 8912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8905, 8906, 8912, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8905, 8912, 8913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8912, 8914, 8913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8914, 8912, 8915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8915, 8916, 8914, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8916, 8915, 8917, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8911, 8910, 8915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8912, 8911, 8915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8910, 8917, 8915, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8917, 8910, 8918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8919, 8918, 8910, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8919, 8920, 8918, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8920, 8919, 8921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8921, 8922, 8920, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8923, 8924, 8925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8926, 8925, 8924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8925, 8926, 8927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8922, 8925, 8927, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8925, 8922, 8928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8922, 8921, 8928, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8929, 8928, 8921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8919, 8929, 8921, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8929, 8919, 8909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8910, 8909, 8919, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8928, 8923, 8925, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8907, 8908, 8909, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8930, 8909, 8908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8909, 8930, 8929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8930, 8931, 8929, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8928, 8929, 8931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8923, 8928, 8931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8932, 8923, 8931, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8923, 8932, 8933, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8934, 8933, 8932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8932, 8935, 8934, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8931, 8930, 8932, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8935, 8932, 8930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8908, 8935, 8930, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8935, 8908, 8936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8903, 8936, 8908, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8936, 8903, 8937, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8899, 8937, 8903, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8937, 8899, 8938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8901, 8938, 8899, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8938, 8901, 8939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8939, 8940, 8938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8940, 8937, 8938, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8941, 8934, 8935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8936, 8941, 8935, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8941, 8936, 8942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8937, 8942, 8936, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8942, 8937, 8943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8937, 8940, 8943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8940, 8944, 8943, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8945, 8943, 8944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8946, 8945, 8944, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8945, 8946, 8947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8945, 8941, 8942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8943, 8945, 8942, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8948, 8947, 8946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8947, 8948, 8949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8949, 8950, 8947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8950, 8945, 8947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8945, 8950, 8951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8941, 8945, 8951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8952, 8941, 8951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8941, 8952, 8953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8934, 8941, 8953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8950, 8949, 8444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8444, 8447, 8950, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8950, 8447, 8951, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8439, 8951, 8447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8951, 8439, 8952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8439, 8438, 8952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8438, 8953, 8952, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8953, 8438, 8431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8431, 8934, 8953, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8934, 8431, 8430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8933, 8934, 8430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8432, 8933, 8430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8933, 8432, 8954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8433, 8954, 8432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8954, 8433, 8955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8361, 8955, 8433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8955, 8361, 8956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8339, 8956, 8361, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8339, 8957, 8956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8958, 8957, 8339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8959, 8956, 8957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8434, 8361, 8433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8957, 8958, 8960, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8960, 8959, 8957, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8959, 8960, 8961, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8961, 8962, 8959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8962, 8961, 8963, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8964, 8959, 8962, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8959, 8964, 8965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8965, 8956, 8959, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8965, 8966, 8956, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8956, 8966, 8955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8966, 8954, 8955, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8954, 8966, 8967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8967, 8933, 8954, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8933, 8967, 8923, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8924, 8923, 8967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8968, 8966, 8965, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8965, 8964, 8969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8968, 8965, 8969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8926, 8968, 8969, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8968, 8926, 8924, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8924, 8966, 8968, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8966, 8924, 8967, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8970, 8971, 8972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8973, 8972, 8971, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8974, 8971, 8975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8971, 8974, 8973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8974, 8976, 8973, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8977, 8973, 8976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8973, 8977, 8978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8972, 8973, 8978, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8978, 8979, 8972, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8980, 8972, 8979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8972, 8980, 8970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8981, 8970, 8980, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8980, 8982, 8981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8980, 8983, 8984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8983, 8980, 8979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8985, 8983, 8979, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8979, 8978, 8985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8978, 8986, 8985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8986, 8978, 8977, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8977, 8987, 8986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8987, 8977, 8988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8988, 8977, 8976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8989, 8988, 8976, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8990, 8991, 8988, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8988, 8989, 8990, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8984, 8992, 8993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8992, 8984, 8983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8994, 8992, 8983, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8983, 8985, 8994, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8986, 8994, 8985, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8994, 8986, 8995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8987, 8995, 8986, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8995, 8987, 8996, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8996, 8997, 8995, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8997, 8996, 8998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8994, 8995, 8997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8992, 8994, 8997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8999, 8992, 8997, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8992, 8999, 9000, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9000, 8993, 8992, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8993, 9000, 8459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9000, 8458, 8459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8458, 9000, 9001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9002, 8997, 8998, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8997, 9002, 8999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9003, 8999, 9002, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8999, 9003, 9004, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9004, 9000, 8999, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9000, 9004, 9005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9001, 9000, 9005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8469, 9001, 9005, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9001, 8469, 8468, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8468, 8458, 9001, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8458, 8468, 8460, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6203, 5886, 5888, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5886, 6203, 9006, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8905, 9007, 8904, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9007, 8905, 8913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9008, 9009, 9010, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9009, 9008, 9011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9009, 9012, 9013, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9012, 9009, 9011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9014, 9012, 9011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9008, 9014, 9011, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9014, 9008, 9015, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9015, 9016, 9014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9016, 9015, 9017, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9018, 9016, 9019, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9016, 9018, 9014, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9012, 9014, 9018, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9020, 9021, 9022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9021, 9020, 9023, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9023, 9020, 9024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9025, 9023, 9024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9026, 9025, 9024, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9025, 9026, 9027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9013, 9025, 9027, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9025, 9013, 9028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9029, 9025, 9028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9030, 9029, 9028, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9029, 9030, 9031, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9025, 9029, 9032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9023, 9025, 9032, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9033, 9034, 9035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9034, 9033, 9036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9037, 9034, 9036, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9034, 9037, 9038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9039, 9034, 9038, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9034, 9039, 9040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9039, 9041, 9040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9041, 9042, 9040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9042, 9041, 9026, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9034, 9042, 9035, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9042, 9034, 9040, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9041, 9039, 9043, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9044, 9045, 9046, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9045, 9044, 9047, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9047, 9048, 9045, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9047, 9049, 9048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9049, 9043, 9048, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9043, 9049, 9050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9049, 9010, 9050, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9010, 9049, 9051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9049, 9052, 9051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9052, 9053, 9051, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9053, 9052, 9054, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9049, 9047, 9055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9052, 9049, 9055, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8339, 8341, 8958, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9056, 9057, 9058, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9057, 9056, 9059, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9060, 9059, 9056, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9059, 9060, 9061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9062, 9059, 9061, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9059, 9062, 9063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9064, 9059, 9063, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9059, 9064, 9057, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9065, 9066, 9067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9066, 9065, 9068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9069, 9068, 9065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9065, 9070, 9069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9070, 9065, 9071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9071, 9072, 9070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9067, 9071, 9065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9073, 9074, 9075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9074, 9073, 9066, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9066, 9076, 9074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9076, 9066, 9068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9077, 9076, 9068, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9068, 9069, 9077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9069, 9078, 9077, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9078, 9069, 9079, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9070, 9079, 9069, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9079, 9070, 9080, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9076, 9077, 9081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9075, 9082, 7189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9082, 9075, 9074, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9074, 9083, 9082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9083, 9074, 9076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9081, 9083, 9076, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9083, 9081, 9084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9085, 9084, 9081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9077, 9085, 9081, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9085, 9077, 9078, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9084, 9085, 9086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9072, 9071, 9087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9088, 9087, 9071, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9071, 9067, 9088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9089, 9088, 9067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9066, 9089, 9067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9089, 9066, 9073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7184, 9089, 9073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9075, 7184, 9073, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7184, 9075, 7185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7189, 7185, 9075, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7177, 7176, 9087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9087, 9088, 7177, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7182, 7177, 9088, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9088, 9089, 7182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7183, 7182, 9089, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9089, 7184, 7183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9090, 9091, 9092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9091, 9090, 9093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9094, 9093, 9090, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9093, 9094, 9095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9096, 9095, 9094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9095, 9096, 9097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9098, 9097, 9096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9097, 9098, 7176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9072, 7176, 9098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7176, 9072, 9087, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9072, 9080, 9070, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9080, 9072, 9099, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9098, 9099, 9072, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9099, 9098, 9100, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9096, 9100, 9098, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9100, 9096, 9101, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9094, 9101, 9096, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9101, 9094, 9102, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9090, 9102, 9094, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9102, 9090, 9103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9090, 9104, 9103, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9104, 9090, 9092, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9092, 9105, 9104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9105, 9092, 9106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9106, 7275, 9105, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7275, 9106, 7276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9106, 7277, 7276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7277, 9106, 9107, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9092, 9107, 9106, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9107, 9092, 9091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9107, 7148, 7134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7148, 9107, 9091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9093, 7148, 9091, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7148, 9093, 7149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9095, 7149, 9093, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7149, 9095, 7150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9097, 7150, 9095, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7150, 9097, 7174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7176, 7174, 9097, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7174, 7176, 7175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8343, 8348, 8346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7188, 7195, 7169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7195, 7167, 7169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7167, 7195, 9108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9108, 7163, 7167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7163, 9108, 9109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9110, 7163, 9109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7163, 9110, 7162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9110, 9111, 7162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7143, 7162, 9111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9111, 7144, 7143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7196, 9108, 7195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9108, 7196, 9112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9112, 9109, 9108, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9109, 9112, 9113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9113, 9110, 9109, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9110, 9113, 7116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7116, 9114, 9110, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9114, 7116, 7121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7121, 7123, 9114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7123, 7121, 7120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9115, 9114, 7123, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9111, 9110, 9114, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9114, 9115, 9111, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7144, 9111, 9115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9115, 7140, 7144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7140, 9115, 7141, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7123, 7141, 9115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7141, 7123, 7122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8342, 8352, 8340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9113, 7115, 7116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7115, 9113, 9116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9112, 9116, 9113, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9116, 9112, 9117, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7196, 9117, 9112, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9117, 7196, 9118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7197, 9118, 7196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9118, 7197, 9119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7197, 7204, 9119, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7206, 9119, 7204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7113, 7115, 9120, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9116, 9120, 7115, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9120, 9116, 9121, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9117, 9121, 9116, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9121, 9117, 9122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9117, 9123, 9122, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9123, 9117, 9118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9119, 9123, 9118, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9123, 9119, 9124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9119, 7206, 9124, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9125, 9126, 9127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9128, 9127, 9126, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9126, 9129, 9128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9129, 9126, 9130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9127, 9128, 9131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9132, 9128, 9129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9128, 9132, 9133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9133, 9131, 9128, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9131, 9133, 9134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9125, 9135, 9136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9135, 9125, 9137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9127, 9137, 9125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9137, 9127, 9138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9131, 9138, 9127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9138, 9131, 9139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9134, 9139, 9131, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9139, 9134, 9140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9141, 9140, 9134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9133, 9141, 9134, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9135, 9142, 9143, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9142, 9135, 9137, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9137, 9144, 9142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9144, 9137, 9138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9139, 9144, 9138, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9144, 9139, 7270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9140, 7270, 9139, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9143, 9145, 9146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9145, 9143, 9142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9142, 7269, 9145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7269, 9142, 9144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7270, 7269, 9144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7268, 9145, 7269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9145, 7268, 7266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7266, 9146, 9145, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9146, 7266, 7262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7264, 9146, 7262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9146, 7264, 9147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9147, 9143, 9146, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9143, 9147, 9148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9149, 9143, 9148, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9143, 9149, 9135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9150, 9151, 9152, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9153, 9152, 9151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9151, 9154, 9153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9155, 9153, 9154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9154, 9156, 9155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9156, 7126, 9155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7126, 9156, 7130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9156, 9149, 7130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9136, 9149, 9156, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9149, 9136, 9135, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9153, 9155, 9157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9158, 9153, 9157, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9153, 9158, 9159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9152, 9153, 9159, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9160, 9152, 9161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9152, 9159, 9161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9159, 9162, 9161, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9162, 9159, 9158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9158, 7106, 9162, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7106, 9158, 7104, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9157, 7104, 9158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7104, 9157, 7127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9157, 7126, 7127, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7126, 9157, 9155, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9163, 9164, 9165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9165, 9166, 9163, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9166, 9165, 9167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9167, 9168, 9166, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9168, 9167, 9169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9169, 9170, 9168, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9170, 9169, 9171, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9171, 9160, 9170, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9160, 9171, 9150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9152, 9160, 9150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9132, 9171, 9169, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9141, 9133, 9172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9132, 9172, 9133, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9172, 9132, 9173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9169, 9173, 9132, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9173, 9169, 9167, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9167, 9174, 9173, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9174, 9167, 9165, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9165, 9175, 9174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9175, 9165, 9164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9164, 9176, 9175, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9177, 9175, 9178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9175, 9179, 9178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9179, 9175, 9176, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9176, 9180, 9179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9180, 9176, 9181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9179, 9182, 9183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9183, 9178, 9179, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9178, 9183, 9184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9184, 9177, 9178, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9177, 9184, 9185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9141, 9177, 9185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9177, 9141, 9172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9173, 9177, 9172, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9177, 9173, 9174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9175, 9177, 9174, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7270, 9140, 7259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9186, 7259, 9140, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9140, 9141, 9186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9141, 9187, 9186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9187, 9141, 9185, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9185, 9188, 9187, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9188, 9185, 9184, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9184, 9189, 9188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9189, 9184, 9183, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9183, 9190, 9189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7191, 9191, 7212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9191, 7191, 9192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9192, 9190, 9191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9190, 9192, 7215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7215, 9189, 9190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9189, 7215, 7214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7214, 9188, 9189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9188, 7214, 7223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7223, 9187, 9188, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9187, 7223, 7225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7258, 9187, 7225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9187, 7258, 9186, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7259, 9186, 7258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7190, 9192, 7191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9193, 7215, 9192, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9192, 7190, 9193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7189, 9193, 7190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7215, 9193, 7213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7220, 7213, 9193, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9193, 7189, 7220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9082, 7220, 7189, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7220, 9082, 7219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9083, 7219, 9082, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7219, 9083, 7230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9083, 9194, 7230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7231, 7230, 9194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7235, 7231, 9194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7235, 9084, 9086, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9084, 7235, 9194, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9194, 9083, 9084, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8599, 8764, 8615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8764, 8599, 8763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8554, 8582, 8581, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8582, 8554, 8551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8616, 8623, 8622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8623, 8616, 8615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8788, 8631, 8551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8631, 8788, 8633, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8622, 8788, 8553, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8788, 8622, 8617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8976, 8974, 8989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8974, 9195, 8989, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8974, 5885, 9195, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5885, 8974, 8975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8901, 5885, 8975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8971, 8901, 8975, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8901, 8971, 8939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8971, 8970, 8939, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8940, 8939, 8970, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8970, 8981, 8940, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8944, 8940, 8981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8982, 8944, 8981, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8944, 8982, 8946, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9196, 8946, 8982, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8946, 9196, 8948, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9197, 8948, 9196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8948, 9197, 9198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8948, 9198, 8446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8949, 8948, 8446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8444, 8949, 8446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8449, 8445, 8446, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8449, 8446, 9198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9198, 8454, 8449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9197, 8454, 9198, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8459, 8454, 9197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9196, 8459, 9197, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8459, 9196, 8993, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8982, 8993, 9196, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8993, 8982, 8984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8982, 8980, 8984, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8350, 8353, 8351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9199, 9200, 9201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9200, 9199, 9202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9203, 9202, 9199, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9202, 9203, 9204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9205, 9204, 9203, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9204, 9205, 9206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9207, 9204, 9206, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9204, 9207, 9208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9208, 9202, 9204, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9202, 9208, 9209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9209, 9200, 9202, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9200, 9209, 9210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9210, 9211, 9200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9211, 9210, 9212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9212, 9213, 9211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9213, 9212, 9214, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9214, 9215, 9213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9215, 9214, 9216, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9216, 9217, 9215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9217, 9216, 9218, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9219, 9220, 9221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9220, 9219, 9217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9222, 9217, 9219, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9217, 9222, 9215, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9223, 9215, 9222, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9215, 9223, 9213, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9224, 9213, 9223, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9213, 9224, 9211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9201, 9211, 9224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9211, 9201, 9200, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9218, 9220, 9217, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9220, 9218, 9225, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9225, 9226, 9220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9226, 9225, 9227, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9227, 9228, 9226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9228, 9227, 9229, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9229, 9230, 9228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9230, 9229, 9231, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9232, 9231, 9233, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9231, 9232, 9230, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9234, 9230, 9232, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9230, 9234, 9235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9236, 9230, 9235, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9230, 9236, 9228, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9237, 9228, 9236, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9228, 9237, 9226, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9221, 9226, 9237, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9226, 9221, 9220, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8355, 8354, 8359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9238, 9239, 9240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9239, 9238, 9241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9242, 9241, 9238, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9241, 9242, 9243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9244, 9243, 9242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9243, 9244, 9245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9246, 9243, 9245, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9243, 9246, 9247, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9247, 9241, 9243, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9241, 9247, 9248, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9248, 9239, 9241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9239, 9248, 9249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9249, 9250, 9239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9250, 9249, 9251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9251, 9252, 9250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9252, 9251, 9253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9253, 9254, 9252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9254, 9253, 9255, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9255, 9256, 9254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9256, 9255, 9257, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9258, 9259, 9260, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9259, 9258, 9256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9261, 9256, 9258, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9256, 9261, 9254, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9262, 9254, 9261, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9254, 9262, 9252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9263, 9252, 9262, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9252, 9263, 9250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9240, 9250, 9263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9250, 9240, 9239, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9257, 9259, 9256, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9259, 9257, 9264, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9264, 9265, 9259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9265, 9264, 9266, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9266, 9267, 9265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9267, 9266, 9268, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9268, 9269, 9267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9269, 9268, 9270, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9271, 9270, 9272, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9270, 9271, 9269, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9273, 9269, 9271, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9269, 9273, 9274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9275, 9269, 9274, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9269, 9275, 9267, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9276, 9267, 9275, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9267, 9276, 9265, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9260, 9265, 9276, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9265, 9260, 9259, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8356, 8361, 8434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9277, 9278, 9279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9278, 9277, 9280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9281, 9280, 9277, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9280, 9281, 9282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9283, 9282, 9281, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9282, 9283, 9284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9285, 9282, 9284, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9282, 9285, 9286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9286, 9280, 9282, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9280, 9286, 9287, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9287, 9278, 9280, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9278, 9287, 9288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9288, 9289, 9278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9289, 9288, 9290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9290, 9291, 9289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9291, 9290, 9292, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9292, 9293, 9291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9293, 9292, 9294, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9294, 9295, 9293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9295, 9294, 9296, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9297, 9298, 9299, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9298, 9297, 9295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9300, 9295, 9297, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9295, 9300, 9293, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9301, 9293, 9300, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9293, 9301, 9291, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9302, 9291, 9301, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9291, 9302, 9289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9279, 9289, 9302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9289, 9279, 9278, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9296, 9298, 9295, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9298, 9296, 9303, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9303, 9304, 9298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9304, 9303, 9305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9305, 9306, 9304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9306, 9305, 9307, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9307, 9308, 9306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9308, 9307, 9309, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9310, 9309, 9311, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9309, 9310, 9308, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9312, 9308, 9310, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9308, 9312, 9313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9314, 9308, 9313, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9308, 9314, 9306, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9315, 9306, 9314, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9306, 9315, 9304, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9299, 9304, 9315, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9304, 9299, 9298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8344, 8381, 8345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8360, 8490, 8359, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8365, 8490, 8360, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8365, 8364, 8490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8364, 8357, 8490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8357, 8364, 8362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8364, 9316, 8362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9316, 8344, 8362, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8344, 9316, 9317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8381, 8344, 9317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8372, 8381, 9317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8370, 8372, 9317, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8370, 9317, 9316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8366, 8370, 9316, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9316, 8364, 8366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6316, 6321, 6320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6321, 6324, 6320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6324, 6321, 9318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6334, 6324, 9318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9319, 6334, 9318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9319, 6333, 6334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6333, 9319, 8332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8326, 8332, 9319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9318, 8326, 9319, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8326, 9318, 6321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9320, 8332, 6622, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8332, 9320, 9321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9321, 6333, 8332, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6333, 9321, 9322, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9322, 6332, 6333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6332, 9322, 9323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6331, 6332, 9323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6331, 9323, 9324, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9324, 6337, 6331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6337, 9324, 6600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9325, 9322, 9321, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9321, 6617, 9325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6617, 9321, 9320, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6617, 6616, 9325, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6612, 9325, 6616, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9322, 9325, 6612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6613, 9322, 6612, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9322, 6613, 9323, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9324, 9323, 6613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6611, 9324, 6613, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9324, 6611, 6600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6611, 6601, 6600, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6601, 6611, 6606, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9326, 9327, 9328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9329, 9328, 9327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9328, 9329, 9330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9330, 8251, 9328, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9331, 9328, 8251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8251, 8250, 9331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9332, 9333, 9326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9327, 9326, 9333, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9333, 9334, 9327, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9329, 9327, 9334, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9329, 9334, 9335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8243, 9329, 9335, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9329, 8243, 9330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8243, 8242, 9330, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8251, 9330, 8242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8242, 8245, 8251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9333, 9332, 9336, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9333, 9336, 9337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9334, 9333, 9337, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7398, 7390, 6240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6240, 9338, 7398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9338, 6240, 6241, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6241, 6246, 9338, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6246, 6241, 6242, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8323, 8319, 8318, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9339, 8225, 8224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8225, 9339, 8253, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9340, 8253, 9339, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8253, 9340, 8252, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8252, 9340, 8250, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9341, 8250, 9340, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8250, 9341, 9331, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9332, 9331, 9341, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9331, 9332, 9326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9328, 9331, 9326, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7209, 9342, 7208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9342, 7207, 7208, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7207, 9342, 9343, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9344, 9343, 9342, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9343, 9344, 9345, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9346, 9345, 9344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9345, 9346, 9347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9346, 9348, 9347, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9348, 9346, 9164, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9164, 9163, 9348, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9176, 9164, 9346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9344, 9176, 9346, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9176, 9344, 9181, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9342, 9181, 9344, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9181, 9342, 9349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9350, 9181, 9349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9181, 9350, 9180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9351, 9180, 9350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9180, 9351, 9182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9182, 9179, 9180, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9190, 9183, 9182, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9182, 9191, 9190, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9191, 9182, 9351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9351, 7212, 9191, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7212, 9351, 7211, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9350, 7211, 9351, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7211, 9350, 7210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9349, 7210, 9350, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7210, 9349, 7209, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9342, 7209, 9349, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6690, 6696, 6688, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6763, 6696, 6690, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6696, 6763, 6697, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6761, 6697, 6763, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6697, 6761, 6706, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6759, 6706, 6761, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6706, 6759, 6719, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6758, 6719, 6759, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6719, 6758, 6720, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6724, 6720, 6758, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8275, 8274, 8286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8289, 8275, 8286, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8275, 8289, 9352, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8290, 9352, 8289, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9352, 8290, 9353, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8296, 9353, 8290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9353, 8296, 9354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9354, 8296, 8298, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8298, 9355, 9354, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9355, 8298, 8305, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8551, 8553, 8788, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9356, 5917, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9357, 9356, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9358, 9357, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9359, 9358, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9360, 9359, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9361, 9360, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 5908, 9361, 5913, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9363, 9364, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9364, 9365, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9365, 9366, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9366, 9367, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9367, 9368, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9368, 9369, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9369, 9370, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9370, 9290, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9290, 9288, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9288, 9371, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9371, 9372, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9362, 9372, 9363, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8558, 8555, 8605, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9374, 9375, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9375, 9376, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9376, 9377, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9377, 9279, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9279, 9302, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9302, 9378, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9378, 9379, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9379, 9380, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9380, 9381, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9381, 9382, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9382, 9383, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9373, 9383, 9374, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8566, 8581, 8565, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9385, 9386, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9386, 9387, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9387, 9388, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9388, 9389, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9389, 9390, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9390, 9391, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9391, 9392, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9392, 9212, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9212, 9210, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9210, 9393, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9393, 9394, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9384, 9394, 9385, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8560, 8664, 8557, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9396, 9397, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9397, 9398, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9398, 9399, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9399, 9201, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9201, 9224, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9224, 9400, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9400, 9401, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9401, 9402, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9402, 9403, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9403, 9404, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9404, 9405, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9395, 9405, 9396, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8560, 8666, 8664, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9407, 9408, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9408, 9409, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9409, 9410, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9410, 9411, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9411, 9412, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9412, 9413, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9413, 9414, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9414, 9251, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9251, 9249, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9249, 9415, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9415, 9416, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9406, 9416, 9407, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8632, 8780, 8580, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9418, 9419, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9419, 9420, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9420, 9421, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9421, 9240, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9240, 9263, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9263, 9422, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9422, 9423, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9423, 9424, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9424, 9425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9425, 9426, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9426, 9427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9417, 9427, 9418, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8584, 8667, 8585, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8143, 9428, 8142, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9428, 8143, 8147, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8147, 9429, 9428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9429, 8147, 8149, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8149, 9430, 9429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9430, 8149, 8151, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8151, 9431, 9430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9431, 8151, 8153, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8153, 9432, 9431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9432, 8153, 8158, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8158, 8160, 9432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9433, 9432, 8160, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8160, 8162, 9433, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9432, 9433, 9434, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9434, 9435, 9432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9435, 9431, 9432, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9431, 9435, 9430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9436, 9430, 9435, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9430, 9436, 9429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9436, 9428, 9429, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9428, 9436, 9437, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9437, 8142, 9428, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8142, 9437, 8144, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8022, 7942, 7947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7948, 8022, 7947, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8022, 7948, 9438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7948, 7949, 9438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9439, 9438, 7949, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8069, 9438, 9439, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9438, 8069, 8067, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8067, 8065, 9438, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8022, 9438, 8065, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8065, 8023, 8022, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9156, 9154, 9136, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9440, 9136, 9154, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9136, 9440, 9125, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9126, 9125, 9440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9151, 9126, 9440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9126, 9151, 9130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9151, 9150, 9130, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9171, 9130, 9150, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9130, 9171, 9129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9171, 9132, 9129, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9154, 9151, 9440, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8631, 8582, 8551, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9441, 6503, 6495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6493, 9441, 6495, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9441, 6493, 9442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6493, 6491, 9442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6491, 7424, 9442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7424, 6491, 7425, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6490, 7425, 6491, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7425, 6490, 7427, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6468, 7427, 6490, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7427, 6468, 6221, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7424, 9441, 9442, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9441, 7424, 7430, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 7430, 9443, 9441, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6503, 9441, 9443, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9443, 7430, 7431, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8603, 8602, 8589, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6458, 6457, 6472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6550, 6458, 6472, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6458, 6550, 9444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6550, 6548, 9444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6548, 9445, 9444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9445, 6458, 9444, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9446, 6458, 9445, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6458, 9446, 9447, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9447, 6459, 6458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 6459, 9447, 6462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8619, 8788, 8617, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8569, 8563, 8562, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8554, 8581, 8566, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8601, 8763, 8599, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8766, 8620, 8623, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8764, 8623, 8615, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9448, 8797, 8796, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9449, 8797, 9448, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9450, 8797, 9449, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9451, 8797, 9450, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9452, 8797, 9451, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9453, 8797, 9452, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9454, 8797, 9453, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9455, 8797, 9454, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9456, 8797, 9455, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9457, 8797, 9456, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9458, 8797, 9457, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8808, 8797, 9458, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8587, 8614, 8621, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8759, 8659, 8660, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8659, 8759, 9459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9460, 8659, 9459, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9460, 9461, 8659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9461, 8658, 8659, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8658, 9461, 9462, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 9462, 8655, 8658, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8655, 9462, 8665, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8655, 8621, 8657, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8546, 6195, 8547, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8579, 8586, 8578, normal, color, materialIndex );
geometry.faces.push( face );
face = new THREE.Face3( 8667, 8546, 8548, normal, color, materialIndex );
geometry.faces.push( face );


return (geometry);
}
